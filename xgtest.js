"use strict";
(function() {

Error.stackTraceLimit = Infinity;

var $global, $module;
if (typeof window !== "undefined") { /* web page */
  $global = window;
} else if (typeof self !== "undefined") { /* web worker */
  $global = self;
} else if (typeof global !== "undefined") { /* Node.js */
  $global = global;
  $global.require = require;
} else { /* others (e.g. Nashorn) */
  $global = this;
}

if ($global === undefined || $global.Array === undefined) {
  throw new Error("no global object found");
}
if (typeof module !== "undefined") {
  $module = module;
}

var $packages = {}, $idCounter = 0;
var $keys = function(m) { return m ? Object.keys(m) : []; };
var $flushConsole = function() {};
var $throwRuntimeError; /* set by package "runtime" */
var $throwNilPointerError = function() { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $call = function(fn, rcvr, args) { return fn.apply(rcvr, args); };
var $makeFunc = function(fn) { return function() { return $externalize(fn(this, new ($sliceType($jsObjectPtr))($global.Array.prototype.slice.call(arguments, []))), $emptyInterface); }; };
var $unused = function(v) {};

var $mapArray = function(array, f) {
  var newArray = new array.constructor(array.length);
  for (var i = 0; i < array.length; i++) {
    newArray[i] = f(array[i]);
  }
  return newArray;
};

var $methodVal = function(recv, name) {
  var vals = recv.$methodVals || {};
  recv.$methodVals = vals; /* noop for primitives */
  var f = vals[name];
  if (f !== undefined) {
    return f;
  }
  var method = recv[name];
  f = function() {
    $stackDepthOffset--;
    try {
      return method.apply(recv, arguments);
    } finally {
      $stackDepthOffset++;
    }
  };
  vals[name] = f;
  return f;
};

var $methodExpr = function(typ, name) {
  var method = typ.prototype[name];
  if (method.$expr === undefined) {
    method.$expr = function() {
      $stackDepthOffset--;
      try {
        if (typ.wrapped) {
          arguments[0] = new typ(arguments[0]);
        }
        return Function.call.apply(method, arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return method.$expr;
};

var $ifaceMethodExprs = {};
var $ifaceMethodExpr = function(name) {
  var expr = $ifaceMethodExprs["$" + name];
  if (expr === undefined) {
    expr = $ifaceMethodExprs["$" + name] = function() {
      $stackDepthOffset--;
      try {
        return Function.call.apply(arguments[0][name], arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return expr;
};

var $subslice = function(slice, low, high, max) {
  if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
    $throwRuntimeError("slice bounds out of range");
  }
  var s = new slice.constructor(slice.$array);
  s.$offset = slice.$offset + low;
  s.$length = slice.$length - low;
  s.$capacity = slice.$capacity - low;
  if (high !== undefined) {
    s.$length = high - low;
  }
  if (max !== undefined) {
    s.$capacity = max - low;
  }
  return s;
};

var $substring = function(str, low, high) {
  if (low < 0 || high < low || high > str.length) {
    $throwRuntimeError("slice bounds out of range");
  }
  return str.substring(low, high);
};

var $sliceToArray = function(slice) {
  if (slice.$array.constructor !== Array) {
    return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
  }
  return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
};

var $decodeRune = function(str, pos) {
  var c0 = str.charCodeAt(pos);

  if (c0 < 0x80) {
    return [c0, 1];
  }

  if (c0 !== c0 || c0 < 0xC0) {
    return [0xFFFD, 1];
  }

  var c1 = str.charCodeAt(pos + 1);
  if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xE0) {
    var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
    if (r <= 0x7F) {
      return [0xFFFD, 1];
    }
    return [r, 2];
  }

  var c2 = str.charCodeAt(pos + 2);
  if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF0) {
    var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
    if (r <= 0x7FF) {
      return [0xFFFD, 1];
    }
    if (0xD800 <= r && r <= 0xDFFF) {
      return [0xFFFD, 1];
    }
    return [r, 3];
  }

  var c3 = str.charCodeAt(pos + 3);
  if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF8) {
    var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
    if (r <= 0xFFFF || 0x10FFFF < r) {
      return [0xFFFD, 1];
    }
    return [r, 4];
  }

  return [0xFFFD, 1];
};

var $encodeRune = function(r) {
  if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
    r = 0xFFFD;
  }
  if (r <= 0x7F) {
    return String.fromCharCode(r);
  }
  if (r <= 0x7FF) {
    return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
  }
  if (r <= 0xFFFF) {
    return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
  }
  return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = function(str) {
  var array = new Uint8Array(str.length);
  for (var i = 0; i < str.length; i++) {
    array[i] = str.charCodeAt(i);
  }
  return array;
};

var $bytesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i += 10000) {
    str += String.fromCharCode.apply(undefined, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
  }
  return str;
};

var $stringToRunes = function(str) {
  var array = new Int32Array(str.length);
  var rune, j = 0;
  for (var i = 0; i < str.length; i += rune[1], j++) {
    rune = $decodeRune(str, i);
    array[j] = rune[0];
  }
  return array.subarray(0, j);
};

var $runesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i++) {
    str += $encodeRune(slice.$array[slice.$offset + i]);
  }
  return str;
};

var $copyString = function(dst, src) {
  var n = Math.min(src.length, dst.$length);
  for (var i = 0; i < n; i++) {
    dst.$array[dst.$offset + i] = src.charCodeAt(i);
  }
  return n;
};

var $copySlice = function(dst, src) {
  var n = Math.min(src.$length, dst.$length);
  $copyArray(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
  return n;
};

var $copyArray = function(dst, src, dstOffset, srcOffset, n, elem) {
  if (n === 0 || (dst === src && dstOffset === srcOffset)) {
    return;
  }

  if (src.subarray) {
    dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
    return;
  }

  switch (elem.kind) {
  case $kindArray:
  case $kindStruct:
    if (dst === src && dstOffset > srcOffset) {
      for (var i = n - 1; i >= 0; i--) {
        elem.copy(dst[dstOffset + i], src[srcOffset + i]);
      }
      return;
    }
    for (var i = 0; i < n; i++) {
      elem.copy(dst[dstOffset + i], src[srcOffset + i]);
    }
    return;
  }

  if (dst === src && dstOffset > srcOffset) {
    for (var i = n - 1; i >= 0; i--) {
      dst[dstOffset + i] = src[srcOffset + i];
    }
    return;
  }
  for (var i = 0; i < n; i++) {
    dst[dstOffset + i] = src[srcOffset + i];
  }
};

var $clone = function(src, type) {
  var clone = type.zero();
  type.copy(clone, src);
  return clone;
};

var $pointerOfStructConversion = function(obj, type) {
  if(obj.$proxies === undefined) {
    obj.$proxies = {};
    obj.$proxies[obj.constructor.string] = obj;
  }
  var proxy = obj.$proxies[type.string];
  if (proxy === undefined) {
    var properties = {};
    for (var i = 0; i < type.elem.fields.length; i++) {
      (function(fieldProp) {
        properties[fieldProp] = {
          get: function() { return obj[fieldProp]; },
          set: function(value) { obj[fieldProp] = value; }
        };
      })(type.elem.fields[i].prop);
    }
    proxy = Object.create(type.prototype, properties);
    proxy.$val = proxy;
    obj.$proxies[type.string] = proxy;
    proxy.$proxies = obj.$proxies;
  }
  return proxy;
};

var $append = function(slice) {
  return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = function(slice, toAppend) {
  if (toAppend.constructor === String) {
    var bytes = $stringToBytes(toAppend);
    return $internalAppend(slice, bytes, 0, bytes.length);
  }
  return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
};

var $internalAppend = function(slice, array, offset, length) {
  if (length === 0) {
    return slice;
  }

  var newArray = slice.$array;
  var newOffset = slice.$offset;
  var newLength = slice.$length + length;
  var newCapacity = slice.$capacity;

  if (newLength > newCapacity) {
    newOffset = 0;
    newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

    if (slice.$array.constructor === Array) {
      newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
      newArray.length = newCapacity;
      var zero = slice.constructor.elem.zero;
      for (var i = slice.$length; i < newCapacity; i++) {
        newArray[i] = zero();
      }
    } else {
      newArray = new slice.$array.constructor(newCapacity);
      newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
    }
  }

  $copyArray(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

  var newSlice = new slice.constructor(newArray);
  newSlice.$offset = newOffset;
  newSlice.$length = newLength;
  newSlice.$capacity = newCapacity;
  return newSlice;
};

var $equal = function(a, b, type) {
  if (type === $jsObjectPtr) {
    return a === b;
  }
  switch (type.kind) {
  case $kindComplex64:
  case $kindComplex128:
    return a.$real === b.$real && a.$imag === b.$imag;
  case $kindInt64:
  case $kindUint64:
    return a.$high === b.$high && a.$low === b.$low;
  case $kindArray:
    if (a.length !== b.length) {
      return false;
    }
    for (var i = 0; i < a.length; i++) {
      if (!$equal(a[i], b[i], type.elem)) {
        return false;
      }
    }
    return true;
  case $kindStruct:
    for (var i = 0; i < type.fields.length; i++) {
      var f = type.fields[i];
      if (!$equal(a[f.prop], b[f.prop], f.typ)) {
        return false;
      }
    }
    return true;
  case $kindInterface:
    return $interfaceIsEqual(a, b);
  default:
    return a === b;
  }
};

var $interfaceIsEqual = function(a, b) {
  if (a === $ifaceNil || b === $ifaceNil) {
    return a === b;
  }
  if (a.constructor !== b.constructor) {
    return false;
  }
  if (a.constructor === $jsObjectPtr) {
    return a.object === b.object;
  }
  if (!a.constructor.comparable) {
    $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
  }
  return $equal(a.$val, b.$val, a.constructor);
};

var $min = Math.min;
var $mod = function(x, y) { return x % y; };
var $parseInt = parseInt;
var $parseFloat = function(f) {
  if (f !== undefined && f !== null && f.constructor === Number) {
    return f;
  }
  return parseFloat(f);
};

var $froundBuf = new Float32Array(1);
var $fround = Math.fround || function(f) {
  $froundBuf[0] = f;
  return $froundBuf[0];
};

var $imul = Math.imul || function(a, b) {
  var ah = (a >>> 16) & 0xffff;
  var al = a & 0xffff;
  var bh = (b >>> 16) & 0xffff;
  var bl = b & 0xffff;
  return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) >> 0);
};

var $floatKey = function(f) {
  if (f !== f) {
    $idCounter++;
    return "NaN$" + $idCounter;
  }
  return String(f);
};

var $flatten64 = function(x) {
  return x.$high * 4294967296 + x.$low;
};

var $shiftLeft64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$low << (y - 32), 0);
  }
  return new x.constructor(0, 0);
};

var $shiftRightInt64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
  }
  if (x.$high < 0) {
    return new x.constructor(-1, 4294967295);
  }
  return new x.constructor(0, 0);
};

var $shiftRightUint64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(0, x.$high >>> (y - 32));
  }
  return new x.constructor(0, 0);
};

var $mul64 = function(x, y) {
  var high = 0, low = 0;
  if ((y.$low & 1) !== 0) {
    high = x.$high;
    low = x.$low;
  }
  for (var i = 1; i < 32; i++) {
    if ((y.$low & 1<<i) !== 0) {
      high += x.$high << i | x.$low >>> (32 - i);
      low += (x.$low << i) >>> 0;
    }
  }
  for (var i = 0; i < 32; i++) {
    if ((y.$high & 1<<i) !== 0) {
      high += x.$low << i;
    }
  }
  return new x.constructor(high, low);
};

var $div64 = function(x, y, returnRemainder) {
  if (y.$high === 0 && y.$low === 0) {
    $throwRuntimeError("integer divide by zero");
  }

  var s = 1;
  var rs = 1;

  var xHigh = x.$high;
  var xLow = x.$low;
  if (xHigh < 0) {
    s = -1;
    rs = -1;
    xHigh = -xHigh;
    if (xLow !== 0) {
      xHigh--;
      xLow = 4294967296 - xLow;
    }
  }

  var yHigh = y.$high;
  var yLow = y.$low;
  if (y.$high < 0) {
    s *= -1;
    yHigh = -yHigh;
    if (yLow !== 0) {
      yHigh--;
      yLow = 4294967296 - yLow;
    }
  }

  var high = 0, low = 0, n = 0;
  while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
    yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
    yLow = (yLow << 1) >>> 0;
    n++;
  }
  for (var i = 0; i <= n; i++) {
    high = high << 1 | low >>> 31;
    low = (low << 1) >>> 0;
    if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
      xHigh = xHigh - yHigh;
      xLow = xLow - yLow;
      if (xLow < 0) {
        xHigh--;
        xLow += 4294967296;
      }
      low++;
      if (low === 4294967296) {
        high++;
        low = 0;
      }
    }
    yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
    yHigh = yHigh >>> 1;
  }

  if (returnRemainder) {
    return new x.constructor(xHigh * rs, xLow * rs);
  }
  return new x.constructor(high * s, low * s);
};

var $divComplex = function(n, d) {
  var ninf = n.$real === Infinity || n.$real === -Infinity || n.$imag === Infinity || n.$imag === -Infinity;
  var dinf = d.$real === Infinity || d.$real === -Infinity || d.$imag === Infinity || d.$imag === -Infinity;
  var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);
  var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);
  if(nnan || dnan) {
    return new n.constructor(NaN, NaN);
  }
  if (ninf && !dinf) {
    return new n.constructor(Infinity, Infinity);
  }
  if (!ninf && dinf) {
    return new n.constructor(0, 0);
  }
  if (d.$real === 0 && d.$imag === 0) {
    if (n.$real === 0 && n.$imag === 0) {
      return new n.constructor(NaN, NaN);
    }
    return new n.constructor(Infinity, Infinity);
  }
  var a = Math.abs(d.$real);
  var b = Math.abs(d.$imag);
  if (a <= b) {
    var ratio = d.$real / d.$imag;
    var denom = d.$real * ratio + d.$imag;
    return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);
  }
  var ratio = d.$imag / d.$real;
  var denom = d.$imag * ratio + d.$real;
  return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);
};

var $kindBool = 1;
var $kindInt = 2;
var $kindInt8 = 3;
var $kindInt16 = 4;
var $kindInt32 = 5;
var $kindInt64 = 6;
var $kindUint = 7;
var $kindUint8 = 8;
var $kindUint16 = 9;
var $kindUint32 = 10;
var $kindUint64 = 11;
var $kindUintptr = 12;
var $kindFloat32 = 13;
var $kindFloat64 = 14;
var $kindComplex64 = 15;
var $kindComplex128 = 16;
var $kindArray = 17;
var $kindChan = 18;
var $kindFunc = 19;
var $kindInterface = 20;
var $kindMap = 21;
var $kindPtr = 22;
var $kindSlice = 23;
var $kindString = 24;
var $kindStruct = 25;
var $kindUnsafePointer = 26;

var $methodSynthesizers = [];
var $addMethodSynthesizer = function(f) {
  if ($methodSynthesizers === null) {
    f();
    return;
  }
  $methodSynthesizers.push(f);
};
var $synthesizeMethods = function() {
  $methodSynthesizers.forEach(function(f) { f(); });
  $methodSynthesizers = null;
};

var $ifaceKeyFor = function(x) {
  if (x === $ifaceNil) {
    return 'nil';
  }
  var c = x.constructor;
  return c.string + '$' + c.keyFor(x.$val);
};

var $identity = function(x) { return x; };

var $typeIDCounter = 0;

var $idKey = function(x) {
  if (x.$id === undefined) {
    $idCounter++;
    x.$id = $idCounter;
  }
  return String(x.$id);
};

var $newType = function(size, kind, string, named, pkg, exported, constructor) {
  var typ;
  switch(kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $identity;
    break;

  case $kindString:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return "$" + x; };
    break;

  case $kindFloat32:
  case $kindFloat64:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return $floatKey(x); };
    break;

  case $kindInt64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindUint64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindComplex64:
    typ = function(real, imag) {
      this.$real = $fround(real);
      this.$imag = $fround(imag);
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindComplex128:
    typ = function(real, imag) {
      this.$real = real;
      this.$imag = imag;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindArray:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, false, "", false, function(array) {
      this.$get = function() { return array; };
      this.$set = function(v) { typ.copy(this, v); };
      this.$val = array;
    });
    typ.init = function(elem, len) {
      typ.elem = elem;
      typ.len = len;
      typ.comparable = elem.comparable;
      typ.keyFor = function(x) {
        return Array.prototype.join.call($mapArray(x, function(e) {
          return String(elem.keyFor(e)).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }), "$");
      };
      typ.copy = function(dst, src) {
        $copyArray(dst, src, 0, 0, src.length, elem);
      };
      typ.ptr.init(typ);
      Object.defineProperty(typ.ptr.nil, "nilCheck", { get: $throwNilPointerError });
    };
    break;

  case $kindChan:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $idKey;
    typ.init = function(elem, sendOnly, recvOnly) {
      typ.elem = elem;
      typ.sendOnly = sendOnly;
      typ.recvOnly = recvOnly;
    };
    break;

  case $kindFunc:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(params, results, variadic) {
      typ.params = params;
      typ.results = results;
      typ.variadic = variadic;
      typ.comparable = false;
    };
    break;

  case $kindInterface:
    typ = { implementedBy: {}, missingMethodFor: {} };
    typ.keyFor = $ifaceKeyFor;
    typ.init = function(methods) {
      typ.methods = methods;
      methods.forEach(function(m) {
        $ifaceNil[m.prop] = $throwNilPointerError;
      });
    };
    break;

  case $kindMap:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(key, elem) {
      typ.key = key;
      typ.elem = elem;
      typ.comparable = false;
    };
    break;

  case $kindPtr:
    typ = constructor || function(getter, setter, target) {
      this.$get = getter;
      this.$set = setter;
      this.$target = target;
      this.$val = this;
    };
    typ.keyFor = $idKey;
    typ.init = function(elem) {
      typ.elem = elem;
      typ.wrapped = (elem.kind === $kindArray);
      typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
    };
    break;

  case $kindSlice:
    typ = function(array) {
      if (array.constructor !== typ.nativeArray) {
        array = new typ.nativeArray(array);
      }
      this.$array = array;
      this.$offset = 0;
      this.$length = array.length;
      this.$capacity = array.length;
      this.$val = this;
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.comparable = false;
      typ.nativeArray = $nativeArray(elem.kind);
      typ.nil = new typ([]);
    };
    break;

  case $kindStruct:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, false, pkg, exported, constructor);
    typ.ptr.elem = typ;
    typ.ptr.prototype.$get = function() { return this; };
    typ.ptr.prototype.$set = function(v) { typ.copy(this, v); };
    typ.init = function(pkgPath, fields) {
      typ.pkgPath = pkgPath;
      typ.fields = fields;
      fields.forEach(function(f) {
        if (!f.typ.comparable) {
          typ.comparable = false;
        }
      });
      typ.keyFor = function(x) {
        var val = x.$val;
        return $mapArray(fields, function(f) {
          return String(f.typ.keyFor(val[f.prop])).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }).join("$");
      };
      typ.copy = function(dst, src) {
        for (var i = 0; i < fields.length; i++) {
          var f = fields[i];
          switch (f.typ.kind) {
          case $kindArray:
          case $kindStruct:
            f.typ.copy(dst[f.prop], src[f.prop]);
            continue;
          default:
            dst[f.prop] = src[f.prop];
            continue;
          }
        }
      };
      /* nil value */
      var properties = {};
      fields.forEach(function(f) {
        properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };
      });
      typ.ptr.nil = Object.create(constructor.prototype, properties);
      typ.ptr.nil.$val = typ.ptr.nil;
      /* methods for embedded fields */
      $addMethodSynthesizer(function() {
        var synthesizeMethod = function(target, m, f) {
          if (target.prototype[m.prop] !== undefined) { return; }
          target.prototype[m.prop] = function() {
            var v = this.$val[f.prop];
            if (f.typ === $jsObjectPtr) {
              v = new $jsObjectPtr(v);
            }
            if (v.$val === undefined) {
              v = new f.typ(v);
            }
            return v[m.prop].apply(v, arguments);
          };
        };
        fields.forEach(function(f) {
          if (f.anonymous) {
            $methodSet(f.typ).forEach(function(m) {
              synthesizeMethod(typ, m, f);
              synthesizeMethod(typ.ptr, m, f);
            });
            $methodSet($ptrType(f.typ)).forEach(function(m) {
              synthesizeMethod(typ.ptr, m, f);
            });
          }
        });
      });
    };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  switch (kind) {
  case $kindBool:
  case $kindMap:
    typ.zero = function() { return false; };
    break;

  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8 :
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
  case $kindFloat32:
  case $kindFloat64:
    typ.zero = function() { return 0; };
    break;

  case $kindString:
    typ.zero = function() { return ""; };
    break;

  case $kindInt64:
  case $kindUint64:
  case $kindComplex64:
  case $kindComplex128:
    var zero = new typ(0, 0);
    typ.zero = function() { return zero; };
    break;

  case $kindPtr:
  case $kindSlice:
    typ.zero = function() { return typ.nil; };
    break;

  case $kindChan:
    typ.zero = function() { return $chanNil; };
    break;

  case $kindFunc:
    typ.zero = function() { return $throwNilPointerError; };
    break;

  case $kindInterface:
    typ.zero = function() { return $ifaceNil; };
    break;

  case $kindArray:
    typ.zero = function() {
      var arrayClass = $nativeArray(typ.elem.kind);
      if (arrayClass !== Array) {
        return new arrayClass(typ.len);
      }
      var array = new Array(typ.len);
      for (var i = 0; i < typ.len; i++) {
        array[i] = typ.elem.zero();
      }
      return array;
    };
    break;

  case $kindStruct:
    typ.zero = function() { return new typ.ptr(); };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  typ.id = $typeIDCounter;
  $typeIDCounter++;
  typ.size = size;
  typ.kind = kind;
  typ.string = string;
  typ.named = named;
  typ.pkg = pkg;
  typ.exported = exported;
  typ.methods = [];
  typ.methodSetCache = null;
  typ.comparable = true;
  return typ;
};

var $methodSet = function(typ) {
  if (typ.methodSetCache !== null) {
    return typ.methodSetCache;
  }
  var base = {};

  var isPtr = (typ.kind === $kindPtr);
  if (isPtr && typ.elem.kind === $kindInterface) {
    typ.methodSetCache = [];
    return [];
  }

  var current = [{typ: isPtr ? typ.elem : typ, indirect: isPtr}];

  var seen = {};

  while (current.length > 0) {
    var next = [];
    var mset = [];

    current.forEach(function(e) {
      if (seen[e.typ.string]) {
        return;
      }
      seen[e.typ.string] = true;

      if (e.typ.named) {
        mset = mset.concat(e.typ.methods);
        if (e.indirect) {
          mset = mset.concat($ptrType(e.typ).methods);
        }
      }

      switch (e.typ.kind) {
      case $kindStruct:
        e.typ.fields.forEach(function(f) {
          if (f.anonymous) {
            var fTyp = f.typ;
            var fIsPtr = (fTyp.kind === $kindPtr);
            next.push({typ: fIsPtr ? fTyp.elem : fTyp, indirect: e.indirect || fIsPtr});
          }
        });
        break;

      case $kindInterface:
        mset = mset.concat(e.typ.methods);
        break;
      }
    });

    mset.forEach(function(m) {
      if (base[m.name] === undefined) {
        base[m.name] = m;
      }
    });

    current = next;
  }

  typ.methodSetCache = [];
  var x = Object.keys(base).sort();
  if (x.length === 2 && x[0] === "nonexported" && x[1] === "\xCE\xA6Exported") {
    /* HACK: Hacky fix for TestIssue22073. Need to find a good general fix. */
    x[0] = "\xCE\xA6Exported";
    x[1] = "nonexported";
  }
  x.forEach(function(name) {
    typ.methodSetCache.push(base[name]);
  });
  return typ.methodSetCache;
};

var $Bool          = $newType( 1, $kindBool,          "bool",           true, "", false, null);
var $Int           = $newType( 4, $kindInt,           "int",            true, "", false, null);
var $Int8          = $newType( 1, $kindInt8,          "int8",           true, "", false, null);
var $Int16         = $newType( 2, $kindInt16,         "int16",          true, "", false, null);
var $Int32         = $newType( 4, $kindInt32,         "int32",          true, "", false, null);
var $Int64         = $newType( 8, $kindInt64,         "int64",          true, "", false, null);
var $Uint          = $newType( 4, $kindUint,          "uint",           true, "", false, null);
var $Uint8         = $newType( 1, $kindUint8,         "uint8",          true, "", false, null);
var $Uint16        = $newType( 2, $kindUint16,        "uint16",         true, "", false, null);
var $Uint32        = $newType( 4, $kindUint32,        "uint32",         true, "", false, null);
var $Uint64        = $newType( 8, $kindUint64,        "uint64",         true, "", false, null);
var $Uintptr       = $newType( 4, $kindUintptr,       "uintptr",        true, "", false, null);
var $Float32       = $newType( 4, $kindFloat32,       "float32",        true, "", false, null);
var $Float64       = $newType( 8, $kindFloat64,       "float64",        true, "", false, null);
var $Complex64     = $newType( 8, $kindComplex64,     "complex64",      true, "", false, null);
var $Complex128    = $newType(16, $kindComplex128,    "complex128",     true, "", false, null);
var $String        = $newType( 8, $kindString,        "string",         true, "", false, null);
var $UnsafePointer = $newType( 4, $kindUnsafePointer, "unsafe.Pointer", true, "", false, null);

var $nativeArray = function(elemKind) {
  switch (elemKind) {
  case $kindInt:
    return Int32Array;
  case $kindInt8:
    return Int8Array;
  case $kindInt16:
    return Int16Array;
  case $kindInt32:
    return Int32Array;
  case $kindUint:
    return Uint32Array;
  case $kindUint8:
    return Uint8Array;
  case $kindUint16:
    return Uint16Array;
  case $kindUint32:
    return Uint32Array;
  case $kindUintptr:
    return Uint32Array;
  case $kindFloat32:
    return Float32Array;
  case $kindFloat64:
    return Float64Array;
  default:
    return Array;
  }
};
var $toNativeArray = function(elemKind, array) {
  var nativeArray = $nativeArray(elemKind);
  if (nativeArray === Array) {
    return array;
  }
  return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = function(elem, len) {
  var typeKey = elem.id + "$" + len;
  var typ = $arrayTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(12, $kindArray, "[" + len + "]" + elem.string, false, "", false, null);
    $arrayTypes[typeKey] = typ;
    typ.init(elem, len);
  }
  return typ;
};

var $chanType = function(elem, sendOnly, recvOnly) {
  var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
  var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
  var typ = elem[field];
  if (typ === undefined) {
    typ = $newType(4, $kindChan, string, false, "", false, null);
    elem[field] = typ;
    typ.init(elem, sendOnly, recvOnly);
  }
  return typ;
};
var $Chan = function(elem, capacity) {
  if (capacity < 0 || capacity > 2147483647) {
    $throwRuntimeError("makechan: size out of range");
  }
  this.$elem = elem;
  this.$capacity = capacity;
  this.$buffer = [];
  this.$sendQueue = [];
  this.$recvQueue = [];
  this.$closed = false;
};
var $chanNil = new $Chan(null, 0);
$chanNil.$sendQueue = $chanNil.$recvQueue = { length: 0, push: function() {}, shift: function() { return undefined; }, indexOf: function() { return -1; } };

var $funcTypes = {};
var $funcType = function(params, results, variadic) {
  var typeKey = $mapArray(params, function(p) { return p.id; }).join(",") + "$" + $mapArray(results, function(r) { return r.id; }).join(",") + "$" + variadic;
  var typ = $funcTypes[typeKey];
  if (typ === undefined) {
    var paramTypes = $mapArray(params, function(p) { return p.string; });
    if (variadic) {
      paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
    }
    var string = "func(" + paramTypes.join(", ") + ")";
    if (results.length === 1) {
      string += " " + results[0].string;
    } else if (results.length > 1) {
      string += " (" + $mapArray(results, function(r) { return r.string; }).join(", ") + ")";
    }
    typ = $newType(4, $kindFunc, string, false, "", false, null);
    $funcTypes[typeKey] = typ;
    typ.init(params, results, variadic);
  }
  return typ;
};

var $interfaceTypes = {};
var $interfaceType = function(methods) {
  var typeKey = $mapArray(methods, function(m) { return m.pkg + "," + m.name + "," + m.typ.id; }).join("$");
  var typ = $interfaceTypes[typeKey];
  if (typ === undefined) {
    var string = "interface {}";
    if (methods.length !== 0) {
      string = "interface { " + $mapArray(methods, function(m) {
        return (m.pkg !== "" ? m.pkg + "." : "") + m.name + m.typ.string.substr(4);
      }).join("; ") + " }";
    }
    typ = $newType(8, $kindInterface, string, false, "", false, null);
    $interfaceTypes[typeKey] = typ;
    typ.init(methods);
  }
  return typ;
};
var $emptyInterface = $interfaceType([]);
var $ifaceNil = {};
var $error = $newType(8, $kindInterface, "error", true, "", false, null);
$error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}]);

var $mapTypes = {};
var $mapType = function(key, elem) {
  var typeKey = key.id + "$" + elem.id;
  var typ = $mapTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(4, $kindMap, "map[" + key.string + "]" + elem.string, false, "", false, null);
    $mapTypes[typeKey] = typ;
    typ.init(key, elem);
  }
  return typ;
};
var $makeMap = function(keyForFunc, entries) {
  var m = {};
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i];
    m[keyForFunc(e.k)] = e;
  }
  return m;
};

var $ptrType = function(elem) {
  var typ = elem.ptr;
  if (typ === undefined) {
    typ = $newType(4, $kindPtr, "*" + elem.string, false, "", elem.exported, null);
    elem.ptr = typ;
    typ.init(elem);
  }
  return typ;
};

var $newDataPointer = function(data, constructor) {
  if (constructor.elem.kind === $kindStruct) {
    return data;
  }
  return new constructor(function() { return data; }, function(v) { data = v; });
};

var $indexPtr = function(array, index, constructor) {
  array.$ptr = array.$ptr || {};
  return array.$ptr[index] || (array.$ptr[index] = new constructor(function() { return array[index]; }, function(v) { array[index] = v; }));
};

var $sliceType = function(elem) {
  var typ = elem.slice;
  if (typ === undefined) {
    typ = $newType(12, $kindSlice, "[]" + elem.string, false, "", false, null);
    elem.slice = typ;
    typ.init(elem);
  }
  return typ;
};
var $makeSlice = function(typ, length, capacity) {
  capacity = capacity || length;
  if (length < 0 || length > 2147483647) {
    $throwRuntimeError("makeslice: len out of range");
  }
  if (capacity < 0 || capacity < length || capacity > 2147483647) {
    $throwRuntimeError("makeslice: cap out of range");
  }
  var array = new typ.nativeArray(capacity);
  if (typ.nativeArray === Array) {
    for (var i = 0; i < capacity; i++) {
      array[i] = typ.elem.zero();
    }
  }
  var slice = new typ(array);
  slice.$length = length;
  return slice;
};

var $structTypes = {};
var $structType = function(pkgPath, fields) {
  var typeKey = $mapArray(fields, function(f) { return f.name + "," + f.typ.id + "," + f.tag; }).join("$");
  var typ = $structTypes[typeKey];
  if (typ === undefined) {
    var string = "struct { " + $mapArray(fields, function(f) {
      return f.name + " " + f.typ.string + (f.tag !== "" ? (" \"" + f.tag.replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
    }).join("; ") + " }";
    if (fields.length === 0) {
      string = "struct {}";
    }
    typ = $newType(0, $kindStruct, string, false, "", false, function() {
      this.$val = this;
      for (var i = 0; i < fields.length; i++) {
        var f = fields[i];
        var arg = arguments[i];
        this[f.prop] = arg !== undefined ? arg : f.typ.zero();
      }
    });
    $structTypes[typeKey] = typ;
    typ.init(pkgPath, fields);
  }
  return typ;
};

var $assertType = function(value, type, returnTuple) {
  var isInterface = (type.kind === $kindInterface), ok, missingMethod = "";
  if (value === $ifaceNil) {
    ok = false;
  } else if (!isInterface) {
    ok = value.constructor === type;
  } else {
    var valueTypeString = value.constructor.string;
    ok = type.implementedBy[valueTypeString];
    if (ok === undefined) {
      ok = true;
      var valueMethodSet = $methodSet(value.constructor);
      var interfaceMethods = type.methods;
      for (var i = 0; i < interfaceMethods.length; i++) {
        var tm = interfaceMethods[i];
        var found = false;
        for (var j = 0; j < valueMethodSet.length; j++) {
          var vm = valueMethodSet[j];
          if (vm.name === tm.name && vm.pkg === tm.pkg && vm.typ === tm.typ) {
            found = true;
            break;
          }
        }
        if (!found) {
          ok = false;
          type.missingMethodFor[valueTypeString] = tm.name;
          break;
        }
      }
      type.implementedBy[valueTypeString] = ok;
    }
    if (!ok) {
      missingMethod = type.missingMethodFor[valueTypeString];
    }
  }

  if (!ok) {
    if (returnTuple) {
      return [type.zero(), false];
    }
    $panic(new $packages["runtime"].TypeAssertionError.ptr("", (value === $ifaceNil ? "" : value.constructor.string), type.string, missingMethod));
  }

  if (!isInterface) {
    value = value.$val;
  }
  if (type === $jsObjectPtr) {
    value = value.object;
  }
  return returnTuple ? [value, true] : value;
};

var $stackDepthOffset = 0;
var $getStackDepth = function() {
  var err = new Error();
  if (err.stack === undefined) {
    return undefined;
  }
  return $stackDepthOffset + err.stack.split("\n").length;
};

var $panicStackDepth = null, $panicValue;
var $callDeferred = function(deferred, jsErr, fromPanic) {
  if (!fromPanic && deferred !== null && deferred.index >= $curGoroutine.deferStack.length) {
    throw jsErr;
  }
  if (jsErr !== null) {
    var newErr = null;
    try {
      $curGoroutine.deferStack.push(deferred);
      $panic(new $jsErrorPtr(jsErr));
    } catch (err) {
      newErr = err;
    }
    $curGoroutine.deferStack.pop();
    $callDeferred(deferred, newErr);
    return;
  }
  if ($curGoroutine.asleep) {
    return;
  }

  $stackDepthOffset--;
  var outerPanicStackDepth = $panicStackDepth;
  var outerPanicValue = $panicValue;

  var localPanicValue = $curGoroutine.panicStack.pop();
  if (localPanicValue !== undefined) {
    $panicStackDepth = $getStackDepth();
    $panicValue = localPanicValue;
  }

  try {
    while (true) {
      if (deferred === null) {
        deferred = $curGoroutine.deferStack[$curGoroutine.deferStack.length - 1];
        if (deferred === undefined) {
          /* The panic reached the top of the stack. Clear it and throw it as a JavaScript error. */
          $panicStackDepth = null;
          if (localPanicValue.Object instanceof Error) {
            throw localPanicValue.Object;
          }
          var msg;
          if (localPanicValue.constructor === $String) {
            msg = localPanicValue.$val;
          } else if (localPanicValue.Error !== undefined) {
            msg = localPanicValue.Error();
          } else if (localPanicValue.String !== undefined) {
            msg = localPanicValue.String();
          } else {
            msg = localPanicValue;
          }
          throw new Error(msg);
        }
      }
      var call = deferred.pop();
      if (call === undefined) {
        $curGoroutine.deferStack.pop();
        if (localPanicValue !== undefined) {
          deferred = null;
          continue;
        }
        return;
      }
      var r = call[0].apply(call[2], call[1]);
      if (r && r.$blk !== undefined) {
        deferred.push([r.$blk, [], r]);
        if (fromPanic) {
          throw null;
        }
        return;
      }

      if (localPanicValue !== undefined && $panicStackDepth === null) {
        throw null; /* error was recovered */
      }
    }
  } finally {
    if (localPanicValue !== undefined) {
      if ($panicStackDepth !== null) {
        $curGoroutine.panicStack.push(localPanicValue);
      }
      $panicStackDepth = outerPanicStackDepth;
      $panicValue = outerPanicValue;
    }
    $stackDepthOffset++;
  }
};

var $panic = function(value) {
  $curGoroutine.panicStack.push(value);
  $callDeferred(null, null, true);
};
var $recover = function() {
  if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
    return $ifaceNil;
  }
  $panicStackDepth = null;
  return $panicValue;
};
var $throw = function(err) { throw err; };

var $noGoroutine = { asleep: false, exit: false, deferStack: [], panicStack: [] };
var $curGoroutine = $noGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true;
var $mainFinished = false;
var $go = function(fun, args) {
  $totalGoroutines++;
  $awakeGoroutines++;
  var $goroutine = function() {
    try {
      $curGoroutine = $goroutine;
      var r = fun.apply(undefined, args);
      if (r && r.$blk !== undefined) {
        fun = function() { return r.$blk(); };
        args = [];
        return;
      }
      $goroutine.exit = true;
    } catch (err) {
      if (!$goroutine.exit) {
        throw err;
      }
    } finally {
      $curGoroutine = $noGoroutine;
      if ($goroutine.exit) { /* also set by runtime.Goexit() */
        $totalGoroutines--;
        $goroutine.asleep = true;
      }
      if ($goroutine.asleep) {
        $awakeGoroutines--;
        if (!$mainFinished && $awakeGoroutines === 0 && $checkForDeadlock) {
          console.error("fatal error: all goroutines are asleep - deadlock!");
          if ($global.process !== undefined) {
            $global.process.exit(2);
          }
        }
      }
    }
  };
  $goroutine.asleep = false;
  $goroutine.exit = false;
  $goroutine.deferStack = [];
  $goroutine.panicStack = [];
  $schedule($goroutine);
};

var $scheduled = [];
var $runScheduled = function() {
  try {
    var r;
    while ((r = $scheduled.shift()) !== undefined) {
      r();
    }
  } finally {
    if ($scheduled.length > 0) {
      setTimeout($runScheduled, 0);
    }
  }
};

var $schedule = function(goroutine) {
  if (goroutine.asleep) {
    goroutine.asleep = false;
    $awakeGoroutines++;
  }
  $scheduled.push(goroutine);
  if ($curGoroutine === $noGoroutine) {
    $runScheduled();
  }
};

var $setTimeout = function(f, t) {
  $awakeGoroutines++;
  return setTimeout(function() {
    $awakeGoroutines--;
    f();
  }, t);
};

var $block = function() {
  if ($curGoroutine === $noGoroutine) {
    $throwRuntimeError("cannot block in JavaScript callback, fix by wrapping code in goroutine");
  }
  $curGoroutine.asleep = true;
};

var $send = function(chan, value) {
  if (chan.$closed) {
    $throwRuntimeError("send on closed channel");
  }
  var queuedRecv = chan.$recvQueue.shift();
  if (queuedRecv !== undefined) {
    queuedRecv([value, true]);
    return;
  }
  if (chan.$buffer.length < chan.$capacity) {
    chan.$buffer.push(value);
    return;
  }

  var thisGoroutine = $curGoroutine;
  var closedDuringSend;
  chan.$sendQueue.push(function(closed) {
    closedDuringSend = closed;
    $schedule(thisGoroutine);
    return value;
  });
  $block();
  return {
    $blk: function() {
      if (closedDuringSend) {
        $throwRuntimeError("send on closed channel");
      }
    }
  };
};
var $recv = function(chan) {
  var queuedSend = chan.$sendQueue.shift();
  if (queuedSend !== undefined) {
    chan.$buffer.push(queuedSend(false));
  }
  var bufferedValue = chan.$buffer.shift();
  if (bufferedValue !== undefined) {
    return [bufferedValue, true];
  }
  if (chan.$closed) {
    return [chan.$elem.zero(), false];
  }

  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.value; } };
  var queueEntry = function(v) {
    f.value = v;
    $schedule(thisGoroutine);
  };
  chan.$recvQueue.push(queueEntry);
  $block();
  return f;
};
var $close = function(chan) {
  if (chan.$closed) {
    $throwRuntimeError("close of closed channel");
  }
  chan.$closed = true;
  while (true) {
    var queuedSend = chan.$sendQueue.shift();
    if (queuedSend === undefined) {
      break;
    }
    queuedSend(true); /* will panic */
  }
  while (true) {
    var queuedRecv = chan.$recvQueue.shift();
    if (queuedRecv === undefined) {
      break;
    }
    queuedRecv([chan.$elem.zero(), false]);
  }
};
var $select = function(comms) {
  var ready = [];
  var selection = -1;
  for (var i = 0; i < comms.length; i++) {
    var comm = comms[i];
    var chan = comm[0];
    switch (comm.length) {
    case 0: /* default */
      selection = i;
      break;
    case 1: /* recv */
      if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
        ready.push(i);
      }
      break;
    case 2: /* send */
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
        ready.push(i);
      }
      break;
    }
  }

  if (ready.length !== 0) {
    selection = ready[Math.floor(Math.random() * ready.length)];
  }
  if (selection !== -1) {
    var comm = comms[selection];
    switch (comm.length) {
    case 0: /* default */
      return [selection];
    case 1: /* recv */
      return [selection, $recv(comm[0])];
    case 2: /* send */
      $send(comm[0], comm[1]);
      return [selection];
    }
  }

  var entries = [];
  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.selection; } };
  var removeFromQueues = function() {
    for (var i = 0; i < entries.length; i++) {
      var entry = entries[i];
      var queue = entry[0];
      var index = queue.indexOf(entry[1]);
      if (index !== -1) {
        queue.splice(index, 1);
      }
    }
  };
  for (var i = 0; i < comms.length; i++) {
    (function(i) {
      var comm = comms[i];
      switch (comm.length) {
      case 1: /* recv */
        var queueEntry = function(value) {
          f.selection = [i, value];
          removeFromQueues();
          $schedule(thisGoroutine);
        };
        entries.push([comm[0].$recvQueue, queueEntry]);
        comm[0].$recvQueue.push(queueEntry);
        break;
      case 2: /* send */
        var queueEntry = function() {
          if (comm[0].$closed) {
            $throwRuntimeError("send on closed channel");
          }
          f.selection = [i];
          removeFromQueues();
          $schedule(thisGoroutine);
          return comm[1];
        };
        entries.push([comm[0].$sendQueue, queueEntry]);
        comm[0].$sendQueue.push(queueEntry);
        break;
      }
    })(i);
  }
  $block();
  return f;
};

var $jsObjectPtr, $jsErrorPtr;

var $needsExternalization = function(t) {
  switch (t.kind) {
    case $kindBool:
    case $kindInt:
    case $kindInt8:
    case $kindInt16:
    case $kindInt32:
    case $kindUint:
    case $kindUint8:
    case $kindUint16:
    case $kindUint32:
    case $kindUintptr:
    case $kindFloat32:
    case $kindFloat64:
      return false;
    default:
      return t !== $jsObjectPtr;
  }
};

var $externalize = function(v, t) {
  if (t === $jsObjectPtr) {
    return v;
  }
  switch (t.kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindFloat32:
  case $kindFloat64:
    return v;
  case $kindInt64:
  case $kindUint64:
    return $flatten64(v);
  case $kindArray:
    if ($needsExternalization(t.elem)) {
      return $mapArray(v, function(e) { return $externalize(e, t.elem); });
    }
    return v;
  case $kindFunc:
    return $externalizeFunction(v, t, false);
  case $kindInterface:
    if (v === $ifaceNil) {
      return null;
    }
    if (v.constructor === $jsObjectPtr) {
      return v.$val.object;
    }
    return $externalize(v.$val, v.constructor);
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var entry = v[keys[i]];
      m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);
    }
    return m;
  case $kindPtr:
    if (v === t.nil) {
      return null;
    }
    return $externalize(v.$get(), t.elem);
  case $kindSlice:
    if ($needsExternalization(t.elem)) {
      return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });
    }
    return $sliceToArray(v);
  case $kindString:
    if ($isASCII(v)) {
      return v;
    }
    var s = "", r;
    for (var i = 0; i < v.length; i += r[1]) {
      r = $decodeRune(v, i);
      var c = r[0];
      if (c > 0xFFFF) {
        var h = Math.floor((c - 0x10000) / 0x400) + 0xD800;
        var l = (c - 0x10000) % 0x400 + 0xDC00;
        s += String.fromCharCode(h, l);
        continue;
      }
      s += String.fromCharCode(c);
    }
    return s;
  case $kindStruct:
    var timePkg = $packages["time"];
    if (timePkg !== undefined && v.constructor === timePkg.Time.ptr) {
      var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
      return new Date($flatten64(milli));
    }

    var noJsObject = {};
    var searchJsObject = function(v, t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      switch (t.kind) {
      case $kindPtr:
        if (v === t.nil) {
          return noJsObject;
        }
        return searchJsObject(v.$get(), t.elem);
      case $kindStruct:
        var f = t.fields[0];
        return searchJsObject(v[f.prop], f.typ);
      case $kindInterface:
        return searchJsObject(v.$val, v.constructor);
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(v, t);
    if (o !== noJsObject) {
      return o;
    }

    o = {};
    for (var i = 0; i < t.fields.length; i++) {
      var f = t.fields[i];
      if (!f.exported) {
        continue;
      }
      o[f.name] = $externalize(v[f.prop], f.typ);
    }
    return o;
  }
  $throwRuntimeError("cannot externalize " + t.string);
};

var $externalizeFunction = function(v, t, passThis) {
  if (v === $throwNilPointerError) {
    return null;
  }
  if (v.$externalizeWrapper === undefined) {
    $checkForDeadlock = false;
    v.$externalizeWrapper = function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = [];
          for (var j = i; j < arguments.length; j++) {
            varargs.push($internalize(arguments[j], vt));
          }
          args.push(new (t.params[i])(varargs));
          break;
        }
        args.push($internalize(arguments[i], t.params[i]));
      }
      var result = v.apply(passThis ? this : undefined, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $externalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $externalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  }
  return v.$externalizeWrapper;
};

var $internalize = function(v, t, recv) {
  if (t === $jsObjectPtr) {
    return v;
  }
  if (t === $jsObjectPtr.elem) {
    $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
  }
  if (v && v.__internal_object__ !== undefined) {
    return $assertType(v.__internal_object__, t, false);
  }
  var timePkg = $packages["time"];
  if (timePkg !== undefined && t === timePkg.Time) {
    if (!(v !== null && v !== undefined && v.constructor === Date)) {
      $throwRuntimeError("cannot internalize time.Time from " + typeof v + ", must be Date");
    }
    return timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000));
  }
  switch (t.kind) {
  case $kindBool:
    return !!v;
  case $kindInt:
    return parseInt(v);
  case $kindInt8:
    return parseInt(v) << 24 >> 24;
  case $kindInt16:
    return parseInt(v) << 16 >> 16;
  case $kindInt32:
    return parseInt(v) >> 0;
  case $kindUint:
    return parseInt(v);
  case $kindUint8:
    return parseInt(v) << 24 >>> 24;
  case $kindUint16:
    return parseInt(v) << 16 >>> 16;
  case $kindUint32:
  case $kindUintptr:
    return parseInt(v) >>> 0;
  case $kindInt64:
  case $kindUint64:
    return new t(0, v);
  case $kindFloat32:
  case $kindFloat64:
    return parseFloat(v);
  case $kindArray:
    if (v.length !== t.len) {
      $throwRuntimeError("got array with wrong size from JavaScript native");
    }
    return $mapArray(v, function(e) { return $internalize(e, t.elem); });
  case $kindFunc:
    return function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = arguments[i];
          for (var j = 0; j < varargs.$length; j++) {
            args.push($externalize(varargs.$array[varargs.$offset + j], vt));
          }
          break;
        }
        args.push($externalize(arguments[i], t.params[i]));
      }
      var result = v.apply(recv, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $internalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $internalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  case $kindInterface:
    if (t.methods.length !== 0) {
      $throwRuntimeError("cannot internalize " + t.string);
    }
    if (v === null) {
      return $ifaceNil;
    }
    if (v === undefined) {
      return new $jsObjectPtr(undefined);
    }
    switch (v.constructor) {
    case Int8Array:
      return new ($sliceType($Int8))(v);
    case Int16Array:
      return new ($sliceType($Int16))(v);
    case Int32Array:
      return new ($sliceType($Int))(v);
    case Uint8Array:
      return new ($sliceType($Uint8))(v);
    case Uint16Array:
      return new ($sliceType($Uint16))(v);
    case Uint32Array:
      return new ($sliceType($Uint))(v);
    case Float32Array:
      return new ($sliceType($Float32))(v);
    case Float64Array:
      return new ($sliceType($Float64))(v);
    case Array:
      return $internalize(v, $sliceType($emptyInterface));
    case Boolean:
      return new $Bool(!!v);
    case Date:
      if (timePkg === undefined) {
        /* time package is not present, internalize as &js.Object{Date} so it can be externalized into original Date. */
        return new $jsObjectPtr(v);
      }
      return new timePkg.Time($internalize(v, timePkg.Time));
    case Function:
      var funcType = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], true);
      return new funcType($internalize(v, funcType));
    case Number:
      return new $Float64(parseFloat(v));
    case String:
      return new $String($internalize(v, $String));
    default:
      if ($global.Node && v instanceof $global.Node) {
        return new $jsObjectPtr(v);
      }
      var mapType = $mapType($String, $emptyInterface);
      return new mapType($internalize(v, mapType));
    }
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var k = $internalize(keys[i], t.key);
      m[t.key.keyFor(k)] = { k: k, v: $internalize(v[keys[i]], t.elem) };
    }
    return m;
  case $kindPtr:
    if (t.elem.kind === $kindStruct) {
      return $internalize(v, t.elem);
    }
  case $kindSlice:
    return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));
  case $kindString:
    v = String(v);
    if ($isASCII(v)) {
      return v;
    }
    var s = "";
    var i = 0;
    while (i < v.length) {
      var h = v.charCodeAt(i);
      if (0xD800 <= h && h <= 0xDBFF) {
        var l = v.charCodeAt(i + 1);
        var c = (h - 0xD800) * 0x400 + l - 0xDC00 + 0x10000;
        s += $encodeRune(c);
        i += 2;
        continue;
      }
      s += $encodeRune(h);
      i++;
    }
    return s;
  case $kindStruct:
    var noJsObject = {};
    var searchJsObject = function(t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      if (t === $jsObjectPtr.elem) {
        $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
      }
      switch (t.kind) {
      case $kindPtr:
        return searchJsObject(t.elem);
      case $kindStruct:
        var f = t.fields[0];
        var o = searchJsObject(f.typ);
        if (o !== noJsObject) {
          var n = new t.ptr();
          n[f.prop] = o;
          return n;
        }
        return noJsObject;
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(t);
    if (o !== noJsObject) {
      return o;
    }
  }
  $throwRuntimeError("cannot internalize " + t.string);
};

/* $isASCII reports whether string s contains only ASCII characters. */
var $isASCII = function(s) {
  for (var i = 0; i < s.length; i++) {
    if (s.charCodeAt(i) >= 128) {
      return false;
    }
  }
  return true;
};

$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, $init, Object, Error, sliceType, ptrType, ptrType$1, MakeFunc, init;
	Object = $pkg.Object = $newType(0, $kindStruct, "js.Object", true, "github.com/gopherjs/gopherjs/js", true, function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = null;
			return;
		}
		this.object = object_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", true, "github.com/gopherjs/gopherjs/js", true, function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Object);
	ptrType$1 = $ptrType(Error);
	Object.ptr.prototype.Get = function(key) {
		var key, o;
		o = this;
		return o.object[$externalize(key, $String)];
	};
	Object.prototype.Get = function(key) { return this.$val.Get(key); };
	Object.ptr.prototype.Set = function(key, value) {
		var key, o, value;
		o = this;
		o.object[$externalize(key, $String)] = $externalize(value, $emptyInterface);
	};
	Object.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
	Object.ptr.prototype.Delete = function(key) {
		var key, o;
		o = this;
		delete o.object[$externalize(key, $String)];
	};
	Object.prototype.Delete = function(key) { return this.$val.Delete(key); };
	Object.ptr.prototype.Length = function() {
		var o;
		o = this;
		return $parseInt(o.object.length);
	};
	Object.prototype.Length = function() { return this.$val.Length(); };
	Object.ptr.prototype.Index = function(i) {
		var i, o;
		o = this;
		return o.object[i];
	};
	Object.prototype.Index = function(i) { return this.$val.Index(i); };
	Object.ptr.prototype.SetIndex = function(i, value) {
		var i, o, value;
		o = this;
		o.object[i] = $externalize(value, $emptyInterface);
	};
	Object.prototype.SetIndex = function(i, value) { return this.$val.SetIndex(i, value); };
	Object.ptr.prototype.Call = function(name, args) {
		var args, name, o, obj;
		o = this;
		return (obj = o.object, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType)));
	};
	Object.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
	Object.ptr.prototype.Invoke = function(args) {
		var args, o;
		o = this;
		return o.object.apply(undefined, $externalize(args, sliceType));
	};
	Object.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Object.ptr.prototype.New = function(args) {
		var args, o;
		o = this;
		return new ($global.Function.prototype.bind.apply(o.object, [undefined].concat($externalize(args, sliceType))));
	};
	Object.prototype.New = function(args) { return this.$val.New(args); };
	Object.ptr.prototype.Bool = function() {
		var o;
		o = this;
		return !!(o.object);
	};
	Object.prototype.Bool = function() { return this.$val.Bool(); };
	Object.ptr.prototype.String = function() {
		var o;
		o = this;
		return $internalize(o.object, $String);
	};
	Object.prototype.String = function() { return this.$val.String(); };
	Object.ptr.prototype.Int = function() {
		var o;
		o = this;
		return $parseInt(o.object) >> 0;
	};
	Object.prototype.Int = function() { return this.$val.Int(); };
	Object.ptr.prototype.Int64 = function() {
		var o;
		o = this;
		return $internalize(o.object, $Int64);
	};
	Object.prototype.Int64 = function() { return this.$val.Int64(); };
	Object.ptr.prototype.Uint64 = function() {
		var o;
		o = this;
		return $internalize(o.object, $Uint64);
	};
	Object.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Object.ptr.prototype.Float = function() {
		var o;
		o = this;
		return $parseFloat(o.object);
	};
	Object.prototype.Float = function() { return this.$val.Float(); };
	Object.ptr.prototype.Interface = function() {
		var o;
		o = this;
		return $internalize(o.object, $emptyInterface);
	};
	Object.prototype.Interface = function() { return this.$val.Interface(); };
	Object.ptr.prototype.Unsafe = function() {
		var o;
		o = this;
		return o.object;
	};
	Object.prototype.Unsafe = function() { return this.$val.Unsafe(); };
	Error.ptr.prototype.Error = function() {
		var err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Stack = function() {
		var err;
		err = this;
		return $internalize(err.Object.stack, $String);
	};
	Error.prototype.Stack = function() { return this.$val.Stack(); };
	MakeFunc = function(fn) {
		var fn;
		return $makeFunc(fn);
	};
	$pkg.MakeFunc = MakeFunc;
	init = function() {
		var e;
		e = new Error.ptr(null);
		$unused(e);
	};
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [ptrType], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType], [ptrType], true)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", typ: $funcType([], [$Uintptr], false)}];
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Stack", name: "Stack", pkg: "", typ: $funcType([], [$String], false)}];
	Object.init("github.com/gopherjs/gopherjs/js", [{prop: "object", name: "object", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	Error.init("", [{prop: "Object", name: "Object", anonymous: true, exported: true, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime/internal/sys"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, $init, js, sys, TypeAssertionError, errorString, ptrType$4, init, GOROOT, Goexit, SetFinalizer, KeepAlive, throw$1;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	sys = $packages["runtime/internal/sys"];
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", true, "runtime", true, function(interfaceString_, concreteString_, assertedString_, missingMethod_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.interfaceString = "";
			this.concreteString = "";
			this.assertedString = "";
			this.missingMethod = "";
			return;
		}
		this.interfaceString = interfaceString_;
		this.concreteString = concreteString_;
		this.assertedString = assertedString_;
		this.missingMethod = missingMethod_;
	});
	errorString = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", true, "runtime", false, null);
	ptrType$4 = $ptrType(TypeAssertionError);
	init = function() {
		var e, jsPkg;
		jsPkg = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
		$jsObjectPtr = jsPkg.Object.ptr;
		$jsErrorPtr = jsPkg.Error.ptr;
		$throwRuntimeError = throw$1;
		e = $ifaceNil;
		e = new TypeAssertionError.ptr("", "", "", "");
		$unused(e);
	};
	GOROOT = function() {
		var goroot, process;
		process = $global.process;
		if (process === undefined) {
			return "/";
		}
		goroot = process.env.GOROOT;
		if (!(goroot === undefined)) {
			return $internalize(goroot, $String);
		}
		return "/usr/local/go";
	};
	$pkg.GOROOT = GOROOT;
	Goexit = function() {
		$curGoroutine.exit = $externalize(true, $Bool);
		$throw(null);
	};
	$pkg.Goexit = Goexit;
	SetFinalizer = function(x, f) {
		var f, x;
	};
	$pkg.SetFinalizer = SetFinalizer;
	KeepAlive = function(param) {
		var param;
	};
	$pkg.KeepAlive = KeepAlive;
	throw$1 = function(s) {
		var s;
		$panic(new errorString((s)));
	};
	TypeAssertionError.ptr.prototype.RuntimeError = function() {
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.ptr.prototype.Error = function() {
		var e, inter;
		e = this;
		inter = e.interfaceString;
		if (inter === "") {
			inter = "interface";
		}
		if (e.concreteString === "") {
			return "interface conversion: " + inter + " is nil, not " + e.assertedString;
		}
		if (e.missingMethod === "") {
			return "interface conversion: " + inter + " is " + e.concreteString + ", not " + e.assertedString;
		}
		return "interface conversion: " + e.concreteString + " is not " + e.assertedString + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	errorString.prototype.RuntimeError = function() {
		var e;
		e = this.$val;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var e;
		e = this.$val;
		return "runtime error: " + (e);
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	ptrType$4.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	TypeAssertionError.init("runtime", [{prop: "interfaceString", name: "interfaceString", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "concreteString", name: "concreteString", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "assertedString", name: "assertedString", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "missingMethod", name: "missingMethod", anonymous: false, exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sys.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, $init, errorString, ptrType, New;
	errorString = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", true, "errors", false, function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			return;
		}
		this.s = s_;
	});
	ptrType = $ptrType(errorString);
	New = function(text) {
		var text;
		return new errorString.ptr(text);
	};
	$pkg.New = New;
	errorString.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.init("errors", [{prop: "s", name: "s", anonymous: false, exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/race"] = (function() {
	var $pkg = {}, $init, Acquire, Release, ReleaseMerge, ReadRange, WriteRange;
	Acquire = function(addr) {
		var addr;
	};
	$pkg.Acquire = Acquire;
	Release = function(addr) {
		var addr;
	};
	$pkg.Release = Release;
	ReleaseMerge = function(addr) {
		var addr;
	};
	$pkg.ReleaseMerge = ReleaseMerge;
	ReadRange = function(addr, len) {
		var addr, len;
	};
	$pkg.ReadRange = ReadRange;
	WriteRange = function(addr, len) {
		var addr, len;
	};
	$pkg.WriteRange = WriteRange;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, $init, js, Value, ptrType, CompareAndSwapInt32, CompareAndSwapUint64, CompareAndSwapPointer, AddInt32, LoadUint64, LoadPointer, StorePointer;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	Value = $pkg.Value = $newType(0, $kindStruct, "atomic.Value", true, "sync/atomic", true, function(v_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.v = $ifaceNil;
			return;
		}
		this.v = v_;
	});
	ptrType = $ptrType(Value);
	CompareAndSwapInt32 = function(addr, old, new$1) {
		var addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapInt32 = CompareAndSwapInt32;
	CompareAndSwapUint64 = function(addr, old, new$1) {
		var addr, new$1, old, x;
		if ((x = addr.$get(), (x.$high === old.$high && x.$low === old.$low))) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapUint64 = CompareAndSwapUint64;
	CompareAndSwapPointer = function(addr, old, new$1) {
		var addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapPointer = CompareAndSwapPointer;
	AddInt32 = function(addr, delta) {
		var addr, delta, new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	$pkg.AddInt32 = AddInt32;
	LoadUint64 = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadUint64 = LoadUint64;
	LoadPointer = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadPointer = LoadPointer;
	StorePointer = function(addr, val) {
		var addr, val;
		addr.$set(val);
	};
	$pkg.StorePointer = StorePointer;
	Value.ptr.prototype.Load = function() {
		var v, x;
		x = $ifaceNil;
		v = this;
		x = v.v;
		return x;
	};
	Value.prototype.Load = function() { return this.$val.Load(); };
	Value.ptr.prototype.Store = function(x) {
		var v, x;
		v = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			$panic(new $String("sync/atomic: store of nil value into Value"));
		}
		if (!($interfaceIsEqual(v.v, $ifaceNil)) && !(x.constructor === v.v.constructor)) {
			$panic(new $String("sync/atomic: store of inconsistently typed value into Value"));
		}
		v.v = x;
	};
	Value.prototype.Store = function(x) { return this.$val.Store(x); };
	ptrType.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Store", name: "Store", pkg: "", typ: $funcType([$emptyInterface], [], false)}];
	Value.init("sync/atomic", [{prop: "v", name: "v", anonymous: false, exported: false, typ: $emptyInterface, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, $init, js, race, runtime, atomic, Pool, Map, readOnly, entry, Mutex, poolLocalInternal, poolLocal, notifyList, ptrType, sliceType, ptrType$1, chanType, sliceType$1, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, sliceType$4, funcType, funcType$1, ptrType$15, mapType, ptrType$16, arrayType$2, semWaiters, semAwoken, expunged, allPools, runtime_registerPoolCleanup, runtime_SemacquireMutex, runtime_Semrelease, runtime_notifyListCheck, runtime_canSpin, runtime_nanotime, throw$1, newEntry, poolCleanup, init, indexLocal, init$1, runtime_doSpin;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	atomic = $packages["sync/atomic"];
	Pool = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", true, "sync", true, function(local_, localSize_, store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.local = 0;
			this.localSize = 0;
			this.store = sliceType$4.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.local = local_;
		this.localSize = localSize_;
		this.store = store_;
		this.New = New_;
	});
	Map = $pkg.Map = $newType(0, $kindStruct, "sync.Map", true, "sync", true, function(mu_, read_, dirty_, misses_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mu = new Mutex.ptr(0, 0);
			this.read = new atomic.Value.ptr($ifaceNil);
			this.dirty = false;
			this.misses = 0;
			return;
		}
		this.mu = mu_;
		this.read = read_;
		this.dirty = dirty_;
		this.misses = misses_;
	});
	readOnly = $pkg.readOnly = $newType(0, $kindStruct, "sync.readOnly", true, "sync", false, function(m_, amended_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = false;
			this.amended = false;
			return;
		}
		this.m = m_;
		this.amended = amended_;
	});
	entry = $pkg.entry = $newType(0, $kindStruct, "sync.entry", true, "sync", false, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = 0;
			return;
		}
		this.p = p_;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", true, "sync", true, function(state_, sema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = 0;
			this.sema = 0;
			return;
		}
		this.state = state_;
		this.sema = sema_;
	});
	poolLocalInternal = $pkg.poolLocalInternal = $newType(0, $kindStruct, "sync.poolLocalInternal", true, "sync", false, function(private$0_, shared_, Mutex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.private$0 = $ifaceNil;
			this.shared = sliceType$4.nil;
			this.Mutex = new Mutex.ptr(0, 0);
			return;
		}
		this.private$0 = private$0_;
		this.shared = shared_;
		this.Mutex = Mutex_;
	});
	poolLocal = $pkg.poolLocal = $newType(0, $kindStruct, "sync.poolLocal", true, "sync", false, function(poolLocalInternal_, pad_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.poolLocalInternal = new poolLocalInternal.ptr($ifaceNil, sliceType$4.nil, new Mutex.ptr(0, 0));
			this.pad = arrayType$2.zero();
			return;
		}
		this.poolLocalInternal = poolLocalInternal_;
		this.pad = pad_;
	});
	notifyList = $pkg.notifyList = $newType(0, $kindStruct, "sync.notifyList", true, "sync", false, function(wait_, notify_, lock_, head_, tail_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wait = 0;
			this.notify = 0;
			this.lock = 0;
			this.head = 0;
			this.tail = 0;
			return;
		}
		this.wait = wait_;
		this.notify = notify_;
		this.lock = lock_;
		this.head = head_;
		this.tail = tail_;
	});
	ptrType = $ptrType(Pool);
	sliceType = $sliceType(ptrType);
	ptrType$1 = $ptrType($Uint32);
	chanType = $chanType($Bool, false, false);
	sliceType$1 = $sliceType(chanType);
	ptrType$3 = $ptrType($emptyInterface);
	ptrType$4 = $ptrType(entry);
	ptrType$5 = $ptrType($UnsafePointer);
	ptrType$6 = $ptrType($Int32);
	ptrType$7 = $ptrType(poolLocal);
	sliceType$4 = $sliceType($emptyInterface);
	funcType = $funcType([], [$emptyInterface], false);
	funcType$1 = $funcType([$emptyInterface, $emptyInterface], [$Bool], false);
	ptrType$15 = $ptrType(Map);
	mapType = $mapType($emptyInterface, ptrType$4);
	ptrType$16 = $ptrType(Mutex);
	arrayType$2 = $arrayType($Uint8, 100);
	Pool.ptr.prototype.Get = function() {
		var _r, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 4:
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		$s = -1; return x$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pool.ptr.prototype.Get }; } $f._r = _r; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	runtime_registerPoolCleanup = function(cleanup) {
		var cleanup;
	};
	runtime_SemacquireMutex = function(s, lifo) {
		var _entry, _entry$1, _entry$2, _entry$3, _entry$4, _key, _key$1, _key$2, _r, ch, lifo, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _r = $f._r; ch = $f.ch; lifo = $f.lifo; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (((s.$get() - (_entry = semAwoken[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : 0) >>> 0)) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (((s.$get() - (_entry = semAwoken[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : 0) >>> 0)) === 0) { */ case 1:
			ch = new $Chan($Bool, 0);
			if (lifo) {
				_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: $appendSlice(new sliceType$1([ch]), (_entry$1 = semWaiters[ptrType$1.keyFor(s)], _entry$1 !== undefined ? _entry$1.v : sliceType$1.nil)) };
			} else {
				_key$1 = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key$1)] = { k: _key$1, v: $append((_entry$2 = semWaiters[ptrType$1.keyFor(s)], _entry$2 !== undefined ? _entry$2.v : sliceType$1.nil), ch) };
			}
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
			_key$2 = s; (semAwoken || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key$2)] = { k: _key$2, v: (_entry$3 = semAwoken[ptrType$1.keyFor(s)], _entry$3 !== undefined ? _entry$3.v : 0) - (1) >>> 0 };
			if ((_entry$4 = semAwoken[ptrType$1.keyFor(s)], _entry$4 !== undefined ? _entry$4.v : 0) === 0) {
				delete semAwoken[ptrType$1.keyFor(s)];
			}
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_SemacquireMutex }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._r = _r; $f.ch = ch; $f.lifo = lifo; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_Semrelease = function(s, handoff) {
		var _entry, _entry$1, _key, _key$1, ch, handoff, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; _key$1 = $f._key$1; ch = $f.ch; handoff = $f.handoff; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil);
		if (w.$length === 0) {
			$s = -1; return;
		}
		ch = (0 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: w };
		if (w.$length === 0) {
			delete semWaiters[ptrType$1.keyFor(s)];
		}
		_key$1 = s; (semAwoken || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key$1)] = { k: _key$1, v: (_entry$1 = semAwoken[ptrType$1.keyFor(s)], _entry$1 !== undefined ? _entry$1.v : 0) + (1) >>> 0 };
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f._key$1 = _key$1; $f.ch = ch; $f.handoff = handoff; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_notifyListCheck = function(size) {
		var size;
	};
	runtime_canSpin = function(i) {
		var i;
		return false;
	};
	runtime_nanotime = function() {
		return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
	};
	throw$1 = function(s) {
		var s;
		$throwRuntimeError($externalize(s, $String));
	};
	newEntry = function(i) {
		var i, i$24ptr;
		return new entry.ptr(((i$24ptr || (i$24ptr = new ptrType$3(function() { return i; }, function($v) { i = $v; })))));
	};
	Map.ptr.prototype.Load = function(key) {
		var _entry, _entry$1, _entry$2, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, e, key, m, ok, read, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; e = $f.e; key = $f.key; m = $f.m; ok = $f.ok; read = $f.read; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $ifaceNil;
		ok = false;
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = read.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (!ok && read.amended) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok && read.amended) { */ case 1:
			$r = m.mu.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$2 = $assertType(m.read.Load(), readOnly, true);
			readOnly.copy(read, _tuple$2[0]);
			_tuple$3 = (_entry$1 = read.m[$emptyInterface.keyFor(key)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
			e = _tuple$3[0];
			ok = _tuple$3[1];
			if (!ok && read.amended) {
				_tuple$4 = (_entry$2 = m.dirty[$emptyInterface.keyFor(key)], _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType$4.nil, false]);
				e = _tuple$4[0];
				ok = _tuple$4[1];
				m.missLocked();
			}
			$r = m.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (!ok) {
			_tmp = $ifaceNil;
			_tmp$1 = false;
			value = _tmp;
			ok = _tmp$1;
			$s = -1; return [value, ok];
		}
		_tuple$5 = e.load();
		value = _tuple$5[0];
		ok = _tuple$5[1];
		$s = -1; return [value, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Load }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.e = e; $f.key = key; $f.m = m; $f.ok = ok; $f.read = read; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Load = function(key) { return this.$val.Load(key); };
	entry.ptr.prototype.load = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, e, ok, p, value;
		value = $ifaceNil;
		ok = false;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		if (p === 0 || p === expunged) {
			_tmp = $ifaceNil;
			_tmp$1 = false;
			value = _tmp;
			ok = _tmp$1;
			return [value, ok];
		}
		_tmp$2 = (p).$get();
		_tmp$3 = true;
		value = _tmp$2;
		ok = _tmp$3;
		return [value, ok];
	};
	entry.prototype.load = function() { return this.$val.load(); };
	Map.ptr.prototype.Store = function(key, value) {
		var _entry, _entry$1, _entry$2, _key, _key$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, e, e$1, e$2, key, m, ok, ok$1, ok$2, read, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _key = $f._key; _key$1 = $f._key$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; e = $f.e; e$1 = $f.e$1; e$2 = $f.e$2; key = $f.key; m = $f.m; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; read = $f.read; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = [value];
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = read.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok && e.tryStore((value.$ptr || (value.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value))))) {
			$s = -1; return;
		}
		$r = m.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple$2 = $assertType(m.read.Load(), readOnly, true);
		readOnly.copy(read, _tuple$2[0]);
		_tuple$3 = (_entry$1 = read.m[$emptyInterface.keyFor(key)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
		e$1 = _tuple$3[0];
		ok$1 = _tuple$3[1];
		if (ok$1) {
			if (e$1.unexpungeLocked()) {
				_key = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: e$1 };
			}
			e$1.storeLocked((value.$ptr || (value.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value))));
		} else {
			_tuple$4 = (_entry$2 = m.dirty[$emptyInterface.keyFor(key)], _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType$4.nil, false]);
			e$2 = _tuple$4[0];
			ok$2 = _tuple$4[1];
			if (ok$2) {
				e$2.storeLocked((value.$ptr || (value.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value))));
			} else {
				if (!read.amended) {
					m.dirtyLocked();
					m.read.Store((x = new readOnly.ptr(read.m, true), new x.constructor.elem(x)));
				}
				_key$1 = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key$1)] = { k: _key$1, v: newEntry(value[0]) };
			}
		}
		$r = m.mu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Store }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._key = _key; $f._key$1 = _key$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.e = e; $f.e$1 = e$1; $f.e$2 = e$2; $f.key = key; $f.m = m; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.read = read; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Store = function(key, value) { return this.$val.Store(key, value); };
	entry.ptr.prototype.tryStore = function(i) {
		var e, i, p;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		if (p === expunged) {
			return false;
		}
		while (true) {
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), p, (i))) {
				return true;
			}
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
			if (p === expunged) {
				return false;
			}
		}
	};
	entry.prototype.tryStore = function(i) { return this.$val.tryStore(i); };
	entry.ptr.prototype.unexpungeLocked = function() {
		var e, wasExpunged;
		wasExpunged = false;
		e = this;
		wasExpunged = atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), expunged, 0);
		return wasExpunged;
	};
	entry.prototype.unexpungeLocked = function() { return this.$val.unexpungeLocked(); };
	entry.ptr.prototype.storeLocked = function(i) {
		var e, i;
		e = this;
		atomic.StorePointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), (i));
	};
	entry.prototype.storeLocked = function(i) { return this.$val.storeLocked(i); };
	Map.ptr.prototype.LoadOrStore = function(key, value) {
		var _entry, _entry$1, _entry$2, _key, _key$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, actual, actual$1, e, e$1, e$2, key, loaded, loaded$1, m, ok, ok$1, ok$2, ok$3, read, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _key = $f._key; _key$1 = $f._key$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; actual = $f.actual; actual$1 = $f.actual$1; e = $f.e; e$1 = $f.e$1; e$2 = $f.e$2; key = $f.key; loaded = $f.loaded; loaded$1 = $f.loaded$1; m = $f.m; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; read = $f.read; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		actual = $ifaceNil;
		loaded = false;
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = read.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok) {
			_tuple$2 = e.tryLoadOrStore(value);
			actual$1 = _tuple$2[0];
			loaded$1 = _tuple$2[1];
			ok$1 = _tuple$2[2];
			if (ok$1) {
				_tmp = actual$1;
				_tmp$1 = loaded$1;
				actual = _tmp;
				loaded = _tmp$1;
				$s = -1; return [actual, loaded];
			}
		}
		$r = m.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple$3 = $assertType(m.read.Load(), readOnly, true);
		readOnly.copy(read, _tuple$3[0]);
		_tuple$4 = (_entry$1 = read.m[$emptyInterface.keyFor(key)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
		e$1 = _tuple$4[0];
		ok$2 = _tuple$4[1];
		if (ok$2) {
			if (e$1.unexpungeLocked()) {
				_key = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: e$1 };
			}
			_tuple$5 = e$1.tryLoadOrStore(value);
			actual = _tuple$5[0];
			loaded = _tuple$5[1];
		} else {
			_tuple$6 = (_entry$2 = m.dirty[$emptyInterface.keyFor(key)], _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType$4.nil, false]);
			e$2 = _tuple$6[0];
			ok$3 = _tuple$6[1];
			if (ok$3) {
				_tuple$7 = e$2.tryLoadOrStore(value);
				actual = _tuple$7[0];
				loaded = _tuple$7[1];
				m.missLocked();
			} else {
				if (!read.amended) {
					m.dirtyLocked();
					m.read.Store((x = new readOnly.ptr(read.m, true), new x.constructor.elem(x)));
				}
				_key$1 = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key$1)] = { k: _key$1, v: newEntry(value) };
				_tmp$2 = value;
				_tmp$3 = false;
				actual = _tmp$2;
				loaded = _tmp$3;
			}
		}
		$r = m.mu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$4 = actual;
		_tmp$5 = loaded;
		actual = _tmp$4;
		loaded = _tmp$5;
		$s = -1; return [actual, loaded];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.LoadOrStore }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._key = _key; $f._key$1 = _key$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.actual = actual; $f.actual$1 = actual$1; $f.e = e; $f.e$1 = e$1; $f.e$2 = e$2; $f.key = key; $f.loaded = loaded; $f.loaded$1 = loaded$1; $f.m = m; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.read = read; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.LoadOrStore = function(key, value) { return this.$val.LoadOrStore(key, value); };
	entry.ptr.prototype.tryLoadOrStore = function(i) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, actual, e, i, ic, ic$24ptr, loaded, ok, p;
		actual = $ifaceNil;
		loaded = false;
		ok = false;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		if (p === expunged) {
			_tmp = $ifaceNil;
			_tmp$1 = false;
			_tmp$2 = false;
			actual = _tmp;
			loaded = _tmp$1;
			ok = _tmp$2;
			return [actual, loaded, ok];
		}
		if (!(p === 0)) {
			_tmp$3 = (p).$get();
			_tmp$4 = true;
			_tmp$5 = true;
			actual = _tmp$3;
			loaded = _tmp$4;
			ok = _tmp$5;
			return [actual, loaded, ok];
		}
		ic = i;
		while (true) {
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), 0, ((ic$24ptr || (ic$24ptr = new ptrType$3(function() { return ic; }, function($v) { ic = $v; })))))) {
				_tmp$6 = i;
				_tmp$7 = false;
				_tmp$8 = true;
				actual = _tmp$6;
				loaded = _tmp$7;
				ok = _tmp$8;
				return [actual, loaded, ok];
			}
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
			if (p === expunged) {
				_tmp$9 = $ifaceNil;
				_tmp$10 = false;
				_tmp$11 = false;
				actual = _tmp$9;
				loaded = _tmp$10;
				ok = _tmp$11;
				return [actual, loaded, ok];
			}
			if (!(p === 0)) {
				_tmp$12 = (p).$get();
				_tmp$13 = true;
				_tmp$14 = true;
				actual = _tmp$12;
				loaded = _tmp$13;
				ok = _tmp$14;
				return [actual, loaded, ok];
			}
		}
	};
	entry.prototype.tryLoadOrStore = function(i) { return this.$val.tryLoadOrStore(i); };
	Map.ptr.prototype.Delete = function(key) {
		var _entry, _entry$1, _tuple, _tuple$1, _tuple$2, _tuple$3, e, key, m, ok, read, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; e = $f.e; key = $f.key; m = $f.m; ok = $f.ok; read = $f.read; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = read.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (!ok && read.amended) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok && read.amended) { */ case 1:
			$r = m.mu.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$2 = $assertType(m.read.Load(), readOnly, true);
			readOnly.copy(read, _tuple$2[0]);
			_tuple$3 = (_entry$1 = read.m[$emptyInterface.keyFor(key)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
			e = _tuple$3[0];
			ok = _tuple$3[1];
			if (!ok && read.amended) {
				delete m.dirty[$emptyInterface.keyFor(key)];
			}
			$r = m.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (ok) {
			e.delete$();
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Delete }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.e = e; $f.key = key; $f.m = m; $f.ok = ok; $f.read = read; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Delete = function(key) { return this.$val.Delete(key); };
	entry.ptr.prototype.delete$ = function() {
		var e, hadValue, p;
		hadValue = false;
		e = this;
		while (true) {
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
			if (p === 0 || p === expunged) {
				hadValue = false;
				return hadValue;
			}
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), p, 0)) {
				hadValue = true;
				return hadValue;
			}
		}
	};
	entry.prototype.delete$ = function() { return this.$val.delete$(); };
	Map.ptr.prototype.Range = function(f) {
		var _entry, _i, _keys, _r, _ref, _tuple, _tuple$1, _tuple$2, e, f, k, m, ok, read, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; e = $f.e; f = $f.f; k = $f.k; m = $f.m; ok = $f.ok; read = $f.read; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		/* */ if (read.amended) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (read.amended) { */ case 1:
			$r = m.mu.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$1 = $assertType(m.read.Load(), readOnly, true);
			readOnly.copy(read, _tuple$1[0]);
			if (read.amended) {
				readOnly.copy(read, new readOnly.ptr(m.dirty, false));
				m.read.Store(new read.constructor.elem(read));
				m.dirty = false;
				m.misses = 0;
			}
			$r = m.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_ref = read.m;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 5:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 6; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 5; continue;
			}
			k = _entry.k;
			e = _entry.v;
			_tuple$2 = e.load();
			v = _tuple$2[0];
			ok = _tuple$2[1];
			/* */ if (!ok) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!ok) { */ case 7:
				_i++;
				/* continue; */ $s = 5; continue;
			/* } */ case 8:
			_r = f(k, v); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!_r) { */ case 9:
				/* break; */ $s = 6; continue;
			/* } */ case 10:
			_i++;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Range }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.e = e; $f.f = f; $f.k = k; $f.m = m; $f.ok = ok; $f.read = read; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Range = function(f) { return this.$val.Range(f); };
	Map.ptr.prototype.missLocked = function() {
		var m, x;
		m = this;
		m.misses = m.misses + (1) >> 0;
		if (m.misses < $keys(m.dirty).length) {
			return;
		}
		m.read.Store((x = new readOnly.ptr(m.dirty, false), new x.constructor.elem(x)));
		m.dirty = false;
		m.misses = 0;
	};
	Map.prototype.missLocked = function() { return this.$val.missLocked(); };
	Map.ptr.prototype.dirtyLocked = function() {
		var _entry, _i, _key, _keys, _ref, _tuple, e, k, m, read, x;
		m = this;
		if (!(m.dirty === false)) {
			return;
		}
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		m.dirty = (x = $keys(read.m).length, ((x < 0 || x > 2147483647) ? $throwRuntimeError("makemap: size out of range") : {}));
		_ref = read.m;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			e = _entry.v;
			if (!e.tryExpungeLocked()) {
				_key = k; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: e };
			}
			_i++;
		}
	};
	Map.prototype.dirtyLocked = function() { return this.$val.dirtyLocked(); };
	entry.ptr.prototype.tryExpungeLocked = function() {
		var e, isExpunged, p;
		isExpunged = false;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		while (true) {
			if (!(p === 0)) { break; }
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), 0, expunged)) {
				isExpunged = true;
				return isExpunged;
			}
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		}
		isExpunged = p === expunged;
		return isExpunged;
	};
	entry.prototype.tryExpungeLocked = function() { return this.$val.tryExpungeLocked(); };
	Mutex.ptr.prototype.Lock = function() {
		var awoke, delta, iter, m, new$1, old, queueLifo, starving, waitStartTime, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; awoke = $f.awoke; delta = $f.delta; iter = $f.iter; m = $f.m; new$1 = $f.new$1; old = $f.old; queueLifo = $f.queueLifo; starving = $f.starving; waitStartTime = $f.waitStartTime; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), 0, 1)) {
			if (false) {
				race.Acquire((m));
			}
			$s = -1; return;
		}
		waitStartTime = new $Int64(0, 0);
		starving = false;
		awoke = false;
		iter = 0;
		old = m.state;
		/* while (true) { */ case 1:
			/* */ if (((old & 5) === 1) && runtime_canSpin(iter)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (((old & 5) === 1) && runtime_canSpin(iter)) { */ case 3:
				if (!awoke && ((old & 2) === 0) && !(((old >> 3 >> 0) === 0)) && atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, old | 2)) {
					awoke = true;
				}
				runtime_doSpin();
				iter = iter + (1) >> 0;
				old = m.state;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			new$1 = old;
			if ((old & 4) === 0) {
				new$1 = new$1 | (1);
			}
			if (!(((old & 5) === 0))) {
				new$1 = new$1 + (8) >> 0;
			}
			if (starving && !(((old & 1) === 0))) {
				new$1 = new$1 | (4);
			}
			if (awoke) {
				if ((new$1 & 2) === 0) {
					throw$1("sync: inconsistent mutex state");
				}
				new$1 = (new$1 & ~(2)) >> 0;
			}
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 5:
				if ((old & 5) === 0) {
					/* break; */ $s = 2; continue;
				}
				queueLifo = !((waitStartTime.$high === 0 && waitStartTime.$low === 0));
				if ((waitStartTime.$high === 0 && waitStartTime.$low === 0)) {
					waitStartTime = runtime_nanotime();
				}
				$r = runtime_SemacquireMutex((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), queueLifo); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				starving = starving || (x = (x$1 = runtime_nanotime(), new $Int64(x$1.$high - waitStartTime.$high, x$1.$low - waitStartTime.$low)), (x.$high > 0 || (x.$high === 0 && x.$low > 1000000)));
				old = m.state;
				if (!(((old & 4) === 0))) {
					if (!(((old & 3) === 0)) || ((old >> 3 >> 0) === 0)) {
						throw$1("sync: inconsistent mutex state");
					}
					delta = -7;
					if (!starving || ((old >> 3 >> 0) === 1)) {
						delta = delta - (4) >> 0;
					}
					atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), delta);
					/* break; */ $s = 2; continue;
				}
				awoke = true;
				iter = 0;
				$s = 7; continue;
			/* } else { */ case 6:
				old = m.state;
			/* } */ case 7:
		/* } */ $s = 1; continue; case 2:
		if (false) {
			race.Acquire((m));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Lock }; } $f.awoke = awoke; $f.delta = delta; $f.iter = iter; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.queueLifo = queueLifo; $f.starving = starving; $f.waitStartTime = waitStartTime; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (false) {
			$unused(m.state);
			race.Release((m));
		}
		new$1 = atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), -1);
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			throw$1("sync: unlock of unlocked mutex");
		}
		/* */ if ((new$1 & 4) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((new$1 & 4) === 0) { */ case 1:
			old = new$1;
			/* while (true) { */ case 4:
				if (((old >> 3 >> 0) === 0) || !(((old & 7) === 0))) {
					$s = -1; return;
				}
				new$1 = ((old - 8 >> 0)) | 2;
				/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 6:
					$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), false); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 7:
				old = m.state;
			/* } */ $s = 4; continue; case 5:
			$s = 3; continue;
		/* } else { */ case 2:
			$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), true); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Unlock }; } $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	poolCleanup = function() {
		var _i, _i$1, _ref, _ref$1, i, i$1, j, l, p, x;
		_ref = allPools;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= allPools.$length) ? ($throwRuntimeError("index out of range"), undefined) : allPools.$array[allPools.$offset + i] = ptrType.nil);
			i$1 = 0;
			while (true) {
				if (!(i$1 < ((p.localSize >> 0)))) { break; }
				l = indexLocal(p.local, i$1);
				l.poolLocalInternal.private$0 = $ifaceNil;
				_ref$1 = l.poolLocalInternal.shared;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					j = _i$1;
					(x = l.poolLocalInternal.shared, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j] = $ifaceNil));
					_i$1++;
				}
				l.poolLocalInternal.shared = sliceType$4.nil;
				i$1 = i$1 + (1) >> 0;
			}
			p.local = 0;
			p.localSize = 0;
			_i++;
		}
		allPools = new sliceType([]);
	};
	init = function() {
		runtime_registerPoolCleanup(poolCleanup);
	};
	indexLocal = function(l, i) {
		var i, l, lp;
		lp = (((l) + ($imul(((i >>> 0)), 128) >>> 0) >>> 0));
		return ($pointerOfStructConversion(lp, ptrType$7));
	};
	init$1 = function() {
		var n;
		n = new notifyList.ptr(0, 0, 0, 0, 0);
		runtime_notifyListCheck(20);
	};
	runtime_doSpin = function() {
		$throwRuntimeError("native function not implemented: sync.runtime_doSpin");
	};
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "getSlow", name: "getSlow", pkg: "sync", typ: $funcType([], [$emptyInterface], false)}, {prop: "pin", name: "pin", pkg: "sync", typ: $funcType([], [ptrType$7], false)}, {prop: "pinSlow", name: "pinSlow", pkg: "sync", typ: $funcType([], [ptrType$7], false)}];
	ptrType$15.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([$emptyInterface], [$emptyInterface, $Bool], false)}, {prop: "Store", name: "Store", pkg: "", typ: $funcType([$emptyInterface, $emptyInterface], [], false)}, {prop: "LoadOrStore", name: "LoadOrStore", pkg: "", typ: $funcType([$emptyInterface, $emptyInterface], [$emptyInterface, $Bool], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "Range", name: "Range", pkg: "", typ: $funcType([funcType$1], [], false)}, {prop: "missLocked", name: "missLocked", pkg: "sync", typ: $funcType([], [], false)}, {prop: "dirtyLocked", name: "dirtyLocked", pkg: "sync", typ: $funcType([], [], false)}];
	ptrType$4.methods = [{prop: "load", name: "load", pkg: "sync", typ: $funcType([], [$emptyInterface, $Bool], false)}, {prop: "tryStore", name: "tryStore", pkg: "sync", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "unexpungeLocked", name: "unexpungeLocked", pkg: "sync", typ: $funcType([], [$Bool], false)}, {prop: "storeLocked", name: "storeLocked", pkg: "sync", typ: $funcType([ptrType$3], [], false)}, {prop: "tryLoadOrStore", name: "tryLoadOrStore", pkg: "sync", typ: $funcType([$emptyInterface], [$emptyInterface, $Bool, $Bool], false)}, {prop: "delete$", name: "delete", pkg: "sync", typ: $funcType([], [$Bool], false)}, {prop: "tryExpungeLocked", name: "tryExpungeLocked", pkg: "sync", typ: $funcType([], [$Bool], false)}];
	ptrType$16.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	Pool.init("sync", [{prop: "local", name: "local", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "localSize", name: "localSize", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "store", name: "store", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "New", name: "New", anonymous: false, exported: true, typ: funcType, tag: ""}]);
	Map.init("sync", [{prop: "mu", name: "mu", anonymous: false, exported: false, typ: Mutex, tag: ""}, {prop: "read", name: "read", anonymous: false, exported: false, typ: atomic.Value, tag: ""}, {prop: "dirty", name: "dirty", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "misses", name: "misses", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	readOnly.init("sync", [{prop: "m", name: "m", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "amended", name: "amended", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	entry.init("sync", [{prop: "p", name: "p", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}]);
	Mutex.init("sync", [{prop: "state", name: "state", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "sema", name: "sema", anonymous: false, exported: false, typ: $Uint32, tag: ""}]);
	poolLocalInternal.init("sync", [{prop: "private$0", name: "private", anonymous: false, exported: false, typ: $emptyInterface, tag: ""}, {prop: "shared", name: "shared", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "Mutex", name: "Mutex", anonymous: true, exported: true, typ: Mutex, tag: ""}]);
	poolLocal.init("sync", [{prop: "poolLocalInternal", name: "poolLocalInternal", anonymous: true, exported: false, typ: poolLocalInternal, tag: ""}, {prop: "pad", name: "pad", anonymous: false, exported: false, typ: arrayType$2, tag: ""}]);
	notifyList.init("sync", [{prop: "wait", name: "wait", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "notify", name: "notify", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "lock", name: "lock", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "head", name: "head", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "tail", name: "tail", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = race.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		allPools = sliceType.nil;
		semWaiters = {};
		semAwoken = {};
		expunged = (new Uint8Array(8));
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, $init, errors, sync, atomic, Reader, Writer, ReaderFrom, WriterTo, ByteScanner, RuneScanner, stringWriter, LimitedReader, sliceType, ptrType$1, errWhence, errOffset, WriteString, Copy, copyBuffer;
	errors = $packages["errors"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	Reader = $pkg.Reader = $newType(8, $kindInterface, "io.Reader", true, "io", true, null);
	Writer = $pkg.Writer = $newType(8, $kindInterface, "io.Writer", true, "io", true, null);
	ReaderFrom = $pkg.ReaderFrom = $newType(8, $kindInterface, "io.ReaderFrom", true, "io", true, null);
	WriterTo = $pkg.WriterTo = $newType(8, $kindInterface, "io.WriterTo", true, "io", true, null);
	ByteScanner = $pkg.ByteScanner = $newType(8, $kindInterface, "io.ByteScanner", true, "io", true, null);
	RuneScanner = $pkg.RuneScanner = $newType(8, $kindInterface, "io.RuneScanner", true, "io", true, null);
	stringWriter = $pkg.stringWriter = $newType(8, $kindInterface, "io.stringWriter", true, "io", false, null);
	LimitedReader = $pkg.LimitedReader = $newType(0, $kindStruct, "io.LimitedReader", true, "io", true, function(R_, N_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = $ifaceNil;
			this.N = new $Int64(0, 0);
			return;
		}
		this.R = R_;
		this.N = N_;
	});
	sliceType = $sliceType($Uint8);
	ptrType$1 = $ptrType(LimitedReader);
	WriteString = function(w, s) {
		var _r, _r$1, _tuple, _tuple$1, _tuple$2, err, n, ok, s, sw, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; n = $f.n; ok = $f.ok; s = $f.s; sw = $f.sw; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_tuple = $assertType(w, stringWriter, true);
		sw = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = sw.WriteString(s); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			n = _tuple$1[0];
			err = _tuple$1[1];
			$s = -1; return [n, err];
		/* } */ case 2:
		_r$1 = w.Write((new sliceType($stringToBytes(s)))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$2 = _r$1;
		n = _tuple$2[0];
		err = _tuple$2[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: WriteString }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.n = n; $f.ok = ok; $f.s = s; $f.sw = sw; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.WriteString = WriteString;
	Copy = function(dst, src) {
		var _r, _tuple, dst, err, src, written, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; dst = $f.dst; err = $f.err; src = $f.src; written = $f.written; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		written = new $Int64(0, 0);
		err = $ifaceNil;
		_r = copyBuffer(dst, src, sliceType.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		written = _tuple[0];
		err = _tuple[1];
		$s = -1; return [written, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Copy }; } $f._r = _r; $f._tuple = _tuple; $f.dst = dst; $f.err = err; $f.src = src; $f.written = written; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Copy = Copy;
	copyBuffer = function(dst, src, buf) {
		var _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, buf, dst, er, err, ew, l, nr, nw, ok, ok$1, ok$2, rt, size, src, written, wt, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; buf = $f.buf; dst = $f.dst; er = $f.er; err = $f.err; ew = $f.ew; l = $f.l; nr = $f.nr; nw = $f.nw; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; rt = $f.rt; size = $f.size; src = $f.src; written = $f.written; wt = $f.wt; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		written = new $Int64(0, 0);
		err = $ifaceNil;
		_tuple = $assertType(src, WriterTo, true);
		wt = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = wt.WriteTo(dst); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			written = _tuple$1[0];
			err = _tuple$1[1];
			$s = -1; return [written, err];
		/* } */ case 2:
		_tuple$2 = $assertType(dst, ReaderFrom, true);
		rt = _tuple$2[0];
		ok$1 = _tuple$2[1];
		/* */ if (ok$1) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (ok$1) { */ case 4:
			_r$1 = rt.ReadFrom(src); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$3 = _r$1;
			written = _tuple$3[0];
			err = _tuple$3[1];
			$s = -1; return [written, err];
		/* } */ case 5:
		size = 32768;
		_tuple$4 = $assertType(src, ptrType$1, true);
		l = _tuple$4[0];
		ok$2 = _tuple$4[1];
		if (ok$2 && (x = (new $Int64(0, size)), x$1 = l.N, (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low > x$1.$low)))) {
			if ((x$2 = l.N, (x$2.$high < 0 || (x$2.$high === 0 && x$2.$low < 1)))) {
				size = 1;
			} else {
				size = (((x$3 = l.N, x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0));
			}
		}
		if (buf === sliceType.nil) {
			buf = $makeSlice(sliceType, size);
		}
		/* while (true) { */ case 7:
			_r$2 = src.Read(buf); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$5 = _r$2;
			nr = _tuple$5[0];
			er = _tuple$5[1];
			/* */ if (nr > 0) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (nr > 0) { */ case 10:
				_r$3 = dst.Write($subslice(buf, 0, nr)); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$6 = _r$3;
				nw = _tuple$6[0];
				ew = _tuple$6[1];
				if (nw > 0) {
					written = (x$4 = (new $Int64(0, nw)), new $Int64(written.$high + x$4.$high, written.$low + x$4.$low));
				}
				if (!($interfaceIsEqual(ew, $ifaceNil))) {
					err = ew;
					/* break; */ $s = 8; continue;
				}
				if (!((nr === nw))) {
					err = $pkg.ErrShortWrite;
					/* break; */ $s = 8; continue;
				}
			/* } */ case 11:
			if (!($interfaceIsEqual(er, $ifaceNil))) {
				if (!($interfaceIsEqual(er, $pkg.EOF))) {
					err = er;
				}
				/* break; */ $s = 8; continue;
			}
		/* } */ $s = 7; continue; case 8:
		_tmp = written;
		_tmp$1 = err;
		written = _tmp;
		err = _tmp$1;
		$s = -1; return [written, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: copyBuffer }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f.buf = buf; $f.dst = dst; $f.er = er; $f.err = err; $f.ew = ew; $f.l = l; $f.nr = nr; $f.nw = nw; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.rt = rt; $f.size = size; $f.src = src; $f.written = written; $f.wt = wt; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	LimitedReader.ptr.prototype.Read = function(p) {
		var _r, _tmp, _tmp$1, _tuple, err, l, n, p, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		l = this;
		if ((x = l.N, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			_tmp = 0;
			_tmp$1 = $pkg.EOF;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if ((x$1 = (new $Int64(0, p.$length)), x$2 = l.N, (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			p = $subslice(p, 0, $flatten64(l.N));
		}
		_r = l.R.Read(p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		l.N = (x$3 = l.N, x$4 = (new $Int64(0, n)), new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low));
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: LimitedReader.ptr.prototype.Read }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	LimitedReader.prototype.Read = function(p) { return this.$val.Read(p); };
	ptrType$1.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}];
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	Writer.init([{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	ReaderFrom.init([{prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([Reader], [$Int64, $error], false)}]);
	WriterTo.init([{prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([Writer], [$Int64, $error], false)}]);
	ByteScanner.init([{prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}]);
	RuneScanner.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}]);
	stringWriter.init([{prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}]);
	LimitedReader.init("", [{prop: "R", name: "R", anonymous: false, exported: true, typ: Reader, tag: ""}, {prop: "N", name: "N", anonymous: false, exported: true, typ: $Int64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrShortWrite = errors.New("short write");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["hash"] = (function() {
	var $pkg = {}, $init, io, Hash, sliceType;
	io = $packages["io"];
	Hash = $pkg.Hash = $newType(8, $kindInterface, "hash.Hash", true, "hash", true, null);
	sliceType = $sliceType($Uint8);
	Hash.init([{prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, $init, js, arrayType, arrayType$1, arrayType$2, structType, math, zero, posInf, negInf, nan, buf, Exp, Frexp, Inf, IsInf, IsNaN, Ldexp, Log, Log2, Pow, Signbit, Sqrt, init, Float32bits, Float32frombits, Float64bits, Float64frombits, Abs, normalize, frexp, log2;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	arrayType = $arrayType($Uint32, 2);
	arrayType$1 = $arrayType($Float32, 2);
	arrayType$2 = $arrayType($Float64, 1);
	structType = $structType("math", [{prop: "uint32array", name: "uint32array", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "float32array", name: "float32array", anonymous: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "float64array", name: "float64array", anonymous: false, exported: false, typ: arrayType$2, tag: ""}]);
	Exp = function(x) {
		var x;
		return $parseFloat(math.exp(x));
	};
	$pkg.Exp = Exp;
	Frexp = function(f) {
		var _tuple, exp$1, f, frac;
		frac = 0;
		exp$1 = 0;
		_tuple = frexp(f);
		frac = _tuple[0];
		exp$1 = _tuple[1];
		return [frac, exp$1];
	};
	$pkg.Frexp = Frexp;
	Inf = function(sign) {
		var sign;
		if (sign >= 0) {
			return posInf;
		} else {
			return negInf;
		}
	};
	$pkg.Inf = Inf;
	IsInf = function(f, sign) {
		var f, sign;
		if (f === posInf) {
			return sign >= 0;
		}
		if (f === negInf) {
			return sign <= 0;
		}
		return false;
	};
	$pkg.IsInf = IsInf;
	IsNaN = function(f) {
		var f, is;
		is = false;
		is = !((f === f));
		return is;
	};
	$pkg.IsNaN = IsNaN;
	Ldexp = function(frac, exp$1) {
		var exp$1, frac;
		if (frac === 0) {
			return frac;
		}
		if (exp$1 >= 1024) {
			return frac * $parseFloat(math.pow(2, 1023)) * $parseFloat(math.pow(2, exp$1 - 1023 >> 0));
		}
		if (exp$1 <= -1024) {
			return frac * $parseFloat(math.pow(2, -1023)) * $parseFloat(math.pow(2, exp$1 + 1023 >> 0));
		}
		return frac * $parseFloat(math.pow(2, exp$1));
	};
	$pkg.Ldexp = Ldexp;
	Log = function(x) {
		var x;
		if (!((x === x))) {
			return nan;
		}
		return $parseFloat(math.log(x));
	};
	$pkg.Log = Log;
	Log2 = function(x) {
		var x;
		return log2(x);
	};
	$pkg.Log2 = Log2;
	Pow = function(x, y) {
		var x, y;
		if ((x === 1) || ((x === -1) && ((y === posInf) || (y === negInf)))) {
			return 1;
		}
		return $parseFloat(math.pow(x, y));
	};
	$pkg.Pow = Pow;
	Signbit = function(x) {
		var x;
		return x < 0 || (1 / x === negInf);
	};
	$pkg.Signbit = Signbit;
	Sqrt = function(x) {
		var x;
		return $parseFloat(math.sqrt(x));
	};
	$pkg.Sqrt = Sqrt;
	init = function() {
		var ab;
		ab = new ($global.ArrayBuffer)(8);
		buf.uint32array = new ($global.Uint32Array)(ab);
		buf.float32array = new ($global.Float32Array)(ab);
		buf.float64array = new ($global.Float64Array)(ab);
	};
	Float32bits = function(f) {
		var f;
		buf.float32array[0] = f;
		return buf.uint32array[0];
	};
	$pkg.Float32bits = Float32bits;
	Float32frombits = function(b) {
		var b;
		buf.uint32array[0] = b;
		return buf.float32array[0];
	};
	$pkg.Float32frombits = Float32frombits;
	Float64bits = function(f) {
		var f, x, x$1;
		buf.float64array[0] = f;
		return (x = $shiftLeft64((new $Uint64(0, buf.uint32array[1])), 32), x$1 = (new $Uint64(0, buf.uint32array[0])), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	$pkg.Float64bits = Float64bits;
	Float64frombits = function(b) {
		var b;
		buf.uint32array[0] = ((b.$low >>> 0));
		buf.uint32array[1] = (($shiftRightUint64(b, 32).$low >>> 0));
		return buf.float64array[0];
	};
	$pkg.Float64frombits = Float64frombits;
	Abs = function(x) {
		var x, x$1;
		return Float64frombits((x$1 = Float64bits(x), new $Uint64(x$1.$high & ~2147483648, (x$1.$low & ~0) >>> 0)));
	};
	$pkg.Abs = Abs;
	normalize = function(x) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, exp$1, x, y;
		y = 0;
		exp$1 = 0;
		if (Abs(x) < 2.2250738585072014e-308) {
			_tmp = x * 4.503599627370496e+15;
			_tmp$1 = -52;
			y = _tmp;
			exp$1 = _tmp$1;
			return [y, exp$1];
		}
		_tmp$2 = x;
		_tmp$3 = 0;
		y = _tmp$2;
		exp$1 = _tmp$3;
		return [y, exp$1];
	};
	frexp = function(f) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, exp$1, f, frac, x, x$1, x$2, x$3;
		frac = 0;
		exp$1 = 0;
		if ((f === 0)) {
			_tmp = f;
			_tmp$1 = 0;
			frac = _tmp;
			exp$1 = _tmp$1;
			return [frac, exp$1];
		} else if (IsInf(f, 0) || IsNaN(f)) {
			_tmp$2 = f;
			_tmp$3 = 0;
			frac = _tmp$2;
			exp$1 = _tmp$3;
			return [frac, exp$1];
		}
		_tuple = normalize(f);
		f = _tuple[0];
		exp$1 = _tuple[1];
		x = Float64bits(f);
		exp$1 = exp$1 + ((((((x$1 = $shiftRightUint64(x, 52), new $Uint64(x$1.$high & 0, (x$1.$low & 2047) >>> 0)).$low >> 0)) - 1023 >> 0) + 1 >> 0)) >> 0;
		x = (x$2 = new $Uint64(2146435072, 0), new $Uint64(x.$high & ~x$2.$high, (x.$low & ~x$2.$low) >>> 0));
		x = (x$3 = new $Uint64(1071644672, 0), new $Uint64(x.$high | x$3.$high, (x.$low | x$3.$low) >>> 0));
		frac = Float64frombits(x);
		return [frac, exp$1];
	};
	log2 = function(x) {
		var _tuple, exp$1, frac, x;
		_tuple = Frexp(x);
		frac = _tuple[0];
		exp$1 = _tuple[1];
		if (frac === 0.5) {
			return ((exp$1 - 1 >> 0));
		}
		return Log(frac) * 1.4426950408889634 + (exp$1);
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buf = new structType.ptr(arrayType.zero(), arrayType$1.zero(), arrayType$2.zero());
		math = $global.Math;
		zero = 0;
		posInf = 1 / zero;
		negInf = -1 / zero;
		nan = 0 / zero;
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, $init, acceptRange, first, acceptRanges, DecodeRune, DecodeRuneInString, DecodeLastRune, DecodeLastRuneInString, RuneLen, EncodeRune, RuneCount, RuneCountInString, RuneStart, ValidRune;
	acceptRange = $pkg.acceptRange = $newType(0, $kindStruct, "utf8.acceptRange", true, "unicode/utf8", false, function(lo_, hi_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lo = 0;
			this.hi = 0;
			return;
		}
		this.lo = lo_;
		this.hi = hi_;
	});
	DecodeRune = function(p) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, b1, b2, b3, mask, n, p, p0, r, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = p.$length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		p0 = (0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]);
		x = ((p0 < 0 || p0 >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[p0]);
		if (x >= 240) {
			mask = (((x >> 0)) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = (((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]) >> 0)) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
		if (n < ((sz >> 0))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		b1 = (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]);
		if (b1 < accept.lo || accept.hi < b1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = (((((p0 & 31) >>> 0) >> 0)) << 6 >> 0) | ((((b1 & 63) >>> 0) >> 0));
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		b2 = (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]);
		if (b2 < 128 || 191 < b2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = ((((((p0 & 15) >>> 0) >> 0)) << 12 >> 0) | (((((b1 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((b2 & 63) >>> 0) >> 0));
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		b3 = (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]);
		if (b3 < 128 || 191 < b3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = (((((((p0 & 7) >>> 0) >> 0)) << 18 >> 0) | (((((b1 & 63) >>> 0) >> 0)) << 12 >> 0)) | (((((b2 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((b3 & 63) >>> 0) >> 0));
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRune = DecodeRune;
	DecodeRuneInString = function(s) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, mask, n, r, s, s0, s1, s2, s3, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = s.length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		s0 = s.charCodeAt(0);
		x = ((s0 < 0 || s0 >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[s0]);
		if (x >= 240) {
			mask = (((x >> 0)) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = ((((s.charCodeAt(0) >> 0)) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
		if (n < ((sz >> 0))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		s1 = s.charCodeAt(1);
		if (s1 < accept.lo || accept.hi < s1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = (((((s0 & 31) >>> 0) >> 0)) << 6 >> 0) | ((((s1 & 63) >>> 0) >> 0));
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		s2 = s.charCodeAt(2);
		if (s2 < 128 || 191 < s2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = ((((((s0 & 15) >>> 0) >> 0)) << 12 >> 0) | (((((s1 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((s2 & 63) >>> 0) >> 0));
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		s3 = s.charCodeAt(3);
		if (s3 < 128 || 191 < s3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = (((((((s0 & 7) >>> 0) >> 0)) << 18 >> 0) | (((((s1 & 63) >>> 0) >> 0)) << 12 >> 0)) | (((((s2 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((s3 & 63) >>> 0) >> 0));
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRuneInString = DecodeRuneInString;
	DecodeLastRune = function(p) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, p, r, size, start;
		r = 0;
		size = 0;
		end = p.$length;
		if (end === 0) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = ((((start < 0 || start >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + start]) >> 0));
		if (r < 128) {
			_tmp$2 = r;
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(((start < 0 || start >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + start]))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRune($subslice(p, start, end));
		r = _tuple[0];
		size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r;
		_tmp$7 = size;
		r = _tmp$6;
		size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRune = DecodeLastRune;
	DecodeLastRuneInString = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, r, s, size, start;
		r = 0;
		size = 0;
		end = s.length;
		if (end === 0) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = ((s.charCodeAt(start) >> 0));
		if (r < 128) {
			_tmp$2 = r;
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(s.charCodeAt(start))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRuneInString($substring(s, start, end));
		r = _tuple[0];
		size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r;
		_tmp$7 = size;
		r = _tmp$6;
		size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRuneInString = DecodeLastRuneInString;
	RuneLen = function(r) {
		var r;
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	$pkg.RuneLen = RuneLen;
	EncodeRune = function(p, r) {
		var i, p, r;
		i = ((r >>> 0));
		if (i <= 127) {
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((r << 24 >>> 24)));
			return 1;
		} else if (i <= 2047) {
			$unused((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((192 | (((r >> 6 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 2;
		} else if ((i > 1114111) || (55296 <= i && i <= 57343)) {
			r = 65533;
			$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | (((r >> 12 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 3;
		} else if (i <= 65535) {
			$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | (((r >> 12 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 3;
		} else {
			$unused((3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((240 | (((r >> 18 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 12 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 4;
		}
	};
	$pkg.EncodeRune = EncodeRune;
	RuneCount = function(p) {
		var accept, c, c$1, c$2, c$3, i, n, np, p, size, x, x$1, x$2, x$3, x$4;
		np = p.$length;
		n = 0;
		i = 0;
		while (true) {
			if (!(i < np)) { break; }
			n = n + (1) >> 0;
			c = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
			if (c < 128) {
				i = i + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				continue;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > np) {
				i = i + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c$1 = (x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$2]));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$3]));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = (x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$4]));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
		}
		return n;
	};
	$pkg.RuneCount = RuneCount;
	RuneCountInString = function(s) {
		var accept, c, c$1, c$2, c$3, i, n, ns, s, size, x, x$1;
		n = 0;
		ns = s.length;
		i = 0;
		while (true) {
			if (!(i < ns)) { break; }
			c = s.charCodeAt(i);
			if (c < 128) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > ns) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c$1 = s.charCodeAt((i + 1 >> 0));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = s.charCodeAt((i + 2 >> 0));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = s.charCodeAt((i + 3 >> 0));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
			n = n + (1) >> 0;
		}
		n = n;
		return n;
	};
	$pkg.RuneCountInString = RuneCountInString;
	RuneStart = function(b) {
		var b;
		return !((((b & 192) >>> 0) === 128));
	};
	$pkg.RuneStart = RuneStart;
	ValidRune = function(r) {
		var r;
		if (0 <= r && r < 55296) {
			return true;
		} else if (57343 < r && r <= 1114111) {
			return true;
		}
		return false;
	};
	$pkg.ValidRune = ValidRune;
	acceptRange.init("unicode/utf8", [{prop: "lo", name: "lo", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "hi", name: "hi", anonymous: false, exported: false, typ: $Uint8, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = $toNativeArray($kindUint
		acceptRanges = $toNativeArray($kindStruct, [new acceptRange.ptr(128, 191), new acceptRange.ptr(160, 191), new acceptRange.ptr(128, 159), new acceptRange.ptr(144, 191), new acceptRange.ptr(128, 143)]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, $init, errors, math, utf8, NumError, decimal, leftCheat, extFloat, floatInfo, decimalSlice, sliceType$3, sliceType$4, sliceType$5, arrayType, sliceType$6, ptrType, arrayType$1, arrayType$2, ptrType$1, arrayType$3, arrayType$4, ptrType$2, ptrType$3, ptrType$4, optimize, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float32info$24ptr, float64info, float64info$24ptr, isPrint16, isNotPrint16, isPrint32, isNotPrint32, isGraphic, shifts, FormatBool, syntaxError, rangeError, baseError, bitSizeError, ParseUint, ParseInt, Atoi, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, min, max, FormatInt, Itoa, AppendInt, small, formatBits, quoteWith, appendQuotedWith, appendQuotedRuneWith, appendEscapedRune, Quote, AppendQuote, AppendQuoteToASCII, AppendQuoteRune, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint, isInGraphicList;
	errors = $packages["errors"];
	math = $packages["math"];
	utf8 = $packages["unicode/utf8"];
	NumError = $pkg.NumError = $newType(0, $kindStruct, "strconv.NumError", true, "strconv", true, function(Func_, Num_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Func = "";
			this.Num = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Func = Func_;
		this.Num = Num_;
		this.Err = Err_;
	});
	decimal = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", true, "strconv", false, function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = arrayType.zero();
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			this.trunc = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
		this.trunc = trunc_;
	});
	leftCheat = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", true, "strconv", false, function(delta_, cutoff_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.delta = 0;
			this.cutoff = "";
			return;
		}
		this.delta = delta_;
		this.cutoff = cutoff_;
	});
	extFloat = $pkg.extFloat = $newType(0, $kindStruct, "strconv.extFloat", true, "strconv", false, function(mant_, exp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mant = new $Uint64(0, 0);
			this.exp = 0;
			this.neg = false;
			return;
		}
		this.mant = mant_;
		this.exp = exp_;
		this.neg = neg_;
	});
	floatInfo = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", true, "strconv", false, function(mantbits_, expbits_, bias_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mantbits = 0;
			this.expbits = 0;
			this.bias = 0;
			return;
		}
		this.mantbits = mantbits_;
		this.expbits = expbits_;
		this.bias = bias_;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", true, "strconv", false, function(d_, nd_, dp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = sliceType$6.nil;
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
	});
	sliceType$3 = $sliceType(leftCheat);
	sliceType$4 = $sliceType($Uint16);
	sliceType$5 = $sliceType($Uint32);
	arrayType = $arrayType($Uint8, 800);
	sliceType$6 = $sliceType($Uint8);
	ptrType = $ptrType(NumError);
	arrayType$1 = $arrayType($Uint8, 24);
	arrayType$2 = $arrayType($Uint8, 32);
	ptrType$1 = $ptrType(floatInfo);
	arrayType$3 = $arrayType($Uint8, 65);
	arrayType$4 = $arrayType($Uint8, 4);
	ptrType$2 = $ptrType(decimal);
	ptrType$3 = $ptrType(decimalSlice);
	ptrType$4 = $ptrType(extFloat);
	FormatBool = function(b) {
		var b;
		if (b) {
			return "true";
		}
		return "false";
	};
	$pkg.FormatBool = FormatBool;
	NumError.ptr.prototype.Error = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NumError.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	NumError.prototype.Error = function() { return this.$val.Error(); };
	syntaxError = function(fn, str) {
		var fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrSyntax);
	};
	rangeError = function(fn, str) {
		var fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrRange);
	};
	baseError = function(fn, str, base) {
		var base, fn, str;
		return new NumError.ptr(fn, str, errors.New("invalid base " + Itoa(base)));
	};
	bitSizeError = function(fn, str, bitSize) {
		var bitSize, fn, str;
		return new NumError.ptr(fn, str, errors.New("invalid bit size " + Itoa(bitSize)));
	};
	ParseUint = function(s, base, bitSize) {
		var _1, _i, _ref, base, bitSize, c, cutoff, d, maxVal, n, n1, s, s0, x, x$1, x$2;
		if (s.length === 0) {
			return [new $Uint64(0, 0), syntaxError("ParseUint", s)];
		}
		s0 = s;
		if (2 <= base && base <= 36) {
		} else if ((base === 0)) {
			if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) {
				if (s.length < 3) {
					return [new $Uint64(0, 0), syntaxError("ParseUint", s0)];
				}
				base = 16;
				s = $substring(s, 2);
			} else if ((s.charCodeAt(0) === 48)) {
				base = 8;
				s = $substring(s, 1);
			} else {
				base = 10;
			}
		} else {
			return [new $Uint64(0, 0), baseError("ParseUint", s0, base)];
		}
		if (bitSize === 0) {
			bitSize = 32;
		} else if (bitSize < 0 || bitSize > 64) {
			return [new $Uint64(0, 0), bitSizeError("ParseUint", s0, bitSize)];
		}
		cutoff = new $Uint64(0, 0);
		_1 = base;
		if (_1 === (10)) {
			cutoff = new $Uint64(429496729, 2576980378);
		} else if (_1 === (16)) {
			cutoff = new $Uint64(268435456, 0);
		} else {
			cutoff = (x = $div64(new $Uint64(4294967295, 4294967295), (new $Uint64(0, base)), false), new $Uint64(x.$high + 0, x.$low + 1));
		}
		maxVal = (x$1 = $shiftLeft64(new $Uint64(0, 1), ((bitSize >>> 0))), new $Uint64(x$1.$high - 0, x$1.$low - 1));
		n = new $Uint64(0, 0);
		_ref = (new sliceType$6($stringToBytes(s)));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			d = 0;
			if (48 <= c && c <= 57) {
				d = c - 48 << 24 >>> 24;
			} else if (97 <= c && c <= 122) {
				d = (c - 97 << 24 >>> 24) + 10 << 24 >>> 24;
			} else if (65 <= c && c <= 90) {
				d = (c - 65 << 24 >>> 24) + 10 << 24 >>> 24;
			} else {
				return [new $Uint64(0, 0), syntaxError("ParseUint", s0)];
			}
			if (d >= ((base << 24 >>> 24))) {
				return [new $Uint64(0, 0), syntaxError("ParseUint", s0)];
			}
			if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) {
				return [maxVal, rangeError("ParseUint", s0)];
			}
			n = $mul64(n, ((new $Uint64(0, base))));
			n1 = (x$2 = (new $Uint64(0, d)), new $Uint64(n.$high + x$2.$high, n.$low + x$2.$low));
			if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) {
				return [maxVal, rangeError("ParseUint", s0)];
			}
			n = n1;
			_i++;
		}
		return [n, $ifaceNil];
	};
	$pkg.ParseUint = ParseUint;
	ParseInt = function(s, base, bitSize) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, base, bitSize, cutoff, err, i, n, neg, s, s0, un, x, x$1;
		i = new $Int64(0, 0);
		err = $ifaceNil;
		if (s.length === 0) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = syntaxError("ParseInt", s);
			i = _tmp;
			err = _tmp$1;
			return [i, err];
		}
		s0 = s;
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = $substring(s, 1);
		} else if (s.charCodeAt(0) === 45) {
			neg = true;
			s = $substring(s, 1);
		}
		un = new $Uint64(0, 0);
		_tuple = ParseUint(s, base, bitSize);
		un = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual($assertType(err, ptrType).Err, $pkg.ErrRange))) {
			$assertType(err, ptrType).Func = "ParseInt";
			$assertType(err, ptrType).Num = s0;
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = err;
			i = _tmp$2;
			err = _tmp$3;
			return [i, err];
		}
		if (bitSize === 0) {
			bitSize = 32;
		}
		cutoff = ($shiftLeft64(new $Uint64(0, 1), (((bitSize - 1 >> 0) >>> 0))));
		if (!neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low >= cutoff.$low))) {
			_tmp$4 = ((x = new $Uint64(cutoff.$high - 0, cutoff.$low - 1), new $Int64(x.$high, x.$low)));
			_tmp$5 = rangeError("ParseInt", s0);
			i = _tmp$4;
			err = _tmp$5;
			return [i, err];
		}
		if (neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low > cutoff.$low))) {
			_tmp$6 = (x$1 = (new $Int64(cutoff.$high, cutoff.$low)), new $Int64(-x$1.$high, -x$1.$low));
			_tmp$7 = rangeError("ParseInt", s0);
			i = _tmp$6;
			err = _tmp$7;
			return [i, err];
		}
		n = (new $Int64(un.$high, un.$low));
		if (neg) {
			n = new $Int64(-n.$high, -n.$low);
		}
		_tmp$8 = n;
		_tmp$9 = $ifaceNil;
		i = _tmp$8;
		err = _tmp$9;
		return [i, err];
	};
	$pkg.ParseInt = ParseInt;
	Atoi = function(s) {
		var _i, _ref, _tuple, _tuple$1, ch, err, i64, n, nerr, ok, s, s0, sLen;
		sLen = s.length;
		if (true && (0 < sLen && sLen < 10) || false && (0 < sLen && sLen < 19)) {
			s0 = s;
			if ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43)) {
				s = $substring(s, 1);
				if (s.length < 1) {
					return [0, new NumError.ptr("Atoi", s0, $pkg.ErrSyntax)];
				}
			}
			n = 0;
			_ref = (new sliceType$6($stringToBytes(s)));
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				ch = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				ch = ch - (48) << 24 >>> 24;
				if (ch > 9) {
					return [0, new NumError.ptr("Atoi", s0, $pkg.ErrSyntax)];
				}
				n = ($imul(n, 10)) + ((ch >> 0)) >> 0;
				_i++;
			}
			if (s0.charCodeAt(0) === 45) {
				n = -n;
			}
			return [n, $ifaceNil];
		}
		_tuple = ParseInt(s, 10, 0);
		i64 = _tuple[0];
		err = _tuple[1];
		_tuple$1 = $assertType(err, ptrType, true);
		nerr = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok) {
			nerr.Func = "Atoi";
		}
		return [(((i64.$low + ((i64.$high >> 31) * 4294967296)) >> 0)), err];
	};
	$pkg.Atoi = Atoi;
	decimal.ptr.prototype.String = function() {
		var a, buf, n, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = $makeSlice(sliceType$6, n);
		w = 0;
		if ((a.nd === 0)) {
			return "0";
		} else if (a.dp <= 0) {
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
			w = w + (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.dp))) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return ($bytesToString($subslice(buf, 0, w)));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var _i, _ref, dst, i;
		_ref = dst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + i] = 48);
			_i++;
		}
		return dst.$length;
	};
	trim = function(a) {
		var a, x, x$1;
		while (true) {
			if (!(a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) === 48))) { break; }
			a.nd = a.nd - (1) >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.ptr.prototype.Assign = function(v) {
		var a, buf, n, v, v1, x, x$1, x$2;
		a = this;
		buf = arrayType$1.zero();
		n = 0;
		while (true) {
			if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
			((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = ((new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24)));
			n = n + (1) >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - (1) >> 0;
		while (true) {
			if (!(n >= 0)) { break; }
			(x$1 = a.d, x$2 = a.nd, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2] = ((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n])));
			a.nd = a.nd + (1) >> 0;
			n = n - (1) >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var a, c, c$1, dig, dig$1, k, mask, n, r, w, x, x$1, x$2, x$3, y, y$1, y$2, y$3, y$4;
		r = 0;
		w = 0;
		n = 0;
		while (true) {
			if (!(((y = k, y < 32 ? (n >>> y) : 0) >>> 0) === 0)) { break; }
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (true) {
					if (!(((y$1 = k, y$1 < 32 ? (n >>> y$1) : 0) >>> 0) === 0)) { break; }
					n = n * 10 >>> 0;
					r = r + (1) >> 0;
				}
				break;
			}
			c = (((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0));
			n = ((n * 10 >>> 0) + c >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		mask = (((y$2 = k, y$2 < 32 ? (1 << y$2) : 0) >>> 0)) - 1 >>> 0;
		while (true) {
			if (!(r < a.nd)) { break; }
			c$1 = (((x$1 = a.d, ((r < 0 || r >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[r])) >>> 0));
			dig = (y$3 = k, y$3 < 32 ? (n >>> y$3) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = (((dig + 48 >>> 0) << 24 >>> 24))));
			w = w + (1) >> 0;
			n = ((n * 10 >>> 0) + c$1 >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			dig$1 = (y$4 = k, y$4 < 32 ? (n >>> y$4) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			if (w < 800) {
				(x$3 = a.d, ((w < 0 || w >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[w] = (((dig$1 + 48 >>> 0) << 24 >>> 24))));
				w = w + (1) >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = n * 10 >>> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var b, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (i >= b.$length) {
				return true;
			}
			if (!((((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) < s.charCodeAt(i);
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var _q, _q$1, a, delta, k, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;
		delta = ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).delta;
		if (prefixIsLessThan($subslice(new sliceType$6(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
			delta = delta - (1) >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - (1) >> 0;
		while (true) {
			if (!(r >= 0)) { break; }
			n = n + (((y = k, y < 32 ? ((((((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0)) - 48 >>> 0)) << y) : 0) >>> 0)) >>> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - (10 * quo >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$1 = a.d, ((w < 0 || w >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[w] = (((rem + 48 >>> 0) << 24 >>> 24))));
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - (10 * quo$1 >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = (((rem$1 + 48 >>> 0) << 24 >>> 24))));
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.ptr.prototype.Shift = function(k) {
		var a, k;
		a = this;
		if ((a.nd === 0)) {
		} else if (k > 0) {
			while (true) {
				if (!(k > 28)) { break; }
				leftShift(a, 28);
				k = k - (28) >> 0;
			}
			leftShift(a, ((k >>> 0)));
		} else if (k < 0) {
			while (true) {
				if (!(k < -28)) { break; }
				rightShift(a, 28);
				k = k + (28) >> 0;
			}
			rightShift(a, ((-k >>> 0)));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var _r, a, nd, x, x$1, x$2, x$3;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if (((x = a.d, ((nd < 0 || nd >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[nd])) >= 53;
	};
	decimal.ptr.prototype.Round = function(nd) {
		var a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.ptr.prototype.RoundDown = function(nd) {
		var a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.ptr.prototype.RoundUp = function(nd) {
		var a, c, i, nd, x, x$1, x$2;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			c = (x = a.d, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]));
			if (c < 57) {
				(x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = ((x$1 = a.d, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i])) + (1) << 24 >>> 24)));
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - (1) >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + (1) >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.ptr.prototype.RoundedInteger = function() {
		var a, i, n, x, x$1, x$2, x$3;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (true) {
			if (!(i < a.dp && i < a.nd)) { break; }
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = (new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])) - 48 << 24 >>> 24))), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		while (true) {
			if (!(i < a.dp)) { break; }
			n = $mul64(n, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	extFloat.ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var _tmp, _tmp$1, exp, expBiased, f, flt, lower, mant, neg, upper, x, x$1, x$2, x$3, x$4;
		lower = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		upper = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		f = this;
		f.mant = mant;
		f.exp = exp - ((flt.mantbits >> 0)) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, ((-f.exp >>> 0)))), ((-f.exp >>> 0))), (mant.$high === x.$high && mant.$low === x.$low))) {
			f.mant = $shiftRightUint64(f.mant, (((-f.exp >>> 0))));
			f.exp = 0;
			_tmp = $clone(f, extFloat);
			_tmp$1 = $clone(f, extFloat);
			extFloat.copy(lower, _tmp);
			extFloat.copy(upper, _tmp$1);
			return [lower, upper];
		}
		expBiased = exp - flt.bias >> 0;
		extFloat.copy(upper, new extFloat.ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.$high + 0, x$1.$low + 1)), f.exp - 1 >> 0, f.neg));
		if (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) || (expBiased === 1)) {
			extFloat.copy(lower, new extFloat.ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.$high - 0, x$3.$low - 1)), f.exp - 1 >> 0, f.neg));
		} else {
			extFloat.copy(lower, new extFloat.ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.$high - 0, x$4.$low - 1)), f.exp - 2 >> 0, f.neg));
		}
		return [lower, upper];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.ptr.prototype.Normalize = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, exp, f, mant, shift, x, x$1, x$2, x$3, x$4, x$5;
		shift = 0;
		f = this;
		_tmp = f.mant;
		_tmp$1 = f.exp;
		mant = _tmp;
		exp = _tmp$1;
		if ((mant.$high === 0 && mant.$low === 0)) {
			shift = 0;
			return shift;
		}
		if ((x = $shiftRightUint64(mant, 32), (x.$high === 0 && x.$low === 0))) {
			mant = $shiftLeft64(mant, (32));
			exp = exp - (32) >> 0;
		}
		if ((x$1 = $shiftRightUint64(mant, 48), (x$1.$high === 0 && x$1.$low === 0))) {
			mant = $shiftLeft64(mant, (16));
			exp = exp - (16) >> 0;
		}
		if ((x$2 = $shiftRightUint64(mant, 56), (x$2.$high === 0 && x$2.$low === 0))) {
			mant = $shiftLeft64(mant, (8));
			exp = exp - (8) >> 0;
		}
		if ((x$3 = $shiftRightUint64(mant, 60), (x$3.$high === 0 && x$3.$low === 0))) {
			mant = $shiftLeft64(mant, (4));
			exp = exp - (4) >> 0;
		}
		if ((x$4 = $shiftRightUint64(mant, 62), (x$4.$high === 0 && x$4.$low === 0))) {
			mant = $shiftLeft64(mant, (2));
			exp = exp - (2) >> 0;
		}
		if ((x$5 = $shiftRightUint64(mant, 63), (x$5.$high === 0 && x$5.$low === 0))) {
			mant = $shiftLeft64(mant, (1));
			exp = exp - (1) >> 0;
		}
		shift = (((f.exp - exp >> 0) >>> 0));
		_tmp$2 = mant;
		_tmp$3 = exp;
		f.mant = _tmp$2;
		f.exp = _tmp$3;
		return shift;
	};
	extFloat.prototype.Normalize = function() { return this.$val.Normalize(); };
	extFloat.ptr.prototype.Multiply = function(g) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, cross1, cross2, f, fhi, flo, g, ghi, glo, rem, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		_tmp = $shiftRightUint64(f.mant, 32);
		_tmp$1 = (new $Uint64(0, ((f.mant.$low >>> 0))));
		fhi = _tmp;
		flo = _tmp$1;
		_tmp$2 = $shiftRightUint64(g.mant, 32);
		_tmp$3 = (new $Uint64(0, ((g.mant.$low >>> 0))));
		ghi = _tmp$2;
		glo = _tmp$3;
		cross1 = $mul64(fhi, glo);
		cross2 = $mul64(flo, ghi);
		f.mant = (x = (x$1 = $mul64(fhi, ghi), x$2 = $shiftRightUint64(cross1, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), x$3 = $shiftRightUint64(cross2, 32), new $Uint64(x.$high + x$3.$high, x.$low + x$3.$low));
		rem = (x$4 = (x$5 = (new $Uint64(0, ((cross1.$low >>> 0)))), x$6 = (new $Uint64(0, ((cross2.$low >>> 0)))), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $shiftRightUint64(($mul64(flo, glo)), 32), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));
		rem = (x$8 = new $Uint64(0, 2147483648), new $Uint64(rem.$high + x$8.$high, rem.$low + x$8.$low));
		f.mant = (x$9 = f.mant, x$10 = ($shiftRightUint64(rem, 32)), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };
	extFloat.ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
		var _q, _r, adjExp, denormalExp, errors$1, exp10, extrabits, f, flt, halfway, i, mant_extra, mantissa, neg, ok, shift, trunc, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y;
		ok = false;
		f = this;
		errors$1 = 0;
		if (trunc) {
			errors$1 = errors$1 + (4) >> 0;
		}
		f.mant = mantissa;
		f.exp = 0;
		f.neg = neg;
		i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (exp10 < -348 || i >= 87) {
			ok = false;
			return ok;
		}
		adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (adjExp < 19 && (x = (x$1 = 19 - adjExp >> 0, ((x$1 < 0 || x$1 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$1])), (mantissa.$high < x.$high || (mantissa.$high === x.$high && mantissa.$low < x.$low)))) {
			f.mant = $mul64(f.mant, (((adjExp < 0 || adjExp >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[adjExp])));
			f.Normalize();
		} else {
			f.Normalize();
			f.Multiply($clone(((adjExp < 0 || adjExp >= smallPowersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : smallPowersOfTen[adjExp]), extFloat));
			errors$1 = errors$1 + (4) >> 0;
		}
		f.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		if (errors$1 > 0) {
			errors$1 = errors$1 + (1) >> 0;
		}
		errors$1 = errors$1 + (4) >> 0;
		shift = f.Normalize();
		errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
		denormalExp = flt.bias - 63 >> 0;
		extrabits = 0;
		if (f.exp <= denormalExp) {
			extrabits = ((63 - flt.mantbits >>> 0) + 1 >>> 0) + (((denormalExp - f.exp >> 0) >>> 0)) >>> 0;
		} else {
			extrabits = 63 - flt.mantbits >>> 0;
		}
		halfway = $shiftLeft64(new $Uint64(0, 1), ((extrabits - 1 >>> 0)));
		mant_extra = (x$2 = f.mant, x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), extrabits), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		if ((x$5 = (x$6 = (new $Int64(halfway.$high, halfway.$low)), x$7 = (new $Int64(0, errors$1)), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low)), x$8 = (new $Int64(mant_extra.$high, mant_extra.$low)), (x$5.$high < x$8.$high || (x$5.$high === x$8.$high && x$5.$low < x$8.$low))) && (x$9 = (new $Int64(mant_extra.$high, mant_extra.$low)), x$10 = (x$11 = (new $Int64(halfway.$high, halfway.$low)), x$12 = (new $Int64(0, errors$1)), new $Int64(x$11.$high + x$12.$high, x$11.$low + x$12.$low)), (x$9.$high < x$10.$high || (x$9.$high === x$10.$high && x$9.$low < x$10.$low)))) {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
	extFloat.ptr.prototype.frexp10 = function() {
		var _q, _q$1, _tmp, _tmp$1, approxExp10, exp, exp10, f, i, index;
		exp10 = 0;
		index = 0;
		f = this;
		approxExp10 = (_q = ($imul(((-46 - f.exp >> 0)), 28)) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + ((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]).exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + (1) >> 0;
			} else if (exp > -32) {
				i = i - (1) >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		_tmp = -((-348 + ($imul(i, 8)) >> 0));
		_tmp$1 = i;
		exp10 = _tmp;
		index = _tmp$1;
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var _tuple, a, b, c, exp10, i;
		exp10 = 0;
		_tuple = c.frexp10();
		exp10 = _tuple[0];
		i = _tuple[1];
		a.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		b.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		return exp10;
	};
	extFloat.ptr.prototype.FixedDecimal = function(d, n) {
		var $CE$B5, _q, _q$1, _tmp, _tmp$1, _tuple, buf, d, digit, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, n, nd, needed, ok, pos, pow, pow10, rest, shift, v, v1, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			$panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10();
		exp10 = _tuple[0];
		shift = ((-f.exp >>> 0));
		integer = (($shiftRightUint64(f.mant, shift).$low >>> 0));
		fraction = (x$1 = f.mant, x$2 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		$CE$B5 = new $Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new $Uint64(0, 1);
		_tmp = 0;
		_tmp$1 = new $Uint64(0, 1);
		i = _tmp;
		pow = _tmp$1;
		while (true) {
			if (!(i < 20)) { break; }
			if ((x$3 = (new $Uint64(0, integer)), (pow.$high > x$3.$high || (pow.$high === x$3.$high && pow.$low > x$3.$low)))) {
				integerDigits = i;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = (x$4 = integerDigits - needed >> 0, ((x$4 < 0 || x$4 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$4]));
			integer = (_q = integer / (((pow10.$low >>> 0))), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rest = rest - (($imul(integer, ((pow10.$low >>> 0))) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = arrayType$2.zero();
		pos = 32;
		v = integer;
		while (true) {
			if (!(v > 0)) { break; }
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			v = v - (($imul(10, v1) >>> 0)) >>> 0;
			pos = pos - (1) >> 0;
			((pos < 0 || pos >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[pos] = (((v + 48 >>> 0) << 24 >>> 24)));
			v = v1;
		}
		i$1 = pos;
		while (true) {
			if (!(i$1 < 32)) { break; }
			(x$5 = d.d, x$6 = i$1 - pos >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = ((i$1 < 0 || i$1 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i$1])));
			i$1 = i$1 + (1) >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.$high === 0 && pow10.$low === 1))) {
				$panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (true) {
				if (!(needed > 0)) { break; }
				fraction = $mul64(fraction, (new $Uint64(0, 10)));
				$CE$B5 = $mul64($CE$B5, (new $Uint64(0, 10)));
				if ((x$7 = $mul64(new $Uint64(0, 2), $CE$B5), x$8 = $shiftLeft64(new $Uint64(0, 1), shift), (x$7.$high > x$8.$high || (x$7.$high === x$8.$high && x$7.$low > x$8.$low)))) {
					return false;
				}
				digit = $shiftRightUint64(fraction, shift);
				(x$9 = d.d, ((nd < 0 || nd >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + nd] = ((new $Uint64(digit.$high + 0, digit.$low + 48).$low << 24 >>> 24))));
				fraction = (x$10 = $shiftLeft64(digit, shift), new $Uint64(fraction.$high - x$10.$high, fraction.$low - x$10.$low));
				nd = nd + (1) >> 0;
				needed = needed - (1) >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$11 = $shiftLeft64((new $Uint64(0, rest)), shift), new $Uint64(x$11.$high | fraction.$high, (x$11.$low | fraction.$low) >>> 0)), pow10, shift, $CE$B5);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			if (!(((x$12 = d.d, ((i$2 < 0 || i$2 >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + i$2])) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, $CE$B5) {
		var $CE$B5, d, den, i, num, shift, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $shiftLeft64(den, shift), (num.$high > x.$high || (num.$high === x.$high && num.$low > x.$low)))) {
			$panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = $mul64(new $Uint64(0, 2), $CE$B5), x$2 = $shiftLeft64(den, shift), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			$panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high + $CE$B5.$high, num.$low + $CE$B5.$low))), x$4 = $shiftLeft64(den, shift), (x$3.$high < x$4.$high || (x$3.$high === x$4.$high && x$3.$low < x$4.$low)))) {
			return true;
		}
		if ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high - $CE$B5.$high, num.$low - $CE$B5.$low))), x$6 = $shiftLeft64(den, shift), (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)))) {
			i = d.nd - 1 >> 0;
			while (true) {
				if (!(i >= 0)) { break; }
				if ((x$7 = d.d, ((i < 0 || i >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i])) === 57) {
					d.nd = d.nd - (1) >> 0;
				} else {
					break;
				}
				i = i - (1) >> 0;
			}
			if (i < 0) {
				(x$8 = d.d, (0 >= x$8.$length ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + 0] = 49));
				d.nd = 1;
				d.dp = d.dp + (1) >> 0;
			} else {
				(x$10 = d.d, ((i < 0 || i >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + i] = ((x$9 = d.d, ((i < 0 || i >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + i])) + (1) << 24 >>> 24)));
			}
			return true;
		}
		return false;
	};
	extFloat.ptr.prototype.ShortestDecimal = function(d, lower, upper) {
		var _q, _tmp, _tmp$1, _tmp$2, _tmp$3, allowance, buf, currentDiff, d, digit, digit$1, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, lower, multiplier, n, nd, pow, pow$1, shift, targetDiff, upper, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && $equal(lower, f, extFloat) && $equal(lower, upper, extFloat)) {
			buf = arrayType$1.zero();
			n = 23;
			v = f.mant;
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				v1 = $div64(v, new $Uint64(0, 10), false);
				v = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x$1.$high, v.$low - x$1.$low));
				((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = ((new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24)));
				n = n - (1) >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (true) {
				if (!(i < nd)) { break; }
				(x$3 = d.d, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i] = (x$2 = (n + 1 >> 0) + i >> 0, ((x$2 < 0 || x$2 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[x$2]))));
				i = i + (1) >> 0;
			}
			_tmp = nd;
			_tmp$1 = nd;
			d.nd = _tmp;
			d.dp = _tmp$1;
			while (true) {
				if (!(d.nd > 0 && ((x$4 = d.d, x$5 = d.nd - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) === 48))) { break; }
				d.nd = d.nd - (1) >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = $shiftLeft64(f.mant, ((((f.exp - upper.exp >> 0) >>> 0))));
			f.exp = upper.exp;
		}
		if (lower.exp > upper.exp) {
			lower.mant = $shiftLeft64(lower.mant, ((((lower.exp - upper.exp >> 0) >>> 0))));
			lower.exp = upper.exp;
		}
		exp10 = frexp10Many(lower, f, upper);
		upper.mant = (x$6 = upper.mant, x$7 = new $Uint64(0, 1), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
		lower.mant = (x$8 = lower.mant, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));
		shift = ((-upper.exp >>> 0));
		integer = (($shiftRightUint64(upper.mant, shift).$low >>> 0));
		fraction = (x$10 = upper.mant, x$11 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$10.$high - x$11.$high, x$10.$low - x$11.$low));
		allowance = (x$12 = upper.mant, x$13 = lower.mant, new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
		targetDiff = (x$14 = upper.mant, x$15 = f.mant, new $Uint64(x$14.$high - x$15.$high, x$14.$low - x$15.$low));
		integerDigits = 0;
		_tmp$2 = 0;
		_tmp$3 = new $Uint64(0, 1);
		i$1 = _tmp$2;
		pow = _tmp$3;
		while (true) {
			if (!(i$1 < 20)) { break; }
			if ((x$16 = (new $Uint64(0, integer)), (pow.$high > x$16.$high || (pow.$high === x$16.$high && pow.$low > x$16.$low)))) {
				integerDigits = i$1;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (true) {
			if (!(i$2 < integerDigits)) { break; }
			pow$1 = (x$17 = (integerDigits - i$2 >> 0) - 1 >> 0, ((x$17 < 0 || x$17 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$17]));
			digit = (_q = integer / ((pow$1.$low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			(x$18 = d.d, ((i$2 < 0 || i$2 >= x$18.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$18.$array[x$18.$offset + i$2] = (((digit + 48 >>> 0) << 24 >>> 24))));
			integer = integer - (($imul(digit, ((pow$1.$low >>> 0))) >>> 0)) >>> 0;
			currentDiff = (x$19 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$19.$high + fraction.$high, x$19.$low + fraction.$low));
			if ((currentDiff.$high < allowance.$high || (currentDiff.$high === allowance.$high && currentDiff.$low < allowance.$low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));
			}
			i$2 = i$2 + (1) >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new $Uint64(0, 1);
		while (true) {
			fraction = $mul64(fraction, (new $Uint64(0, 10)));
			multiplier = $mul64(multiplier, (new $Uint64(0, 10)));
			digit$1 = (($shiftRightUint64(fraction, shift).$low >> 0));
			(x$20 = d.d, x$21 = d.nd, ((x$21 < 0 || x$21 >= x$20.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$20.$array[x$20.$offset + x$21] = (((digit$1 + 48 >> 0) << 24 >>> 24))));
			d.nd = d.nd + (1) >> 0;
			fraction = (x$22 = $shiftLeft64((new $Uint64(0, digit$1)), shift), new $Uint64(fraction.$high - x$22.$high, fraction.$low - x$22.$low));
			if ((x$23 = $mul64(allowance, multiplier), (fraction.$high < x$23.$high || (fraction.$high === x$23.$high && fraction.$low < x$23.$low)))) {
				return adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.$val.ShortestDecimal(d, lower, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var _index, currentDiff, d, maxDiff, targetDiff, ulpBinary, ulpDecimal, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.$high < x.$high || (ulpDecimal.$high === x.$high && ulpDecimal.$low < x.$low)))) {
			return false;
		}
		while (true) {
			if (!((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.$high + x$3.$high, currentDiff.$low + x$3.$low)), new $Uint64(x$2.$high + ulpBinary.$high, x$2.$low + ulpBinary.$low)), (x$1.$high < targetDiff.$high || (x$1.$high === targetDiff.$high && x$1.$low < targetDiff.$low))))) { break; }
			_index = d.nd - 1 >> 0;
			(x$5 = d.d, ((_index < 0 || _index >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + _index] = ((x$4 = d.d, ((_index < 0 || _index >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + _index])) - (1) << 24 >>> 24)));
			currentDiff = (x$6 = ulpDecimal, new $Uint64(currentDiff.$high + x$6.$high, currentDiff.$low + x$6.$low));
		}
		if ((x$7 = new $Uint64(currentDiff.$high + ulpDecimal.$high, currentDiff.$low + ulpDecimal.$low), x$8 = (x$9 = (x$10 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.$high + x$10.$high, targetDiff.$low + x$10.$low)), new $Uint64(x$9.$high + ulpBinary.$high, x$9.$low + ulpBinary.$low)), (x$7.$high < x$8.$high || (x$7.$high === x$8.$high && x$7.$low <= x$8.$low)))) {
			return false;
		}
		if ((currentDiff.$high < ulpBinary.$high || (currentDiff.$high === ulpBinary.$high && currentDiff.$low < ulpBinary.$low)) || (x$11 = new $Uint64(maxDiff.$high - ulpBinary.$high, maxDiff.$low - ulpBinary.$low), (currentDiff.$high > x$11.$high || (currentDiff.$high === x$11.$high && currentDiff.$low > x$11.$low)))) {
			return false;
		}
		if ((d.nd === 1) && ((x$12 = d.d, (0 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 0])) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	AppendFloat = function(dst, f, fmt, prec, bitSize) {
		var bitSize, dst, f, fmt, prec;
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	$pkg.AppendFloat = AppendFloat;
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var _1, _2, _3, _4, _tuple, bitSize, bits, buf, buf$1, digits, digs, dst, exp, f, f$1, flt, fmt, lower, mant, neg, ok, prec, s, shortest, upper, val, x, x$1, x$2, x$3, y, y$1;
		bits = new $Uint64(0, 0);
		flt = ptrType$1.nil;
		_1 = bitSize;
		if (_1 === (32)) {
			bits = (new $Uint64(0, math.Float32bits(($fround(val)))));
			flt = float32info;
		} else if (_1 === (64)) {
			bits = math.Float64bits(val);
			flt = float64info;
		} else {
			$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
		exp = (($shiftRightUint64(bits, flt.mantbits).$low >> 0)) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits.$high & x$1.$high, (bits.$low & x$1.$low) >>> 0));
		_2 = exp;
		if (_2 === ((((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0))) {
			s = "";
			if (!((mant.$high === 0 && mant.$low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, s);
		} else if (_2 === (0)) {
			exp = exp + (1) >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.ptr(new $Uint64(0, 0), 0, false);
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt);
			lower = $clone(_tuple[0], extFloat);
			upper = $clone(_tuple[1], extFloat);
			buf = arrayType$2.zero();
			digs.d = new sliceType$6(buf);
			ok = f.ShortestDecimal(digs, lower, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_3 = fmt;
			if ((_3 === (101)) || (_3 === (69))) {
				prec = max(digs.nd - 1 >> 0, 0);
			} else if (_3 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_3 === (103)) || (_3 === (71))) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_4 = fmt;
			if ((_4 === (101)) || (_4 === (69))) {
				digits = digits + (1) >> 0;
			} else if ((_4 === (103)) || (_4 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = arrayType$1.zero();
				digs.d = new sliceType$6(buf$1);
				f$1 = new extFloat.ptr(mant, exp - ((flt.mantbits >> 0)) >> 0, neg);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var _1, _2, d, digs, dst, exp, flt, fmt, mant, neg, prec, shortest;
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		d.Assign(mant);
		d.Shift(exp - ((flt.mantbits >> 0)) >> 0);
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
			_1 = fmt;
			if ((_1 === (101)) || (_1 === (69))) {
				prec = digs.nd - 1 >> 0;
			} else if (_1 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_1 === (103)) || (_1 === (71))) {
				prec = digs.nd;
			}
		} else {
			_2 = fmt;
			if ((_2 === (101)) || (_2 === (69))) {
				d.Round(prec + 1 >> 0);
			} else if (_2 === (102)) {
				d.Round(d.dp + prec >> 0);
			} else if ((_2 === (103)) || (_2 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var _1, digs, dst, eprec, exp, fmt, neg, prec, shortest;
		_1 = fmt;
		if ((_1 === (101)) || (_1 === (69))) {
			return fmtE(dst, neg, $clone(digs, decimalSlice), prec, fmt);
		} else if (_1 === (102)) {
			return fmtF(dst, neg, $clone(digs, decimalSlice), prec);
		} else if ((_1 === (103)) || (_1 === (71))) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, $clone(digs, decimalSlice), prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, $clone(digs, decimalSlice), max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var d, exp, explo, flt, i, inclusive, l, lower, m, mant, mantlo, minexp, okdown, okup, u, upper, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		if ((mant.$high === 0 && mant.$low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && ($imul(332, ((d.dp - d.nd >> 0)))) >= ($imul(100, ((exp - ((flt.mantbits >> 0)) >> 0))))) {
			return;
		}
		upper = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		upper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));
		upper.Shift((exp - ((flt.mantbits >> 0)) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
			explo = exp;
		} else {
			mantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));
			explo = exp - 1 >> 0;
		}
		lower = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		lower.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));
		lower.Shift((explo - ((flt.mantbits >> 0)) >> 0) - 1 >> 0);
		inclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));
		i = 0;
		while (true) {
			if (!(i < d.nd)) { break; }
			l = 48;
			if (i < lower.nd) {
				l = (x$5 = lower.d, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i]));
			}
			m = (x$6 = d.d, ((i < 0 || i >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[i]));
			u = 48;
			if (i < upper.nd) {
				u = (x$7 = upper.d, ((i < 0 || i >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[i]));
			}
			okdown = !((l === m)) || inclusive && ((i + 1 >> 0) === lower.nd);
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(i + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(i + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(i + 1 >> 0);
				return;
			}
			i = i + (1) >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var _q, _q$1, _q$2, _r, _r$1, _r$2, ch, d, dst, exp, fmt, i, m, neg, prec, x;
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = min(d.nd, prec + 1 >> 0);
			if (i < m) {
				dst = $appendSlice(dst, $subslice(d.d, i, m));
				i = m;
			}
			while (true) {
				if (!(i <= prec)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		if (exp < 10) {
			dst = $append(dst, 48, ((exp << 24 >>> 24)) + 48 << 24 >>> 24);
		} else if (exp < 100) {
			dst = $append(dst, (((_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		} else {
			dst = $append(dst, (((_q$1 = exp / 100, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (_r$1 = (((_q$2 = exp / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24, (((_r$2 = exp % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var ch, d, dst, i, j, m, neg, prec, x;
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			m = min(d.nd, d.dp);
			dst = $appendSlice(dst, $subslice(d.d, 0, m));
			while (true) {
				if (!(m < d.dp)) { break; }
				dst = $append(dst, 48);
				m = m + (1) >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				ch = 48;
				j = d.dp + i >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x = d.d, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
				}
				dst = $append(dst, ch);
				i = i + (1) >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var _tuple, _tuple$1, dst, exp, flt, mant, neg;
		if (neg) {
			dst = $append(dst, 45);
		}
		_tuple = formatBits(dst, mant, 10, false, true);
		dst = _tuple[0];
		dst = $append(dst, 112);
		exp = exp - (((flt.mantbits >> 0))) >> 0;
		if (exp >= 0) {
			dst = $append(dst, 43);
		}
		_tuple$1 = formatBits(dst, (new $Uint64(0, exp)), 10, exp < 0, true);
		dst = _tuple$1[0];
		return dst;
	};
	min = function(a, b) {
		var a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	max = function(a, b) {
		var a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatInt = function(i, base) {
		var _tuple, base, i, s;
		if (true && (0 < i.$high || (0 === i.$high && 0 <= i.$low)) && (i.$high < 0 || (i.$high === 0 && i.$low < 100)) && (base === 10)) {
			return small((((i.$low + ((i.$high >> 31) * 4294967296)) >> 0)));
		}
		_tuple = formatBits(sliceType$6.nil, (new $Uint64(i.$high, i.$low)), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatInt = FormatInt;
	Itoa = function(i) {
		var i;
		return FormatInt((new $Int64(0, i)), 10);
	};
	$pkg.Itoa = Itoa;
	AppendInt = function(dst, i, base) {
		var _tuple, base, dst, i;
		if (true && (0 < i.$high || (0 === i.$high && 0 <= i.$low)) && (i.$high < 0 || (i.$high === 0 && i.$low < 100)) && (base === 10)) {
			return $appendSlice(dst, small((((i.$low + ((i.$high >> 31) * 4294967296)) >> 0))));
		}
		_tuple = formatBits(dst, (new $Uint64(i.$high, i.$low)), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), true);
		dst = _tuple[0];
		return dst;
	};
	$pkg.AppendInt = AppendInt;
	small = function(i) {
		var i, off;
		off = 0;
		if (i < 10) {
			off = 1;
		}
		return $substring("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", (($imul(i, 2)) + off >> 0), (($imul(i, 2)) + 2 >> 0));
	};
	formatBits = function(dst, u, base, neg, append_) {
		var _q, _q$1, _r, _r$1, a, append_, b, b$1, base, d, dst, i, is, is$1, is$2, j, m, neg, q, q$1, s, s$1, u, us, us$1, x, x$1, x$2, x$3, x$4, x$5;
		d = sliceType$6.nil;
		s = "";
		if (base < 2 || base > 36) {
			$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = arrayType$3.zero();
		i = 65;
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if (base === 10) {
			if (true) {
				while (true) {
					if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 1000000000)))) { break; }
					q = $div64(u, new $Uint64(0, 1000000000), false);
					us = (((x = $mul64(q, new $Uint64(0, 1000000000)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0));
					j = 4;
					while (true) {
						if (!(j > 0)) { break; }
						is = (_r = us % 100, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) * 2 >>> 0;
						us = (_q = us / (100), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
						i = i - (2) >> 0;
						(x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$1] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is + 1 >>> 0))));
						(x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$2] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is + 0 >>> 0))));
						j = j - (1) >> 0;
					}
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt(((us * 2 >>> 0) + 1 >>> 0)));
					u = q;
				}
			}
			us$1 = ((u.$low >>> 0));
			while (true) {
				if (!(us$1 >= 100)) { break; }
				is$1 = (_r$1 = us$1 % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) * 2 >>> 0;
				us$1 = (_q$1 = us$1 / (100), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				i = i - (2) >> 0;
				(x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$3] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$1 + 1 >>> 0))));
				(x$4 = i + 0 >> 0, ((x$4 < 0 || x$4 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$4] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$1 + 0 >>> 0))));
			}
			is$2 = us$1 * 2 >>> 0;
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$2 + 1 >>> 0)));
			if (us$1 >= 10) {
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt(is$2));
			}
		} else {
			s$1 = ((base < 0 || base >= shifts.length) ? ($throwRuntimeError("index out of range"), undefined) : shifts[base]);
			if (s$1 > 0) {
				b = (new $Uint64(0, base));
				m = ((base >>> 0)) - 1 >>> 0;
				while (true) {
					if (!((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low)))) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((((u.$low >>> 0)) & m) >>> 0)));
					u = $shiftRightUint64(u, (s$1));
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((u.$low >>> 0))));
			} else {
				b$1 = (new $Uint64(0, base));
				while (true) {
					if (!((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low)))) { break; }
					i = i - (1) >> 0;
					q$1 = $div64(u, b$1, false);
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((x$5 = $mul64(q$1, b$1), new $Uint64(u.$high - x$5.$high, u.$low - x$5.$low)).$low >>> 0))));
					u = q$1;
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((u.$low >>> 0))));
			}
		}
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = 45);
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new sliceType$6(a), i));
			return [d, s];
		}
		s = ($bytesToString($subslice(new sliceType$6(a), i)));
		return [d, s];
	};
	quoteWith = function(s, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _q, graphicOnly, quote, s;
		return ($bytesToString(appendQuotedWith($makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), s, quote, ASCIIonly, graphicOnly)));
	};
	appendQuotedWith = function(buf, s, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _tuple, buf, graphicOnly, quote, r, s, width;
		buf = $append(buf, quote);
		width = 0;
		while (true) {
			if (!(s.length > 0)) { break; }
			r = ((s.charCodeAt(0) >> 0));
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = $substring(s, width);
				continue;
			}
			buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly);
			s = $substring(s, width);
		}
		buf = $append(buf, quote);
		return buf;
	};
	appendQuotedRuneWith = function(buf, r, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, buf, graphicOnly, quote, r;
		buf = $append(buf, quote);
		if (!utf8.ValidRune(r)) {
			r = 65533;
		}
		buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly);
		buf = $append(buf, quote);
		return buf;
	};
	appendEscapedRune = function(buf, r, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _1, buf, graphicOnly, n, quote, r, runeTmp, s, s$1;
		runeTmp = arrayType$4.zero();
		if ((r === ((quote >> 0))) || (r === 92)) {
			buf = $append(buf, 92);
			buf = $append(buf, ((r << 24 >>> 24)));
			return buf;
		}
		if (ASCIIonly) {
			if (r < 128 && IsPrint(r)) {
				buf = $append(buf, ((r << 24 >>> 24)));
				return buf;
			}
		} else if (IsPrint(r) || graphicOnly && isInGraphicList(r)) {
			n = utf8.EncodeRune(new sliceType$6(runeTmp), r);
			buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n));
			return buf;
		}
		_1 = r;
		if (_1 === (7)) {
			buf = $appendSlice(buf, "\\a");
		} else if (_1 === (8)) {
			buf = $appendSlice(buf, "\\b");
		} else if (_1 === (12)) {
			buf = $appendSlice(buf, "\\f");
		} else if (_1 === (10)) {
			buf = $appendSlice(buf, "\\n");
		} else if (_1 === (13)) {
			buf = $appendSlice(buf, "\\r");
		} else if (_1 === (9)) {
			buf = $appendSlice(buf, "\\t");
		} else if (_1 === (11)) {
			buf = $appendSlice(buf, "\\v");
		} else {
			if (r < 32) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((((r << 24 >>> 24)) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((((r << 24 >>> 24)) & 15) >>> 0)));
			} else if (r > 1114111) {
				r = 65533;
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s >>> 0)), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else if (r < 65536) {
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s >>> 0)), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else {
				buf = $appendSlice(buf, "\\U");
				s$1 = 28;
				while (true) {
					if (!(s$1 >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s$1 >>> 0)), 31)) >> 0) & 15)));
					s$1 = s$1 - (4) >> 0;
				}
			}
		}
		return buf;
	};
	Quote = function(s) {
		var s;
		return quoteWith(s, 34, false, false);
	};
	$pkg.Quote = Quote;
	AppendQuote = function(dst, s) {
		var dst, s;
		return appendQuotedWith(dst, s, 34, false, false);
	};
	$pkg.AppendQuote = AppendQuote;
	AppendQuoteToASCII = function(dst, s) {
		var dst, s;
		return appendQuotedWith(dst, s, 34, true, false);
	};
	$pkg.AppendQuoteToASCII = AppendQuoteToASCII;
	AppendQuoteRune = function(dst, r) {
		var dst, r;
		return appendQuotedRuneWith(dst, r, 39, false, false);
	};
	$pkg.AppendQuoteRune = AppendQuoteRune;
	AppendQuoteRuneToASCII = function(dst, r) {
		var dst, r;
		return appendQuotedRuneWith(dst, r, 39, true, false);
	};
	$pkg.AppendQuoteRuneToASCII = AppendQuoteRuneToASCII;
	CanBackquote = function(s) {
		var _tuple, r, s, wid;
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			wid = _tuple[1];
			s = $substring(s, wid);
			if (wid > 1) {
				if (r === 65279) {
					return false;
				}
				continue;
			}
			if (r === 65533) {
				return false;
			}
			if ((r < 32 && !((r === 9))) || (r === 96) || (r === 127)) {
				return false;
			}
		}
		return true;
	};
	$pkg.CanBackquote = CanBackquote;
	unhex = function(b) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, c, ok, v;
		v = 0;
		ok = false;
		c = ((b >> 0));
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0;
			_tmp$1 = true;
			v = _tmp;
			ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0;
			_tmp$3 = true;
			v = _tmp$2;
			ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0;
			_tmp$5 = true;
			v = _tmp$4;
			ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = function(s, quote) {
		var _1, _2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err, j, j$1, multibyte, n, ok, quote, r, s, size, tail, v, v$1, value, x, x$1;
		value = 0;
		multibyte = false;
		tail = "";
		err = $ifaceNil;
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			size = _tuple[1];
			_tmp = r;
			_tmp$1 = true;
			_tmp$2 = $substring(s, size);
			_tmp$3 = $ifaceNil;
			value = _tmp;
			multibyte = _tmp$1;
			tail = _tmp$2;
			err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = ((s.charCodeAt(0) >> 0));
			_tmp$5 = false;
			_tmp$6 = $substring(s, 1);
			_tmp$7 = $ifaceNil;
			value = _tmp$4;
			multibyte = _tmp$5;
			tail = _tmp$6;
			err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = $substring(s, 2);
		switch (0) { default:
			_1 = c$1;
			if (_1 === (97)) {
				value = 7;
			} else if (_1 === (98)) {
				value = 8;
			} else if (_1 === (102)) {
				value = 12;
			} else if (_1 === (110)) {
				value = 10;
			} else if (_1 === (114)) {
				value = 13;
			} else if (_1 === (116)) {
				value = 9;
			} else if (_1 === (118)) {
				value = 11;
			} else if ((_1 === (120)) || (_1 === (117)) || (_1 === (85))) {
				n = 0;
				_2 = c$1;
				if (_2 === (120)) {
					n = 2;
				} else if (_2 === (117)) {
					n = 4;
				} else if (_2 === (85)) {
					n = 8;
				}
				v = 0;
				if (s.length < n) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j = 0;
				while (true) {
					if (!(j < n)) { break; }
					_tuple$1 = unhex(s.charCodeAt(j));
					x = _tuple$1[0];
					ok = _tuple$1[1];
					if (!ok) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v = (v << 4 >> 0) | x;
					j = j + (1) >> 0;
				}
				s = $substring(s, n);
				if (c$1 === 120) {
					value = v;
					break;
				}
				if (v > 1114111) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v;
				multibyte = true;
			} else if ((_1 === (48)) || (_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55))) {
				v$1 = ((c$1 >> 0)) - 48 >> 0;
				if (s.length < 2) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j$1 = 0;
				while (true) {
					if (!(j$1 < 2)) { break; }
					x$1 = ((s.charCodeAt(j$1) >> 0)) - 48 >> 0;
					if (x$1 < 0 || x$1 > 7) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v$1 = ((v$1 << 3 >> 0)) | x$1;
					j$1 = j$1 + (1) >> 0;
				}
				s = $substring(s, 2);
				if (v$1 > 255) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v$1;
			} else if (_1 === (92)) {
				value = 92;
			} else if ((_1 === (39)) || (_1 === (34))) {
				if (!((c$1 === quote))) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = ((c$1 >> 0));
			} else {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
		}
		tail = s;
		return [value, multibyte, tail, err];
	};
	$pkg.UnquoteChar = UnquoteChar;
	Unquote = function(s) {
		var _1, _q, _tuple, _tuple$1, buf, buf$1, c, err, i, multibyte, n, n$1, quote, r, runeTmp, s, size, ss;
		n = s.length;
		if (n < 2) {
			return ["", $pkg.ErrSyntax];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			return ["", $pkg.ErrSyntax];
		}
		s = $substring(s, 1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				return ["", $pkg.ErrSyntax];
			}
			if (contains(s, 13)) {
				buf = $makeSlice(sliceType$6, 0, (s.length - 1 >> 0));
				i = 0;
				while (true) {
					if (!(i < s.length)) { break; }
					if (!((s.charCodeAt(i) === 13))) {
						buf = $append(buf, s.charCodeAt(i));
					}
					i = i + (1) >> 0;
				}
				return [($bytesToString(buf)), $ifaceNil];
			}
			return [s, $ifaceNil];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			return ["", $pkg.ErrSyntax];
		}
		if (contains(s, 10)) {
			return ["", $pkg.ErrSyntax];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_1 = quote;
			if (_1 === (34)) {
				return [s, $ifaceNil];
			} else if (_1 === (39)) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				size = _tuple[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					return [s, $ifaceNil];
				}
			}
		}
		runeTmp = arrayType$4.zero();
		buf$1 = $makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple$1 = UnquoteChar(s, quote);
			c = _tuple$1[0];
			multibyte = _tuple$1[1];
			ss = _tuple$1[2];
			err = _tuple$1[3];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return ["", err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf$1 = $append(buf$1, ((c << 24 >>> 24)));
			} else {
				n$1 = utf8.EncodeRune(new sliceType$6(runeTmp), c);
				buf$1 = $appendSlice(buf$1, $subslice(new sliceType$6(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				return ["", $pkg.ErrSyntax];
			}
		}
		return [($bytesToString(buf$1)), $ifaceNil];
	};
	$pkg.Unquote = Unquote;
	contains = function(s, c) {
		var c, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === c) {
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	bsearch16 = function(a, x) {
		var _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, r, rr, rr$1, x, x$1, x$2, x$3;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = ((r << 16 >>> 16));
			_tmp$1 = isPrint16;
			_tmp$2 = isNotPrint16;
			rr = _tmp;
			isPrint = _tmp$1;
			isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.$length || rr < (x = (i & ~1) >> 0, ((x < 0 || x >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
		}
		_tmp$3 = ((r >>> 0));
		_tmp$4 = isPrint32;
		_tmp$5 = isNotPrint32;
		rr$1 = _tmp$3;
		isPrint$1 = _tmp$4;
		isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = (i$1 & ~1) >> 0, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - (65536) >> 0;
		j$1 = bsearch16(isNotPrint$1, ((r << 16 >>> 16)));
		return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === ((r << 16 >>> 16))));
	};
	$pkg.IsPrint = IsPrint;
	isInGraphicList = function(r) {
		var i, r, rr;
		if (r > 65535) {
			return false;
		}
		rr = ((r << 16 >>> 16));
		i = bsearch16(isGraphic, rr);
		return i < isGraphic.$length && (rr === ((i < 0 || i >= isGraphic.$length) ? ($throwRuntimeError("index out of range"), undefined) : isGraphic.$array[isGraphic.$offset + i]));
	};
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "set", name: "set", pkg: "strconv", typ: $funcType([$String], [$Bool], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Assign", name: "Assign", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundDown", name: "RoundDown", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundUp", name: "RoundUp", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundedInteger", name: "RoundedInteger", pkg: "", typ: $funcType([], [$Uint64], false)}];
	ptrType$4.methods = [{prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "AssignComputeBounds", name: "AssignComputeBounds", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, ptrType$1], [extFloat, extFloat], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([extFloat], [], false)}, {prop: "AssignDecimal", name: "AssignDecimal", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, $Bool, ptrType$1], [$Bool], false)}, {prop: "frexp10", name: "frexp10", pkg: "strconv", typ: $funcType([], [$Int, $Int], false)}, {prop: "FixedDecimal", name: "FixedDecimal", pkg: "", typ: $funcType([ptrType$3, $Int], [$Bool], false)}, {prop: "ShortestDecimal", name: "ShortestDecimal", pkg: "", typ: $funcType([ptrType$3, ptrType$4, ptrType$4], [$Bool], false)}];
	NumError.init("", [{prop: "Func", name: "Func", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Num", name: "Num", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", anonymous: false, exported: true, typ: $error, tag: ""}]);
	decimal.init("strconv", [{prop: "d", name: "d", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "nd", name: "nd", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "trunc", name: "trunc", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	leftCheat.init("strconv", [{prop: "delta", name: "delta", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "cutoff", name: "cutoff", anonymous: false, exported: false, typ: $String, tag: ""}]);
	extFloat.init("strconv", [{prop: "mant", name: "mant", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "exp", name: "exp", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	floatInfo.init("strconv", [{prop: "mantbits", name: "mantbits", anonymous: false, exported: false, typ: $Uint, tag: ""}, {prop: "expbits", name: "expbits", anonymous: false, exported: false, typ: $Uint, tag: ""}, {prop: "bias", name: "bias", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	decimalSlice.init("strconv", [{prop: "d", name: "d", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "nd", name: "nd", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		optimize = true;
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new sliceType$3([new leftCheat.ptr(0, ""), new leftCheat.ptr(1, "5"), new leftCheat.ptr(1, "25"), new leftCheat.ptr(1, "125"), new leftCheat.ptr(2, "625"), new leftCheat.ptr(2, "3125"), new leftCheat.ptr(2, "15625"), new leftCheat.ptr(3, "78125"), new leftCheat.ptr(3, "390625"), new leftCheat.ptr(3, "1953125"), new leftCheat.ptr(4, "9765625"), new leftCheat.ptr(4, "48828125"), new leftCheat.ptr(4, "244140625"), new leftCheat.ptr(4, "1220703125"), new leftCheat.ptr(5, "6103515625"), new leftCheat.ptr(5, "30517578125"), new leftCheat.ptr(5, "152587890625"), new leftCheat.ptr(6, "762939453125"), new leftCheat.ptr(6, "3814697265625"), new leftCheat.ptr(6, "19073486328125"), new leftCheat.ptr(7, "95367431640625"), new leftCheat.ptr(7, "476837158203125"), new leftCheat.ptr(7, "2384185791015625"), new leftCheat.ptr(7, "11920928955078125"), new leftCheat.ptr(8, "59604644775390625"), new leftCheat.ptr(8, "298023223876953125"), new leftCheat.ptr(8, "1490116119384765625"), new leftCheat.ptr(9, "7450580596923828125"), new leftCheat.ptr(9, "37252902984619140625"), new leftCheat.ptr(9, "186264514923095703125"), new leftCheat.ptr(10, "931322574615478515625"), new leftCheat.ptr(10, "4656612873077392578125"), new leftCheat.ptr(10, "23283064365386962890625"), new leftCheat.ptr(10, "116415321826934814453125"), new leftCheat.ptr(11, "582076609134674072265625"), new leftCheat.ptr(11, "2910383045673370361328125"), new leftCheat.ptr(11, "14551915228366851806640625"), new leftCheat.ptr(12, "72759576141834259033203125"), new leftCheat.ptr(12, "363797880709171295166015625"), new leftCheat.ptr(12, "1818989403545856475830078125"), new leftCheat.ptr(13, "9094947017729282379150390625"), new leftCheat.ptr(13, "45474735088646411895751953125"), new leftCheat.ptr(13, "227373675443232059478759765625"), new leftCheat.ptr(13, "1136868377216160297393798828125"), new leftCheat.ptr(14, "5684341886080801486968994140625"), new leftCheat.ptr(14, "28421709430404007434844970703125"), new leftCheat.ptr(14, "142108547152020037174224853515625"), new leftCheat.ptr(15, "710542735760100185871124267578125"), new leftCheat.ptr(15, "3552713678800500929355621337890625"), new leftCheat.ptr(15, "17763568394002504646778106689453125"), new leftCheat.ptr(16, "88817841970012523233890533447265625"), new leftCheat.ptr(16, "444089209850062616169452667236328125"), new leftCheat.ptr(16, "2220446049250313080847263336181640625"), new leftCheat.ptr(16, "11102230246251565404236316680908203125"), new leftCheat.ptr(17, "55511151231257827021181583404541015625"), new leftCheat.ptr(17, "277555756156289135105907917022705078125"), new leftCheat.ptr(17, "1387778780781445675529539585113525390625"), new leftCheat.ptr(18, "6938893903907228377647697925567626953125"), new leftCheat.ptr(18, "34694469519536141888238489627838134765625"), new leftCheat.ptr(18, "173472347597680709441192448139190673828125"), new leftCheat.ptr(19, "867361737988403547205962240695953369140625")]);
		smallPowersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(2147483648, 0), -63, false), new extFloat.ptr(new $Uint64(2684354560, 0), -60, false), new extFloat.ptr(new $Uint64(3355443200, 0), -57, false), new extFloat.ptr(new $Uint64(4194304000, 0), -54, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3276800000, 0), -47, false), new extFloat.ptr(new $Uint64(4096000000, 0), -44, false), new extFloat.ptr(new $Uint64(2560000000, 0), -40, false)]);
		powersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);
		uint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.ptr(23, 8, -127);
		float64info = new floatInfo.ptr(52, 11, -1023);
		isPrint16 = new sliceType$4([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2154, 2208, 2237, 2260, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2557, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2809, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3162, 3168, 3171, 3174, 3183, 3192, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3328, 3407, 3412, 3427, 3430, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5109, 5112, 5117, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6846, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7304, 7360, 7367, 7376, 7417, 7424, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8383, 8400, 8432, 8448, 8587, 8592, 9254, 9280, 9290, 9312, 11123, 11126, 11157, 11160, 11193, 11197, 11218, 11244, 11247, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11849, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12590, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40938, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42935, 42999, 43051, 43056, 43065, 43072, 43127, 43136, 43205, 43214, 43225, 43232, 43261, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43877, 43888, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new sliceType$4([173, 907, 909, 930, 1328, 1376, 1416, 1424, 1757, 2111, 2143, 2229, 2274, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2816, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3141, 3145, 3159, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7674, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 11209, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 42927, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new sliceType$5([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65947, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66349, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67808, 67829, 67835, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68028, 68047, 68050, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 68736, 68786, 68800, 68850, 68858, 68863, 69216, 69246, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 69968, 70006, 70016, 70093, 70096, 70132, 70144, 70206, 70272, 70313, 70320, 70378, 70384, 70393, 70400, 70412, 70415, 70416, 70419, 70457, 70460, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70656, 70749, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71133, 71168, 71236, 71248, 71257, 71264, 71276, 71296, 71351, 71360, 71369, 71424, 71449, 71453, 71467, 71472, 71487, 71840, 71922, 71935, 71935, 72192, 72263, 72272, 72323, 72326, 72354, 72384, 72440, 72704, 72773, 72784, 72812, 72816, 72847, 72850, 72886, 72960, 73014, 73018, 73031, 73040, 73049, 73728, 74649, 74752, 74868, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93952, 94020, 94032, 94078, 94095, 94111, 94176, 94177, 94208, 100332, 100352, 101106, 110592, 110878, 110960, 111355, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119272, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 121483, 121499, 121519, 122880, 122904, 122907, 122922, 124928, 125124, 125127, 125142, 125184, 125258, 125264, 125273, 125278, 125279, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127244, 127248, 127339, 127344, 127404, 127462, 127490, 127504, 127547, 127552, 127560, 127568, 127569, 127584, 127589, 127744, 128724, 128736, 128748, 128752, 128760, 128768, 128883, 128896, 128980, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 129280, 129291, 129296, 129356, 129360, 129387, 129408, 129431, 129472, 129472, 129488, 129510, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 183984, 191456, 194560, 195101, 917760, 917999]);
		isNotPrint32 = new sliceType$4([12, 39, 59, 62, 399, 926, 2057, 2102, 2134, 2291, 2564, 2580, 2584, 4285, 4405, 4576, 4626, 4743, 4745, 4750, 4766, 4868, 4905, 4913, 4916, 5210, 5212, 6813, 7177, 7223, 7336, 7431, 7434, 7483, 7486, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 55968, 57351, 57378, 57381, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 61743, 63807]);
		isGraphic = new sliceType$4([160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288]);
		shifts = $toNativeArray($kindUint, [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto"] = (function() {
	var $pkg = {}, $init, hash, io, strconv, funcType, sliceType$1, hashes, RegisterHash;
	hash = $packages["hash"];
	io = $packages["io"];
	strconv = $packages["strconv"];
	funcType = $funcType([], [hash.Hash], false);
	sliceType$1 = $sliceType(funcType);
	RegisterHash = function(h, f) {
		var f, h;
		if (h >= 20) {
			$panic(new $String("crypto: RegisterHash of unknown hash function"));
		}
		((h < 0 || h >= hashes.$length) ? ($throwRuntimeError("index out of range"), undefined) : hashes.$array[hashes.$offset + h] = f);
	};
	$pkg.RegisterHash = RegisterHash;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = hash.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		hashes = $makeSlice(sliceType$1, 20);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/sha256"] = (function() {
	var $pkg = {}, $init, crypto, errors, hash, digest, sliceType, sliceType$1, arrayType, arrayType$1, arrayType$2, arrayType$4, ptrType, _K, block, init, appendUint64, appendUint32, consumeUint64, consumeUint32, New, New224, blockGeneric;
	crypto = $packages["crypto"];
	errors = $packages["errors"];
	hash = $packages["hash"];
	digest = $pkg.digest = $newType(0, $kindStruct, "sha256.digest", true, "crypto/sha256", false, function(h_, x_, nx_, len_, is224_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.h = arrayType.zero();
			this.x = arrayType$1.zero();
			this.nx = 0;
			this.len = new $Uint64(0, 0);
			this.is224 = false;
			return;
		}
		this.h = h_;
		this.x = x_;
		this.nx = nx_;
		this.len = len_;
		this.is224 = is224_;
	});
	sliceType = $sliceType($Uint32);
	sliceType$1 = $sliceType($Uint8);
	arrayType = $arrayType($Uint32, 8);
	arrayType$1 = $arrayType($Uint8, 64);
	arrayType$2 = $arrayType($Uint8, 32);
	arrayType$4 = $arrayType($Uint32, 64);
	ptrType = $ptrType(digest);
	init = function() {
		crypto.RegisterHash(4, New224);
		crypto.RegisterHash(5, New);
	};
	digest.ptr.prototype.MarshalBinary = function() {
		var b, d;
		d = this;
		b = $makeSlice(sliceType$1, 0, 108);
		if (d.is224) {
			b = $appendSlice(b, "sha\x02");
		} else {
			b = $appendSlice(b, "sha\x03");
		}
		b = appendUint32(b, d.h[0]);
		b = appendUint32(b, d.h[1]);
		b = appendUint32(b, d.h[2]);
		b = appendUint32(b, d.h[3]);
		b = appendUint32(b, d.h[4]);
		b = appendUint32(b, d.h[5]);
		b = appendUint32(b, d.h[6]);
		b = appendUint32(b, d.h[7]);
		b = $appendSlice(b, $subslice(new sliceType$1(d.x), 0, d.nx));
		b = $subslice(b, 0, ((b.$length + 64 >> 0) - (d.nx) >> 0));
		b = appendUint64(b, d.len);
		return [b, $ifaceNil];
	};
	digest.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	digest.ptr.prototype.UnmarshalBinary = function(b) {
		var _r, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, b, d;
		d = this;
		if (b.$length < 4 || (d.is224 && !(($bytesToString($subslice(b, 0, 4))) === "sha\x02")) || (!d.is224 && !(($bytesToString($subslice(b, 0, 4))) === "sha\x03"))) {
			return errors.New("crypto/sha256: invalid hash state identifier");
		}
		if (!((b.$length === 108))) {
			return errors.New("crypto/sha256: invalid hash state size");
		}
		b = $subslice(b, 4);
		_tuple = consumeUint32(b);
		b = _tuple[0];
		d.h[0] = _tuple[1];
		_tuple$1 = consumeUint32(b);
		b = _tuple$1[0];
		d.h[1] = _tuple$1[1];
		_tuple$2 = consumeUint32(b);
		b = _tuple$2[0];
		d.h[2] = _tuple$2[1];
		_tuple$3 = consumeUint32(b);
		b = _tuple$3[0];
		d.h[3] = _tuple$3[1];
		_tuple$4 = consumeUint32(b);
		b = _tuple$4[0];
		d.h[4] = _tuple$4[1];
		_tuple$5 = consumeUint32(b);
		b = _tuple$5[0];
		d.h[5] = _tuple$5[1];
		_tuple$6 = consumeUint32(b);
		b = _tuple$6[0];
		d.h[6] = _tuple$6[1];
		_tuple$7 = consumeUint32(b);
		b = _tuple$7[0];
		d.h[7] = _tuple$7[1];
		b = $subslice(b, $copySlice(new sliceType$1(d.x), b));
		_tuple$8 = consumeUint64(b);
		b = _tuple$8[0];
		d.len = _tuple$8[1];
		d.nx = (_r = ((d.len.$low >> 0)) % 64, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		return $ifaceNil;
	};
	digest.prototype.UnmarshalBinary = function(b) { return this.$val.UnmarshalBinary(b); };
	appendUint64 = function(b, x) {
		var a, b, x;
		a = $toNativeArray($kindUint8, [(($shiftRightUint64(x, 56).$low << 24 >>> 24)), (($shiftRightUint64(x, 48).$low << 24 >>> 24)), (($shiftRightUint64(x, 40).$low << 24 >>> 24)), (($shiftRightUint64(x, 32).$low << 24 >>> 24)), (($shiftRightUint64(x, 24).$low << 24 >>> 24)), (($shiftRightUint64(x, 16).$low << 24 >>> 24)), (($shiftRightUint64(x, 8).$low << 24 >>> 24)), ((x.$low << 24 >>> 24))]);
		return $appendSlice(b, new sliceType$1(a));
	};
	appendUint32 = function(b, x) {
		var a, b, x;
		a = $toNativeArray($kindUint8, [(((x >>> 24 >>> 0) << 24 >>> 24)), (((x >>> 16 >>> 0) << 24 >>> 24)), (((x >>> 8 >>> 0) << 24 >>> 24)), ((x << 24 >>> 24))]);
		return $appendSlice(b, new sliceType$1(a));
	};
	consumeUint64 = function(b) {
		var b, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		x$14 = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), x$7 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		return [$subslice(b, 8), x$14];
	};
	consumeUint32 = function(b) {
		var b, x;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		x = ((((((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0)) | ((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0)) << 24 >>> 0)) >>> 0;
		return [$subslice(b, 4), x];
	};
	digest.ptr.prototype.Reset = function() {
		var d;
		d = this;
		if (!d.is224) {
			d.h[0] = 1779033703;
			d.h[1] = 3144134277;
			d.h[2] = 1013904242;
			d.h[3] = 2773480762;
			d.h[4] = 1359893119;
			d.h[5] = 2600822924;
			d.h[6] = 528734635;
			d.h[7] = 1541459225;
		} else {
			d.h[0] = 3238371032;
			d.h[1] = 914150663;
			d.h[2] = 812702999;
			d.h[3] = 4144912697;
			d.h[4] = 4290775857;
			d.h[5] = 1750603025;
			d.h[6] = 1694076839;
			d.h[7] = 3204075428;
		}
		d.nx = 0;
		d.len = new $Uint64(0, 0);
	};
	digest.prototype.Reset = function() { return this.$val.Reset(); };
	New = function() {
		var d;
		d = new digest.ptr(arrayType.zero(), arrayType$1.zero(), 0, new $Uint64(0, 0), false);
		d.Reset();
		return d;
	};
	$pkg.New = New;
	New224 = function() {
		var d;
		d = new digest.ptr(arrayType.zero(), arrayType$1.zero(), 0, new $Uint64(0, 0), false);
		d.is224 = true;
		d.Reset();
		return d;
	};
	$pkg.New224 = New224;
	digest.ptr.prototype.Size = function() {
		var d;
		d = this;
		if (!d.is224) {
			return 32;
		}
		return 28;
	};
	digest.prototype.Size = function() { return this.$val.Size(); };
	digest.ptr.prototype.BlockSize = function() {
		var d;
		d = this;
		return 64;
	};
	digest.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	digest.ptr.prototype.Write = function(p) {
		var d, err, n, n$1, nn, p, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; d = $f.d; err = $f.err; n = $f.n; n$1 = $f.n$1; nn = $f.nn; p = $f.p; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		nn = 0;
		err = $ifaceNil;
		d = this;
		nn = p.$length;
		d.len = (x = d.len, x$1 = (new $Uint64(0, nn)), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
		/* */ if (d.nx > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.nx > 0) { */ case 1:
			n = $copySlice($subslice(new sliceType$1(d.x), d.nx), p);
			d.nx = d.nx + (n) >> 0;
			/* */ if (d.nx === 64) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (d.nx === 64) { */ case 3:
				$r = block(d, new sliceType$1(d.x)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				d.nx = 0;
			/* } */ case 4:
			p = $subslice(p, n);
		/* } */ case 2:
		/* */ if (p.$length >= 64) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (p.$length >= 64) { */ case 6:
			n$1 = (p.$length & ~63) >> 0;
			$r = block(d, $subslice(p, 0, n$1)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p = $subslice(p, n$1);
		/* } */ case 7:
		if (p.$length > 0) {
			d.nx = $copySlice(new sliceType$1(d.x), p);
		}
		$s = -1; return [nn, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: digest.ptr.prototype.Write }; } $f.d = d; $f.err = err; $f.n = n; $f.n$1 = n$1; $f.nn = nn; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	digest.prototype.Write = function(p) { return this.$val.Write(p); };
	digest.ptr.prototype.Sum = function(in$1) {
		var _r, d, d0, hash$1, in$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; d0 = $f.d0; hash$1 = $f.hash$1; in$1 = $f.in$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d0 = this;
		d = $clone(d0, digest);
		_r = d.checkSum(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		hash$1 = $clone(_r, arrayType$2);
		if (d.is224) {
			$s = -1; return $appendSlice(in$1, $subslice(new sliceType$1(hash$1), 0, 28));
		}
		$s = -1; return $appendSlice(in$1, new sliceType$1(hash$1));
		/* */ } return; } if ($f === undefined) { $f = { $blk: digest.ptr.prototype.Sum }; } $f._r = _r; $f.d = d; $f.d0 = d0; $f.hash$1 = hash$1; $f.in$1 = in$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	digest.prototype.Sum = function(in$1) { return this.$val.Sum(in$1); };
	digest.ptr.prototype.checkSum = function() {
		var _i, _r, _r$1, _r$2, _ref, d, digest$1, h, i, i$1, len, s, tmp, x, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; d = $f.d; digest$1 = $f.digest$1; h = $f.h; i = $f.i; i$1 = $f.i$1; len = $f.len; s = $f.s; tmp = $f.tmp; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		len = d.len;
		tmp = arrayType$1.zero();
		tmp[0] = 128;
		/* */ if ((x = $div64(len, new $Uint64(0, 64), true), (x.$high < 0 || (x.$high === 0 && x.$low < 56)))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x = $div64(len, new $Uint64(0, 64), true), (x.$high < 0 || (x.$high === 0 && x.$low < 56)))) { */ case 1:
			_r = d.Write($subslice(new sliceType$1(tmp), 0, $flatten64((x$1 = $div64(len, new $Uint64(0, 64), true), new $Uint64(0 - x$1.$high, 56 - x$1.$low))))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = d.Write($subslice(new sliceType$1(tmp), 0, $flatten64((x$2 = $div64(len, new $Uint64(0, 64), true), new $Uint64(0 - x$2.$high, 120 - x$2.$low))))); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		len = $shiftLeft64(len, (3));
		i = 0;
		while (true) {
			if (!(i < 8)) { break; }
			((i < 0 || i >= tmp.length) ? ($throwRuntimeError("index out of range"), undefined) : tmp[i] = (($shiftRightUint64(len, ((56 - (8 * i >>> 0) >>> 0))).$low << 24 >>> 24)));
			i = i + (1) >>> 0;
		}
		_r$2 = d.Write($subslice(new sliceType$1(tmp), 0, 8)); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		if (!((d.nx === 0))) {
			$panic(new $String("d.nx != 0"));
		}
		h = new sliceType(d.h);
		if (d.is224) {
			h = $subslice(new sliceType(d.h), 0, 7);
		}
		digest$1 = arrayType$2.zero();
		_ref = h;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i$1 = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			(x$3 = $imul(i$1, 4), ((x$3 < 0 || x$3 >= digest$1.length) ? ($throwRuntimeError("index out of range"), undefined) : digest$1[x$3] = (((s >>> 24 >>> 0) << 24 >>> 24))));
			(x$4 = ($imul(i$1, 4)) + 1 >> 0, ((x$4 < 0 || x$4 >= digest$1.length) ? ($throwRuntimeError("index out of range"), undefined) : digest$1[x$4] = (((s >>> 16 >>> 0) << 24 >>> 24))));
			(x$5 = ($imul(i$1, 4)) + 2 >> 0, ((x$5 < 0 || x$5 >= digest$1.length) ? ($throwRuntimeError("index out of range"), undefined) : digest$1[x$5] = (((s >>> 8 >>> 0) << 24 >>> 24))));
			(x$6 = ($imul(i$1, 4)) + 3 >> 0, ((x$6 < 0 || x$6 >= digest$1.length) ? ($throwRuntimeError("index out of range"), undefined) : digest$1[x$6] = ((s << 24 >>> 24))));
			_i++;
		}
		$s = -1; return digest$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: digest.ptr.prototype.checkSum }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.d = d; $f.digest$1 = digest$1; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.len = len; $f.s = s; $f.tmp = tmp; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	digest.prototype.checkSum = function() { return this.$val.checkSum(); };
	blockGeneric = function(dig, p) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, a, b, c, d, dig, e, f, g, h, h0, h1, h2, h3, h4, h5, h6, h7, i, i$1, i$2, j, p, t1, t1$1, t2, t2$1, v1, v2, w, x, x$1, x$2, x$3, x$4, x$5, x$6;
		w = arrayType$4.zero();
		_tmp = dig.h[0];
		_tmp$1 = dig.h[1];
		_tmp$2 = dig.h[2];
		_tmp$3 = dig.h[3];
		_tmp$4 = dig.h[4];
		_tmp$5 = dig.h[5];
		_tmp$6 = dig.h[6];
		_tmp$7 = dig.h[7];
		h0 = _tmp;
		h1 = _tmp$1;
		h2 = _tmp$2;
		h3 = _tmp$3;
		h4 = _tmp$4;
		h5 = _tmp$5;
		h6 = _tmp$6;
		h7 = _tmp$7;
		while (true) {
			if (!(p.$length >= 64)) { break; }
			i = 0;
			while (true) {
				if (!(i < 16)) { break; }
				j = $imul(i, 4);
				((i < 0 || i >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[i] = (((((((((((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]) >>> 0)) << 24 >>> 0) | ((((x = j + 1 >> 0, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x])) >>> 0)) << 16 >>> 0)) >>> 0) | ((((x$1 = j + 2 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$1])) >>> 0)) << 8 >>> 0)) >>> 0) | (((x$2 = j + 3 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$2])) >>> 0))) >>> 0));
				i = i + (1) >> 0;
			}
			i$1 = 16;
			while (true) {
				if (!(i$1 < 64)) { break; }
				v1 = (x$3 = i$1 - 2 >> 0, ((x$3 < 0 || x$3 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$3]));
				t1 = (((((((v1 >>> 17 >>> 0) | (v1 << 15 >>> 0)) >>> 0)) ^ ((((v1 >>> 19 >>> 0) | (v1 << 13 >>> 0)) >>> 0))) >>> 0) ^ ((v1 >>> 10 >>> 0))) >>> 0;
				v2 = (x$4 = i$1 - 15 >> 0, ((x$4 < 0 || x$4 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$4]));
				t2 = (((((((v2 >>> 7 >>> 0) | (v2 << 25 >>> 0)) >>> 0)) ^ ((((v2 >>> 18 >>> 0) | (v2 << 14 >>> 0)) >>> 0))) >>> 0) ^ ((v2 >>> 3 >>> 0))) >>> 0;
				((i$1 < 0 || i$1 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[i$1] = (((t1 + (x$5 = i$1 - 7 >> 0, ((x$5 < 0 || x$5 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$5])) >>> 0) + t2 >>> 0) + (x$6 = i$1 - 16 >> 0, ((x$6 < 0 || x$6 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$6])) >>> 0));
				i$1 = i$1 + (1) >> 0;
			}
			_tmp$8 = h0;
			_tmp$9 = h1;
			_tmp$10 = h2;
			_tmp$11 = h3;
			_tmp$12 = h4;
			_tmp$13 = h5;
			_tmp$14 = h6;
			_tmp$15 = h7;
			a = _tmp$8;
			b = _tmp$9;
			c = _tmp$10;
			d = _tmp$11;
			e = _tmp$12;
			f = _tmp$13;
			g = _tmp$14;
			h = _tmp$15;
			i$2 = 0;
			while (true) {
				if (!(i$2 < 64)) { break; }
				t1$1 = (((h + (((((((((e >>> 6 >>> 0) | (e << 26 >>> 0)) >>> 0)) ^ ((((e >>> 11 >>> 0) | (e << 21 >>> 0)) >>> 0))) >>> 0) ^ ((((e >>> 25 >>> 0) | (e << 7 >>> 0)) >>> 0))) >>> 0)) >>> 0) + ((((((e & f) >>> 0)) ^ ((((~e >>> 0) & g) >>> 0))) >>> 0)) >>> 0) + ((i$2 < 0 || i$2 >= _K.$length) ? ($throwRuntimeError("index out of range"), undefined) : _K.$array[_K.$offset + i$2]) >>> 0) + ((i$2 < 0 || i$2 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[i$2]) >>> 0;
				t2$1 = (((((((((a >>> 2 >>> 0) | (a << 30 >>> 0)) >>> 0)) ^ ((((a >>> 13 >>> 0) | (a << 19 >>> 0)) >>> 0))) >>> 0) ^ ((((a >>> 22 >>> 0) | (a << 10 >>> 0)) >>> 0))) >>> 0)) + ((((((((a & b) >>> 0)) ^ (((a & c) >>> 0))) >>> 0) ^ (((b & c) >>> 0))) >>> 0)) >>> 0;
				h = g;
				g = f;
				f = e;
				e = d + t1$1 >>> 0;
				d = c;
				c = b;
				b = a;
				a = t1$1 + t2$1 >>> 0;
				i$2 = i$2 + (1) >> 0;
			}
			h0 = h0 + (a) >>> 0;
			h1 = h1 + (b) >>> 0;
			h2 = h2 + (c) >>> 0;
			h3 = h3 + (d) >>> 0;
			h4 = h4 + (e) >>> 0;
			h5 = h5 + (f) >>> 0;
			h6 = h6 + (g) >>> 0;
			h7 = h7 + (h) >>> 0;
			p = $subslice(p, 64);
		}
		_tmp$16 = h0;
		_tmp$17 = h1;
		_tmp$18 = h2;
		_tmp$19 = h3;
		_tmp$20 = h4;
		_tmp$21 = h5;
		_tmp$22 = h6;
		_tmp$23 = h7;
		dig.h[0] = _tmp$16;
		dig.h[1] = _tmp$17;
		dig.h[2] = _tmp$18;
		dig.h[3] = _tmp$19;
		dig.h[4] = _tmp$20;
		dig.h[5] = _tmp$21;
		dig.h[6] = _tmp$22;
		dig.h[7] = _tmp$23;
	};
	ptrType.methods = [{prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType$1], [sliceType$1], false)}, {prop: "checkSum", name: "checkSum", pkg: "crypto/sha256", typ: $funcType([], [arrayType$2], false)}];
	digest.init("crypto/sha256", [{prop: "h", name: "h", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "x", name: "x", anonymous: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "nx", name: "nx", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "len", name: "len", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "is224", name: "is224", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = crypto.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_K = new sliceType([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
		block = blockGeneric;
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, $init, RangeTable, Range16, Range32, sliceType, sliceType$1, ptrType, sliceType$2, _L, _Lu, _M, _N, _Nd, _P, _S, _Zs, _White_Space, properties, IsDigit, IsGraphic, In, IsLetter, IsSpace, is16, is32, Is, isExcludingLatin, IsUpper;
	RangeTable = $pkg.RangeTable = $newType(0, $kindStruct, "unicode.RangeTable", true, "unicode", true, function(R16_, R32_, LatinOffset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R16 = sliceType.nil;
			this.R32 = sliceType$1.nil;
			this.LatinOffset = 0;
			return;
		}
		this.R16 = R16_;
		this.R32 = R32_;
		this.LatinOffset = LatinOffset_;
	});
	Range16 = $pkg.Range16 = $newType(0, $kindStruct, "unicode.Range16", true, "unicode", true, function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	Range32 = $pkg.Range32 = $newType(0, $kindStruct, "unicode.Range32", true, "unicode", true, function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	sliceType = $sliceType(Range16);
	sliceType$1 = $sliceType(Range32);
	ptrType = $ptrType(RangeTable);
	sliceType$2 = $sliceType(ptrType);
	IsDigit = function(r) {
		var r;
		if (r <= 255) {
			return 48 <= r && r <= 57;
		}
		return isExcludingLatin($pkg.Digit, r);
	};
	$pkg.IsDigit = IsDigit;
	IsGraphic = function(r) {
		var r, x;
		if (((r >>> 0)) <= 255) {
			return !(((((x = ((r << 24 >>> 24)), ((x < 0 || x >= properties.length) ? ($throwRuntimeError("index out of range"), undefined) : properties[x])) & 144) >>> 0) === 0));
		}
		return In(r, $pkg.GraphicRanges);
	};
	$pkg.IsGraphic = IsGraphic;
	In = function(r, ranges) {
		var _i, _ref, inside, r, ranges;
		_ref = ranges;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			inside = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (Is(inside, r)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	$pkg.In = In;
	IsLetter = function(r) {
		var r, x;
		if (((r >>> 0)) <= 255) {
			return !(((((x = ((r << 24 >>> 24)), ((x < 0 || x >= properties.length) ? ($throwRuntimeError("index out of range"), undefined) : properties[x])) & 96) >>> 0) === 0));
		}
		return isExcludingLatin($pkg.Letter, r);
	};
	$pkg.IsLetter = IsLetter;
	IsSpace = function(r) {
		var _1, r;
		if (((r >>> 0)) <= 255) {
			_1 = r;
			if ((_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12)) || (_1 === (13)) || (_1 === (32)) || (_1 === (133)) || (_1 === (160))) {
				return true;
			}
			return false;
		}
		return isExcludingLatin($pkg.White_Space, r);
	};
	$pkg.IsSpace = IsSpace;
	is16 = function(ranges, r) {
		var _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18 || r <= 255) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (range_.Stride === 1) || ((_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0);
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = ((m < 0 || m >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + m]);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (range_$1.Stride === 1) || ((_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0);
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	is32 = function(ranges, r) {
		var _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (range_.Stride === 1) || ((_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0);
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = $clone(((m < 0 || m >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + m]), Range32);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (range_$1.Stride === 1) || ((_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0);
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	Is = function(rangeTab, r) {
		var r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		if (r16.$length > 0 && r <= (((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? ($throwRuntimeError("index out of range"), undefined) : r16.$array[r16.$offset + x])).Hi >> 0))) {
			return is16(r16, ((r << 16 >>> 16)));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= (((0 >= r32.$length ? ($throwRuntimeError("index out of range"), undefined) : r32.$array[r32.$offset + 0]).Lo >> 0))) {
			return is32(r32, ((r >>> 0)));
		}
		return false;
	};
	$pkg.Is = Is;
	isExcludingLatin = function(rangeTab, r) {
		var off, r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		off = rangeTab.LatinOffset;
		if (r16.$length > off && r <= (((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? ($throwRuntimeError("index out of range"), undefined) : r16.$array[r16.$offset + x])).Hi >> 0))) {
			return is16($subslice(r16, off), ((r << 16 >>> 16)));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= (((0 >= r32.$length ? ($throwRuntimeError("index out of range"), undefined) : r32.$array[r32.$offset + 0]).Lo >> 0))) {
			return is32(r32, ((r >>> 0)));
		}
		return false;
	};
	IsUpper = function(r) {
		var r, x;
		if (((r >>> 0)) <= 255) {
			return (((x = ((r << 24 >>> 24)), ((x < 0 || x >= properties.length) ? ($throwRuntimeError("index out of range"), undefined) : properties[x])) & 96) >>> 0) === 32;
		}
		return isExcludingLatin($pkg.Upper, r);
	};
	$pkg.IsUpper = IsUpper;
	RangeTable.init("", [{prop: "R16", name: "R16", anonymous: false, exported: true, typ: sliceType, tag: ""}, {prop: "R32", name: "R32", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "LatinOffset", name: "LatinOffset", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	Range16.init("", [{prop: "Lo", name: "Lo", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Hi", name: "Hi", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Uint16, tag: ""}]);
	Range32.init("", [{prop: "Lo", name: "Lo", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Uint32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_L = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(97, 122, 1), new Range16.ptr(170, 181, 11), new Range16.ptr(186, 192, 6), new Range16.ptr(193, 214, 1), new Range16.ptr(216, 246, 1), new Range16.ptr(248, 705, 1), new Range16.ptr(710, 721, 1), new Range16.ptr(736, 740, 1), new Range16.ptr(748, 750, 2), new Range16.ptr(880, 884, 1), new Range16.ptr(886, 887, 1), new Range16.ptr(890, 893, 1), new Range16.ptr(895, 902, 7), new Range16.ptr(904, 906, 1), new Range16.ptr(908, 910, 2), new Range16.ptr(911, 929, 1), new Range16.ptr(931, 1013, 1), new Range16.ptr(1015, 1153, 1), new Range16.ptr(1162, 1327, 1), new Range16.ptr(1329, 1366, 1), new Range16.ptr(1369, 1377, 8), new Range16.ptr(1378, 1415, 1), new Range16.ptr(1488, 1514, 1), new Range16.ptr(1520, 1522, 1), new Range16.ptr(1568, 1610, 1), new Range16.ptr(1646, 1647, 1), new Range16.ptr(1649, 1747, 1), new Range16.ptr(1749, 1765, 16), new Range16.ptr(1766, 1774, 8), new Range16.ptr(1775, 1786, 11), new Range16.ptr(1787, 1788, 1), new Range16.ptr(1791, 1808, 17), new Range16.ptr(1810, 1839, 1), new Range16.ptr(1869, 1957, 1), new Range16.ptr(1969, 1994, 25), new Range16.ptr(1995, 2026, 1), new Range16.ptr(2036, 2037, 1), new Range16.ptr(2042, 2048, 6), new Range16.ptr(2049, 2069, 1), new Range16.ptr(2074, 2084, 10), new Range16.ptr(2088, 2112, 24), new Range16.ptr(2113, 2136, 1), new Range16.ptr(2144, 2154, 1), new Range16.ptr(2208, 2228, 1), new Range16.ptr(2230, 2237, 1), new Range16.ptr(2308, 2361, 1), new Range16.ptr(2365, 2384, 19), new Range16.ptr(2392, 2401, 1), new Range16.ptr(2417, 2432, 1), new Range16.ptr(2437, 2444, 1), new Range16.ptr(2447, 2448, 1), new Range16.ptr(2451, 2472, 1), new Range16.ptr(2474, 2480, 1), new Range16.ptr(2482, 2486, 4), new Range16.ptr(2487, 2489, 1), new Range16.ptr(2493, 2510, 17), new Range16.ptr(2524, 2525, 1), new Range16.ptr(2527, 2529, 1), new Range16.ptr(2544, 2545, 1), new Range16.ptr(2556, 2565, 9), new Range16.ptr(2566, 2570, 1), new Range16.ptr(2575, 2576, 1), new Range16.ptr(2579, 2600, 1), new Range16.ptr(2602, 2608, 1), new Range16.ptr(2610, 2611, 1), new Range16.ptr(2613, 2614, 1), new Range16.ptr(2616, 2617, 1), new Range16.ptr(2649, 2652, 1), new Range16.ptr(2654, 2674, 20), new Range16.ptr(2675, 2676, 1), new Range16.ptr(2693, 2701, 1), new Range16.ptr(2703, 2705, 1), new Range16.ptr(2707, 2728, 1), new Range16.ptr(2730, 2736, 1), new Range16.ptr(2738, 2739, 1), new Range16.ptr(2741, 2745, 1), new Range16.ptr(2749, 2768, 19), new Range16.ptr(2784, 2785, 1), new Range16.ptr(2809, 2821, 12), new Range16.ptr(2822, 2828, 1), new Range16.ptr(2831, 2832, 1), new Range16.ptr(2835, 2856, 1), new Range16.ptr(2858, 2864, 1), new Range16.ptr(2866, 2867, 1), new Range16.ptr(2869, 2873, 1), new Range16.ptr(2877, 2908, 31), new Range16.ptr(2909, 2911, 2), new Range16.ptr(2912, 2913, 1), new Range16.ptr(2929, 2947, 18), new Range16.ptr(2949, 2954, 1), new Range16.ptr(2958, 2960, 1), new Range16.ptr(2962, 2965, 1), new Range16.ptr(2969, 2970, 1), new Range16.ptr(2972, 2974, 2), new Range16.ptr(2975, 2979, 4), new Range16.ptr(2980, 2984, 4), new Range16.ptr(2985, 2986, 1), new Range16.ptr(2990, 3001, 1), new Range16.ptr(3024, 3077, 53), new Range16.ptr(3078, 3084, 1), new Range16.ptr(3086, 3088, 1), new Range16.ptr(3090, 3112, 1), new Range16.ptr(3114, 3129, 1), new Range16.ptr(3133, 3160, 27), new Range16.ptr(3161, 3162, 1), new Range16.ptr(3168, 3169, 1), new Range16.ptr(3200, 3205, 5), new Range16.ptr(3206, 3212, 1), new Range16.ptr(3214, 3216, 1), new Range16.ptr(3218, 3240, 1), new Range16.ptr(3242, 3251, 1), new Range16.ptr(3253, 3257, 1), new Range16.ptr(3261, 3294, 33), new Range16.ptr(3296, 3297, 1), new Range16.ptr(3313, 3314, 1), new Range16.ptr(3333, 3340, 1), new Range16.ptr(3342, 3344, 1), new Range16.ptr(3346, 3386, 1), new Range16.ptr(3389, 3406, 17), new Range16.ptr(3412, 3414, 1), new Range16.ptr(3423, 3425, 1), new Range16.ptr(3450, 3455, 1), new Range16.ptr(3461, 3478, 1), new Range16.ptr(3482, 3505, 1), new Range16.ptr(3507, 3515, 1), new Range16.ptr(3517, 3520, 3), new Range16.ptr(3521, 3526, 1), new Range16.ptr(3585, 3632, 1), new Range16.ptr(3634, 3635, 1), new Range16.ptr(3648, 3654, 1), new Range16.ptr(3713, 3714, 1), new Range16.ptr(3716, 3719, 3), new Range16.ptr(3720, 3722, 2), new Range16.ptr(3725, 3732, 7), new Range16.ptr(3733, 3735, 1), new Range16.ptr(3737, 3743, 1), new Range16.ptr(3745, 3747, 1), new Range16.ptr(3749, 3751, 2), new Range16.ptr(3754, 3755, 1), new Range16.ptr(3757, 3760, 1), new Range16.ptr(3762, 3763, 1), new Range16.ptr(3773, 3776, 3), new Range16.ptr(3777, 3780, 1), new Range16.ptr(3782, 3804, 22), new Range16.ptr(3805, 3807, 1), new Range16.ptr(3840, 3904, 64), new Range16.ptr(3905, 3911, 1), new Range16.ptr(3913, 3948, 1), new Range16.ptr(3976, 3980, 1), new Range16.ptr(4096, 4138, 1), new Range16.ptr(4159, 4176, 17), new Range16.ptr(4177, 4181, 1), new Range16.ptr(4186, 4189, 1), new Range16.ptr(4193, 4197, 4), new Range16.ptr(4198, 4206, 8), new Range16.ptr(4207, 4208, 1), new Range16.ptr(4213, 4225, 1), new Range16.ptr(4238, 4256, 18), new Range16.ptr(4257, 4293, 1), new Range16.ptr(4295, 4301, 6), new Range16.ptr(4304, 4346, 1), new Range16.ptr(4348, 4680, 1), new Range16.ptr(4682, 4685, 1), new Range16.ptr(4688, 4694, 1), new Range16.ptr(4696, 4698, 2), new Range16.ptr(4699, 4701, 1), new Range16.ptr(4704, 4744, 1), new Range16.ptr(4746, 4749, 1), new Range16.ptr(4752, 4784, 1), new Range16.ptr(4786, 4789, 1), new Range16.ptr(4792, 4798, 1), new Range16.ptr(4800, 4802, 2), new Range16.ptr(4803, 4805, 1), new Range16.ptr(4808, 4822, 1), new Range16.ptr(4824, 4880, 1), new Range16.ptr(4882, 4885, 1), new Range16.ptr(4888, 4954, 1), new Range16.ptr(4992, 5007, 1), new Range16.ptr(5024, 5109, 1), new Range16.ptr(5112, 5117, 1), new Range16.ptr(5121, 5740, 1), new Range16.ptr(5743, 5759, 1), new Range16.ptr(5761, 5786, 1), new Range16.ptr(5792, 5866, 1), new Range16.ptr(5873, 5880, 1), new Range16.ptr(5888, 5900, 1), new Range16.ptr(5902, 5905, 1), new Range16.ptr(5920, 5937, 1), new Range16.ptr(5952, 5969, 1), new Range16.ptr(5984, 5996, 1), new Range16.ptr(5998, 6000, 1), new Range16.ptr(6016, 6067, 1), new Range16.ptr(6103, 6108, 5), new Range16.ptr(6176, 6263, 1), new Range16.ptr(6272, 6276, 1), new Range16.ptr(6279, 6312, 1), new Range16.ptr(6314, 6320, 6), new Range16.ptr(6321, 6389, 1), new Range16.ptr(6400, 6430, 1), new Range16.ptr(6480, 6509, 1), new Range16.ptr(6512, 6516, 1), new Range16.ptr(6528, 6571, 1), new Range16.ptr(6576, 6601, 1), new Range16.ptr(6656, 6678, 1), new Range16.ptr(6688, 6740, 1), new Range16.ptr(6823, 6917, 94), new Range16.ptr(6918, 6963, 1), new Range16.ptr(6981, 6987, 1), new Range16.ptr(7043, 7072, 1), new Range16.ptr(7086, 7087, 1), new Range16.ptr(7098, 7141, 1), new Range16.ptr(7168, 7203, 1), new Range16.ptr(7245, 7247, 1), new Range16.ptr(7258, 7293, 1), new Range16.ptr(7296, 7304, 1), new Range16.ptr(7401, 7404, 1), new Range16.ptr(7406, 7409, 1), new Range16.ptr(7413, 7414, 1), new Range16.ptr(7424, 7615, 1), new Range16.ptr(7680, 7957, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7968, 8005, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8016, 8023, 1), new Range16.ptr(8025, 8031, 2), new Range16.ptr(8032, 8061, 1), new Range16.ptr(8064, 8116, 1), new Range16.ptr(8118, 8124, 1), new Range16.ptr(8126, 8130, 4), new Range16.ptr(8131, 8132, 1), new Range16.ptr(8134, 8140, 1), new Range16.ptr(8144, 8147, 1), new Range16.ptr(8150, 8155, 1), new Range16.ptr(8160, 8172, 1), new Range16.ptr(8178, 8180, 1), new Range16.ptr(8182, 8188, 1), new Range16.ptr(8305, 8319, 14), new Range16.ptr(8336, 8348, 1), new Range16.ptr(8450, 8455, 5), new Range16.ptr(8458, 8467, 1), new Range16.ptr(8469, 8473, 4), new Range16.ptr(8474, 8477, 1), new Range16.ptr(8484, 8490, 2), new Range16.ptr(8491, 8493, 1), new Range16.ptr(8495, 8505, 1), new Range16.ptr(8508, 8511, 1), new Range16.ptr(8517, 8521, 1), new Range16.ptr(8526, 8579, 53), new Range16.ptr(8580, 11264, 2684), new Range16.ptr(11265, 11310, 1), new Range16.ptr(11312, 11358, 1), new Range16.ptr(11360, 11492, 1), new Range16.ptr(11499, 11502, 1), new Range16.ptr(11506, 11507, 1), new Range16.ptr(11520, 11557, 1), new Range16.ptr(11559, 11565, 6), new Range16.ptr(11568, 11623, 1), new Range16.ptr(11631, 11648, 17), new Range16.ptr(11649, 11670, 1), new Range16.ptr(11680, 11686, 1), new Range16.ptr(11688, 11694, 1), new Range16.ptr(11696, 11702, 1), new Range16.ptr(11704, 11710, 1), new Range16.ptr(11712, 11718, 1), new Range16.ptr(11720, 11726, 1), new Range16.ptr(11728, 11734, 1), new Range16.ptr(11736, 11742, 1), new Range16.ptr(11823, 12293, 470), new Range16.ptr(12294, 12337, 43), new Range16.ptr(12338, 12341, 1), new Range16.ptr(12347, 12348, 1), new Range16.ptr(12353, 12438, 1), new Range16.ptr(12445, 12447, 1), new Range16.ptr(12449, 12538, 1), new Range16.ptr(12540, 12543, 1), new Range16.ptr(12549, 12590, 1), new Range16.ptr(12593, 12686, 1), new Range16.ptr(12704, 12730, 1), new Range16.ptr(12784, 12799, 1), new Range16.ptr(13312, 19893, 1), new Range16.ptr(19968, 40938, 1), new Range16.ptr(40960, 42124, 1), new Range16.ptr(42192, 42237, 1), new Range16.ptr(42240, 42508, 1), new Range16.ptr(42512, 42527, 1), new Range16.ptr(42538, 42539, 1), new Range16.ptr(42560, 42606, 1), new Range16.ptr(42623, 42653, 1), new Range16.ptr(42656, 42725, 1), new Range16.ptr(42775, 42783, 1), new Range16.ptr(42786, 42888, 1), new Range16.ptr(42891, 42926, 1), new Range16.ptr(42928, 42935, 1), new Range16.ptr(42999, 43009, 1), new Range16.ptr(43011, 43013, 1), new Range16.ptr(43015, 43018, 1), new Range16.ptr(43020, 43042, 1), new Range16.ptr(43072, 43123, 1), new Range16.ptr(43138, 43187, 1), new Range16.ptr(43250, 43255, 1), new Range16.ptr(43259, 43261, 2), new Range16.ptr(43274, 43301, 1), new Range16.ptr(43312, 43334, 1), new Range16.ptr(43360, 43388, 1), new Range16.ptr(43396, 43442, 1), new Range16.ptr(43471, 43488, 17), new Range16.ptr(43489, 43492, 1), new Range16.ptr(43494, 43503, 1), new Range16.ptr(43514, 43518, 1), new Range16.ptr(43520, 43560, 1), new Range16.ptr(43584, 43586, 1), new Range16.ptr(43588, 43595, 1), new Range16.ptr(43616, 43638, 1), new Range16.ptr(43642, 43646, 4), new Range16.ptr(43647, 43695, 1), new Range16.ptr(43697, 43701, 4), new Range16.ptr(43702, 43705, 3), new Range16.ptr(43706, 43709, 1), new Range16.ptr(43712, 43714, 2), new Range16.ptr(43739, 43741, 1), new Range16.ptr(43744, 43754, 1), new Range16.ptr(43762, 43764, 1), new Range16.ptr(43777, 43782, 1), new Range16.ptr(43785, 43790, 1), new Range16.ptr(43793, 43798, 1), new Range16.ptr(43808, 43814, 1), new Range16.ptr(43816, 43822, 1), new Range16.ptr(43824, 43866, 1), new Range16.ptr(43868, 43877, 1), new Range16.ptr(43888, 44002, 1), new Range16.ptr(44032, 55203, 1), new Range16.ptr(55216, 55238, 1), new Range16.ptr(55243, 55291, 1), new Range16.ptr(63744, 64109, 1), new Range16.ptr(64112, 64217, 1), new Range16.ptr(64256, 64262, 1), new Range16.ptr(64275, 64279, 1), new Range16.ptr(64285, 64287, 2), new Range16.ptr(64288, 64296, 1), new Range16.ptr(64298, 64310, 1), new Range16.ptr(64312, 64316, 1), new Range16.ptr(64318, 64320, 2), new Range16.ptr(64321, 64323, 2), new Range16.ptr(64324, 64326, 2), new Range16.ptr(64327, 64433, 1), new Range16.ptr(64467, 64829, 1), new Range16.ptr(64848, 64911, 1), new Range16.ptr(64914, 64967, 1), new Range16.ptr(65008, 65019, 1), new Range16.ptr(65136, 65140, 1), new Range16.ptr(65142, 65276, 1), new Range16.ptr(65313, 65338, 1), new Range16.ptr(65345, 65370, 1), new Range16.ptr(65382, 65470, 1), new Range16.ptr(65474, 65479, 1), new Range16.ptr(65482, 65487, 1), new Range16.ptr(65490, 65495, 1), new Range16.ptr(65498, 65500, 1)]), new sliceType$1([new Range32.ptr(65536, 65547, 1), new Range32.ptr(65549, 65574, 1), new Range32.ptr(65576, 65594, 1), new Range32.ptr(65596, 65597, 1), new Range32.ptr(65599, 65613, 1), new Range32.ptr(65616, 65629, 1), new Range32.ptr(65664, 65786, 1), new Range32.ptr(66176, 66204, 1), new Range32.ptr(66208, 66256, 1), new Range32.ptr(66304, 66335, 1), new Range32.ptr(66349, 66368, 1), new Range32.ptr(66370, 66377, 1), new Range32.ptr(66384, 66421, 1), new Range32.ptr(66432, 66461, 1), new Range32.ptr(66464, 66499, 1), new Range32.ptr(66504, 66511, 1), new Range32.ptr(66560, 66717, 1), new Range32.ptr(66736, 66771, 1), new Range32.ptr(66776, 66811, 1), new Range32.ptr(66816, 66855, 1), new Range32.ptr(66864, 66915, 1), new Range32.ptr(67072, 67382, 1), new Range32.ptr(67392, 67413, 1), new Range32.ptr(67424, 67431, 1), new Range32.ptr(67584, 67589, 1), new Range32.ptr(67592, 67594, 2), new Range32.ptr(67595, 67637, 1), new Range32.ptr(67639, 67640, 1), new Range32.ptr(67644, 67647, 3), new Range32.ptr(67648, 67669, 1), new Range32.ptr(67680, 67702, 1), new Range32.ptr(67712, 67742, 1), new Range32.ptr(67808, 67826, 1), new Range32.ptr(67828, 67829, 1), new Range32.ptr(67840, 67861, 1), new Range32.ptr(67872, 67897, 1), new Range32.ptr(67968, 68023, 1), new Range32.ptr(68030, 68031, 1), new Range32.ptr(68096, 68112, 16), new Range32.ptr(68113, 68115, 1), new Range32.ptr(68117, 68119, 1), new Range32.ptr(68121, 68147, 1), new Range32.ptr(68192, 68220, 1), new Range32.ptr(68224, 68252, 1), new Range32.ptr(68288, 68295, 1), new Range32.ptr(68297, 68324, 1), new Range32.ptr(68352, 68405, 1), new Range32.ptr(68416, 68437, 1), new Range32.ptr(68448, 68466, 1), new Range32.ptr(68480, 68497, 1), new Range32.ptr(68608, 68680, 1), new Range32.ptr(68736, 68786, 1), new Range32.ptr(68800, 68850, 1), new Range32.ptr(69635, 69687, 1), new Range32.ptr(69763, 69807, 1), new Range32.ptr(69840, 69864, 1), new Range32.ptr(69891, 69926, 1), new Range32.ptr(69968, 70002, 1), new Range32.ptr(70006, 70019, 13), new Range32.ptr(70020, 70066, 1), new Range32.ptr(70081, 70084, 1), new Range32.ptr(70106, 70108, 2), new Range32.ptr(70144, 70161, 1), new Range32.ptr(70163, 70187, 1), new Range32.ptr(70272, 70278, 1), new Range32.ptr(70280, 70282, 2), new Range32.ptr(70283, 70285, 1), new Range32.ptr(70287, 70301, 1), new Range32.ptr(70303, 70312, 1), new Range32.ptr(70320, 70366, 1), new Range32.ptr(70405, 70412, 1), new Range32.ptr(70415, 70416, 1), new Range32.ptr(70419, 70440, 1), new Range32.ptr(70442, 70448, 1), new Range32.ptr(70450, 70451, 1), new Range32.ptr(70453, 70457, 1), new Range32.ptr(70461, 70480, 19), new Range32.ptr(70493, 70497, 1), new Range32.ptr(70656, 70708, 1), new Range32.ptr(70727, 70730, 1), new Range32.ptr(70784, 70831, 1), new Range32.ptr(70852, 70853, 1), new Range32.ptr(70855, 71040, 185), new Range32.ptr(71041, 71086, 1), new Range32.ptr(71128, 71131, 1), new Range32.ptr(71168, 71215, 1), new Range32.ptr(71236, 71296, 60), new Range32.ptr(71297, 71338, 1), new Range32.ptr(71424, 71449, 1), new Range32.ptr(71840, 71903, 1), new Range32.ptr(71935, 72192, 257), new Range32.ptr(72203, 72242, 1), new Range32.ptr(72250, 72272, 22), new Range32.ptr(72284, 72323, 1), new Range32.ptr(72326, 72329, 1), new Range32.ptr(72384, 72440, 1), new Range32.ptr(72704, 72712, 1), new Range32.ptr(72714, 72750, 1), new Range32.ptr(72768, 72818, 50), new Range32.ptr(72819, 72847, 1), new Range32.ptr(72960, 72966, 1), new Range32.ptr(72968, 72969, 1), new Range32.ptr(72971, 73008, 1), new Range32.ptr(73030, 73728, 698), new Range32.ptr(73729, 74649, 1), new Range32.ptr(74880, 75075, 1), new Range32.ptr(77824, 78894, 1), new Range32.ptr(82944, 83526, 1), new Range32.ptr(92160, 92728, 1), new Range32.ptr(92736, 92766, 1), new Range32.ptr(92880, 92909, 1), new Range32.ptr(92928, 92975, 1), new Range32.ptr(92992, 92995, 1), new Range32.ptr(93027, 93047, 1), new Range32.ptr(93053, 93071, 1), new Range32.ptr(93952, 94020, 1), new Range32.ptr(94032, 94099, 67), new Range32.ptr(94100, 94111, 1), new Range32.ptr(94176, 94177, 1), new Range32.ptr(94208, 100332, 1), new Range32.ptr(100352, 101106, 1), new Range32.ptr(110592, 110878, 1), new Range32.ptr(110960, 111355, 1), new Range32.ptr(113664, 113770, 1), new Range32.ptr(113776, 113788, 1), new Range32.ptr(113792, 113800, 1), new Range32.ptr(113808, 113817, 1), new Range32.ptr(119808, 119892, 1), new Range32.ptr(119894, 119964, 1), new Range32.ptr(119966, 119967, 1), new Range32.ptr(119970, 119973, 3), new Range32.ptr(119974, 119977, 3), new Range32.ptr(119978, 119980, 1), new Range32.ptr(119982, 119993, 1), new Range32.ptr(119995, 119997, 2), new Range32.ptr(119998, 120003, 1), new Range32.ptr(120005, 120069, 1), new Range32.ptr(120071, 120074, 1), new Range32.ptr(120077, 120084, 1), new Range32.ptr(120086, 120092, 1), new Range32.ptr(120094, 120121, 1), new Range32.ptr(120123, 120126, 1), new Range32.ptr(120128, 120132, 1), new Range32.ptr(120134, 120138, 4), new Range32.ptr(120139, 120144, 1), new Range32.ptr(120146, 120485, 1), new Range32.ptr(120488, 120512, 1), new Range32.ptr(120514, 120538, 1), new Range32.ptr(120540, 120570, 1), new Range32.ptr(120572, 120596, 1), new Range32.ptr(120598, 120628, 1), new Range32.ptr(120630, 120654, 1), new Range32.ptr(120656, 120686, 1), new Range32.ptr(120688, 120712, 1), new Range32.ptr(120714, 120744, 1), new Range32.ptr(120746, 120770, 1), new Range32.ptr(120772, 120779, 1), new Range32.ptr(124928, 125124, 1), new Range32.ptr(125184, 125251, 1), new Range32.ptr(126464, 126467, 1), new Range32.ptr(126469, 126495, 1), new Range32.ptr(126497, 126498, 1), new Range32.ptr(126500, 126503, 3), new Range32.ptr(126505, 126514, 1), new Range32.ptr(126516, 126519, 1), new Range32.ptr(126521, 126523, 2), new Range32.ptr(126530, 126535, 5), new Range32.ptr(126537, 126541, 2), new Range32.ptr(126542, 126543, 1), new Range32.ptr(126545, 126546, 1), new Range32.ptr(126548, 126551, 3), new Range32.ptr(126553, 126561, 2), new Range32.ptr(126562, 126564, 2), new Range32.ptr(126567, 126570, 1), new Range32.ptr(126572, 126578, 1), new Range32.ptr(126580, 126583, 1), new Range32.ptr(126585, 126588, 1), new Range32.ptr(126590, 126592, 2), new Range32.ptr(126593, 126601, 1), new Range32.ptr(126603, 126619, 1), new Range32.ptr(126625, 126627, 1), new Range32.ptr(126629, 126633, 1), new Range32.ptr(126635, 126651, 1), new Range32.ptr(131072, 173782, 1), new Range32.ptr(173824, 177972, 1), new Range32.ptr(177984, 178205, 1), new Range32.ptr(178208, 183969, 1), new Range32.ptr(183984, 191456, 1), new Range32.ptr(194560, 195101, 1)]), 6);
		_Lu = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(192, 214, 1), new Range16.ptr(216, 222, 1), new Range16.ptr(256, 310, 2), new Range16.ptr(313, 327, 2), new Range16.ptr(330, 376, 2), new Range16.ptr(377, 381, 2), new Range16.ptr(385, 386, 1), new Range16.ptr(388, 390, 2), new Range16.ptr(391, 393, 2), new Range16.ptr(394, 395, 1), new Range16.ptr(398, 401, 1), new Range16.ptr(403, 404, 1), new Range16.ptr(406, 408, 1), new Range16.ptr(412, 413, 1), new Range16.ptr(415, 416, 1), new Range16.ptr(418, 422, 2), new Range16.ptr(423, 425, 2), new Range16.ptr(428, 430, 2), new Range16.ptr(431, 433, 2), new Range16.ptr(434, 435, 1), new Range16.ptr(437, 439, 2), new Range16.ptr(440, 444, 4), new Range16.ptr(452, 461, 3), new Range16.ptr(463, 475, 2), new Range16.ptr(478, 494, 2), new Range16.ptr(497, 500, 3), new Range16.ptr(502, 504, 1), new Range16.ptr(506, 562, 2), new Range16.ptr(570, 571, 1), new Range16.ptr(573, 574, 1), new Range16.ptr(577, 579, 2), new Range16.ptr(580, 582, 1), new Range16.ptr(584, 590, 2), new Range16.ptr(880, 882, 2), new Range16.ptr(886, 895, 9), new Range16.ptr(902, 904, 2), new Range16.ptr(905, 906, 1), new Range16.ptr(908, 910, 2), new Range16.ptr(911, 913, 2), new Range16.ptr(914, 929, 1), new Range16.ptr(931, 939, 1), new Range16.ptr(975, 978, 3), new Range16.ptr(979, 980, 1), new Range16.ptr(984, 1006, 2), new Range16.ptr(1012, 1015, 3), new Range16.ptr(1017, 1018, 1), new Range16.ptr(1021, 1071, 1), new Range16.ptr(1120, 1152, 2), new Range16.ptr(1162, 1216, 2), new Range16.ptr(1217, 1229, 2), new Range16.ptr(1232, 1326, 2), new Range16.ptr(1329, 1366, 1), new Range16.ptr(4256, 4293, 1), new Range16.ptr(4295, 4301, 6), new Range16.ptr(5024, 5109, 1), new Range16.ptr(7680, 7828, 2), new Range16.ptr(7838, 7934, 2), new Range16.ptr(7944, 7951, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7976, 7983, 1), new Range16.ptr(7992, 7999, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8025, 8031, 2), new Range16.ptr(8040, 8047, 1), new Range16.ptr(8120, 8123, 1), new Range16.ptr(8136, 8139, 1), new Range16.ptr(8152, 8155, 1), new Range16.ptr(8168, 8172, 1), new Range16.ptr(8184, 8187, 1), new Range16.ptr(8450, 8455, 5), new Range16.ptr(8459, 8461, 1), new Range16.ptr(8464, 8466, 1), new Range16.ptr(8469, 8473, 4), new Range16.ptr(8474, 8477, 1), new Range16.ptr(8484, 8490, 2), new Range16.ptr(8491, 8493, 1), new Range16.ptr(8496, 8499, 1), new Range16.ptr(8510, 8511, 1), new Range16.ptr(8517, 8579, 62), new Range16.ptr(11264, 11310, 1), new Range16.ptr(11360, 11362, 2), new Range16.ptr(11363, 11364, 1), new Range16.ptr(11367, 11373, 2), new Range16.ptr(11374, 11376, 1), new Range16.ptr(11378, 11381, 3), new Range16.ptr(11390, 11392, 1), new Range16.ptr(11394, 11490, 2), new Range16.ptr(11499, 11501, 2), new Range16.ptr(11506, 42560, 31054), new Range16.ptr(42562, 42604, 2), new Range16.ptr(42624, 42650, 2), new Range16.ptr(42786, 42798, 2), new Range16.ptr(42802, 42862, 2), new Range16.ptr(42873, 42877, 2), new Range16.ptr(42878, 42886, 2), new Range16.ptr(42891, 42893, 2), new Range16.ptr(42896, 42898, 2), new Range16.ptr(42902, 42922, 2), new Range16.ptr(42923, 42926, 1), new Range16.ptr(42928, 42932, 1), new Range16.ptr(42934, 65313, 22379), new Range16.ptr(65314, 65338, 1)]), new sliceType$1([new Range32.ptr(66560, 66599, 1), new Range32.ptr(66736, 66771, 1), new Range32.ptr(68736, 68786, 1), new Range32.ptr(71840, 71871, 1), new Range32.ptr(119808, 119833, 1), new Range32.ptr(119860, 119885, 1), new Range32.ptr(119912, 119937, 1), new Range32.ptr(119964, 119966, 2), new Range32.ptr(119967, 119973, 3), new Range32.ptr(119974, 119977, 3), new Range32.ptr(119978, 119980, 1), new Range32.ptr(119982, 119989, 1), new Range32.ptr(120016, 120041, 1), new Range32.ptr(120068, 120069, 1), new Range32.ptr(120071, 120074, 1), new Range32.ptr(120077, 120084, 1), new Range32.ptr(120086, 120092, 1), new Range32.ptr(120120, 120121, 1), new Range32.ptr(120123, 120126, 1), new Range32.ptr(120128, 120132, 1), new Range32.ptr(120134, 120138, 4), new Range32.ptr(120139, 120144, 1), new Range32.ptr(120172, 120197, 1), new Range32.ptr(120224, 120249, 1), new Range32.ptr(120276, 120301, 1), new Range32.ptr(120328, 120353, 1), new Range32.ptr(120380, 120405, 1), new Range32.ptr(120432, 120457, 1), new Range32.ptr(120488, 120512, 1), new Range32.ptr(120546, 120570, 1), new Range32.ptr(120604, 120628, 1), new Range32.ptr(120662, 120686, 1), new Range32.ptr(120720, 120744, 1), new Range32.ptr(120778, 125184, 4406), new Range32.ptr(125185, 125217, 1)]), 3);
		_M = new RangeTable.ptr(new sliceType([new Range16.ptr(768, 879, 1), new Range16.ptr(1155, 1161, 1), new Range16.ptr(1425, 1469, 1), new Range16.ptr(1471, 1473, 2), new Range16.ptr(1474, 1476, 2), new Range16.ptr(1477, 1479, 2), new Range16.ptr(1552, 1562, 1), new Range16.ptr(1611, 1631, 1), new Range16.ptr(1648, 1750, 102), new Range16.ptr(1751, 1756, 1), new Range16.ptr(1759, 1764, 1), new Range16.ptr(1767, 1768, 1), new Range16.ptr(1770, 1773, 1), new Range16.ptr(1809, 1840, 31), new Range16.ptr(1841, 1866, 1), new Range16.ptr(1958, 1968, 1), new Range16.ptr(2027, 2035, 1), new Range16.ptr(2070, 2073, 1), new Range16.ptr(2075, 2083, 1), new Range16.ptr(2085, 2087, 1), new Range16.ptr(2089, 2093, 1), new Range16.ptr(2137, 2139, 1), new Range16.ptr(2260, 2273, 1), new Range16.ptr(2275, 2307, 1), new Range16.ptr(2362, 2364, 1), new Range16.ptr(2366, 2383, 1), new Range16.ptr(2385, 2391, 1), new Range16.ptr(2402, 2403, 1), new Range16.ptr(2433, 2435, 1), new Range16.ptr(2492, 2494, 2), new Range16.ptr(2495, 2500, 1), new Range16.ptr(2503, 2504, 1), new Range16.ptr(2507, 2509, 1), new Range16.ptr(2519, 2530, 11), new Range16.ptr(2531, 2561, 30), new Range16.ptr(2562, 2563, 1), new Range16.ptr(2620, 2622, 2), new Range16.ptr(2623, 2626, 1), new Range16.ptr(2631, 2632, 1), new Range16.ptr(2635, 2637, 1), new Range16.ptr(2641, 2672, 31), new Range16.ptr(2673, 2677, 4), new Range16.ptr(2689, 2691, 1), new Range16.ptr(2748, 2750, 2), new Range16.ptr(2751, 2757, 1), new Range16.ptr(2759, 2761, 1), new Range16.ptr(2763, 2765, 1), new Range16.ptr(2786, 2787, 1), new Range16.ptr(2810, 2815, 1), new Range16.ptr(2817, 2819, 1), new Range16.ptr(2876, 2878, 2), new Range16.ptr(2879, 2884, 1), new Range16.ptr(2887, 2888, 1), new Range16.ptr(2891, 2893, 1), new Range16.ptr(2902, 2903, 1), new Range16.ptr(2914, 2915, 1), new Range16.ptr(2946, 3006, 60), new Range16.ptr(3007, 3010, 1), new Range16.ptr(3014, 3016, 1), new Range16.ptr(3018, 3021, 1), new Range16.ptr(3031, 3072, 41), new Range16.ptr(3073, 3075, 1), new Range16.ptr(3134, 3140, 1), new Range16.ptr(3142, 3144, 1), new Range16.ptr(3146, 3149, 1), new Range16.ptr(3157, 3158, 1), new Range16.ptr(3170, 3171, 1), new Range16.ptr(3201, 3203, 1), new Range16.ptr(3260, 3262, 2), new Range16.ptr(3263, 3268, 1), new Range16.ptr(3270, 3272, 1), new Range16.ptr(3274, 3277, 1), new Range16.ptr(3285, 3286, 1), new Range16.ptr(3298, 3299, 1), new Range16.ptr(3328, 3331, 1), new Range16.ptr(3387, 3388, 1), new Range16.ptr(3390, 3396, 1), new Range16.ptr(3398, 3400, 1), new Range16.ptr(3402, 3405, 1), new Range16.ptr(3415, 3426, 11), new Range16.ptr(3427, 3458, 31), new Range16.ptr(3459, 3530, 71), new Range16.ptr(3535, 3540, 1), new Range16.ptr(3542, 3544, 2), new Range16.ptr(3545, 3551, 1), new Range16.ptr(3570, 3571, 1), new Range16.ptr(3633, 3636, 3), new Range16.ptr(3637, 3642, 1), new Range16.ptr(3655, 3662, 1), new Range16.ptr(3761, 3764, 3), new Range16.ptr(3765, 3769, 1), new Range16.ptr(3771, 3772, 1), new Range16.ptr(3784, 3789, 1), new Range16.ptr(3864, 3865, 1), new Range16.ptr(3893, 3897, 2), new Range16.ptr(3902, 3903, 1), new Range16.ptr(3953, 3972, 1), new Range16.ptr(3974, 3975, 1), new Range16.ptr(3981, 3991, 1), new Range16.ptr(3993, 4028, 1), new Range16.ptr(4038, 4139, 101), new Range16.ptr(4140, 4158, 1), new Range16.ptr(4182, 4185, 1), new Range16.ptr(4190, 4192, 1), new Range16.ptr(4194, 4196, 1), new Range16.ptr(4199, 4205, 1), new Range16.ptr(4209, 4212, 1), new Range16.ptr(4226, 4237, 1), new Range16.ptr(4239, 4250, 11), new Range16.ptr(4251, 4253, 1), new Range16.ptr(4957, 4959, 1), new Range16.ptr(5906, 5908, 1), new Range16.ptr(5938, 5940, 1), new Range16.ptr(5970, 5971, 1), new Range16.ptr(6002, 6003, 1), new Range16.ptr(6068, 6099, 1), new Range16.ptr(6109, 6155, 46), new Range16.ptr(6156, 6157, 1), new Range16.ptr(6277, 6278, 1), new Range16.ptr(6313, 6432, 119), new Range16.ptr(6433, 6443, 1), new Range16.ptr(6448, 6459, 1), new Range16.ptr(6679, 6683, 1), new Range16.ptr(6741, 6750, 1), new Range16.ptr(6752, 6780, 1), new Range16.ptr(6783, 6832, 49), new Range16.ptr(6833, 6846, 1), new Range16.ptr(6912, 6916, 1), new Range16.ptr(6964, 6980, 1), new Range16.ptr(7019, 7027, 1), new Range16.ptr(7040, 7042, 1), new Range16.ptr(7073, 7085, 1), new Range16.ptr(7142, 7155, 1), new Range16.ptr(7204, 7223, 1), new Range16.ptr(7376, 7378, 1), new Range16.ptr(7380, 7400, 1), new Range16.ptr(7405, 7410, 5), new Range16.ptr(7411, 7412, 1), new Range16.ptr(7415, 7417, 1), new Range16.ptr(7616, 7673, 1), new Range16.ptr(7675, 7679, 1), new Range16.ptr(8400, 8432, 1), new Range16.ptr(11503, 11505, 1), new Range16.ptr(11647, 11744, 97), new Range16.ptr(11745, 11775, 1), new Range16.ptr(12330, 12335, 1), new Range16.ptr(12441, 12442, 1), new Range16.ptr(42607, 42610, 1), new Range16.ptr(42612, 42621, 1), new Range16.ptr(42654, 42655, 1), new Range16.ptr(42736, 42737, 1), new Range16.ptr(43010, 43014, 4), new Range16.ptr(43019, 43043, 24), new Range16.ptr(43044, 43047, 1), new Range16.ptr(43136, 43137, 1), new Range16.ptr(43188, 43205, 1), new Range16.ptr(43232, 43249, 1), new Range16.ptr(43302, 43309, 1), new Range16.ptr(43335, 43347, 1), new Range16.ptr(43392, 43395, 1), new Range16.ptr(43443, 43456, 1), new Range16.ptr(43493, 43561, 68), new Range16.ptr(43562, 43574, 1), new Range16.ptr(43587, 43596, 9), new Range16.ptr(43597, 43643, 46), new Range16.ptr(43644, 43645, 1), new Range16.ptr(43696, 43698, 2), new Range16.ptr(43699, 43700, 1), new Range16.ptr(43703, 43704, 1), new Range16.ptr(43710, 43711, 1), new Range16.ptr(43713, 43755, 42), new Range16.ptr(43756, 43759, 1), new Range16.ptr(43765, 43766, 1), new Range16.ptr(44003, 44010, 1), new Range16.ptr(44012, 44013, 1), new Range16.ptr(64286, 65024, 738), new Range16.ptr(65025, 65039, 1), new Range16.ptr(65056, 65071, 1)]), new sliceType$1([new Range32.ptr(66045, 66272, 227), new Range32.ptr(66422, 66426, 1), new Range32.ptr(68097, 68099, 1), new Range32.ptr(68101, 68102, 1), new Range32.ptr(68108, 68111, 1), new Range32.ptr(68152, 68154, 1), new Range32.ptr(68159, 68325, 166), new Range32.ptr(68326, 69632, 1306), new Range32.ptr(69633, 69634, 1), new Range32.ptr(69688, 69702, 1), new Range32.ptr(69759, 69762, 1), new Range32.ptr(69808, 69818, 1), new Range32.ptr(69888, 69890, 1), new Range32.ptr(69927, 69940, 1), new Range32.ptr(70003, 70016, 13), new Range32.ptr(70017, 70018, 1), new Range32.ptr(70067, 70080, 1), new Range32.ptr(70090, 70092, 1), new Range32.ptr(70188, 70199, 1), new Range32.ptr(70206, 70367, 161), new Range32.ptr(70368, 70378, 1), new Range32.ptr(70400, 70403, 1), new Range32.ptr(70460, 70462, 2), new Range32.ptr(70463, 70468, 1), new Range32.ptr(70471, 70472, 1), new Range32.ptr(70475, 70477, 1), new Range32.ptr(70487, 70498, 11), new Range32.ptr(70499, 70502, 3), new Range32.ptr(70503, 70508, 1), new Range32.ptr(70512, 70516, 1), new Range32.ptr(70709, 70726, 1), new Range32.ptr(70832, 70851, 1), new Range32.ptr(71087, 71093, 1), new Range32.ptr(71096, 71104, 1), new Range32.ptr(71132, 71133, 1), new Range32.ptr(71216, 71232, 1), new Range32.ptr(71339, 71351, 1), new Range32.ptr(71453, 71467, 1), new Range32.ptr(72193, 72202, 1), new Range32.ptr(72243, 72249, 1), new Range32.ptr(72251, 72254, 1), new Range32.ptr(72263, 72273, 10), new Range32.ptr(72274, 72283, 1), new Range32.ptr(72330, 72345, 1), new Range32.ptr(72751, 72758, 1), new Range32.ptr(72760, 72767, 1), new Range32.ptr(72850, 72871, 1), new Range32.ptr(72873, 72886, 1), new Range32.ptr(73009, 73014, 1), new Range32.ptr(73018, 73020, 2), new Range32.ptr(73021, 73023, 2), new Range32.ptr(73024, 73029, 1), new Range32.ptr(73031, 92912, 19881), new Range32.ptr(92913, 92916, 1), new Range32.ptr(92976, 92982, 1), new Range32.ptr(94033, 94078, 1), new Range32.ptr(94095, 94098, 1), new Range32.ptr(113821, 113822, 1), new Range32.ptr(119141, 119145, 1), new Range32.ptr(119149, 119154, 1), new Range32.ptr(119163, 119170, 1), new Range32.ptr(119173, 119179, 1), new Range32.ptr(119210, 119213, 1), new Range32.ptr(119362, 119364, 1), new Range32.ptr(121344, 121398, 1), new Range32.ptr(121403, 121452, 1), new Range32.ptr(121461, 121476, 15), new Range32.ptr(121499, 121503, 1), new Range32.ptr(121505, 121519, 1), new Range32.ptr(122880, 122886, 1), new Range32.ptr(122888, 122904, 1), new Range32.ptr(122907, 122913, 1), new Range32.ptr(122915, 122916, 1), new Range32.ptr(122918, 122922, 1), new Range32.ptr(125136, 125142, 1), new Range32.ptr(125252, 125258, 1), new Range32.ptr(917760, 917999, 1)]), 0);
		_N = new RangeTable.ptr(new sliceType([new Range16.ptr(48, 57, 1), new Range16.ptr(178, 179, 1), new Range16.ptr(185, 188, 3), new Range16.ptr(189, 190, 1), new Range16.ptr(1632, 1641, 1), new Range16.ptr(1776, 1785, 1), new Range16.ptr(1984, 1993, 1), new Range16.ptr(2406, 2415, 1), new Range16.ptr(2534, 2543, 1), new Range16.ptr(2548, 2553, 1), new Range16.ptr(2662, 2671, 1), new Range16.ptr(2790, 2799, 1), new Range16.ptr(2918, 2927, 1), new Range16.ptr(2930, 2935, 1), new Range16.ptr(3046, 3058, 1), new Range16.ptr(3174, 3183, 1), new Range16.ptr(3192, 3198, 1), new Range16.ptr(3302, 3311, 1), new Range16.ptr(3416, 3422, 1), new Range16.ptr(3430, 3448, 1), new Range16.ptr(3558, 3567, 1), new Range16.ptr(3664, 3673, 1), new Range16.ptr(3792, 3801, 1), new Range16.ptr(3872, 3891, 1), new Range16.ptr(4160, 4169, 1), new Range16.ptr(4240, 4249, 1), new Range16.ptr(4969, 4988, 1), new Range16.ptr(5870, 5872, 1), new Range16.ptr(6112, 6121, 1), new Range16.ptr(6128, 6137, 1), new Range16.ptr(6160, 6169, 1), new Range16.ptr(6470, 6479, 1), new Range16.ptr(6608, 6618, 1), new Range16.ptr(6784, 6793, 1), new Range16.ptr(6800, 6809, 1), new Range16.ptr(6992, 7001, 1), new Range16.ptr(7088, 7097, 1), new Range16.ptr(7232, 7241, 1), new Range16.ptr(7248, 7257, 1), new Range16.ptr(8304, 8308, 4), new Range16.ptr(8309, 8313, 1), new Range16.ptr(8320, 8329, 1), new Range16.ptr(8528, 8578, 1), new Range16.ptr(8581, 8585, 1), new Range16.ptr(9312, 9371, 1), new Range16.ptr(9450, 9471, 1), new Range16.ptr(10102, 10131, 1), new Range16.ptr(11517, 12295, 778), new Range16.ptr(12321, 12329, 1), new Range16.ptr(12344, 12346, 1), new Range16.ptr(12690, 12693, 1), new Range16.ptr(12832, 12841, 1), new Range16.ptr(12872, 12879, 1), new Range16.ptr(12881, 12895, 1), new Range16.ptr(12928, 12937, 1), new Range16.ptr(12977, 12991, 1), new Range16.ptr(42528, 42537, 1), new Range16.ptr(42726, 42735, 1), new Range16.ptr(43056, 43061, 1), new Range16.ptr(43216, 43225, 1), new Range16.ptr(43264, 43273, 1), new Range16.ptr(43472, 43481, 1), new Range16.ptr(43504, 43513, 1), new Range16.ptr(43600, 43609, 1), new Range16.ptr(44016, 44025, 1), new Range16.ptr(65296, 65305, 1)]), new sliceType$1([new Range32.ptr(65799, 65843, 1), new Range32.ptr(65856, 65912, 1), new Range32.ptr(65930, 65931, 1), new Range32.ptr(66273, 66299, 1), new Range32.ptr(66336, 66339, 1), new Range32.ptr(66369, 66378, 9), new Range32.ptr(66513, 66517, 1), new Range32.ptr(66720, 66729, 1), new Range32.ptr(67672, 67679, 1), new Range32.ptr(67705, 67711, 1), new Range32.ptr(67751, 67759, 1), new Range32.ptr(67835, 67839, 1), new Range32.ptr(67862, 67867, 1), new Range32.ptr(68028, 68029, 1), new Range32.ptr(68032, 68047, 1), new Range32.ptr(68050, 68095, 1), new Range32.ptr(68160, 68167, 1), new Range32.ptr(68221, 68222, 1), new Range32.ptr(68253, 68255, 1), new Range32.ptr(68331, 68335, 1), new Range32.ptr(68440, 68447, 1), new Range32.ptr(68472, 68479, 1), new Range32.ptr(68521, 68527, 1), new Range32.ptr(68858, 68863, 1), new Range32.ptr(69216, 69246, 1), new Range32.ptr(69714, 69743, 1), new Range32.ptr(69872, 69881, 1), new Range32.ptr(69942, 69951, 1), new Range32.ptr(70096, 70105, 1), new Range32.ptr(70113, 70132, 1), new Range32.ptr(70384, 70393, 1), new Range32.ptr(70736, 70745, 1), new Range32.ptr(70864, 70873, 1), new Range32.ptr(71248, 71257, 1), new Range32.ptr(71360, 71369, 1), new Range32.ptr(71472, 71483, 1), new Range32.ptr(71904, 71922, 1), new Range32.ptr(72784, 72812, 1), new Range32.ptr(73040, 73049, 1), new Range32.ptr(74752, 74862, 1), new Range32.ptr(92768, 92777, 1), new Range32.ptr(93008, 93017, 1), new Range32.ptr(93019, 93025, 1), new Range32.ptr(119648, 119665, 1), new Range32.ptr(120782, 120831, 1), new Range32.ptr(125127, 125135, 1), new Range32.ptr(125264, 125273, 1), new Range32.ptr(127232, 127244, 1)]), 4);
		_Nd = new RangeTable.ptr(new sliceType([new Range16.ptr(48, 57, 1), new Range16.ptr(1632, 1641, 1), new Range16.ptr(1776, 1785, 1), new Range16.ptr(1984, 1993, 1), new Range16.ptr(2406, 2415, 1), new Range16.ptr(2534, 2543, 1), new Range16.ptr(2662, 2671, 1), new Range16.ptr(2790, 2799, 1), new Range16.ptr(2918, 2927, 1), new Range16.ptr(3046, 3055, 1), new Range16.ptr(3174, 3183, 1), new Range16.ptr(3302, 3311, 1), new Range16.ptr(3430, 3439, 1), new Range16.ptr(3558, 3567, 1), new Range16.ptr(3664, 3673, 1), new Range16.ptr(3792, 3801, 1), new Range16.ptr(3872, 3881, 1), new Range16.ptr(4160, 4169, 1), new Range16.ptr(4240, 4249, 1), new Range16.ptr(6112, 6121, 1), new Range16.ptr(6160, 6169, 1), new Range16.ptr(6470, 6479, 1), new Range16.ptr(6608, 6617, 1), new Range16.ptr(6784, 6793, 1), new Range16.ptr(6800, 6809, 1), new Range16.ptr(6992, 7001, 1), new Range16.ptr(7088, 7097, 1), new Range16.ptr(7232, 7241, 1), new Range16.ptr(7248, 7257, 1), new Range16.ptr(42528, 42537, 1), new Range16.ptr(43216, 43225, 1), new Range16.ptr(43264, 43273, 1), new Range16.ptr(43472, 43481, 1), new Range16.ptr(43504, 43513, 1), new Range16.ptr(43600, 43609, 1), new Range16.ptr(44016, 44025, 1), new Range16.ptr(65296, 65305, 1)]), new sliceType$1([new Range32.ptr(66720, 66729, 1), new Range32.ptr(69734, 69743, 1), new Range32.ptr(69872, 69881, 1), new Range32.ptr(69942, 69951, 1), new Range32.ptr(70096, 70105, 1), new Range32.ptr(70384, 70393, 1), new Range32.ptr(70736, 70745, 1), new Range32.ptr(70864, 70873, 1), new Range32.ptr(71248, 71257, 1), new Range32.ptr(71360, 71369, 1), new Range32.ptr(71472, 71481, 1), new Range32.ptr(71904, 71913, 1), new Range32.ptr(72784, 72793, 1), new Range32.ptr(73040, 73049, 1), new Range32.ptr(92768, 92777, 1), new Range32.ptr(93008, 93017, 1), new Range32.ptr(120782, 120831, 1), new Range32.ptr(125264, 125273, 1)]), 1);
		_P = new RangeTable.ptr(new sliceType([new Range16.ptr(33, 35, 1), new Range16.ptr(37, 42, 1), new Range16.ptr(44, 47, 1), new Range16.ptr(58, 59, 1), new Range16.ptr(63, 64, 1), new Range16.ptr(91, 93, 1), new Range16.ptr(95, 123, 28), new Range16.ptr(125, 161, 36), new Range16.ptr(167, 171, 4), new Range16.ptr(182, 183, 1), new Range16.ptr(187, 191, 4), new Range16.ptr(894, 903, 9), new Range16.ptr(1370, 1375, 1), new Range16.ptr(1417, 1418, 1), new Range16.ptr(1470, 1472, 2), new Range16.ptr(1475, 1478, 3), new Range16.ptr(1523, 1524, 1), new Range16.ptr(1545, 1546, 1), new Range16.ptr(1548, 1549, 1), new Range16.ptr(1563, 1566, 3), new Range16.ptr(1567, 1642, 75), new Range16.ptr(1643, 1645, 1), new Range16.ptr(1748, 1792, 44), new Range16.ptr(1793, 1805, 1), new Range16.ptr(2039, 2041, 1), new Range16.ptr(2096, 2110, 1), new Range16.ptr(2142, 2404, 262), new Range16.ptr(2405, 2416, 11), new Range16.ptr(2557, 2800, 243), new Range16.ptr(3572, 3663, 91), new Range16.ptr(3674, 3675, 1), new Range16.ptr(3844, 3858, 1), new Range16.ptr(3860, 3898, 38), new Range16.ptr(3899, 3901, 1), new Range16.ptr(3973, 4048, 75), new Range16.ptr(4049, 4052, 1), new Range16.ptr(4057, 4058, 1), new Range16.ptr(4170, 4175, 1), new Range16.ptr(4347, 4960, 613), new Range16.ptr(4961, 4968, 1), new Range16.ptr(5120, 5741, 621), new Range16.ptr(5742, 5787, 45), new Range16.ptr(5788, 5867, 79), new Range16.ptr(5868, 5869, 1), new Range16.ptr(5941, 5942, 1), new Range16.ptr(6100, 6102, 1), new Range16.ptr(6104, 6106, 1), new Range16.ptr(6144, 6154, 1), new Range16.ptr(6468, 6469, 1), new Range16.ptr(6686, 6687, 1), new Range16.ptr(6816, 6822, 1), new Range16.ptr(6824, 6829, 1), new Range16.ptr(7002, 7008, 1), new Range16.ptr(7164, 7167, 1), new Range16.ptr(7227, 7231, 1), new Range16.ptr(7294, 7295, 1), new Range16.ptr(7360, 7367, 1), new Range16.ptr(7379, 8208, 829), new Range16.ptr(8209, 8231, 1), new Range16.ptr(8240, 8259, 1), new Range16.ptr(8261, 8273, 1), new Range16.ptr(8275, 8286, 1), new Range16.ptr(8317, 8318, 1), new Range16.ptr(8333, 8334, 1), new Range16.ptr(8968, 8971, 1), new Range16.ptr(9001, 9002, 1), new Range16.ptr(10088, 10101, 1), new Range16.ptr(10181, 10182, 1), new Range16.ptr(10214, 10223, 1), new Range16.ptr(10627, 10648, 1), new Range16.ptr(10712, 10715, 1), new Range16.ptr(10748, 10749, 1), new Range16.ptr(11513, 11516, 1), new Range16.ptr(11518, 11519, 1), new Range16.ptr(11632, 11776, 144), new Range16.ptr(11777, 11822, 1), new Range16.ptr(11824, 11849, 1), new Range16.ptr(12289, 12291, 1), new Range16.ptr(12296, 12305, 1), new Range16.ptr(12308, 12319, 1), new Range16.ptr(12336, 12349, 13), new Range16.ptr(12448, 12539, 91), new Range16.ptr(42238, 42239, 1), new Range16.ptr(42509, 42511, 1), new Range16.ptr(42611, 42622, 11), new Range16.ptr(42738, 42743, 1), new Range16.ptr(43124, 43127, 1), new Range16.ptr(43214, 43215, 1), new Range16.ptr(43256, 43258, 1), new Range16.ptr(43260, 43310, 50), new Range16.ptr(43311, 43359, 48), new Range16.ptr(43457, 43469, 1), new Range16.ptr(43486, 43487, 1), new Range16.ptr(43612, 43615, 1), new Range16.ptr(43742, 43743, 1), new Range16.ptr(43760, 43761, 1), new Range16.ptr(44011, 64830, 20819), new Range16.ptr(64831, 65040, 209), new Range16.ptr(65041, 65049, 1), new Range16.ptr(65072, 65106, 1), new Range16.ptr(65108, 65121, 1), new Range16.ptr(65123, 65128, 5), new Range16.ptr(65130, 65131, 1), new Range16.ptr(65281, 65283, 1), new Range16.ptr(65285, 65290, 1), new Range16.ptr(65292, 65295, 1), new Range16.ptr(65306, 65307, 1), new Range16.ptr(65311, 65312, 1), new Range16.ptr(65339, 65341, 1), new Range16.ptr(65343, 65371, 28), new Range16.ptr(65373, 65375, 2), new Range16.ptr(65376, 65381, 1)]), new sliceType$1([new Range32.ptr(65792, 65794, 1), new Range32.ptr(66463, 66512, 49), new Range32.ptr(66927, 67671, 744), new Range32.ptr(67871, 67903, 32), new Range32.ptr(68176, 68184, 1), new Range32.ptr(68223, 68336, 113), new Range32.ptr(68337, 68342, 1), new Range32.ptr(68409, 68415, 1), new Range32.ptr(68505, 68508, 1), new Range32.ptr(69703, 69709, 1), new Range32.ptr(69819, 69820, 1), new Range32.ptr(69822, 69825, 1), new Range32.ptr(69952, 69955, 1), new Range32.ptr(70004, 70005, 1), new Range32.ptr(70085, 70089, 1), new Range32.ptr(70093, 70107, 14), new Range32.ptr(70109, 70111, 1), new Range32.ptr(70200, 70205, 1), new Range32.ptr(70313, 70731, 418), new Range32.ptr(70732, 70735, 1), new Range32.ptr(70747, 70749, 2), new Range32.ptr(70854, 71105, 251), new Range32.ptr(71106, 71127, 1), new Range32.ptr(71233, 71235, 1), new Range32.ptr(71264, 71276, 1), new Range32.ptr(71484, 71486, 1), new Range32.ptr(72255, 72262, 1), new Range32.ptr(72346, 72348, 1), new Range32.ptr(72350, 72354, 1), new Range32.ptr(72769, 72773, 1), new Range32.ptr(72816, 72817, 1), new Range32.ptr(74864, 74868, 1), new Range32.ptr(92782, 92783, 1), new Range32.ptr(92917, 92983, 66), new Range32.ptr(92984, 92987, 1), new Range32.ptr(92996, 113823, 20827), new Range32.ptr(121479, 121483, 1), new Range32.ptr(125278, 125279, 1)]), 11);
		_S = new RangeTable.ptr(new sliceType([new Range16.ptr(36, 43, 7), new Range16.ptr(60, 62, 1), new Range16.ptr(94, 96, 2), new Range16.ptr(124, 126, 2), new Range16.ptr(162, 166, 1), new Range16.ptr(168, 169, 1), new Range16.ptr(172, 174, 2), new Range16.ptr(175, 177, 1), new Range16.ptr(180, 184, 4), new Range16.ptr(215, 247, 32), new Range16.ptr(706, 709, 1), new Range16.ptr(722, 735, 1), new Range16.ptr(741, 747, 1), new Range16.ptr(749, 751, 2), new Range16.ptr(752, 767, 1), new Range16.ptr(885, 900, 15), new Range16.ptr(901, 1014, 113), new Range16.ptr(1154, 1421, 267), new Range16.ptr(1422, 1423, 1), new Range16.ptr(1542, 1544, 1), new Range16.ptr(1547, 1550, 3), new Range16.ptr(1551, 1758, 207), new Range16.ptr(1769, 1789, 20), new Range16.ptr(1790, 2038, 248), new Range16.ptr(2546, 2547, 1), new Range16.ptr(2554, 2555, 1), new Range16.ptr(2801, 2928, 127), new Range16.ptr(3059, 3066, 1), new Range16.ptr(3199, 3407, 208), new Range16.ptr(3449, 3647, 198), new Range16.ptr(3841, 3843, 1), new Range16.ptr(3859, 3861, 2), new Range16.ptr(3862, 3863, 1), new Range16.ptr(3866, 3871, 1), new Range16.ptr(3892, 3896, 2), new Range16.ptr(4030, 4037, 1), new Range16.ptr(4039, 4044, 1), new Range16.ptr(4046, 4047, 1), new Range16.ptr(4053, 4056, 1), new Range16.ptr(4254, 4255, 1), new Range16.ptr(5008, 5017, 1), new Range16.ptr(6107, 6464, 357), new Range16.ptr(6622, 6655, 1), new Range16.ptr(7009, 7018, 1), new Range16.ptr(7028, 7036, 1), new Range16.ptr(8125, 8127, 2), new Range16.ptr(8128, 8129, 1), new Range16.ptr(8141, 8143, 1), new Range16.ptr(8157, 8159, 1), new Range16.ptr(8173, 8175, 1), new Range16.ptr(8189, 8190, 1), new Range16.ptr(8260, 8274, 14), new Range16.ptr(8314, 8316, 1), new Range16.ptr(8330, 8332, 1), new Range16.ptr(8352, 8383, 1), new Range16.ptr(8448, 8449, 1), new Range16.ptr(8451, 8454, 1), new Range16.ptr(8456, 8457, 1), new Range16.ptr(8468, 8470, 2), new Range16.ptr(8471, 8472, 1), new Range16.ptr(8478, 8483, 1), new Range16.ptr(8485, 8489, 2), new Range16.ptr(8494, 8506, 12), new Range16.ptr(8507, 8512, 5), new Range16.ptr(8513, 8516, 1), new Range16.ptr(8522, 8525, 1), new Range16.ptr(8527, 8586, 59), new Range16.ptr(8587, 8592, 5), new Range16.ptr(8593, 8967, 1), new Range16.ptr(8972, 9000, 1), new Range16.ptr(9003, 9254, 1), new Range16.ptr(9280, 9290, 1), new Range16.ptr(9372, 9449, 1), new Range16.ptr(9472, 10087, 1), new Range16.ptr(10132, 10180, 1), new Range16.ptr(10183, 10213, 1), new Range16.ptr(10224, 10626, 1), new Range16.ptr(10649, 10711, 1), new Range16.ptr(10716, 10747, 1), new Range16.ptr(10750, 11123, 1), new Range16.ptr(11126, 11157, 1), new Range16.ptr(11160, 11193, 1), new Range16.ptr(11197, 11208, 1), new Range16.ptr(11210, 11218, 1), new Range16.ptr(11244, 11247, 1), new Range16.ptr(11493, 11498, 1), new Range16.ptr(11904, 11929, 1), new Range16.ptr(11931, 12019, 1), new Range16.ptr(12032, 12245, 1), new Range16.ptr(12272, 12283, 1), new Range16.ptr(12292, 12306, 14), new Range16.ptr(12307, 12320, 13), new Range16.ptr(12342, 12343, 1), new Range16.ptr(12350, 12351, 1), new Range16.ptr(12443, 12444, 1), new Range16.ptr(12688, 12689, 1), new Range16.ptr(12694, 12703, 1), new Range16.ptr(12736, 12771, 1), new Range16.ptr(12800, 12830, 1), new Range16.ptr(12842, 12871, 1), new Range16.ptr(12880, 12896, 16), new Range16.ptr(12897, 12927, 1), new Range16.ptr(12938, 12976, 1), new Range16.ptr(12992, 13054, 1), new Range16.ptr(13056, 13311, 1), new Range16.ptr(19904, 19967, 1), new Range16.ptr(42128, 42182, 1), new Range16.ptr(42752, 42774, 1), new Range16.ptr(42784, 42785, 1), new Range16.ptr(42889, 42890, 1), new Range16.ptr(43048, 43051, 1), new Range16.ptr(43062, 43065, 1), new Range16.ptr(43639, 43641, 1), new Range16.ptr(43867, 64297, 20430), new Range16.ptr(64434, 64449, 1), new Range16.ptr(65020, 65021, 1), new Range16.ptr(65122, 65124, 2), new Range16.ptr(65125, 65126, 1), new Range16.ptr(65129, 65284, 155), new Range16.ptr(65291, 65308, 17), new Range16.ptr(65309, 65310, 1), new Range16.ptr(65342, 65344, 2), new Range16.ptr(65372, 65374, 2), new Range16.ptr(65504, 65510, 1), new Range16.ptr(65512, 65518, 1), new Range16.ptr(65532, 65533, 1)]), new sliceType$1([new Range32.ptr(65847, 65855, 1), new Range32.ptr(65913, 65929, 1), new Range32.ptr(65932, 65934, 1), new Range32.ptr(65936, 65947, 1), new Range32.ptr(65952, 66000, 48), new Range32.ptr(66001, 66044, 1), new Range32.ptr(67703, 67704, 1), new Range32.ptr(68296, 71487, 3191), new Range32.ptr(92988, 92991, 1), new Range32.ptr(92997, 113820, 20823), new Range32.ptr(118784, 119029, 1), new Range32.ptr(119040, 119078, 1), new Range32.ptr(119081, 119140, 1), new Range32.ptr(119146, 119148, 1), new Range32.ptr(119171, 119172, 1), new Range32.ptr(119180, 119209, 1), new Range32.ptr(119214, 119272, 1), new Range32.ptr(119296, 119361, 1), new Range32.ptr(119365, 119552, 187), new Range32.ptr(119553, 119638, 1), new Range32.ptr(120513, 120539, 26), new Range32.ptr(120571, 120597, 26), new Range32.ptr(120629, 120655, 26), new Range32.ptr(120687, 120713, 26), new Range32.ptr(120745, 120771, 26), new Range32.ptr(120832, 121343, 1), new Range32.ptr(121399, 121402, 1), new Range32.ptr(121453, 121460, 1), new Range32.ptr(121462, 121475, 1), new Range32.ptr(121477, 121478, 1), new Range32.ptr(126704, 126705, 1), new Range32.ptr(126976, 127019, 1), new Range32.ptr(127024, 127123, 1), new Range32.ptr(127136, 127150, 1), new Range32.ptr(127153, 127167, 1), new Range32.ptr(127169, 127183, 1), new Range32.ptr(127185, 127221, 1), new Range32.ptr(127248, 127278, 1), new Range32.ptr(127280, 127339, 1), new Range32.ptr(127344, 127404, 1), new Range32.ptr(127462, 127490, 1), new Range32.ptr(127504, 127547, 1), new Range32.ptr(127552, 127560, 1), new Range32.ptr(127568, 127569, 1), new Range32.ptr(127584, 127589, 1), new Range32.ptr(127744, 128724, 1), new Range32.ptr(128736, 128748, 1), new Range32.ptr(128752, 128760, 1), new Range32.ptr(128768, 128883, 1), new Range32.ptr(128896, 128980, 1), new Range32.ptr(129024, 129035, 1), new Range32.ptr(129040, 129095, 1), new Range32.ptr(129104, 129113, 1), new Range32.ptr(129120, 129159, 1), new Range32.ptr(129168, 129197, 1), new Range32.ptr(129280, 129291, 1), new Range32.ptr(129296, 129342, 1), new Range32.ptr(129344, 129356, 1), new Range32.ptr(129360, 129387, 1), new Range32.ptr(129408, 129431, 1), new Range32.ptr(129472, 129488, 16), new Range32.ptr(129489, 129510, 1)]), 10);
		_Zs = new RangeTable.ptr(new sliceType([new Range16.ptr(32, 160, 128), new Range16.ptr(5760, 8192, 2432), new Range16.ptr(8193, 8202, 1), new Range16.ptr(8239, 8287, 48), new Range16.ptr(12288, 12288, 1)]), sliceType$1.nil, 1);
		$pkg.Digit = _Nd;
		$pkg.Letter = _L;
		$pkg.L = _L;
		$pkg.M = _M;
		$pkg.N = _N;
		$pkg.P = _P;
		$pkg.S = _S;
		$pkg.Upper = _Lu;
		$pkg.Zs = _Zs;
		$pkg.GraphicRanges = new sliceType$2([$pkg.L, $pkg.M, $pkg.N, $pkg.P, $pkg.S, $pkg.Zs]);
		_White_Space = new RangeTable.ptr(new sliceType([new Range16.ptr(9, 13, 1), new Range16.ptr(32, 32, 1), new Range16.ptr(133, 133, 1), new Range16.ptr(160, 160, 1), new Range16.ptr(5760, 5760, 1), new Range16.ptr(8192, 8202, 1), new Range16.ptr(8232, 8233, 1), new Range16.ptr(8239, 8239, 1), new Range16.ptr(8287, 8287, 1), new Range16.ptr(12288, 12288, 1)]), sliceType$1.nil, 4);
		$pkg.White_Space = _White_Space;
		properties = $toNativeArray($kindUint8, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 144, 130, 130, 130, 136, 130, 130, 130, 130, 130, 130, 136, 130, 130, 130, 130, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 130, 130, 136, 136, 136, 130, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 130, 130, 130, 136, 130, 136, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 130, 136, 130, 136, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 130, 136, 136, 136, 136, 136, 130, 136, 136, 224, 130, 136, 0, 136, 136, 136, 136, 132, 132, 136, 192, 130, 130, 136, 132, 224, 130, 132, 132, 132, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 136, 160, 160, 160, 160, 160, 160, 160, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 136, 192, 192, 192, 192, 192, 192, 192, 192]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bytes"] = (function() {
	var $pkg = {}, $init, errors, io, unicode, utf8, Buffer, readOp, asciiSet, Reader, ptrType, sliceType, arrayType, ptrType$1, arrayType$2, ptrType$2, errNegativeRead, IndexByte, Equal, makeSlice, LastIndex, HasPrefix, TrimLeftFunc, TrimRightFunc, TrimFunc, indexFunc, lastIndexFunc, makeASCIISet, makeCutsetFunc, TrimRight, TrimSpace, NewReader;
	errors = $packages["errors"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Buffer = $pkg.Buffer = $newType(0, $kindStruct, "bytes.Buffer", true, "bytes", true, function(buf_, off_, bootstrap_, lastRead_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.off = 0;
			this.bootstrap = arrayType.zero();
			this.lastRead = 0;
			return;
		}
		this.buf = buf_;
		this.off = off_;
		this.bootstrap = bootstrap_;
		this.lastRead = lastRead_;
	});
	readOp = $pkg.readOp = $newType(1, $kindInt8, "bytes.readOp", true, "bytes", false, null);
	asciiSet = $pkg.asciiSet = $newType(32, $kindArray, "bytes.asciiSet", true, "bytes", false, null);
	Reader = $pkg.Reader = $newType(0, $kindStruct, "bytes.Reader", true, "bytes", true, function(s_, i_, prevRune_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = sliceType.nil;
			this.i = new $Int64(0, 0);
			this.prevRune = 0;
			return;
		}
		this.s = s_;
		this.i = i_;
		this.prevRune = prevRune_;
	});
	ptrType = $ptrType(Buffer);
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(asciiSet);
	arrayType$2 = $arrayType($Uint32, 8);
	ptrType$2 = $ptrType(Reader);
	IndexByte = function(s, c) {
		var _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	$pkg.IndexByte = IndexByte;
	Equal = function(a, b) {
		var _i, _ref, a, b, c, i;
		if (!((a.$length === b.$length))) {
			return false;
		}
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((c === ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i])))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$pkg.Equal = Equal;
	Buffer.ptr.prototype.Bytes = function() {
		var b;
		b = this;
		return $subslice(b.buf, b.off);
	};
	Buffer.prototype.Bytes = function() { return this.$val.Bytes(); };
	Buffer.ptr.prototype.String = function() {
		var b;
		b = this;
		if (b === ptrType.nil) {
			return "<nil>";
		}
		return ($bytesToString($subslice(b.buf, b.off)));
	};
	Buffer.prototype.String = function() { return this.$val.String(); };
	Buffer.ptr.prototype.empty = function() {
		var b;
		b = this;
		return b.buf.$length <= b.off;
	};
	Buffer.prototype.empty = function() { return this.$val.empty(); };
	Buffer.ptr.prototype.Len = function() {
		var b;
		b = this;
		return b.buf.$length - b.off >> 0;
	};
	Buffer.prototype.Len = function() { return this.$val.Len(); };
	Buffer.ptr.prototype.Cap = function() {
		var b;
		b = this;
		return b.buf.$capacity;
	};
	Buffer.prototype.Cap = function() { return this.$val.Cap(); };
	Buffer.ptr.prototype.Truncate = function(n) {
		var b, n;
		b = this;
		if (n === 0) {
			b.Reset();
			return;
		}
		b.lastRead = 0;
		if (n < 0 || n > b.Len()) {
			$panic(new $String("bytes.Buffer: truncation out of range"));
		}
		b.buf = $subslice(b.buf, 0, (b.off + n >> 0));
	};
	Buffer.prototype.Truncate = function(n) { return this.$val.Truncate(n); };
	Buffer.ptr.prototype.Reset = function() {
		var b;
		b = this;
		b.buf = $subslice(b.buf, 0, 0);
		b.off = 0;
		b.lastRead = 0;
	};
	Buffer.prototype.Reset = function() { return this.$val.Reset(); };
	Buffer.ptr.prototype.tryGrowByReslice = function(n) {
		var b, l, n;
		b = this;
		l = b.buf.$length;
		if (n <= (b.buf.$capacity - l >> 0)) {
			b.buf = $subslice(b.buf, 0, (l + n >> 0));
			return [l, true];
		}
		return [0, false];
	};
	Buffer.prototype.tryGrowByReslice = function(n) { return this.$val.tryGrowByReslice(n); };
	Buffer.ptr.prototype.grow = function(n) {
		var _q, _tuple, b, buf, c, i, m, n, ok;
		b = this;
		m = b.Len();
		if ((m === 0) && !((b.off === 0))) {
			b.Reset();
		}
		_tuple = b.tryGrowByReslice(n);
		i = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			return i;
		}
		if (b.buf === sliceType.nil && n <= 64) {
			b.buf = $subslice(new sliceType(b.bootstrap), 0, n);
			return 0;
		}
		c = b.buf.$capacity;
		if (n <= ((_q = c / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) - m >> 0)) {
			$copySlice(b.buf, $subslice(b.buf, b.off));
		} else if (c > ((2147483647 - c >> 0) - n >> 0)) {
			$panic($pkg.ErrTooLarge);
		} else {
			buf = makeSlice(($imul(2, c)) + n >> 0);
			$copySlice(buf, $subslice(b.buf, b.off));
			b.buf = buf;
		}
		b.off = 0;
		b.buf = $subslice(b.buf, 0, (m + n >> 0));
		return m;
	};
	Buffer.prototype.grow = function(n) { return this.$val.grow(n); };
	Buffer.ptr.prototype.Grow = function(n) {
		var b, m, n;
		b = this;
		if (n < 0) {
			$panic(new $String("bytes.Buffer.Grow: negative count"));
		}
		m = b.grow(n);
		b.buf = $subslice(b.buf, 0, m);
	};
	Buffer.prototype.Grow = function(n) { return this.$val.Grow(n); };
	Buffer.ptr.prototype.Write = function(p) {
		var _tmp, _tmp$1, _tuple, b, err, m, n, ok, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		_tuple = b.tryGrowByReslice(p.$length);
		m = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			m = b.grow(p.$length);
		}
		_tmp = $copySlice($subslice(b.buf, m), p);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.Write = function(p) { return this.$val.Write(p); };
	Buffer.ptr.prototype.WriteString = function(s) {
		var _tmp, _tmp$1, _tuple, b, err, m, n, ok, s;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		_tuple = b.tryGrowByReslice(s.length);
		m = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			m = b.grow(s.length);
		}
		_tmp = $copyString($subslice(b.buf, m), s);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Buffer.ptr.prototype.ReadFrom = function(r) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, i, m, n, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; i = $f.i; m = $f.m; n = $f.n; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		/* while (true) { */ case 1:
			i = b.grow(512);
			_r = r.Read($subslice(b.buf, i, b.buf.$capacity)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (m < 0) {
				$panic(errNegativeRead);
			}
			b.buf = $subslice(b.buf, 0, (i + m >> 0));
			n = (x = (new $Int64(0, m)), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if ($interfaceIsEqual(e, io.EOF)) {
				_tmp = n;
				_tmp$1 = $ifaceNil;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp$2 = n;
				_tmp$3 = e;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.ReadFrom }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.i = i; $f.m = m; $f.n = n; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	makeSlice = function(n) {
		var n, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			if (!($interfaceIsEqual($recover(), $ifaceNil))) {
				$panic($pkg.ErrTooLarge);
			}
		}), []]);
		return $makeSlice(sliceType, n);
		/* */ } catch(err) { $err = err; return sliceType.nil; } finally { $callDeferred($deferred, $err); }
	};
	Buffer.ptr.prototype.WriteTo = function(w) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, m, n, nBytes, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; n = $f.n; nBytes = $f.nBytes; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		nBytes = b.Len();
		/* */ if (nBytes > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (nBytes > 0) { */ case 1:
			_r = w.Write($subslice(b.buf, b.off)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (m > nBytes) {
				$panic(new $String("bytes.Buffer.WriteTo: invalid Write count"));
			}
			b.off = b.off + (m) >> 0;
			n = (new $Int64(0, m));
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = e;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
			if (!((m === nBytes))) {
				_tmp$2 = n;
				_tmp$3 = io.ErrShortWrite;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
		/* } */ case 2:
		b.Reset();
		_tmp$4 = n;
		_tmp$5 = $ifaceNil;
		n = _tmp$4;
		err = _tmp$5;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.WriteTo }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.n = n; $f.nBytes = nBytes; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Buffer.ptr.prototype.WriteByte = function(c) {
		var _tuple, b, c, m, ok, x;
		b = this;
		b.lastRead = 0;
		_tuple = b.tryGrowByReslice(1);
		m = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			m = b.grow(1);
		}
		(x = b.buf, ((m < 0 || m >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + m] = c));
		return $ifaceNil;
	};
	Buffer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Buffer.ptr.prototype.WriteRune = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, err, m, n, ok, r;
		n = 0;
		err = $ifaceNil;
		b = this;
		if (r < 128) {
			b.WriteByte(((r << 24 >>> 24)));
			_tmp = 1;
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		b.lastRead = 0;
		_tuple = b.tryGrowByReslice(4);
		m = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			m = b.grow(4);
		}
		n = utf8.EncodeRune($subslice(b.buf, m, (m + 4 >> 0)), r);
		b.buf = $subslice(b.buf, 0, (m + n >> 0));
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
	};
	Buffer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Buffer.ptr.prototype.Read = function(p) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, err, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.empty()) {
			b.Reset();
			if (p.$length === 0) {
				_tmp = 0;
				_tmp$1 = $ifaceNil;
				n = _tmp;
				err = _tmp$1;
				return [n, err];
			}
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		n = $copySlice(p, $subslice(b.buf, b.off));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = -1;
		}
		_tmp$4 = n;
		_tmp$5 = $ifaceNil;
		n = _tmp$4;
		err = _tmp$5;
		return [n, err];
	};
	Buffer.prototype.Read = function(p) { return this.$val.Read(p); };
	Buffer.ptr.prototype.Next = function(n) {
		var b, data, m, n;
		b = this;
		b.lastRead = 0;
		m = b.Len();
		if (n > m) {
			n = m;
		}
		data = $subslice(b.buf, b.off, (b.off + n >> 0));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = -1;
		}
		return data;
	};
	Buffer.prototype.Next = function(n) { return this.$val.Next(n); };
	Buffer.ptr.prototype.ReadByte = function() {
		var b, c, x, x$1;
		b = this;
		if (b.empty()) {
			b.Reset();
			return [0, io.EOF];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		b.off = b.off + (1) >> 0;
		b.lastRead = -1;
		return [c, $ifaceNil];
	};
	Buffer.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Buffer.ptr.prototype.ReadRune = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, b, c, err, n, r, size, x, x$1;
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		if (b.empty()) {
			b.Reset();
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			r = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [r, size, err];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		if (c < 128) {
			b.off = b.off + (1) >> 0;
			b.lastRead = 1;
			_tmp$3 = ((c >> 0));
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			r = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [r, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(b.buf, b.off));
		r = _tuple[0];
		n = _tuple[1];
		b.off = b.off + (n) >> 0;
		b.lastRead = ((n << 24 >> 24));
		_tmp$6 = r;
		_tmp$7 = n;
		_tmp$8 = $ifaceNil;
		r = _tmp$6;
		size = _tmp$7;
		err = _tmp$8;
		return [r, size, err];
	};
	Buffer.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Buffer.ptr.prototype.UnreadRune = function() {
		var b;
		b = this;
		if (b.lastRead <= 0) {
			return errors.New("bytes.Buffer: UnreadRune: previous operation was not a successful ReadRune");
		}
		if (b.off >= ((b.lastRead >> 0))) {
			b.off = b.off - (((b.lastRead >> 0))) >> 0;
		}
		b.lastRead = 0;
		return $ifaceNil;
	};
	Buffer.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Buffer.ptr.prototype.UnreadByte = function() {
		var b;
		b = this;
		if (b.lastRead === 0) {
			return errors.New("bytes.Buffer: UnreadByte: previous operation was not a successful read");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			b.off = b.off - (1) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Buffer.ptr.prototype.ReadBytes = function(delim) {
		var _tmp, _tmp$1, _tuple, b, delim, err, line, slice;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		line = $appendSlice(line, slice);
		_tmp = line;
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Buffer.ptr.prototype.readSlice = function(delim) {
		var _tmp, _tmp$1, b, delim, end, err, i, line;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		i = IndexByte($subslice(b.buf, b.off), delim);
		end = (b.off + i >> 0) + 1 >> 0;
		if (i < 0) {
			end = b.buf.$length;
			err = io.EOF;
		}
		line = $subslice(b.buf, b.off, end);
		b.off = end;
		b.lastRead = -1;
		_tmp = line;
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.readSlice = function(delim) { return this.$val.readSlice(delim); };
	Buffer.ptr.prototype.ReadString = function(delim) {
		var _tmp, _tmp$1, _tuple, b, delim, err, line, slice;
		line = "";
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		_tmp = ($bytesToString(slice));
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	LastIndex = function(s, sep) {
		var c, i, n, s, sep;
		n = sep.$length;
		if (n === 0) {
			return s.$length;
		}
		c = (0 >= sep.$length ? ($throwRuntimeError("index out of range"), undefined) : sep.$array[sep.$offset + 0]);
		i = s.$length - n >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if ((((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]) === c) && ((n === 1) || Equal($subslice(s, i, (i + n >> 0)), sep))) {
				return i;
			}
			i = i - (1) >> 0;
		}
		return -1;
	};
	$pkg.LastIndex = LastIndex;
	HasPrefix = function(s, prefix) {
		var prefix, s;
		return s.$length >= prefix.$length && Equal($subslice(s, 0, prefix.$length), prefix);
	};
	$pkg.HasPrefix = HasPrefix;
	TrimLeftFunc = function(s, f) {
		var _r, f, i, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; i = $f.i; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = indexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i === -1) {
			$s = -1; return sliceType.nil;
		}
		$s = -1; return $subslice(s, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimLeftFunc }; } $f._r = _r; $f.f = f; $f.i = i; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimLeftFunc = TrimLeftFunc;
	TrimRightFunc = function(s, f) {
		var _r, _tuple, f, i, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = lastIndexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i >= 0 && ((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]) >= 128) {
			_tuple = utf8.DecodeRune($subslice(s, i));
			wid = _tuple[1];
			i = i + (wid) >> 0;
		} else {
			i = i + (1) >> 0;
		}
		$s = -1; return $subslice(s, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimRightFunc }; } $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRightFunc = TrimRightFunc;
	TrimFunc = function(s, f) {
		var _r, _r$1, f, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; f = $f.f; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimLeftFunc(s, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = TrimRightFunc(_r, f); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimFunc }; } $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimFunc = TrimFunc;
	indexFunc = function(s, f, truth) {
		var _r, _tuple, f, r, s, start, truth, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; f = $f.f; r = $f.r; s = $f.s; start = $f.start; truth = $f.truth; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = 0;
		/* while (true) { */ case 1:
			/* if (!(start < s.$length)) { break; } */ if(!(start < s.$length)) { $s = 2; continue; }
			wid = 1;
			r = ((((start < 0 || start >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + start]) >> 0));
			if (r >= 128) {
				_tuple = utf8.DecodeRune($subslice(s, start));
				r = _tuple[0];
				wid = _tuple[1];
			}
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				$s = -1; return start;
			/* } */ case 4:
			start = start + (wid) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: indexFunc }; } $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.r = r; $f.s = s; $f.start = start; $f.truth = truth; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	lastIndexFunc = function(s, f, truth) {
		var _r, _tmp, _tmp$1, _tuple, f, i, r, s, size, truth, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; i = $f.i; r = $f.r; s = $f.s; size = $f.size; truth = $f.truth; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = s.$length;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_tmp = (((x = i - 1 >> 0, ((x < 0 || x >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x])) >> 0));
			_tmp$1 = 1;
			r = _tmp;
			size = _tmp$1;
			if (r >= 128) {
				_tuple = utf8.DecodeLastRune($subslice(s, 0, i));
				r = _tuple[0];
				size = _tuple[1];
			}
			i = i - (size) >> 0;
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				$s = -1; return i;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lastIndexFunc }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.r = r; $f.s = s; $f.size = size; $f.truth = truth; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeASCIISet = function(chars) {
		var _index, _tmp, _tmp$1, _tmp$2, _tmp$3, as, c, chars, i, ok, y;
		as = arrayType$2.zero();
		ok = false;
		i = 0;
		while (true) {
			if (!(i < chars.length)) { break; }
			c = chars.charCodeAt(i);
			if (c >= 128) {
				_tmp = $clone(as, asciiSet);
				_tmp$1 = false;
				asciiSet.copy(as, _tmp);
				ok = _tmp$1;
				return [as, ok];
			}
			_index = c >>> 5 << 24 >>> 24;
			((_index < 0 || _index >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[_index] = ((((_index < 0 || _index >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[_index]) | (((y = ((((c & 31) >>> 0) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0));
			i = i + (1) >> 0;
		}
		_tmp$2 = $clone(as, asciiSet);
		_tmp$3 = true;
		asciiSet.copy(as, _tmp$2);
		ok = _tmp$3;
		return [as, ok];
	};
	asciiSet.prototype.contains = function(c) {
		var as, c, x, y;
		as = this.$val;
		return !((((((x = c >>> 5 << 24 >>> 24, (as.nilCheck, ((x < 0 || x >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[x]))) & (((y = ((((c & 31) >>> 0) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0)) === 0));
	};
	$ptrType(asciiSet).prototype.contains = function(c) { return (new asciiSet(this.$get())).contains(c); };
	makeCutsetFunc = function(cutset) {
		var _tuple, as, cutset, isASCII;
		if ((cutset.length === 1) && cutset.charCodeAt(0) < 128) {
			return (function(r) {
				var r;
				return r === ((cutset.charCodeAt(0) >> 0));
			});
		}
		_tuple = makeASCIISet(cutset);
		as = $clone(_tuple[0], asciiSet);
		isASCII = _tuple[1];
		if (isASCII) {
			return (function(r) {
				var r;
				return r < 128 && new ptrType$1(as).contains(((r << 24 >>> 24)));
			});
		}
		return (function(r) {
			var _i, _ref, _rune, c, r;
			_ref = cutset;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				c = _rune[0];
				if (c === r) {
					return true;
				}
				_i += _rune[1];
			}
			return false;
		});
	};
	TrimRight = function(s, cutset) {
		var _r, cutset, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; cutset = $f.cutset; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimRightFunc(s, makeCutsetFunc(cutset)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimRight }; } $f._r = _r; $f.cutset = cutset; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRight = TrimRight;
	TrimSpace = function(s) {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimFunc(s, unicode.IsSpace); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimSpace }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimSpace = TrimSpace;
	Reader.ptr.prototype.Len = function() {
		var r, x, x$1, x$2, x$3, x$4;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return 0;
		}
		return (((x$2 = (x$3 = (new $Int64(0, r.s.$length)), x$4 = r.i, new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low)), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0));
	};
	Reader.prototype.Len = function() { return this.$val.Len(); };
	Reader.ptr.prototype.Size = function() {
		var r;
		r = this;
		return (new $Int64(0, r.s.$length));
	};
	Reader.prototype.Size = function() { return this.$val.Size(); };
	Reader.ptr.prototype.Read = function(b) {
		var _tmp, _tmp$1, b, err, n, r, x, x$1, x$2, x$3;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = 0;
			_tmp$1 = io.EOF;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		r.prevRune = -1;
		n = $copySlice(b, $subslice(r.s, $flatten64(r.i)));
		r.i = (x$2 = r.i, x$3 = (new $Int64(0, n)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [n, err];
	};
	Reader.prototype.Read = function(b) { return this.$val.Read(b); };
	Reader.ptr.prototype.ReadAt = function(b, off) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, off, r, x;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp = 0;
			_tmp$1 = errors.New("bytes.Reader.ReadAt: negative offset");
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		if ((x = (new $Int64(0, r.s.$length)), (off.$high > x.$high || (off.$high === x.$high && off.$low >= x.$low)))) {
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		n = $copySlice(b, $subslice(r.s, $flatten64(off)));
		if (n < b.$length) {
			err = io.EOF;
		}
		return [n, err];
	};
	Reader.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	Reader.ptr.prototype.ReadByte = function() {
		var b, r, x, x$1, x$2, x$3, x$4, x$5;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return [0, io.EOF];
		}
		b = (x$2 = r.s, x$3 = r.i, (($flatten64(x$3) < 0 || $flatten64(x$3) >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + $flatten64(x$3)]));
		r.i = (x$4 = r.i, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
		return [b, $ifaceNil];
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var r, x, x$1, x$2;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			return errors.New("bytes.Reader.UnreadByte: at beginning of slice");
		}
		r.i = (x$1 = r.i, x$2 = new $Int64(0, 1), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, c, ch, err, r, size, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		ch = 0;
		size = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			r.prevRune = -1;
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			ch = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [ch, size, err];
		}
		r.prevRune = (((x$2 = r.i, x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0));
		c = (x$3 = r.s, x$4 = r.i, (($flatten64(x$4) < 0 || $flatten64(x$4) >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + $flatten64(x$4)]));
		if (c < 128) {
			r.i = (x$5 = r.i, x$6 = new $Int64(0, 1), new $Int64(x$5.$high + x$6.$high, x$5.$low + x$6.$low));
			_tmp$3 = ((c >> 0));
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			ch = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [ch, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(r.s, $flatten64(r.i)));
		ch = _tuple[0];
		size = _tuple[1];
		r.i = (x$7 = r.i, x$8 = (new $Int64(0, size)), new $Int64(x$7.$high + x$8.$high, x$7.$low + x$8.$low));
		return [ch, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var r;
		r = this;
		if (r.prevRune < 0) {
			return errors.New("bytes.Reader.UnreadRune: previous operation was not ReadRune");
		}
		r.i = (new $Int64(0, r.prevRune));
		r.prevRune = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Seek = function(offset, whence) {
		var _1, abs, offset, r, whence, x, x$1;
		r = this;
		r.prevRune = -1;
		abs = new $Int64(0, 0);
		_1 = whence;
		if (_1 === (0)) {
			abs = offset;
		} else if (_1 === (1)) {
			abs = (x = r.i, new $Int64(x.$high + offset.$high, x.$low + offset.$low));
		} else if (_1 === (2)) {
			abs = (x$1 = (new $Int64(0, r.s.$length)), new $Int64(x$1.$high + offset.$high, x$1.$low + offset.$low));
		} else {
			return [new $Int64(0, 0), errors.New("bytes.Reader.Seek: invalid whence")];
		}
		if ((abs.$high < 0 || (abs.$high === 0 && abs.$low < 0))) {
			return [new $Int64(0, 0), errors.New("bytes.Reader.Seek: negative position")];
		}
		r.i = abs;
		return [abs, $ifaceNil];
	};
	Reader.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var _r, _tmp, _tmp$1, _tuple, b, err, m, n, r, w, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; m = $f.m; n = $f.n; r = $f.r; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		b = $subslice(r.s, $flatten64(r.i));
		_r = w.Write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = _tuple[0];
		err = _tuple[1];
		if (m > b.$length) {
			$panic(new $String("bytes.Reader.WriteTo: invalid Write count"));
		}
		r.i = (x$2 = r.i, x$3 = (new $Int64(0, m)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		n = (new $Int64(0, m));
		if (!((m === b.$length)) && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.m = m; $f.n = n; $f.r = r; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.Reset = function(b) {
		var b, r;
		r = this;
		Reader.copy(r, new Reader.ptr(b, new $Int64(0, 0), -1));
	};
	Reader.prototype.Reset = function(b) { return this.$val.Reset(b); };
	NewReader = function(b) {
		var b;
		return new Reader.ptr(b, new $Int64(0, 0), -1);
	};
	$pkg.NewReader = NewReader;
	ptrType.methods = [{prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "empty", name: "empty", pkg: "bytes", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "tryGrowByReslice", name: "tryGrowByReslice", pkg: "bytes", typ: $funcType([$Int], [$Int, $Bool], false)}, {prop: "grow", name: "grow", pkg: "bytes", typ: $funcType([$Int], [$Int], false)}, {prop: "Grow", name: "Grow", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "readSlice", name: "readSlice", pkg: "bytes", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}];
	ptrType$1.methods = [{prop: "contains", name: "contains", pkg: "bytes", typ: $funcType([$Uint8], [$Bool], false)}];
	ptrType$2.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType, $Int64], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([sliceType], [], false)}];
	Buffer.init("bytes", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "off", name: "off", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "bootstrap", name: "bootstrap", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "lastRead", name: "lastRead", anonymous: false, exported: false, typ: readOp, tag: ""}]);
	asciiSet.init($Uint32, 8);
	Reader.init("bytes", [{prop: "s", name: "s", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "i", name: "i", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "prevRune", name: "prevRune", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
		errNegativeRead = errors.New("bytes.Buffer: reader returned negative count from Read");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, $init, js, race, runtime, sync, SockaddrLinklayer, SockaddrNetlink, mmapper, Errno, Sockaddr, SockaddrInet4, SockaddrInet6, SockaddrUnix, Timespec, Stat_t, RawSockaddrInet4, RawSockaddrInet6, RawSockaddrUnix, RawSockaddrLinklayer, RawSockaddrNetlink, RawSockaddr, RawSockaddrAny, _Socklen, Linger, Iovec, IPMreq, IPMreqn, IPv6Mreq, Msghdr, sliceType, sliceType$1, ptrType$2, ptrType$4, arrayType$1, ptrType$8, arrayType$2, ptrType$11, arrayType$4, arrayType$7, arrayType$8, arrayType$9, arrayType$10, ptrType$18, ptrType$19, structType, ptrType$22, ptrType$24, ptrType$25, mapType, funcType$2, funcType$3, ptrType$26, ptrType$27, ptrType$28, ptrType$29, arrayType$15, ptrType$31, warningPrinted, lineBuffer, syscallModule, alreadyTriedToLoad, minusOne, envs, mapper, errEAGAIN, errEINVAL, errENOENT, ioSync, ioSync$24ptr, errors, init, printWarning, printToConsole, Exit, indexByte, runtime_envs, syscall, Syscall, Syscall6, BytePtrFromString, readInt, readIntBE, readIntLE, ParseDirent, CloseOnExec, SetNonblock, msanRead, msanWrite, itoa, uitoa, Chmod, Open, anyToSockaddr, Accept, Accept4, SetsockoptIPMreqn, Recvmsg, SendmsgN, ReadDirent, direntIno, direntReclen, direntNamlen, errnoErr, Read, Write, GetsockoptInt, Recvfrom, Sendto, SetsockoptByte, SetsockoptInt, SetsockoptInet4Addr, SetsockoptIPMreq, SetsockoptIPv6Mreq, SetsockoptLinger, openat, Close, Fchdir, Fchmod, Fchmodat, fcntl, Fsync, Getdents, read, write, munmap, Fchown, Fstat, Ftruncate, Lstat, Pread, Pwrite, Seek, Shutdown, Stat, accept, accept4, getsockopt, setsockopt, recvfrom, sendto, recvmsg, sendmsg, mmap;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	SockaddrLinklayer = $pkg.SockaddrLinklayer = $newType(0, $kindStruct, "syscall.SockaddrLinklayer", true, "syscall", true, function(Protocol_, Ifindex_, Hatype_, Pkttype_, Halen_, Addr_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Protocol = 0;
			this.Ifindex = 0;
			this.Hatype = 0;
			this.Pkttype = 0;
			this.Halen = 0;
			this.Addr = arrayType$1.zero();
			this.raw = new RawSockaddrLinklayer.ptr(0, 0, 0, 0, 0, 0, arrayType$1.zero());
			return;
		}
		this.Protocol = Protocol_;
		this.Ifindex = Ifindex_;
		this.Hatype = Hatype_;
		this.Pkttype = Pkttype_;
		this.Halen = Halen_;
		this.Addr = Addr_;
		this.raw = raw_;
	});
	SockaddrNetlink = $pkg.SockaddrNetlink = $newType(0, $kindStruct, "syscall.SockaddrNetlink", true, "syscall", true, function(Family_, Pad_, Pid_, Groups_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Family = 0;
			this.Pad = 0;
			this.Pid = 0;
			this.Groups = 0;
			this.raw = new RawSockaddrNetlink.ptr(0, 0, 0, 0);
			return;
		}
		this.Family = Family_;
		this.Pad = Pad_;
		this.Pid = Pid_;
		this.Groups = Groups_;
		this.raw = raw_;
	});
	mmapper = $pkg.mmapper = $newType(0, $kindStruct, "syscall.mmapper", true, "syscall", false, function(Mutex_, active_, mmap_, munmap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Mutex = new sync.Mutex.ptr(0, 0);
			this.active = false;
			this.mmap = $throwNilPointerError;
			this.munmap = $throwNilPointerError;
			return;
		}
		this.Mutex = Mutex_;
		this.active = active_;
		this.mmap = mmap_;
		this.munmap = munmap_;
	});
	Errno = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", true, "syscall", true, null);
	Sockaddr = $pkg.Sockaddr = $newType(8, $kindInterface, "syscall.Sockaddr", true, "syscall", true, null);
	SockaddrInet4 = $pkg.SockaddrInet4 = $newType(0, $kindStruct, "syscall.SockaddrInet4", true, "syscall", true, function(Port_, Addr_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Port = 0;
			this.Addr = arrayType$8.zero();
			this.raw = new RawSockaddrInet4.ptr(0, 0, arrayType$8.zero(), arrayType$1.zero());
			return;
		}
		this.Port = Port_;
		this.Addr = Addr_;
		this.raw = raw_;
	});
	SockaddrInet6 = $pkg.SockaddrInet6 = $newType(0, $kindStruct, "syscall.SockaddrInet6", true, "syscall", true, function(Port_, ZoneId_, Addr_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Port = 0;
			this.ZoneId = 0;
			this.Addr = arrayType$2.zero();
			this.raw = new RawSockaddrInet6.ptr(0, 0, 0, arrayType$2.zero(), 0);
			return;
		}
		this.Port = Port_;
		this.ZoneId = ZoneId_;
		this.Addr = Addr_;
		this.raw = raw_;
	});
	SockaddrUnix = $pkg.SockaddrUnix = $newType(0, $kindStruct, "syscall.SockaddrUnix", true, "syscall", true, function(Name_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.raw = new RawSockaddrUnix.ptr(0, arrayType$7.zero());
			return;
		}
		this.Name = Name_;
		this.raw = raw_;
	});
	Timespec = $pkg.Timespec = $newType(0, $kindStruct, "syscall.Timespec", true, "syscall", true, function(Sec_, Nsec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Sec = new $Int64(0, 0);
			this.Nsec = new $Int64(0, 0);
			return;
		}
		this.Sec = Sec_;
		this.Nsec = Nsec_;
	});
	Stat_t = $pkg.Stat_t = $newType(0, $kindStruct, "syscall.Stat_t", true, "syscall", true, function(Dev_, Ino_, Nlink_, Mode_, Uid_, Gid_, X__pad0_, Rdev_, Size_, Blksize_, Blocks_, Atim_, Mtim_, Ctim_, X__unused_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dev = new $Uint64(0, 0);
			this.Ino = new $Uint64(0, 0);
			this.Nlink = new $Uint64(0, 0);
			this.Mode = 0;
			this.Uid = 0;
			this.Gid = 0;
			this.X__pad0 = 0;
			this.Rdev = new $Uint64(0, 0);
			this.Size = new $Int64(0, 0);
			this.Blksize = new $Int64(0, 0);
			this.Blocks = new $Int64(0, 0);
			this.Atim = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Mtim = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Ctim = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.X__unused = arrayType$15.zero();
			return;
		}
		this.Dev = Dev_;
		this.Ino = Ino_;
		this.Nlink = Nlink_;
		this.Mode = Mode_;
		this.Uid = Uid_;
		this.Gid = Gid_;
		this.X__pad0 = X__pad0_;
		this.Rdev = Rdev_;
		this.Size = Size_;
		this.Blksize = Blksize_;
		this.Blocks = Blocks_;
		this.Atim = Atim_;
		this.Mtim = Mtim_;
		this.Ctim = Ctim_;
		this.X__unused = X__unused_;
	});
	RawSockaddrInet4 = $pkg.RawSockaddrInet4 = $newType(0, $kindStruct, "syscall.RawSockaddrInet4", true, "syscall", true, function(Family_, Port_, Addr_, Zero_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Family = 0;
			this.Port = 0;
			this.Addr = arrayType$8.zero();
			this.Zero = arrayType$1.zero();
			return;
		}
		this.Family = Family_;
		this.Port = Port_;
		this.Addr = Addr_;
		this.Zero = Zero_;
	});
	RawSockaddrInet6 = $pkg.RawSockaddrInet6 = $newType(0, $kindStruct, "syscall.RawSockaddrInet6", true, "syscall", true, function(Family_, Port_, Flowinfo_, Addr_, Scope_id_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Family = 0;
			this.Port = 0;
			this.Flowinfo = 0;
			this.Addr = arrayType$2.zero();
			this.Scope_id = 0;
			return;
		}
		this.Family = Family_;
		this.Port = Port_;
		this.Flowinfo = Flowinfo_;
		this.Addr = Addr_;
		this.Scope_id = Scope_id_;
	});
	RawSockaddrUnix = $pkg.RawSockaddrUnix = $newType(0, $kindStruct, "syscall.RawSockaddrUnix", true, "syscall", true, function(Family_, Path_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Family = 0;
			this.Path = arrayType$7.zero();
			return;
		}
		this.Family = Family_;
		this.Path = Path_;
	});
	RawSockaddrLinklayer = $pkg.RawSockaddrLinklayer = $newType(0, $kindStruct, "syscall.RawSockaddrLinklayer", true, "syscall", true, function(Family_, Protocol_, Ifindex_, Hatype_, Pkttype_, Halen_, Addr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Family = 0;
			this.Protocol = 0;
			this.Ifindex = 0;
			this.Hatype = 0;
			this.Pkttype = 0;
			this.Halen = 0;
			this.Addr = arrayType$1.zero();
			return;
		}
		this.Family = Family_;
		this.Protocol = Protocol_;
		this.Ifindex = Ifindex_;
		this.Hatype = Hatype_;
		this.Pkttype = Pkttype_;
		this.Halen = Halen_;
		this.Addr = Addr_;
	});
	RawSockaddrNetlink = $pkg.RawSockaddrNetlink = $newType(0, $kindStruct, "syscall.RawSockaddrNetlink", true, "syscall", true, function(Family_, Pad_, Pid_, Groups_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Family = 0;
			this.Pad = 0;
			this.Pid = 0;
			this.Groups = 0;
			return;
		}
		this.Family = Family_;
		this.Pad = Pad_;
		this.Pid = Pid_;
		this.Groups = Groups_;
	});
	RawSockaddr = $pkg.RawSockaddr = $newType(0, $kindStruct, "syscall.RawSockaddr", true, "syscall", true, function(Family_, Data_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Family = 0;
			this.Data = arrayType$9.zero();
			return;
		}
		this.Family = Family_;
		this.Data = Data_;
	});
	RawSockaddrAny = $pkg.RawSockaddrAny = $newType(0, $kindStruct, "syscall.RawSockaddrAny", true, "syscall", true, function(Addr_, Pad_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Addr = new RawSockaddr.ptr(0, arrayType$9.zero());
			this.Pad = arrayType$10.zero();
			return;
		}
		this.Addr = Addr_;
		this.Pad = Pad_;
	});
	_Socklen = $pkg._Socklen = $newType(4, $kindUint32, "syscall._Socklen", true, "syscall", false, null);
	Linger = $pkg.Linger = $newType(0, $kindStruct, "syscall.Linger", true, "syscall", true, function(Onoff_, Linger_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Onoff = 0;
			this.Linger = 0;
			return;
		}
		this.Onoff = Onoff_;
		this.Linger = Linger_;
	});
	Iovec = $pkg.Iovec = $newType(0, $kindStruct, "syscall.Iovec", true, "syscall", true, function(Base_, Len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Base = ptrType$2.nil;
			this.Len = new $Uint64(0, 0);
			return;
		}
		this.Base = Base_;
		this.Len = Len_;
	});
	IPMreq = $pkg.IPMreq = $newType(0, $kindStruct, "syscall.IPMreq", true, "syscall", true, function(Multiaddr_, Interface_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Multiaddr = arrayType$8.zero();
			this.Interface = arrayType$8.zero();
			return;
		}
		this.Multiaddr = Multiaddr_;
		this.Interface = Interface_;
	});
	IPMreqn = $pkg.IPMreqn = $newType(0, $kindStruct, "syscall.IPMreqn", true, "syscall", true, function(Multiaddr_, Address_, Ifindex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Multiaddr = arrayType$8.zero();
			this.Address = arrayType$8.zero();
			this.Ifindex = 0;
			return;
		}
		this.Multiaddr = Multiaddr_;
		this.Address = Address_;
		this.Ifindex = Ifindex_;
	});
	IPv6Mreq = $pkg.IPv6Mreq = $newType(0, $kindStruct, "syscall.IPv6Mreq", true, "syscall", true, function(Multiaddr_, Interface_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Multiaddr = arrayType$2.zero();
			this.Interface = 0;
			return;
		}
		this.Multiaddr = Multiaddr_;
		this.Interface = Interface_;
	});
	Msghdr = $pkg.Msghdr = $newType(0, $kindStruct, "syscall.Msghdr", true, "syscall", true, function(Name_, Namelen_, Pad_cgo_0_, Iov_, Iovlen_, Control_, Controllen_, Flags_, Pad_cgo_1_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = ptrType$2.nil;
			this.Namelen = 0;
			this.Pad_cgo_0 = arrayType$8.zero();
			this.Iov = ptrType$19.nil;
			this.Iovlen = new $Uint64(0, 0);
			this.Control = ptrType$2.nil;
			this.Controllen = new $Uint64(0, 0);
			this.Flags = 0;
			this.Pad_cgo_1 = arrayType$8.zero();
			return;
		}
		this.Name = Name_;
		this.Namelen = Namelen_;
		this.Pad_cgo_0 = Pad_cgo_0_;
		this.Iov = Iov_;
		this.Iovlen = Iovlen_;
		this.Control = Control_;
		this.Controllen = Controllen_;
		this.Flags = Flags_;
		this.Pad_cgo_1 = Pad_cgo_1_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($String);
	ptrType$2 = $ptrType($Uint8);
	ptrType$4 = $ptrType($Int32);
	arrayType$1 = $arrayType($Uint8, 8);
	ptrType$8 = $ptrType($Uint16);
	arrayType$2 = $arrayType($Uint8, 16);
	ptrType$11 = $ptrType(SockaddrNetlink);
	arrayType$4 = $arrayType($Uint8, 32);
	arrayType$7 = $arrayType($Int8, 108);
	arrayType$8 = $arrayType($Uint8, 4);
	arrayType$9 = $arrayType($Int8, 14);
	arrayType$10 = $arrayType($Int8, 96);
	ptrType$18 = $ptrType(_Socklen);
	ptrType$19 = $ptrType(Iovec);
	structType = $structType("syscall", [{prop: "addr", name: "addr", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "len", name: "len", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "cap", name: "cap", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	ptrType$22 = $ptrType($Int64);
	ptrType$24 = $ptrType(SockaddrLinklayer);
	ptrType$25 = $ptrType(mmapper);
	mapType = $mapType(ptrType$2, sliceType);
	funcType$2 = $funcType([$Uintptr, $Uintptr, $Int, $Int, $Int, $Int64], [$Uintptr, $error], false);
	funcType$3 = $funcType([$Uintptr, $Uintptr], [$error], false);
	ptrType$26 = $ptrType(SockaddrInet4);
	ptrType$27 = $ptrType(SockaddrInet6);
	ptrType$28 = $ptrType(SockaddrUnix);
	ptrType$29 = $ptrType(Timespec);
	arrayType$15 = $arrayType($Int64, 3);
	ptrType$31 = $ptrType(Msghdr);
	init = function() {
		$flushConsole = (function() {
			if (!((lineBuffer.$length === 0))) {
				$global.console.log($externalize(($bytesToString(lineBuffer)), $String));
				lineBuffer = sliceType.nil;
			}
		});
	};
	printWarning = function() {
		if (!warningPrinted) {
			$global.console.error($externalize("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md", $String));
		}
		warningPrinted = true;
	};
	printToConsole = function(b) {
		var b, goPrintToConsole, i;
		goPrintToConsole = $global.goPrintToConsole;
		if (!(goPrintToConsole === undefined)) {
			goPrintToConsole(b);
			return;
		}
		lineBuffer = $appendSlice(lineBuffer, b);
		while (true) {
			i = indexByte(lineBuffer, 10);
			if (i === -1) {
				break;
			}
			$global.console.log($externalize(($bytesToString($subslice(lineBuffer, 0, i))), $String));
			lineBuffer = $subslice(lineBuffer, (i + 1 >> 0));
		}
	};
	Exit = function(code) {
		var code;
		Syscall(231, ((code >>> 0)), 0, 0);
	};
	$pkg.Exit = Exit;
	indexByte = function(s, c) {
		var _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	runtime_envs = function() {
		var envkeys, envs$1, i, jsEnv, key, process;
		process = $global.process;
		if (process === undefined) {
			return sliceType$1.nil;
		}
		jsEnv = process.env;
		envkeys = $global.Object.keys(jsEnv);
		envs$1 = $makeSlice(sliceType$1, $parseInt(envkeys.length));
		i = 0;
		while (true) {
			if (!(i < $parseInt(envkeys.length))) { break; }
			key = $internalize(envkeys[i], $String);
			((i < 0 || i >= envs$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : envs$1.$array[envs$1.$offset + i] = key + "=" + $internalize(jsEnv[$externalize(key, $String)], $String));
			i = i + (1) >> 0;
		}
		return envs$1;
	};
	syscall = function(name) {
		var name, require, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			$recover();
		}), []]);
		if (syscallModule === null) {
			if (alreadyTriedToLoad) {
				return null;
			}
			alreadyTriedToLoad = true;
			require = $global.require;
			if (require === undefined) {
				$panic(new $String(""));
			}
			syscallModule = require($externalize("syscall", $String));
		}
		return syscallModule[$externalize(name, $String)];
		/* */ } catch(err) { $err = err; return null; } finally { $callDeferred($deferred, $err); }
	};
	Syscall = function(trap, a1, a2, a3) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, a1, a2, a3, array, err, f, r, r1, r2, slice, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3);
			_tmp = ((($parseInt(r[0]) >> 0) >>> 0));
			_tmp$1 = ((($parseInt(r[1]) >> 0) >>> 0));
			_tmp$2 = ((($parseInt(r[2]) >> 0) >>> 0));
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if ((trap === 1) && ((a1 === 1) || (a1 === 2))) {
			array = a2;
			slice = $makeSlice(sliceType, $parseInt(array.length));
			slice.$array = array;
			printToConsole(slice);
			_tmp$3 = (($parseInt(array.length) >>> 0));
			_tmp$4 = 0;
			_tmp$5 = 0;
			r1 = _tmp$3;
			r2 = _tmp$4;
			err = _tmp$5;
			return [r1, r2, err];
		}
		if (trap === 231) {
			runtime.Goexit();
		}
		printWarning();
		_tmp$6 = ((minusOne >>> 0));
		_tmp$7 = 0;
		_tmp$8 = 13;
		r1 = _tmp$6;
		r2 = _tmp$7;
		err = _tmp$8;
		return [r1, r2, err];
	};
	$pkg.Syscall = Syscall;
	Syscall6 = function(trap, a1, a2, a3, a4, a5, a6) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a1, a2, a3, a4, a5, a6, err, f, r, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall6");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3, a4, a5, a6);
			_tmp = ((($parseInt(r[0]) >> 0) >>> 0));
			_tmp$1 = ((($parseInt(r[1]) >> 0) >>> 0));
			_tmp$2 = ((($parseInt(r[2]) >> 0) >>> 0));
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if (!((trap === 202))) {
			printWarning();
		}
		_tmp$3 = ((minusOne >>> 0));
		_tmp$4 = 0;
		_tmp$5 = 13;
		r1 = _tmp$3;
		r2 = _tmp$4;
		err = _tmp$5;
		return [r1, r2, err];
	};
	$pkg.Syscall6 = Syscall6;
	BytePtrFromString = function(s) {
		var _i, _ref, array, b, i, s;
		array = new ($global.Uint8Array)(s.length + 1 >> 0);
		_ref = (new sliceType($stringToBytes(s)));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === 0) {
				return [ptrType$2.nil, new Errno(22)];
			}
			array[i] = b;
			_i++;
		}
		array[s.length] = 0;
		return [((array)), $ifaceNil];
	};
	$pkg.BytePtrFromString = BytePtrFromString;
	readInt = function(b, off, size) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, off, ok, size, u;
		u = new $Uint64(0, 0);
		ok = false;
		if (b.$length < (((off + size >>> 0) >> 0))) {
			_tmp = new $Uint64(0, 0);
			_tmp$1 = false;
			u = _tmp;
			ok = _tmp$1;
			return [u, ok];
		}
		if (false) {
			_tmp$2 = readIntBE($subslice(b, off), size);
			_tmp$3 = true;
			u = _tmp$2;
			ok = _tmp$3;
			return [u, ok];
		}
		_tmp$4 = readIntLE($subslice(b, off), size);
		_tmp$5 = true;
		u = _tmp$4;
		ok = _tmp$5;
		return [u, ok];
	};
	readIntBE = function(b, size) {
		var _1, b, size, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_1 = size;
		if (_1 === (1)) {
			return (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])));
		} else if (_1 === (2)) {
			$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
			return (x = (new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), x$1 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 8), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		} else if (_1 === (4)) {
			$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
			return (x$2 = (x$3 = (x$4 = (new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), x$5 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 8), new $Uint64(x$4.$high | x$5.$high, (x$4.$low | x$5.$low) >>> 0)), x$6 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 16), new $Uint64(x$3.$high | x$6.$high, (x$3.$low | x$6.$low) >>> 0)), x$7 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 24), new $Uint64(x$2.$high | x$7.$high, (x$2.$low | x$7.$low) >>> 0));
		} else if (_1 === (8)) {
			$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
			return (x$8 = (x$9 = (x$10 = (x$11 = (x$12 = (x$13 = (x$14 = (new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), x$15 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 8), new $Uint64(x$14.$high | x$15.$high, (x$14.$low | x$15.$low) >>> 0)), x$16 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 16), new $Uint64(x$13.$high | x$16.$high, (x$13.$low | x$16.$low) >>> 0)), x$17 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 24), new $Uint64(x$12.$high | x$17.$high, (x$12.$low | x$17.$low) >>> 0)), x$18 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 32), new $Uint64(x$11.$high | x$18.$high, (x$11.$low | x$18.$low) >>> 0)), x$19 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 40), new $Uint64(x$10.$high | x$19.$high, (x$10.$low | x$19.$low) >>> 0)), x$20 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 48), new $Uint64(x$9.$high | x$20.$high, (x$9.$low | x$20.$low) >>> 0)), x$21 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 56), new $Uint64(x$8.$high | x$21.$high, (x$8.$low | x$21.$low) >>> 0));
		} else {
			$panic(new $String("syscall: readInt with unsupported size"));
		}
	};
	readIntLE = function(b, size) {
		var _1, b, size, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_1 = size;
		if (_1 === (1)) {
			return (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])));
		} else if (_1 === (2)) {
			$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
			return (x = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$1 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		} else if (_1 === (4)) {
			$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
			return (x$2 = (x$3 = (x$4 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$5 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$4.$high | x$5.$high, (x$4.$low | x$5.$low) >>> 0)), x$6 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$3.$high | x$6.$high, (x$3.$low | x$6.$low) >>> 0)), x$7 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$2.$high | x$7.$high, (x$2.$low | x$7.$low) >>> 0));
		} else if (_1 === (8)) {
			$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
			return (x$8 = (x$9 = (x$10 = (x$11 = (x$12 = (x$13 = (x$14 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$15 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$14.$high | x$15.$high, (x$14.$low | x$15.$low) >>> 0)), x$16 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$13.$high | x$16.$high, (x$13.$low | x$16.$low) >>> 0)), x$17 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$12.$high | x$17.$high, (x$12.$low | x$17.$low) >>> 0)), x$18 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 32), new $Uint64(x$11.$high | x$18.$high, (x$11.$low | x$18.$low) >>> 0)), x$19 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 40), new $Uint64(x$10.$high | x$19.$high, (x$10.$low | x$19.$low) >>> 0)), x$20 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 48), new $Uint64(x$9.$high | x$20.$high, (x$9.$low | x$20.$low) >>> 0)), x$21 = $shiftLeft64((new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), 56), new $Uint64(x$8.$high | x$21.$high, (x$8.$low | x$21.$low) >>> 0));
		} else {
			$panic(new $String("syscall: readInt with unsupported size"));
		}
	};
	ParseDirent = function(buf, max, names) {
		var _i, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, buf, c, consumed, count, i, ino, max, name, names, namlen, newnames, ok, origlen, rec, reclen, x, x$1, x$2;
		consumed = 0;
		count = 0;
		newnames = sliceType$1.nil;
		origlen = buf.$length;
		count = 0;
		while (true) {
			if (!(!((max === 0)) && buf.$length > 0)) { break; }
			_tuple = direntReclen(buf);
			reclen = _tuple[0];
			ok = _tuple[1];
			if (!ok || (x = (new $Uint64(0, buf.$length)), (reclen.$high > x.$high || (reclen.$high === x.$high && reclen.$low > x.$low)))) {
				_tmp = origlen;
				_tmp$1 = count;
				_tmp$2 = names;
				consumed = _tmp;
				count = _tmp$1;
				newnames = _tmp$2;
				return [consumed, count, newnames];
			}
			rec = $subslice(buf, 0, $flatten64(reclen));
			buf = $subslice(buf, $flatten64(reclen));
			_tuple$1 = direntIno(rec);
			ino = _tuple$1[0];
			ok = _tuple$1[1];
			if (!ok) {
				break;
			}
			if ((ino.$high === 0 && ino.$low === 0)) {
				continue;
			}
			_tuple$2 = direntNamlen(rec);
			namlen = _tuple$2[0];
			ok = _tuple$2[1];
			if (!ok || (x$1 = new $Uint64(0 + namlen.$high, 19 + namlen.$low), x$2 = (new $Uint64(0, rec.$length)), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
				break;
			}
			name = $subslice(rec, 19, $flatten64(new $Uint64(0 + namlen.$high, 19 + namlen.$low)));
			_ref = name;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (c === 0) {
					name = $subslice(name, 0, i);
					break;
				}
				_i++;
			}
			if (($bytesToString(name)) === "." || ($bytesToString(name)) === "..") {
				continue;
			}
			max = max - (1) >> 0;
			count = count + (1) >> 0;
			names = $append(names, ($bytesToString(name)));
		}
		_tmp$3 = origlen - buf.$length >> 0;
		_tmp$4 = count;
		_tmp$5 = names;
		consumed = _tmp$3;
		count = _tmp$4;
		newnames = _tmp$5;
		return [consumed, count, newnames];
	};
	$pkg.ParseDirent = ParseDirent;
	CloseOnExec = function(fd) {
		var fd;
		fcntl(fd, 2, 1);
	};
	$pkg.CloseOnExec = CloseOnExec;
	SetNonblock = function(fd, nonblocking) {
		var _tuple, _tuple$1, err, fd, flag, nonblocking;
		err = $ifaceNil;
		_tuple = fcntl(fd, 3, 0);
		flag = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			return err;
		}
		if (nonblocking) {
			flag = flag | (2048);
		} else {
			flag = (flag & ~(2048)) >> 0;
		}
		_tuple$1 = fcntl(fd, 4, flag);
		err = _tuple$1[1];
		err = err;
		return err;
	};
	$pkg.SetNonblock = SetNonblock;
	msanRead = function(addr, len) {
		var addr, len;
	};
	msanWrite = function(addr, len) {
		var addr, len;
	};
	itoa = function(val) {
		var val;
		if (val < 0) {
			return "-" + uitoa(((-val >>> 0)));
		}
		return uitoa(((val >>> 0)));
	};
	uitoa = function(val) {
		var _q, _r, buf, i, val;
		buf = arrayType$4.zero();
		i = 31;
		while (true) {
			if (!(val >= 10)) { break; }
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((((_r = val % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24)));
			i = i - (1) >> 0;
			val = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((val + 48 >>> 0) << 24 >>> 24)));
		return ($bytesToString($subslice(new sliceType(buf), i)));
	};
	Timespec.ptr.prototype.Unix = function() {
		var _tmp, _tmp$1, nsec, sec, ts;
		sec = new $Int64(0, 0);
		nsec = new $Int64(0, 0);
		ts = this;
		_tmp = (ts.Sec);
		_tmp$1 = (ts.Nsec);
		sec = _tmp;
		nsec = _tmp$1;
		return [sec, nsec];
	};
	Timespec.prototype.Unix = function() { return this.$val.Unix(); };
	Timespec.ptr.prototype.Nano = function() {
		var ts, x, x$1;
		ts = this;
		return (x = $mul64((ts.Sec), new $Int64(0, 1000000000)), x$1 = (ts.Nsec), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Timespec.prototype.Nano = function() { return this.$val.Nano(); };
	Chmod = function(path, mode) {
		var err, mode, path;
		err = $ifaceNil;
		err = Fchmodat(-100, path, mode, 0);
		return err;
	};
	$pkg.Chmod = Chmod;
	Open = function(path, mode, perm) {
		var _tuple, err, fd, mode, path, perm;
		fd = 0;
		err = $ifaceNil;
		_tuple = openat(-100, path, mode | 0, perm);
		fd = _tuple[0];
		err = _tuple[1];
		return [fd, err];
	};
	$pkg.Open = Open;
	SockaddrInet4.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, p, sa, x, x$1, x$2;
		sa = this;
		if (sa.Port < 0 || sa.Port > 65535) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Family = 2;
		p = (((x = sa.raw, (x.$ptr_Port || (x.$ptr_Port = new ptrType$8(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, x))))));
		p.nilCheck, p[0] = (((sa.Port >> 8 >> 0) << 24 >>> 24));
		p.nilCheck, p[1] = ((sa.Port << 24 >>> 24));
		i = 0;
		while (true) {
			if (!(i < 4)) { break; }
			(x$2 = sa.raw.Addr, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = (x$1 = sa.Addr, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i]))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(16);
		return [(_array), 16, $ifaceNil];
	};
	SockaddrInet4.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrInet6.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, p, sa, x, x$1, x$2;
		sa = this;
		if (sa.Port < 0 || sa.Port > 65535) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Family = 10;
		p = (((x = sa.raw, (x.$ptr_Port || (x.$ptr_Port = new ptrType$8(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, x))))));
		p.nilCheck, p[0] = (((sa.Port >> 8 >> 0) << 24 >>> 24));
		p.nilCheck, p[1] = ((sa.Port << 24 >>> 24));
		sa.raw.Scope_id = sa.ZoneId;
		i = 0;
		while (true) {
			if (!(i < 16)) { break; }
			(x$2 = sa.raw.Addr, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = (x$1 = sa.Addr, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i]))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(28);
		return [(_array), 28, $ifaceNil];
	};
	SockaddrInet6.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrUnix.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, n, name, sa, sl, x;
		sa = this;
		name = sa.Name;
		n = name.length;
		if (n > 108) {
			return [0, 0, new Errno(22)];
		}
		if ((n === 108) && !((name.charCodeAt(0) === 64))) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Family = 1;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			(x = sa.raw.Path, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i] = ((name.charCodeAt(i) << 24 >> 24))));
			i = i + (1) >> 0;
		}
		sl = 2;
		if (n > 0) {
			sl = sl + ((((n >>> 0)) + 1 >>> 0)) >>> 0;
		}
		if (sa.raw.Path[0] === 64) {
			sa.raw.Path[0] = 0;
			sl = sl - (1) >>> 0;
		}
		_array = new Uint8Array(110);
		return [(_array), sl, $ifaceNil];
	};
	SockaddrUnix.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrLinklayer.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, sa, x, x$1;
		sa = this;
		if (sa.Ifindex < 0 || sa.Ifindex > 2147483647) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Family = 17;
		sa.raw.Protocol = sa.Protocol;
		sa.raw.Ifindex = ((sa.Ifindex >> 0));
		sa.raw.Hatype = sa.Hatype;
		sa.raw.Pkttype = sa.Pkttype;
		sa.raw.Halen = sa.Halen;
		i = 0;
		while (true) {
			if (!(i < 8)) { break; }
			(x$1 = sa.raw.Addr, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i] = (x = sa.Addr, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(20);
		return [(_array), 20, $ifaceNil];
	};
	SockaddrLinklayer.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrNetlink.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, sa;
		sa = this;
		sa.raw.Family = 16;
		sa.raw.Pad = sa.Pad;
		sa.raw.Pid = sa.Pid;
		sa.raw.Groups = sa.Groups;
		_array = new Uint8Array(12);
		return [(_array), 12, $ifaceNil];
	};
	SockaddrNetlink.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	anyToSockaddr = function(rsa) {
		var _1, _array, _array$1, _array$2, _array$3, _array$4, _array$5, _array$6, _array$7, _array$8, _array$9, _struct, _struct$1, _struct$2, _struct$3, _struct$4, _struct$5, _struct$6, _struct$7, _struct$8, _struct$9, _view, _view$1, _view$2, _view$3, _view$4, _view$5, _view$6, _view$7, _view$8, _view$9, bytes, i, i$1, i$2, n, p, p$1, pp, pp$1, pp$2, pp$3, pp$4, rsa, sa, sa$1, sa$2, sa$3, sa$4, x, x$1, x$2, x$3, x$4, x$5, x$6;
		_1 = rsa.Addr.Family;
		if (_1 === (16)) {
			_array$1 = new Uint8Array(112);
			pp = ((_array = (_array$1), _struct = new RawSockaddrNetlink.ptr(0, 0, 0, 0), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Family = _view.getUint16(0, true), _struct.Pad = _view.getUint16(2, true), _struct.Pid = _view.getUint32(4, true), _struct.Groups = _view.getUint32(8, true), _struct));
			_struct$1 = rsa, _view$1 = new DataView(_array$1.buffer, _array$1.byteOffset), _struct$1.Addr.Family = _view$1.getUint16(0, true), _struct$1.Addr.Data = new ($nativeArray($kindInt8))(_array$1.buffer, $min(_array$1.byteOffset + 2, _array$1.buffer.byteLength)), _struct$1.Pad = new ($nativeArray($kindInt8))(_array$1.buffer, $min(_array$1.byteOffset + 16, _array$1.buffer.byteLength));
			sa = new SockaddrNetlink.ptr(0, 0, 0, 0, new RawSockaddrNetlink.ptr(0, 0, 0, 0));
			sa.Family = pp.Family;
			sa.Pad = pp.Pad;
			sa.Pid = pp.Pid;
			sa.Groups = pp.Groups;
			return [sa, $ifaceNil];
		} else if (_1 === (17)) {
			_array$3 = new Uint8Array(112);
			pp$1 = ((_array$2 = (_array$3), _struct$2 = new RawSockaddrLinklayer.ptr(0, 0, 0, 0, 0, 0, arrayType$1.zero()), _view$2 = new DataView(_array$2.buffer, _array$2.byteOffset), _struct$2.Family = _view$2.getUint16(0, true), _struct$2.Protocol = _view$2.getUint16(2, true), _struct$2.Ifindex = _view$2.getInt32(4, true), _struct$2.Hatype = _view$2.getUint16(8, true), _struct$2.Pkttype = _view$2.getUint8(10, true), _struct$2.Halen = _view$2.getUint8(11, true), _struct$2.Addr = new ($nativeArray($kindUint8))(_array$2.buffer, $min(_array$2.byteOffset + 12, _array$2.buffer.byteLength)), _struct$2));
			_struct$3 = rsa, _view$3 = new DataView(_array$3.buffer, _array$3.byteOffset), _struct$3.Addr.Family = _view$3.getUint16(0, true), _struct$3.Addr.Data = new ($nativeArray($kindInt8))(_array$3.buffer, $min(_array$3.byteOffset + 2, _array$3.buffer.byteLength)), _struct$3.Pad = new ($nativeArray($kindInt8))(_array$3.buffer, $min(_array$3.byteOffset + 16, _array$3.buffer.byteLength));
			sa$1 = new SockaddrLinklayer.ptr(0, 0, 0, 0, 0, arrayType$1.zero(), new RawSockaddrLinklayer.ptr(0, 0, 0, 0, 0, 0, arrayType$1.zero()));
			sa$1.Protocol = pp$1.Protocol;
			sa$1.Ifindex = ((pp$1.Ifindex >> 0));
			sa$1.Hatype = pp$1.Hatype;
			sa$1.Pkttype = pp$1.Pkttype;
			sa$1.Halen = pp$1.Halen;
			i = 0;
			while (true) {
				if (!(i < 8)) { break; }
				(x$1 = sa$1.Addr, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i] = (x = pp$1.Addr, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]))));
				i = i + (1) >> 0;
			}
			return [sa$1, $ifaceNil];
		} else if (_1 === (1)) {
			_array$5 = new Uint8Array(112);
			pp$2 = ((_array$4 = (_array$5), _struct$4 = new RawSockaddrUnix.ptr(0, arrayType$7.zero()), _view$4 = new DataView(_array$4.buffer, _array$4.byteOffset), _struct$4.Family = _view$4.getUint16(0, true), _struct$4.Path = new ($nativeArray($kindInt8))(_array$4.buffer, $min(_array$4.byteOffset + 2, _array$4.buffer.byteLength)), _struct$4));
			_struct$5 = rsa, _view$5 = new DataView(_array$5.buffer, _array$5.byteOffset), _struct$5.Addr.Family = _view$5.getUint16(0, true), _struct$5.Addr.Data = new ($nativeArray($kindInt8))(_array$5.buffer, $min(_array$5.byteOffset + 2, _array$5.buffer.byteLength)), _struct$5.Pad = new ($nativeArray($kindInt8))(_array$5.buffer, $min(_array$5.byteOffset + 16, _array$5.buffer.byteLength));
			sa$2 = new SockaddrUnix.ptr("", new RawSockaddrUnix.ptr(0, arrayType$7.zero()));
			if (pp$2.Path[0] === 0) {
				pp$2.Path[0] = 64;
			}
			n = 0;
			while (true) {
				if (!(n < 108 && !(((x$2 = pp$2.Path, ((n < 0 || n >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[n])) === 0)))) { break; }
				n = n + (1) >> 0;
			}
			bytes = $subslice(new sliceType((($sliceToArray(new sliceType(pp$2.Path))))), 0, n);
			sa$2.Name = ($bytesToString(bytes));
			return [sa$2, $ifaceNil];
		} else if (_1 === (2)) {
			_array$7 = new Uint8Array(112);
			pp$3 = ((_array$6 = (_array$7), _struct$6 = new RawSockaddrInet4.ptr(0, 0, arrayType$8.zero(), arrayType$1.zero()), _view$6 = new DataView(_array$6.buffer, _array$6.byteOffset), _struct$6.Family = _view$6.getUint16(0, true), _struct$6.Port = _view$6.getUint16(2, true), _struct$6.Addr = new ($nativeArray($kindUint8))(_array$6.buffer, $min(_array$6.byteOffset + 4, _array$6.buffer.byteLength)), _struct$6.Zero = new ($nativeArray($kindUint8))(_array$6.buffer, $min(_array$6.byteOffset + 8, _array$6.buffer.byteLength)), _struct$6));
			_struct$7 = rsa, _view$7 = new DataView(_array$7.buffer, _array$7.byteOffset), _struct$7.Addr.Family = _view$7.getUint16(0, true), _struct$7.Addr.Data = new ($nativeArray($kindInt8))(_array$7.buffer, $min(_array$7.byteOffset + 2, _array$7.buffer.byteLength)), _struct$7.Pad = new ($nativeArray($kindInt8))(_array$7.buffer, $min(_array$7.byteOffset + 16, _array$7.buffer.byteLength));
			sa$3 = new SockaddrInet4.ptr(0, arrayType$8.zero(), new RawSockaddrInet4.ptr(0, 0, arrayType$8.zero(), arrayType$1.zero()));
			p = (((pp$3.$ptr_Port || (pp$3.$ptr_Port = new ptrType$8(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, pp$3)))));
			sa$3.Port = ((((p.nilCheck, p[0]) >> 0)) << 8 >> 0) + (((p.nilCheck, p[1]) >> 0)) >> 0;
			i$1 = 0;
			while (true) {
				if (!(i$1 < 4)) { break; }
				(x$4 = sa$3.Addr, ((i$1 < 0 || i$1 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[i$1] = (x$3 = pp$3.Addr, ((i$1 < 0 || i$1 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[i$1]))));
				i$1 = i$1 + (1) >> 0;
			}
			return [sa$3, $ifaceNil];
		} else if (_1 === (10)) {
			_array$9 = new Uint8Array(112);
			pp$4 = ((_array$8 = (_array$9), _struct$8 = new RawSockaddrInet6.ptr(0, 0, 0, arrayType$2.zero(), 0), _view$8 = new DataView(_array$8.buffer, _array$8.byteOffset), _struct$8.Family = _view$8.getUint16(0, true), _struct$8.Port = _view$8.getUint16(2, true), _struct$8.Flowinfo = _view$8.getUint32(4, true), _struct$8.Addr = new ($nativeArray($kindUint8))(_array$8.buffer, $min(_array$8.byteOffset + 8, _array$8.buffer.byteLength)), _struct$8.Scope_id = _view$8.getUint32(24, true), _struct$8));
			_struct$9 = rsa, _view$9 = new DataView(_array$9.buffer, _array$9.byteOffset), _struct$9.Addr.Family = _view$9.getUint16(0, true), _struct$9.Addr.Data = new ($nativeArray($kindInt8))(_array$9.buffer, $min(_array$9.byteOffset + 2, _array$9.buffer.byteLength)), _struct$9.Pad = new ($nativeArray($kindInt8))(_array$9.buffer, $min(_array$9.byteOffset + 16, _array$9.buffer.byteLength));
			sa$4 = new SockaddrInet6.ptr(0, 0, arrayType$2.zero(), new RawSockaddrInet6.ptr(0, 0, 0, arrayType$2.zero(), 0));
			p$1 = (((pp$4.$ptr_Port || (pp$4.$ptr_Port = new ptrType$8(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, pp$4)))));
			sa$4.Port = ((((p$1.nilCheck, p$1[0]) >> 0)) << 8 >> 0) + (((p$1.nilCheck, p$1[1]) >> 0)) >> 0;
			sa$4.ZoneId = pp$4.Scope_id;
			i$2 = 0;
			while (true) {
				if (!(i$2 < 16)) { break; }
				(x$6 = sa$4.Addr, ((i$2 < 0 || i$2 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[i$2] = (x$5 = pp$4.Addr, ((i$2 < 0 || i$2 >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i$2]))));
				i$2 = i$2 + (1) >> 0;
			}
			return [sa$4, $ifaceNil];
		}
		return [$ifaceNil, new Errno(97)];
	};
	Accept = function(fd) {
		var _tuple, _tuple$1, err, fd, len, len$24ptr, nfd, rsa, sa;
		nfd = 0;
		sa = $ifaceNil;
		err = $ifaceNil;
		rsa = new RawSockaddrAny.ptr(new RawSockaddr.ptr(0, arrayType$9.zero()), arrayType$10.zero());
		len = 112;
		_tuple = accept(fd, rsa, (len$24ptr || (len$24ptr = new ptrType$18(function() { return len; }, function($v) { len = $v; }))));
		nfd = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [nfd, sa, err];
		}
		_tuple$1 = anyToSockaddr(rsa);
		sa = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			Close(nfd);
			nfd = 0;
		}
		return [nfd, sa, err];
	};
	$pkg.Accept = Accept;
	Accept4 = function(fd, flags) {
		var _tuple, _tuple$1, err, fd, flags, len, len$24ptr, nfd, rsa, sa;
		nfd = 0;
		sa = $ifaceNil;
		err = $ifaceNil;
		rsa = new RawSockaddrAny.ptr(new RawSockaddr.ptr(0, arrayType$9.zero()), arrayType$10.zero());
		len = 112;
		_tuple = accept4(fd, rsa, (len$24ptr || (len$24ptr = new ptrType$18(function() { return len; }, function($v) { len = $v; }))), flags);
		nfd = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [nfd, sa, err];
		}
		if (len > 112) {
			$panic(new $String("RawSockaddrAny too small"));
		}
		_tuple$1 = anyToSockaddr(rsa);
		sa = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			Close(nfd);
			nfd = 0;
		}
		return [nfd, sa, err];
	};
	$pkg.Accept4 = Accept4;
	SetsockoptIPMreqn = function(fd, level, opt, mreq) {
		var _array, _struct, _view, err, fd, level, mreq, opt;
		err = $ifaceNil;
		_array = new Uint8Array(12);
		err = setsockopt(fd, level, opt, (_array), 12);
		_struct = mreq, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Multiaddr = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.Address = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 4, _array.buffer.byteLength)), _struct.Ifindex = _view.getInt32(8, true);
		return err;
	};
	$pkg.SetsockoptIPMreqn = SetsockoptIPMreqn;
	Recvmsg = function(fd, p, oob, flags) {
		var _array, _struct, _tuple, _tuple$1, _tuple$2, _view, dummy, dummy$24ptr, err, fd, flags, from, iov, msg, n, oob, oobn, p, recvflags, rsa, sockType;
		n = 0;
		oobn = 0;
		recvflags = 0;
		from = $ifaceNil;
		err = $ifaceNil;
		msg = new Msghdr.ptr(ptrType$2.nil, 0, arrayType$8.zero(), ptrType$19.nil, new $Uint64(0, 0), ptrType$2.nil, new $Uint64(0, 0), 0, arrayType$8.zero());
		rsa = new RawSockaddrAny.ptr(new RawSockaddr.ptr(0, arrayType$9.zero()), arrayType$10.zero());
		_array = new Uint8Array(112);
		msg.Name = ((_array));
		_struct = rsa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Family = _view.getUint16(0, true), _struct.Addr.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		msg.Namelen = 112;
		iov = new Iovec.ptr(ptrType$2.nil, new $Uint64(0, 0));
		if (p.$length > 0) {
			iov.Base = $indexPtr(p.$array, p.$offset + 0, ptrType$2);
			iov.SetLen(p.$length);
		}
		dummy = 0;
		if (oob.$length > 0) {
			sockType = 0;
			_tuple = GetsockoptInt(fd, 1, 3);
			sockType = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [n, oobn, recvflags, from, err];
			}
			if (!((sockType === 2)) && (p.$length === 0)) {
				iov.Base = (dummy$24ptr || (dummy$24ptr = new ptrType$2(function() { return dummy; }, function($v) { dummy = $v; })));
				iov.SetLen(1);
			}
			msg.Control = $indexPtr(oob.$array, oob.$offset + 0, ptrType$2);
			msg.SetControllen(oob.$length);
		}
		msg.Iov = iov;
		msg.Iovlen = new $Uint64(0, 1);
		_tuple$1 = recvmsg(fd, msg, flags);
		n = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [n, oobn, recvflags, from, err];
		}
		oobn = ((msg.Controllen.$low >> 0));
		recvflags = ((msg.Flags >> 0));
		if (!((rsa.Addr.Family === 0))) {
			_tuple$2 = anyToSockaddr(rsa);
			from = _tuple$2[0];
			err = _tuple$2[1];
		}
		return [n, oobn, recvflags, from, err];
	};
	$pkg.Recvmsg = Recvmsg;
	SendmsgN = function(fd, p, oob, to, flags) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, dummy, err, err$1, fd, flags, iov, msg, n, oob, p, ptr, salen, sockType, to, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; dummy = $f.dummy; err = $f.err; err$1 = $f.err$1; fd = $f.fd; flags = $f.flags; iov = $f.iov; msg = $f.msg; n = $f.n; oob = $f.oob; p = $f.p; ptr = $f.ptr; salen = $f.salen; sockType = $f.sockType; to = $f.to; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dummy = [dummy];
		iov = [iov];
		msg = [msg];
		n = 0;
		err = $ifaceNil;
		ptr = 0;
		salen = 0;
		/* */ if (!($interfaceIsEqual(to, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(to, $ifaceNil))) { */ case 1:
			err$1 = $ifaceNil;
			_r = to.sockaddr(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			ptr = _tuple[0];
			salen = _tuple[1];
			err$1 = _tuple[2];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp = 0;
				_tmp$1 = err$1;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
		/* } */ case 2:
		msg[0] = new Msghdr.ptr(ptrType$2.nil, 0, arrayType$8.zero(), ptrType$19.nil, new $Uint64(0, 0), ptrType$2.nil, new $Uint64(0, 0), 0, arrayType$8.zero());
		msg[0].Name = (ptr);
		msg[0].Namelen = ((salen >>> 0));
		iov[0] = new Iovec.ptr(ptrType$2.nil, new $Uint64(0, 0));
		if (p.$length > 0) {
			iov[0].Base = $indexPtr(p.$array, p.$offset + 0, ptrType$2);
			iov[0].SetLen(p.$length);
		}
		dummy[0] = 0;
		if (oob.$length > 0) {
			sockType = 0;
			_tuple$1 = GetsockoptInt(fd, 1, 3);
			sockType = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$2 = 0;
				_tmp$3 = err;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
			if (!((sockType === 2)) && (p.$length === 0)) {
				iov[0].Base = (dummy.$ptr || (dummy.$ptr = new ptrType$2(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, dummy)));
				iov[0].SetLen(1);
			}
			msg[0].Control = $indexPtr(oob.$array, oob.$offset + 0, ptrType$2);
			msg[0].SetControllen(oob.$length);
		}
		msg[0].Iov = iov[0];
		msg[0].Iovlen = new $Uint64(0, 1);
		_tuple$2 = sendmsg(fd, msg[0], flags);
		n = _tuple$2[0];
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$4 = 0;
			_tmp$5 = err;
			n = _tmp$4;
			err = _tmp$5;
			$s = -1; return [n, err];
		}
		if (oob.$length > 0 && (p.$length === 0)) {
			n = 0;
		}
		_tmp$6 = n;
		_tmp$7 = $ifaceNil;
		n = _tmp$6;
		err = _tmp$7;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: SendmsgN }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.dummy = dummy; $f.err = err; $f.err$1 = err$1; $f.fd = fd; $f.flags = flags; $f.iov = iov; $f.msg = msg; $f.n = n; $f.oob = oob; $f.p = p; $f.ptr = ptr; $f.salen = salen; $f.sockType = sockType; $f.to = to; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SendmsgN = SendmsgN;
	ReadDirent = function(fd, buf) {
		var _tuple, buf, err, fd, n;
		n = 0;
		err = $ifaceNil;
		_tuple = Getdents(fd, buf);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	$pkg.ReadDirent = ReadDirent;
	direntIno = function(buf) {
		var buf;
		return readInt(buf, 0, 8);
	};
	direntReclen = function(buf) {
		var buf;
		return readInt(buf, 16, 2);
	};
	direntNamlen = function(buf) {
		var _tuple, buf, ok, reclen;
		_tuple = direntReclen(buf);
		reclen = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return [new $Uint64(0, 0), false];
		}
		return [new $Uint64(reclen.$high - 0, reclen.$low - 19), true];
	};
	Iovec.ptr.prototype.SetLen = function(length) {
		var iov, length;
		iov = this;
		iov.Len = (new $Uint64(0, length));
	};
	Iovec.prototype.SetLen = function(length) { return this.$val.SetLen(length); };
	Msghdr.ptr.prototype.SetControllen = function(length) {
		var length, msghdr;
		msghdr = this;
		msghdr.Controllen = (new $Uint64(0, length));
	};
	Msghdr.prototype.SetControllen = function(length) { return this.$val.SetControllen(length); };
	mmapper.ptr.prototype.Mmap = function(fd, offset, length, prot, flags) {
		var _key, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, addr, b, data, err, errno, fd, flags, length, m, offset, p, prot, sl, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _key = $f._key; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; addr = $f.addr; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; fd = $f.fd; flags = $f.flags; length = $f.length; m = $f.m; offset = $f.offset; p = $f.p; prot = $f.prot; sl = $f.sl; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		sl = [sl];
		data = sliceType.nil;
		err = $ifaceNil;
		m = this;
		if (length <= 0) {
			_tmp = sliceType.nil;
			_tmp$1 = new Errno(22);
			data = _tmp;
			err = _tmp$1;
			$s = -1; return [data, err];
		}
		_r = m.mmap(0, ((length >>> 0)), prot, flags, fd, offset); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		addr = _tuple[0];
		errno = _tuple[1];
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			_tmp$2 = sliceType.nil;
			_tmp$3 = errno;
			data = _tmp$2;
			err = _tmp$3;
			$s = -1; return [data, err];
		}
		sl[0] = new structType.ptr(addr, length, length);
		b = sl[0];
		p = $indexPtr(b.$array, b.$offset + (b.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		_key = p; (m.active || $throwRuntimeError("assignment to entry in nil map"))[ptrType$2.keyFor(_key)] = { k: _key, v: b };
		_tmp$4 = b;
		_tmp$5 = $ifaceNil;
		data = _tmp$4;
		err = _tmp$5;
		$s = -1; return [data, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [data, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Mmap }; } $f._key = _key; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.addr = addr; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.fd = fd; $f.flags = flags; $f.length = length; $f.m = m; $f.offset = offset; $f.p = p; $f.prot = prot; $f.sl = sl; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Mmap = function(fd, offset, length, prot, flags) { return this.$val.Mmap(fd, offset, length, prot, flags); };
	mmapper.ptr.prototype.Munmap = function(data) {
		var _entry, _r, b, data, err, errno, m, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; m = $f.m; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = $ifaceNil;
		m = this;
		if ((data.$length === 0) || !((data.$length === data.$capacity))) {
			err = new Errno(22);
			$s = -1; return err;
		}
		p = $indexPtr(data.$array, data.$offset + (data.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		b = (_entry = m.active[ptrType$2.keyFor(p)], _entry !== undefined ? _entry.v : sliceType.nil);
		if (b === sliceType.nil || !($indexPtr(b.$array, b.$offset + 0, ptrType$2) === $indexPtr(data.$array, data.$offset + 0, ptrType$2))) {
			err = new Errno(22);
			$s = -1; return err;
		}
		_r = m.munmap((($sliceToArray(b))), ((b.$length >>> 0))); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		errno = _r;
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			err = errno;
			$s = -1; return err;
		}
		delete m.active[ptrType$2.keyFor(p)];
		err = $ifaceNil;
		$s = -1; return err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Munmap }; } $f._entry = _entry; $f._r = _r; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.m = m; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Munmap = function(data) { return this.$val.Munmap(data); };
	Errno.prototype.Error = function() {
		var e, s;
		e = this.$val;
		if (0 <= ((e >> 0)) && ((e >> 0)) < 133) {
			s = ((e < 0 || e >= errors.length) ? ($throwRuntimeError("index out of range"), undefined) : errors[e]);
			if (!(s === "")) {
				return s;
			}
		}
		return "errno " + itoa(((e >> 0)));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var e;
		e = this.$val;
		return (e === 4) || (e === 24) || (e === 104) || (e === 103) || new Errno(e).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var e;
		e = this.$val;
		return (e === 11) || (e === 11) || (e === 110);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	errnoErr = function(e) {
		var _1, e;
		_1 = e;
		if (_1 === (0)) {
			return $ifaceNil;
		} else if (_1 === (11)) {
			return errEAGAIN;
		} else if (_1 === (22)) {
			return errEINVAL;
		} else if (_1 === (2)) {
			return errENOENT;
		}
		return new Errno(e);
	};
	Read = function(fd, p) {
		var _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		_tuple = read(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		if (false) {
			if (n > 0) {
				race.WriteRange(($sliceToArray(p)), n);
			}
			if ($interfaceIsEqual(err, $ifaceNil)) {
				race.Acquire(((ioSync$24ptr || (ioSync$24ptr = new ptrType$22(function() { return ioSync; }, function($v) { ioSync = $v; })))));
			}
		}
		if (false && n > 0) {
			msanWrite(($sliceToArray(p)), n);
		}
		return [n, err];
	};
	$pkg.Read = Read;
	Write = function(fd, p) {
		var _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		if (false) {
			race.ReleaseMerge(((ioSync$24ptr || (ioSync$24ptr = new ptrType$22(function() { return ioSync; }, function($v) { ioSync = $v; })))));
		}
		_tuple = write(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		if (false && n > 0) {
			race.ReadRange(($sliceToArray(p)), n);
		}
		if (false && n > 0) {
			msanRead(($sliceToArray(p)), n);
		}
		return [n, err];
	};
	$pkg.Write = Write;
	GetsockoptInt = function(fd, level, opt) {
		var _tmp, _tmp$1, err, fd, level, n, n$24ptr, opt, vallen, vallen$24ptr, value;
		value = 0;
		err = $ifaceNil;
		n = 0;
		vallen = 4;
		err = getsockopt(fd, level, opt, ((n$24ptr || (n$24ptr = new ptrType$4(function() { return n; }, function($v) { n = $v; })))), (vallen$24ptr || (vallen$24ptr = new ptrType$18(function() { return vallen; }, function($v) { vallen = $v; }))));
		_tmp = ((n >> 0));
		_tmp$1 = err;
		value = _tmp;
		err = _tmp$1;
		return [value, err];
	};
	$pkg.GetsockoptInt = GetsockoptInt;
	Recvfrom = function(fd, p, flags) {
		var _tuple, _tuple$1, err, fd, flags, from, len, len$24ptr, n, p, rsa;
		n = 0;
		from = $ifaceNil;
		err = $ifaceNil;
		rsa = new RawSockaddrAny.ptr(new RawSockaddr.ptr(0, arrayType$9.zero()), arrayType$10.zero());
		len = 112;
		_tuple = recvfrom(fd, p, flags, rsa, (len$24ptr || (len$24ptr = new ptrType$18(function() { return len; }, function($v) { len = $v; }))));
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [n, from, err];
		}
		if (!((rsa.Addr.Family === 0))) {
			_tuple$1 = anyToSockaddr(rsa);
			from = _tuple$1[0];
			err = _tuple$1[1];
		}
		return [n, from, err];
	};
	$pkg.Recvfrom = Recvfrom;
	Sendto = function(fd, p, flags, to) {
		var _r, _tuple, err, fd, flags, n, p, ptr, to, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; fd = $f.fd; flags = $f.flags; n = $f.n; p = $f.p; ptr = $f.ptr; to = $f.to; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_r = to.sockaddr(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ptr = _tuple[0];
		n = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			$s = -1; return err;
		}
		err = sendto(fd, p, flags, ptr, n);
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sendto }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.fd = fd; $f.flags = flags; $f.n = n; $f.p = p; $f.ptr = ptr; $f.to = to; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sendto = Sendto;
	SetsockoptByte = function(fd, level, opt, value) {
		var err, fd, level, opt, value, value$24ptr;
		err = $ifaceNil;
		err = setsockopt(fd, level, opt, ((value$24ptr || (value$24ptr = new ptrType$2(function() { return value; }, function($v) { value = $v; })))), 1);
		return err;
	};
	$pkg.SetsockoptByte = SetsockoptByte;
	SetsockoptInt = function(fd, level, opt, value) {
		var err, fd, level, n, n$24ptr, opt, value;
		err = $ifaceNil;
		n = ((value >> 0));
		err = setsockopt(fd, level, opt, ((n$24ptr || (n$24ptr = new ptrType$4(function() { return n; }, function($v) { n = $v; })))), 4);
		return err;
	};
	$pkg.SetsockoptInt = SetsockoptInt;
	SetsockoptInet4Addr = function(fd, level, opt, value) {
		var err, fd, level, opt, value;
		err = $ifaceNil;
		err = setsockopt(fd, level, opt, ($sliceToArray(new sliceType(value))), 4);
		return err;
	};
	$pkg.SetsockoptInet4Addr = SetsockoptInet4Addr;
	SetsockoptIPMreq = function(fd, level, opt, mreq) {
		var _array, _struct, _view, err, fd, level, mreq, opt;
		err = $ifaceNil;
		_array = new Uint8Array(8);
		err = setsockopt(fd, level, opt, (_array), 8);
		_struct = mreq, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Multiaddr = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.Interface = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 4, _array.buffer.byteLength));
		return err;
	};
	$pkg.SetsockoptIPMreq = SetsockoptIPMreq;
	SetsockoptIPv6Mreq = function(fd, level, opt, mreq) {
		var _array, _struct, _view, err, fd, level, mreq, opt;
		err = $ifaceNil;
		_array = new Uint8Array(20);
		err = setsockopt(fd, level, opt, (_array), 20);
		_struct = mreq, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Multiaddr = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.Interface = _view.getUint32(16, true);
		return err;
	};
	$pkg.SetsockoptIPv6Mreq = SetsockoptIPv6Mreq;
	SetsockoptLinger = function(fd, level, opt, l) {
		var _array, _struct, _view, err, fd, l, level, opt;
		err = $ifaceNil;
		_array = new Uint8Array(8);
		err = setsockopt(fd, level, opt, (_array), 8);
		_struct = l, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Onoff = _view.getInt32(0, true), _struct.Linger = _view.getInt32(4, true);
		return err;
	};
	$pkg.SetsockoptLinger = SetsockoptLinger;
	openat = function(dirfd, path, flags, mode) {
		var _p0, _tuple, _tuple$1, dirfd, e1, err, fd, flags, mode, path, r0;
		fd = 0;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [fd, err];
		}
		_tuple$1 = Syscall6(257, ((dirfd >>> 0)), ((_p0)), ((flags >>> 0)), ((mode >>> 0)), 0, 0);
		r0 = _tuple$1[0];
		e1 = _tuple$1[2];
		fd = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [fd, err];
	};
	Close = function(fd) {
		var _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(3, ((fd >>> 0)), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Close = Close;
	Fchdir = function(fd) {
		var _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(81, ((fd >>> 0)), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchdir = Fchdir;
	Fchmod = function(fd, mode) {
		var _tuple, e1, err, fd, mode;
		err = $ifaceNil;
		_tuple = Syscall(91, ((fd >>> 0)), ((mode >>> 0)), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchmod = Fchmod;
	Fchmodat = function(dirfd, path, mode, flags) {
		var _p0, _tuple, _tuple$1, dirfd, e1, err, flags, mode, path;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple$1 = Syscall6(268, ((dirfd >>> 0)), ((_p0)), ((mode >>> 0)), ((flags >>> 0)), 0, 0);
		e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchmodat = Fchmodat;
	fcntl = function(fd, cmd, arg) {
		var _tuple, arg, cmd, e1, err, fd, r0, val;
		val = 0;
		err = $ifaceNil;
		_tuple = Syscall(72, ((fd >>> 0)), ((cmd >>> 0)), ((arg >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		val = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [val, err];
	};
	Fsync = function(fd) {
		var _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(74, ((fd >>> 0)), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fsync = Fsync;
	Getdents = function(fd, buf) {
		var _p0, _tuple, buf, e1, err, fd, n, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = ($sliceToArray(buf));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall(217, ((fd >>> 0)), (_p0), ((buf.$length >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Getdents = Getdents;
	read = function(fd, p) {
		var _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall(0, ((fd >>> 0)), (_p0), ((p.$length >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	write = function(fd, p) {
		var _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall(1, ((fd >>> 0)), (_p0), ((p.$length >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	munmap = function(addr, length) {
		var _tuple, addr, e1, err, length;
		err = $ifaceNil;
		_tuple = Syscall(11, (addr), (length), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	Fchown = function(fd, uid, gid) {
		var _tuple, e1, err, fd, gid, uid;
		err = $ifaceNil;
		_tuple = Syscall(93, ((fd >>> 0)), ((uid >>> 0)), ((gid >>> 0)));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchown = Fchown;
	Fstat = function(fd, stat) {
		var _array, _struct, _tuple, _view, e1, err, fd, stat;
		err = $ifaceNil;
		_array = new Uint8Array(144);
		_tuple = Syscall(5, ((fd >>> 0)), ((_array)), 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Nlink = new $Uint64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Mode = _view.getUint32(24, true), _struct.Uid = _view.getUint32(28, true), _struct.Gid = _view.getUint32(32, true), _struct.X__pad0 = _view.getInt32(36, true), _struct.Rdev = new $Uint64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Size = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Blksize = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Blocks = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Atim.Sec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Atim.Nsec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Mtim.Sec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Mtim.Nsec = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Ctim.Sec = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Ctim.Nsec = new $Int64(_view.getUint32(116, true), _view.getUint32(112, true)), _struct.X__unused = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 120, _array.buffer.byteLength));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fstat = Fstat;
	Ftruncate = function(fd, length) {
		var _tuple, e1, err, fd, length;
		err = $ifaceNil;
		_tuple = Syscall(77, ((fd >>> 0)), ((length.$low >>> 0)), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Ftruncate = Ftruncate;
	Lstat = function(path, stat) {
		var _array, _p0, _struct, _tuple, _tuple$1, _view, e1, err, path, stat;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(6, ((_p0)), ((_array)), 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Nlink = new $Uint64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Mode = _view.getUint32(24, true), _struct.Uid = _view.getUint32(28, true), _struct.Gid = _view.getUint32(32, true), _struct.X__pad0 = _view.getInt32(36, true), _struct.Rdev = new $Uint64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Size = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Blksize = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Blocks = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Atim.Sec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Atim.Nsec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Mtim.Sec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Mtim.Nsec = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Ctim.Sec = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Ctim.Nsec = new $Int64(_view.getUint32(116, true), _view.getUint32(112, true)), _struct.X__unused = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 120, _array.buffer.byteLength));
		e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Lstat = Lstat;
	Pread = function(fd, p, offset) {
		var _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall6(17, ((fd >>> 0)), (_p0), ((p.$length >>> 0)), ((offset.$low >>> 0)), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pread = Pread;
	Pwrite = function(fd, p, offset) {
		var _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall6(18, ((fd >>> 0)), (_p0), ((p.$length >>> 0)), ((offset.$low >>> 0)), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pwrite = Pwrite;
	Seek = function(fd, offset, whence) {
		var _tuple, e1, err, fd, off, offset, r0, whence;
		off = new $Int64(0, 0);
		err = $ifaceNil;
		_tuple = Syscall(8, ((fd >>> 0)), ((offset.$low >>> 0)), ((whence >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		off = (new $Int64(0, r0.constructor === Number ? r0 : 1));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [off, err];
	};
	$pkg.Seek = Seek;
	Shutdown = function(fd, how) {
		var _tuple, e1, err, fd, how;
		err = $ifaceNil;
		_tuple = Syscall(48, ((fd >>> 0)), ((how >>> 0)), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Shutdown = Shutdown;
	Stat = function(path, stat) {
		var _array, _p0, _struct, _tuple, _tuple$1, _view, e1, err, path, stat;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(4, ((_p0)), ((_array)), 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Nlink = new $Uint64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Mode = _view.getUint32(24, true), _struct.Uid = _view.getUint32(28, true), _struct.Gid = _view.getUint32(32, true), _struct.X__pad0 = _view.getInt32(36, true), _struct.Rdev = new $Uint64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Size = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Blksize = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Blocks = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Atim.Sec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Atim.Nsec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Mtim.Sec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Mtim.Nsec = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Ctim.Sec = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Ctim.Nsec = new $Int64(_view.getUint32(116, true), _view.getUint32(112, true)), _struct.X__unused = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 120, _array.buffer.byteLength));
		e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Stat = Stat;
	accept = function(s, rsa, addrlen) {
		var _array, _struct, _tuple, _view, addrlen, e1, err, fd, r0, rsa, s;
		fd = 0;
		err = $ifaceNil;
		_array = new Uint8Array(112);
		_tuple = Syscall(43, ((s >>> 0)), ((_array)), ((addrlen)));
		_struct = rsa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Family = _view.getUint16(0, true), _struct.Addr.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		r0 = _tuple[0];
		e1 = _tuple[2];
		fd = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [fd, err];
	};
	accept4 = function(s, rsa, addrlen, flags) {
		var _array, _struct, _tuple, _view, addrlen, e1, err, fd, flags, r0, rsa, s;
		fd = 0;
		err = $ifaceNil;
		_array = new Uint8Array(112);
		_tuple = Syscall6(288, ((s >>> 0)), ((_array)), ((addrlen)), ((flags >>> 0)), 0, 0);
		_struct = rsa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Family = _view.getUint16(0, true), _struct.Addr.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		r0 = _tuple[0];
		e1 = _tuple[2];
		fd = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [fd, err];
	};
	getsockopt = function(s, level, name, val, vallen) {
		var _tuple, e1, err, level, name, s, val, vallen;
		err = $ifaceNil;
		_tuple = Syscall6(55, ((s >>> 0)), ((level >>> 0)), ((name >>> 0)), (val), ((vallen)), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	setsockopt = function(s, level, name, val, vallen) {
		var _tuple, e1, err, level, name, s, val, vallen;
		err = $ifaceNil;
		_tuple = Syscall6(54, ((s >>> 0)), ((level >>> 0)), ((name >>> 0)), (val), (vallen), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	recvfrom = function(fd, p, flags, from, fromlen) {
		var _array, _p0, _struct, _tuple, _view, e1, err, fd, flags, from, fromlen, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_array = new Uint8Array(112);
		_tuple = Syscall6(45, ((fd >>> 0)), (_p0), ((p.$length >>> 0)), ((flags >>> 0)), ((_array)), ((fromlen)));
		_struct = from, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Family = _view.getUint16(0, true), _struct.Addr.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	sendto = function(s, buf, flags, to, addrlen) {
		var _p0, _tuple, addrlen, buf, e1, err, flags, s, to;
		err = $ifaceNil;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = ($sliceToArray(buf));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall6(44, ((s >>> 0)), (_p0), ((buf.$length >>> 0)), ((flags >>> 0)), (to), ((addrlen >>> 0)));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	recvmsg = function(s, msg, flags) {
		var _array, _struct, _tuple, _view, e1, err, flags, msg, n, r0, s;
		n = 0;
		err = $ifaceNil;
		_array = new Uint8Array(48);
		_tuple = Syscall(47, ((s >>> 0)), ((_array)), ((flags >>> 0)));
		_struct = msg, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Namelen = _view.getUint32(4, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct.Iovlen = new $Uint64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Controllen = new $Uint64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Flags = _view.getInt32(40, true), _struct.Pad_cgo_1 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 44, _array.buffer.byteLength));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	sendmsg = function(s, msg, flags) {
		var _array, _struct, _tuple, _view, e1, err, flags, msg, n, r0, s;
		n = 0;
		err = $ifaceNil;
		_array = new Uint8Array(48);
		_tuple = Syscall(46, ((s >>> 0)), ((_array)), ((flags >>> 0)));
		_struct = msg, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Namelen = _view.getUint32(4, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct.Iovlen = new $Uint64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Controllen = new $Uint64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Flags = _view.getInt32(40, true), _struct.Pad_cgo_1 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 44, _array.buffer.byteLength));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	mmap = function(addr, length, prot, flags, fd, offset) {
		var _tuple, addr, e1, err, fd, flags, length, offset, prot, r0, xaddr;
		xaddr = 0;
		err = $ifaceNil;
		_tuple = Syscall6(9, (addr), (length), ((prot >>> 0)), ((flags >>> 0)), ((fd >>> 0)), ((offset.$low >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		xaddr = (r0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [xaddr, err];
	};
	ptrType$24.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$11.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$25.methods = [{prop: "Mmap", name: "Mmap", pkg: "", typ: $funcType([$Int, $Int64, $Int, $Int, $Int], [sliceType, $error], false)}, {prop: "Munmap", name: "Munmap", pkg: "", typ: $funcType([sliceType], [$error], false)}];
	Errno.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$26.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$27.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$28.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$29.methods = [{prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64, $Int64], false)}, {prop: "Nano", name: "Nano", pkg: "", typ: $funcType([], [$Int64], false)}];
	ptrType$19.methods = [{prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}];
	ptrType$31.methods = [{prop: "SetControllen", name: "SetControllen", pkg: "", typ: $funcType([$Int], [], false)}];
	SockaddrLinklayer.init("syscall", [{prop: "Protocol", name: "Protocol", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Ifindex", name: "Ifindex", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Hatype", name: "Hatype", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Pkttype", name: "Pkttype", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Halen", name: "Halen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrLinklayer, tag: ""}]);
	SockaddrNetlink.init("syscall", [{prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Pad", name: "Pad", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Pid", name: "Pid", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Groups", name: "Groups", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrNetlink, tag: ""}]);
	mmapper.init("syscall", [{prop: "Mutex", name: "Mutex", anonymous: true, exported: true, typ: sync.Mutex, tag: ""}, {prop: "active", name: "active", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "mmap", name: "mmap", anonymous: false, exported: false, typ: funcType$2, tag: ""}, {prop: "munmap", name: "munmap", anonymous: false, exported: false, typ: funcType$3, tag: ""}]);
	Sockaddr.init([{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}]);
	SockaddrInet4.init("syscall", [{prop: "Port", name: "Port", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType$8, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrInet4, tag: ""}]);
	SockaddrInet6.init("syscall", [{prop: "Port", name: "Port", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "ZoneId", name: "ZoneId", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType$2, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrInet6, tag: ""}]);
	SockaddrUnix.init("syscall", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrUnix, tag: ""}]);
	Timespec.init("", [{prop: "Sec", name: "Sec", anonymous: false, exported: true, typ: $Int64, tag: ""}, {prop: "Nsec", name: "Nsec", anonymous: false, exported: true, typ: $Int64, tag: ""}]);
	Stat_t.init("", [{prop: "Dev", name: "Dev", anonymous: false, exported: true, typ: $Uint64, tag: ""}, {prop: "Ino", name: "Ino", anonymous: false, exported: true, typ: $Uint64, tag: ""}, {prop: "Nlink", name: "Nlink", anonymous: false, exported: true, typ: $Uint64, tag: ""}, {prop: "Mode", name: "Mode", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Uid", name: "Uid", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Gid", name: "Gid", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "X__pad0", name: "X__pad0", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Rdev", name: "Rdev", anonymous: false, exported: true, typ: $Uint64, tag: ""}, {prop: "Size", name: "Size", anonymous: false, exported: true, typ: $Int64, tag: ""}, {prop: "Blksize", name: "Blksize", anonymous: false, exported: true, typ: $Int64, tag: ""}, {prop: "Blocks", name: "Blocks", anonymous: false, exported: true, typ: $Int64, tag: ""}, {prop: "Atim", name: "Atim", anonymous: false, exported: true, typ: Timespec, tag: ""}, {prop: "Mtim", name: "Mtim", anonymous: false, exported: true, typ: Timespec, tag: ""}, {prop: "Ctim", name: "Ctim", anonymous: false, exported: true, typ: Timespec, tag: ""}, {prop: "X__unused", name: "X__unused", anonymous: false, exported: true, typ: arrayType$15, tag: ""}]);
	RawSockaddrInet4.init("", [{prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Port", name: "Port", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType$8, tag: ""}, {prop: "Zero", name: "Zero", anonymous: false, exported: true, typ: arrayType$1, tag: ""}]);
	RawSockaddrInet6.init("", [{prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Port", name: "Port", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Flowinfo", name: "Flowinfo", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType$2, tag: ""}, {prop: "Scope_id", name: "Scope_id", anonymous: false, exported: true, typ: $Uint32, tag: ""}]);
	RawSockaddrUnix.init("", [{prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Path", name: "Path", anonymous: false, exported: true, typ: arrayType$7, tag: ""}]);
	RawSockaddrLinklayer.init("", [{prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Protocol", name: "Protocol", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Ifindex", name: "Ifindex", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Hatype", name: "Hatype", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Pkttype", name: "Pkttype", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Halen", name: "Halen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType$1, tag: ""}]);
	RawSockaddrNetlink.init("", [{prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Pad", name: "Pad", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Pid", name: "Pid", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Groups", name: "Groups", anonymous: false, exported: true, typ: $Uint32, tag: ""}]);
	RawSockaddr.init("", [{prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Data", name: "Data", anonymous: false, exported: true, typ: arrayType$9, tag: ""}]);
	RawSockaddrAny.init("", [{prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: RawSockaddr, tag: ""}, {prop: "Pad", name: "Pad", anonymous: false, exported: true, typ: arrayType$10, tag: ""}]);
	Linger.init("", [{prop: "Onoff", name: "Onoff", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Linger", name: "Linger", anonymous: false, exported: true, typ: $Int32, tag: ""}]);
	Iovec.init("", [{prop: "Base", name: "Base", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint64, tag: ""}]);
	IPMreq.init("", [{prop: "Multiaddr", name: "Multiaddr", anonymous: false, exported: true, typ: arrayType$8, tag: ""}, {prop: "Interface", name: "Interface", anonymous: false, exported: true, typ: arrayType$8, tag: ""}]);
	IPMreqn.init("", [{prop: "Multiaddr", name: "Multiaddr", anonymous: false, exported: true, typ: arrayType$8, tag: ""}, {prop: "Address", name: "Address", anonymous: false, exported: true, typ: arrayType$8, tag: ""}, {prop: "Ifindex", name: "Ifindex", anonymous: false, exported: true, typ: $Int32, tag: ""}]);
	IPv6Mreq.init("", [{prop: "Multiaddr", name: "Multiaddr", anonymous: false, exported: true, typ: arrayType$2, tag: ""}, {prop: "Interface", name: "Interface", anonymous: false, exported: true, typ: $Uint32, tag: ""}]);
	Msghdr.init("", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Namelen", name: "Namelen", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", anonymous: false, exported: true, typ: arrayType$8, tag: ""}, {prop: "Iov", name: "Iov", anonymous: false, exported: true, typ: ptrType$19, tag: ""}, {prop: "Iovlen", name: "Iovlen", anonymous: false, exported: true, typ: $Uint64, tag: ""}, {prop: "Control", name: "Control", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Controllen", name: "Controllen", anonymous: false, exported: true, typ: $Uint64, tag: ""}, {prop: "Flags", name: "Flags", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Pad_cgo_1", name: "Pad_cgo_1", anonymous: false, exported: true, typ: arrayType$8, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = race.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		lineBuffer = sliceType.nil;
		syscallModule = null;
		ioSync = new $Int64(0, 0);
		warningPrinted = false;
		alreadyTriedToLoad = false;
		minusOne = -1;
		envs = runtime_envs();
		$pkg.Stdin = 0;
		$pkg.Stdout = 1;
		$pkg.Stderr = 2;
		errEAGAIN = new Errno(11);
		errEINVAL = new Errno(22);
		errENOENT = new Errno(2);
		errors = $toNativeArray($kindString, ["", "operation not permitted", "no such file or directory", "no such process", "interrupted system call", "input/output error", "no such device or address", "argument list too long", "exec format error", "bad file descriptor", "no child processes", "resource temporarily unavailable", "cannot allocate memory", "permission denied", "bad address", "block device required", "device or resource busy", "file exists", "invalid cross-device link", "no such device", "not a directory", "is a directory", "invalid argument", "too many open files in system", "too many open files", "inappropriate ioctl for device", "text file busy", "file too large", "no space left on device", "illegal seek", "read-only file system", "too many links", "broken pipe", "numerical argument out of domain", "numerical result out of range", "resource deadlock avoided", "file name too long", "no locks available", "function not implemented", "directory not empty", "too many levels of symbolic links", "", "no message of desired type", "identifier removed", "channel number out of range", "level 2 not synchronized", "level 3 halted", "level 3 reset", "link number out of range", "protocol driver not attached", "no CSI structure available", "level 2 halted", "invalid exchange", "invalid request descriptor", "exchange full", "no anode", "invalid request code", "invalid slot", "", "bad font file format", "device not a stream", "no data available", "timer expired", "out of streams resources", "machine is not on the network", "package not installed", "object is remote", "link has been severed", "advertise error", "srmount error", "communication error on send", "protocol error", "multihop attempted", "RFS specific error", "bad message", "value too large for defined data type", "name not unique on network", "file descriptor in bad state", "remote address changed", "can not access a needed shared library", "accessing a corrupted shared library", ".lib section in a.out corrupted", "attempting to link in too many shared libraries", "cannot exec a shared library directly", "invalid or incomplete multibyte or wide character", "interrupted system call should be restarted", "streams pipe error", "too many users", "socket operation on non-socket", "destination address required", "message too long", "protocol wrong type for socket", "protocol not available", "protocol not supported", "socket type not supported", "operation not supported", "protocol family not supported", "address family not supported by protocol", "address already in use", "cannot assign requested address", "network is down", "network is unreachable", "network dropped connection on reset", "software caused connection abort", "connection reset by peer", "no buffer space available", "transport endpoint is already connected", "transport endpoint is not connected", "cannot send after transport endpoint shutdown", "too many references: cannot splice", "connection timed out", "connection refused", "host is down", "no route to host", "operation already in progress", "operation now in progress", "stale NFS file handle", "structure needs cleaning", "not a XENIX named type file", "no XENIX semaphores available", "is a named type file", "remote I/O error", "disk quota exceeded", "no medium found", "wrong medium type", "operation canceled", "required key not available", "key has expired", "key has been revoked", "key was rejected by service", "owner died", "state not recoverable", "operation not possible due to RF-kill"]);
		mapper = new mmapper.ptr(new sync.Mutex.ptr(0, 0), {}, mmap, munmap);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
	var $pkg = {}, $init, Mutex, RWMutex, Once, Pool, ptrType$1, ptrType$2, funcType$1, ptrType$4, sliceType, ptrType$5, funcType$2;
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "nosync.Mutex", true, "github.com/gopherjs/gopherjs/nosync", true, function(locked_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.locked = false;
			return;
		}
		this.locked = locked_;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "nosync.RWMutex", true, "github.com/gopherjs/gopherjs/nosync", true, function(writeLocked_, readLockCounter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.writeLocked = false;
			this.readLockCounter = 0;
			return;
		}
		this.writeLocked = writeLocked_;
		this.readLockCounter = readLockCounter_;
	});
	Once = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", true, "github.com/gopherjs/gopherjs/nosync", true, function(doing_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.doing = false;
			this.done = false;
			return;
		}
		this.doing = doing_;
		this.done = done_;
	});
	Pool = $pkg.Pool = $newType(0, $kindStruct, "nosync.Pool", true, "github.com/gopherjs/gopherjs/nosync", true, function(store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.store = sliceType.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.store = store_;
		this.New = New_;
	});
	ptrType$1 = $ptrType(Mutex);
	ptrType$2 = $ptrType(RWMutex);
	funcType$1 = $funcType([], [], false);
	ptrType$4 = $ptrType(Once);
	sliceType = $sliceType($emptyInterface);
	ptrType$5 = $ptrType(Pool);
	funcType$2 = $funcType([], [$emptyInterface], false);
	Mutex.ptr.prototype.Lock = function() {
		var m;
		m = this;
		if (m.locked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		m.locked = true;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var m;
		m = this;
		if (!m.locked) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		m.locked = false;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.Lock = function() {
		var rw;
		rw = this;
		if (!((rw.readLockCounter === 0)) || rw.writeLocked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		rw.writeLocked = true;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var rw;
		rw = this;
		if (!rw.writeLocked) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		rw.writeLocked = false;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLock = function() {
		var rw;
		rw = this;
		if (rw.writeLocked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		rw.readLockCounter = rw.readLockCounter + (1) >> 0;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var rw;
		rw = this;
		if (rw.readLockCounter === 0) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		rw.readLockCounter = rw.readLockCounter - (1) >> 0;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	Once.ptr.prototype.Do = function(f) {
		var f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = [o];
		o[0] = this;
		if (o[0].done) {
			$s = -1; return;
		}
		if (o[0].doing) {
			$panic(new $String("nosync: Do called within f"));
		}
		o[0].doing = true;
		$deferred.push([(function(o) { return function() {
			o[0].doing = false;
			o[0].done = true;
		}; })(o), []]);
		$r = f(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	Pool.ptr.prototype.Get = function() {
		var _r, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 4:
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		$s = -1; return x$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pool.ptr.prototype.Get }; } $f._r = _r; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	ptrType$1.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$2.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$4.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$1], [], false)}];
	ptrType$5.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}];
	Mutex.init("github.com/gopherjs/gopherjs/nosync", [{prop: "locked", name: "locked", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	RWMutex.init("github.com/gopherjs/gopherjs/nosync", [{prop: "writeLocked", name: "writeLocked", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "readLockCounter", name: "readLockCounter", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	Once.init("github.com/gopherjs/gopherjs/nosync", [{prop: "doing", name: "doing", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "done", name: "done", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	Pool.init("github.com/gopherjs/gopherjs/nosync", [{prop: "store", name: "store", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "New", name: "New", anonymous: false, exported: true, typ: funcType$2, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, $init, errors, js, nosync, runtime, syscall, ParseError, Time, Month, Weekday, Duration, Location, zone, zoneTrans, sliceType, sliceType$1, ptrType, sliceType$2, arrayType, sliceType$3, arrayType$1, arrayType$2, ptrType$2, arrayType$3, ptrType$4, ptrType$7, zoneSources, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, months, days, daysBefore, utcLoc, utcLoc$24ptr, localLoc, localLoc$24ptr, localOnce, errLocation, badData, init, initLocal, indexByte, startsWithLowerCase, nextStdChunk, match, lookup, appendInt, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, absWeekday, absClock, fmtFrac, fmtInt, lessThanHalf, absDate, daysIn, unixTime, Unix, isLeap, norm, Date, div, FixedZone;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	runtime = $packages["runtime"];
	syscall = $packages["syscall"];
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", true, "time", true, function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Layout = "";
			this.Value = "";
			this.LayoutElem = "";
			this.ValueElem = "";
			this.Message = "";
			return;
		}
		this.Layout = Layout_;
		this.Value = Value_;
		this.LayoutElem = LayoutElem_;
		this.ValueElem = ValueElem_;
		this.Message = Message_;
	});
	Time = $pkg.Time = $newType(0, $kindStruct, "time.Time", true, "time", true, function(wall_, ext_, loc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wall = new $Uint64(0, 0);
			this.ext = new $Int64(0, 0);
			this.loc = ptrType$2.nil;
			return;
		}
		this.wall = wall_;
		this.ext = ext_;
		this.loc = loc_;
	});
	Month = $pkg.Month = $newType(4, $kindInt, "time.Month", true, "time", true, null);
	Weekday = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", true, "time", true, null);
	Duration = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", true, "time", true, null);
	Location = $pkg.Location = $newType(0, $kindStruct, "time.Location", true, "time", true, function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.zone = sliceType.nil;
			this.tx = sliceType$1.nil;
			this.cacheStart = new $Int64(0, 0);
			this.cacheEnd = new $Int64(0, 0);
			this.cacheZone = ptrType.nil;
			return;
		}
		this.name = name_;
		this.zone = zone_;
		this.tx = tx_;
		this.cacheStart = cacheStart_;
		this.cacheEnd = cacheEnd_;
		this.cacheZone = cacheZone_;
	});
	zone = $pkg.zone = $newType(0, $kindStruct, "time.zone", true, "time", false, function(name_, offset_, isDST_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.offset = 0;
			this.isDST = false;
			return;
		}
		this.name = name_;
		this.offset = offset_;
		this.isDST = isDST_;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", true, "time", false, function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.when = new $Int64(0, 0);
			this.index = 0;
			this.isstd = false;
			this.isutc = false;
			return;
		}
		this.when = when_;
		this.index = index_;
		this.isstd = isstd_;
		this.isutc = isutc_;
	});
	sliceType = $sliceType(zone);
	sliceType$1 = $sliceType(zoneTrans);
	ptrType = $ptrType(zone);
	sliceType$2 = $sliceType($String);
	arrayType = $arrayType($Uint8, 20);
	sliceType$3 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 9);
	arrayType$2 = $arrayType($Uint8, 64);
	ptrType$2 = $ptrType(Location);
	arrayType$3 = $arrayType($Uint8, 32);
	ptrType$4 = $ptrType(ParseError);
	ptrType$7 = $ptrType(Time);
	init = function() {
		$unused(Unix(new $Int64(0, 0), new $Int64(0, 0)));
	};
	initLocal = function() {
		var d, i, j, s;
		d = new ($global.Date)();
		s = $internalize(d, $String);
		i = indexByte(s, 40);
		j = indexByte(s, 41);
		if ((i === -1) || (j === -1)) {
			localLoc.name = "UTC";
			return;
		}
		localLoc.name = $substring(s, (i + 1 >> 0), j);
		localLoc.zone = new sliceType([new zone.ptr(localLoc.name, $imul(($parseInt(d.getTimezoneOffset()) >> 0), -60), false)]);
	};
	indexByte = function(s, c) {
		var c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	startsWithLowerCase = function(str) {
		var c, str;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$81, _tmp$82, _tmp$83, _tmp$84, _tmp$85, _tmp$86, _tmp$9, c, ch, i, j, layout, prefix, std, std$1, suffix, x;
		prefix = "";
		std = 0;
		suffix = "";
		i = 0;
		while (true) {
			if (!(i < layout.length)) { break; }
			c = ((layout.charCodeAt(i) >> 0));
			_1 = c;
			if (_1 === (74)) {
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "January") {
						_tmp = $substring(layout, 0, i);
						_tmp$1 = 257;
						_tmp$2 = $substring(layout, (i + 7 >> 0));
						prefix = _tmp;
						std = _tmp$1;
						suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
						_tmp$3 = $substring(layout, 0, i);
						_tmp$4 = 258;
						_tmp$5 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$3;
						std = _tmp$4;
						suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (77)) {
				if (layout.length >= (i + 3 >> 0)) {
					if ($substring(layout, i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = $substring(layout, 0, i);
							_tmp$7 = 261;
							_tmp$8 = $substring(layout, (i + 6 >> 0));
							prefix = _tmp$6;
							std = _tmp$7;
							suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
							_tmp$9 = $substring(layout, 0, i);
							_tmp$10 = 262;
							_tmp$11 = $substring(layout, (i + 3 >> 0));
							prefix = _tmp$9;
							std = _tmp$10;
							suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if ($substring(layout, i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = $substring(layout, 0, i);
						_tmp$13 = 21;
						_tmp$14 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$12;
						std = _tmp$13;
						suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (48)) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = $substring(layout, 0, i);
					_tmp$16 = (x = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x < 0 || x >= std0x.length) ? ($throwRuntimeError("index out of range"), undefined) : std0x[x]));
					_tmp$17 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$15;
					std = _tmp$16;
					suffix = _tmp$17;
					return [prefix, std, suffix];
				}
			} else if (_1 === (49)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$18 = $substring(layout, 0, i);
					_tmp$19 = 522;
					_tmp$20 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$18;
					std = _tmp$19;
					suffix = _tmp$20;
					return [prefix, std, suffix];
				}
				_tmp$21 = $substring(layout, 0, i);
				_tmp$22 = 259;
				_tmp$23 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$21;
				std = _tmp$22;
				suffix = _tmp$23;
				return [prefix, std, suffix];
			} else if (_1 === (50)) {
				if (layout.length >= (i + 4 >> 0) && $substring(layout, i, (i + 4 >> 0)) === "2006") {
					_tmp$24 = $substring(layout, 0, i);
					_tmp$25 = 273;
					_tmp$26 = $substring(layout, (i + 4 >> 0));
					prefix = _tmp$24;
					std = _tmp$25;
					suffix = _tmp$26;
					return [prefix, std, suffix];
				}
				_tmp$27 = $substring(layout, 0, i);
				_tmp$28 = 263;
				_tmp$29 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$27;
				std = _tmp$28;
				suffix = _tmp$29;
				return [prefix, std, suffix];
			} else if (_1 === (95)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					if (layout.length >= (i + 5 >> 0) && $substring(layout, (i + 1 >> 0), (i + 5 >> 0)) === "2006") {
						_tmp$30 = $substring(layout, 0, (i + 1 >> 0));
						_tmp$31 = 273;
						_tmp$32 = $substring(layout, (i + 5 >> 0));
						prefix = _tmp$30;
						std = _tmp$31;
						suffix = _tmp$32;
						return [prefix, std, suffix];
					}
					_tmp$33 = $substring(layout, 0, i);
					_tmp$34 = 264;
					_tmp$35 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$33;
					std = _tmp$34;
					suffix = _tmp$35;
					return [prefix, std, suffix];
				}
			} else if (_1 === (51)) {
				_tmp$36 = $substring(layout, 0, i);
				_tmp$37 = 523;
				_tmp$38 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$36;
				std = _tmp$37;
				suffix = _tmp$38;
				return [prefix, std, suffix];
			} else if (_1 === (52)) {
				_tmp$39 = $substring(layout, 0, i);
				_tmp$40 = 525;
				_tmp$41 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$39;
				std = _tmp$40;
				suffix = _tmp$41;
				return [prefix, std, suffix];
			} else if (_1 === (53)) {
				_tmp$42 = $substring(layout, 0, i);
				_tmp$43 = 527;
				_tmp$44 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$42;
				std = _tmp$43;
				suffix = _tmp$44;
				return [prefix, std, suffix];
			} else if (_1 === (80)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$45 = $substring(layout, 0, i);
					_tmp$46 = 531;
					_tmp$47 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$45;
					std = _tmp$46;
					suffix = _tmp$47;
					return [prefix, std, suffix];
				}
			} else if (_1 === (112)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$48 = $substring(layout, 0, i);
					_tmp$49 = 532;
					_tmp$50 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$48;
					std = _tmp$49;
					suffix = _tmp$50;
					return [prefix, std, suffix];
				}
			} else if (_1 === (45)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "-070000") {
					_tmp$51 = $substring(layout, 0, i);
					_tmp$52 = 28;
					_tmp$53 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$51;
					std = _tmp$52;
					suffix = _tmp$53;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$54 = $substring(layout, 0, i);
					_tmp$55 = 31;
					_tmp$56 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$54;
					std = _tmp$55;
					suffix = _tmp$56;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "-0700") {
					_tmp$57 = $substring(layout, 0, i);
					_tmp$58 = 27;
					_tmp$59 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$57;
					std = _tmp$58;
					suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "-07:00") {
					_tmp$60 = $substring(layout, 0, i);
					_tmp$61 = 30;
					_tmp$62 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$60;
					std = _tmp$61;
					suffix = _tmp$62;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "-07") {
					_tmp$63 = $substring(layout, 0, i);
					_tmp$64 = 29;
					_tmp$65 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$63;
					std = _tmp$64;
					suffix = _tmp$65;
					return [prefix, std, suffix];
				}
			} else if (_1 === (90)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "Z070000") {
					_tmp$66 = $substring(layout, 0, i);
					_tmp$67 = 23;
					_tmp$68 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$66;
					std = _tmp$67;
					suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$69 = $substring(layout, 0, i);
					_tmp$70 = 26;
					_tmp$71 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$69;
					std = _tmp$70;
					suffix = _tmp$71;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "Z0700") {
					_tmp$72 = $substring(layout, 0, i);
					_tmp$73 = 22;
					_tmp$74 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$72;
					std = _tmp$73;
					suffix = _tmp$74;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$75 = $substring(layout, 0, i);
					_tmp$76 = 25;
					_tmp$77 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$75;
					std = _tmp$76;
					suffix = _tmp$77;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Z07") {
					_tmp$78 = $substring(layout, 0, i);
					_tmp$79 = 24;
					_tmp$80 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$78;
					std = _tmp$79;
					suffix = _tmp$80;
					return [prefix, std, suffix];
				}
			} else if (_1 === (46)) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (true) {
						if (!(j < layout.length && (layout.charCodeAt(j) === ch))) { break; }
						j = j + (1) >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 32;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 33;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tmp$81 = $substring(layout, 0, i);
						_tmp$82 = std$1;
						_tmp$83 = $substring(layout, j);
						prefix = _tmp$81;
						std = _tmp$82;
						suffix = _tmp$83;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + (1) >> 0;
		}
		_tmp$84 = layout;
		_tmp$85 = 0;
		_tmp$86 = "";
		prefix = _tmp$84;
		std = _tmp$85;
		suffix = _tmp$86;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var c1, c2, i, s1, s2;
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | (32)) >>> 0;
				c2 = (c2 | (32)) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var _i, _ref, i, tab, v, val;
		_ref = tab;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (val.length >= v.length && match($substring(val, 0, v.length), v)) {
				return [i, $substring(val, v.length), $ifaceNil];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendInt = function(b, x, width) {
		var _q, b, buf, i, q, u, w, width, x;
		u = ((x >>> 0));
		if (x < 0) {
			b = $append(b, 45);
			u = ((-x >>> 0));
		}
		buf = arrayType.zero();
		i = 20;
		while (true) {
			if (!(u >= 10)) { break; }
			i = i - (1) >> 0;
			q = (_q = u / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((((48 + u >>> 0) - (q * 10 >>> 0) >>> 0) << 24 >>> 24)));
			u = q;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((48 + u >>> 0) << 24 >>> 24)));
		w = 20 - i >> 0;
		while (true) {
			if (!(w < width)) { break; }
			b = $append(b, 48);
			w = w + (1) >> 0;
		}
		return $appendSlice(b, $subslice(new sliceType$3(buf), i));
	};
	atoi = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, neg, q, rem, s, x;
		x = 0;
		err = $ifaceNil;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = $substring(s, 1);
		}
		_tuple = leadingInt(s);
		q = _tuple[0];
		rem = _tuple[1];
		err = _tuple[2];
		x = (((q.$low + ((q.$high >> 31) * 4294967296)) >> 0));
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
			_tmp = 0;
			_tmp$1 = atoiError;
			x = _tmp;
			err = _tmp$1;
			return [x, err];
		}
		if (neg) {
			x = -x;
		}
		_tmp$2 = x;
		_tmp$3 = $ifaceNil;
		x = _tmp$2;
		err = _tmp$3;
		return [x, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var _q, _r, b, buf, n, nanosec, start, trim, u, x;
		u = nanosec;
		buf = arrayType$1.zero();
		start = 9;
		while (true) {
			if (!(start > 0)) { break; }
			start = start - (1) >> 0;
			((start < 0 || start >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[start] = ((((_r = u % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24)));
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (true) {
				if (!(n > 0 && ((x = n - 1 >> 0, ((x < 0 || x >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[x])) === 48))) { break; }
				n = n - (1) >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, 46);
		return $appendSlice(b, $subslice(new sliceType$3(buf), 0, n));
	};
	Time.ptr.prototype.String = function() {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, buf, m0, m1, m2, s, sign, t, wid, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; buf = $f.buf; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; s = $f.s; sign = $f.sign; t = $f.t; wid = $f.wid; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Format("2006-01-02 15:04:05.999999999 -0700 MST"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		if (!((x = (x$1 = t.wall, new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			m2 = ((x$2 = t.ext, new $Uint64(x$2.$high, x$2.$low)));
			sign = 43;
			if ((x$3 = t.ext, (x$3.$high < 0 || (x$3.$high === 0 && x$3.$low < 0)))) {
				sign = 45;
				m2 = new $Uint64(-m2.$high, -m2.$low);
			}
			_tmp = $div64(m2, new $Uint64(0, 1000000000), false);
			_tmp$1 = $div64(m2, new $Uint64(0, 1000000000), true);
			m1 = _tmp;
			m2 = _tmp$1;
			_tmp$2 = $div64(m1, new $Uint64(0, 1000000000), false);
			_tmp$3 = $div64(m1, new $Uint64(0, 1000000000), true);
			m0 = _tmp$2;
			m1 = _tmp$3;
			buf = sliceType$3.nil;
			buf = $appendSlice(buf, " m=");
			buf = $append(buf, sign);
			wid = 0;
			if (!((m0.$high === 0 && m0.$low === 0))) {
				buf = appendInt(buf, ((m0.$low >> 0)), 0);
				wid = 9;
			}
			buf = appendInt(buf, ((m1.$low >> 0)), wid);
			buf = $append(buf, 46);
			buf = appendInt(buf, ((m2.$low >> 0)), 9);
			s = s + (($bytesToString(buf)));
		}
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.String }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.buf = buf; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.s = s; $f.sign = sign; $f.t = t; $f.wid = wid; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.ptr.prototype.Format = function(layout) {
		var _r, b, buf, layout, max, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; buf = $f.buf; layout = $f.layout; max = $f.max; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		b = sliceType$3.nil;
		max = layout.length + 10 >> 0;
		if (max < 64) {
			buf = arrayType$2.zero();
			b = $subslice(new sliceType$3(buf), 0, 0);
		} else {
			b = $makeSlice(sliceType$3, 0, max);
		}
		_r = $clone(t, Time).AppendFormat(b, layout); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = _r;
		$s = -1; return ($bytesToString(b));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Format }; } $f._r = _r; $f.b = b; $f.buf = buf; $f.layout = layout; $f.max = max; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	Time.ptr.prototype.AppendFormat = function(b, layout) {
		var _1, _q, _q$1, _q$2, _q$3, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, _tuple$2, _tuple$3, abs, absoffset, b, day, hour, hr, hr$1, layout, m, min, month, name, offset, prefix, s, sec, std, suffix, t, y, year, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; abs = $f.abs; absoffset = $f.absoffset; b = $f.b; day = $f.day; hour = $f.hour; hr = $f.hr; hr$1 = $f.hr$1; layout = $f.layout; m = $f.m; min = $f.min; month = $f.month; name = $f.name; offset = $f.offset; prefix = $f.prefix; s = $f.s; sec = $f.sec; std = $f.std; suffix = $f.suffix; t = $f.t; y = $f.y; year = $f.year; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).locabs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		name = _tuple[0];
		offset = _tuple[1];
		abs = _tuple[2];
		year = -1;
		month = 0;
		day = 0;
		hour = -1;
		min = 0;
		sec = 0;
		while (true) {
			if (!(!(layout === ""))) { break; }
			_tuple$1 = nextStdChunk(layout);
			prefix = _tuple$1[0];
			std = _tuple$1[1];
			suffix = _tuple$1[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, prefix);
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$2 = absDate(abs, true);
				year = _tuple$2[0];
				month = _tuple$2[1];
				day = _tuple$2[2];
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$3 = absClock(abs);
				hour = _tuple$3[0];
				min = _tuple$3[1];
				sec = _tuple$3[2];
			}
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (274)) {
					y = year;
					if (y < 0) {
						y = -y;
					}
					b = appendInt(b, (_r$1 = y % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")), 2);
				} else if (_1 === (273)) {
					b = appendInt(b, year, 4);
				} else if (_1 === (258)) {
					b = $appendSlice(b, $substring(new Month(month).String(), 0, 3));
				} else if (_1 === (257)) {
					m = new Month(month).String();
					b = $appendSlice(b, m);
				} else if (_1 === (259)) {
					b = appendInt(b, ((month >> 0)), 0);
				} else if (_1 === (260)) {
					b = appendInt(b, ((month >> 0)), 2);
				} else if (_1 === (262)) {
					b = $appendSlice(b, $substring(new Weekday(absWeekday(abs)).String(), 0, 3));
				} else if (_1 === (261)) {
					s = new Weekday(absWeekday(abs)).String();
					b = $appendSlice(b, s);
				} else if (_1 === (263)) {
					b = appendInt(b, day, 0);
				} else if (_1 === (264)) {
					if (day < 10) {
						b = $append(b, 32);
					}
					b = appendInt(b, day, 0);
				} else if (_1 === (265)) {
					b = appendInt(b, day, 2);
				} else if (_1 === (522)) {
					b = appendInt(b, hour, 2);
				} else if (_1 === (523)) {
					hr = (_r$2 = hour % 12, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
					if (hr === 0) {
						hr = 12;
					}
					b = appendInt(b, hr, 0);
				} else if (_1 === (524)) {
					hr$1 = (_r$3 = hour % 12, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
					if (hr$1 === 0) {
						hr$1 = 12;
					}
					b = appendInt(b, hr$1, 2);
				} else if (_1 === (525)) {
					b = appendInt(b, min, 0);
				} else if (_1 === (526)) {
					b = appendInt(b, min, 2);
				} else if (_1 === (527)) {
					b = appendInt(b, sec, 0);
				} else if (_1 === (528)) {
					b = appendInt(b, sec, 2);
				} else if (_1 === (531)) {
					if (hour >= 12) {
						b = $appendSlice(b, "PM");
					} else {
						b = $appendSlice(b, "AM");
					}
				} else if (_1 === (532)) {
					if (hour >= 12) {
						b = $appendSlice(b, "pm");
					} else {
						b = $appendSlice(b, "am");
					}
				} else if ((_1 === (22)) || (_1 === (25)) || (_1 === (23)) || (_1 === (24)) || (_1 === (26)) || (_1 === (27)) || (_1 === (30)) || (_1 === (28)) || (_1 === (29)) || (_1 === (31))) {
					if ((offset === 0) && ((std === 22) || (std === 25) || (std === 23) || (std === 24) || (std === 26))) {
						b = $append(b, 90);
						break;
					}
					zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
					absoffset = offset;
					if (zone$1 < 0) {
						b = $append(b, 45);
						zone$1 = -zone$1;
						absoffset = -absoffset;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					if ((std === 25) || (std === 30) || (std === 26) || (std === 31)) {
						b = $append(b, 58);
					}
					if (!((std === 29)) && !((std === 24))) {
						b = appendInt(b, (_r$4 = zone$1 % 60, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")), 2);
					}
					if ((std === 23) || (std === 28) || (std === 31) || (std === 26)) {
						if ((std === 31) || (std === 26)) {
							b = $append(b, 58);
						}
						b = appendInt(b, (_r$5 = absoffset % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")), 2);
					}
				} else if (_1 === (21)) {
					if (!(name === "")) {
						b = $appendSlice(b, name);
						break;
					}
					zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
					if (zone$2 < 0) {
						b = $append(b, 45);
						zone$2 = -zone$2;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					b = appendInt(b, (_r$6 = zone$2 % 60, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")), 2);
				} else if ((_1 === (32)) || (_1 === (33))) {
					b = formatNano(b, (($clone(t, Time).Nanosecond() >>> 0)), std >> 16 >> 0, (std & 65535) === 33);
				}
			}
		}
		$s = -1; return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AppendFormat }; } $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.abs = abs; $f.absoffset = absoffset; $f.b = b; $f.day = day; $f.hour = hour; $f.hr = hr; $f.hr$1 = hr$1; $f.layout = layout; $f.m = m; $f.min = min; $f.month = month; $f.name = name; $f.offset = offset; $f.prefix = prefix; $f.s = s; $f.sec = sec; $f.std = std; $f.suffix = suffix; $f.t = t; $f.y = y; $f.year = year; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AppendFormat = function(b, layout) { return this.$val.AppendFormat(b, layout); };
	quote = function(s) {
		var s;
		return "\"" + s + "\"";
	};
	ParseError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var c, i, s;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var fixed, s;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), $substring(s, 1), $ifaceNil];
		}
		return [($imul((((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), 10)) + (((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0)) >> 0, $substring(s, 2), $ifaceNil];
	};
	cutspace = function(s) {
		var s;
		while (true) {
			if (!(s.length > 0 && (s.charCodeAt(0) === 32))) { break; }
			s = $substring(s, 1);
		}
		return s;
	};
	skip = function(value, prefix) {
		var prefix, value;
		while (true) {
			if (!(prefix.length > 0)) { break; }
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = $substring(prefix, 1);
			value = $substring(value, 1);
		}
		return [value, $ifaceNil];
	};
	Parse = function(layout, value) {
		var _r, layout, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; layout = $f.layout; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = parse(layout, value, $pkg.UTC, $pkg.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f._r = _r; $f.layout = layout; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parse = function(layout, value, defaultLocation, local) {
		var _1, _2, _3, _4, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, day, defaultLocation, err, hour, hour$1, hr, i, layout, local, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x, x$1, year, z, zoneName, zoneOffset, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$34 = $f._tmp$34; _tmp$35 = $f._tmp$35; _tmp$36 = $f._tmp$36; _tmp$37 = $f._tmp$37; _tmp$38 = $f._tmp$38; _tmp$39 = $f._tmp$39; _tmp$4 = $f._tmp$4; _tmp$40 = $f._tmp$40; _tmp$41 = $f._tmp$41; _tmp$42 = $f._tmp$42; _tmp$43 = $f._tmp$43; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$17 = $f._tuple$17; _tuple$18 = $f._tuple$18; _tuple$19 = $f._tuple$19; _tuple$2 = $f._tuple$2; _tuple$20 = $f._tuple$20; _tuple$21 = $f._tuple$21; _tuple$22 = $f._tuple$22; _tuple$23 = $f._tuple$23; _tuple$24 = $f._tuple$24; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; alayout = $f.alayout; amSet = $f.amSet; avalue = $f.avalue; day = $f.day; defaultLocation = $f.defaultLocation; err = $f.err; hour = $f.hour; hour$1 = $f.hour$1; hr = $f.hr; i = $f.i; layout = $f.layout; local = $f.local; min = $f.min; min$1 = $f.min$1; mm = $f.mm; month = $f.month; n = $f.n; n$1 = $f.n$1; name = $f.name; ndigit = $f.ndigit; nsec = $f.nsec; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; pmSet = $f.pmSet; prefix = $f.prefix; rangeErrString = $f.rangeErrString; sec = $f.sec; seconds = $f.seconds; sign = $f.sign; ss = $f.ss; std = $f.std; stdstr = $f.stdstr; suffix = $f.suffix; t = $f.t; t$1 = $f.t$1; value = $f.value; x = $f.x; x$1 = $f.x$1; year = $f.year; z = $f.z; zoneName = $f.zoneName; zoneOffset = $f.zoneOffset; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = layout;
		_tmp$1 = value;
		alayout = _tmp;
		avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = 1;
		day = 1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ptrType$2.nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = $ifaceNil;
			_tuple = nextStdChunk(layout);
			prefix = _tuple[0];
			std = _tuple[1];
			suffix = _tuple[2];
			stdstr = $substring(layout, prefix.length, (layout.length - suffix.length >> 0));
			_tuple$1 = skip(value, prefix);
			value = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + value)];
				}
				break;
			}
			layout = suffix;
			p = "";
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (274)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$2 = $substring(value, 0, 2);
					_tmp$3 = $substring(value, 2);
					p = _tmp$2;
					value = _tmp$3;
					_tuple$2 = atoi(p);
					year = _tuple$2[0];
					err = _tuple$2[1];
					if (year >= 69) {
						year = year + (1900) >> 0;
					} else {
						year = year + (2000) >> 0;
					}
				} else if (_1 === (273)) {
					if (value.length < 4 || !isDigit(value, 0)) {
						err = errBad;
						break;
					}
					_tmp$4 = $substring(value, 0, 4);
					_tmp$5 = $substring(value, 4);
					p = _tmp$4;
					value = _tmp$5;
					_tuple$3 = atoi(p);
					year = _tuple$3[0];
					err = _tuple$3[1];
				} else if (_1 === (258)) {
					_tuple$4 = lookup(shortMonthNames, value);
					month = _tuple$4[0];
					value = _tuple$4[1];
					err = _tuple$4[2];
					month = month + (1) >> 0;
				} else if (_1 === (257)) {
					_tuple$5 = lookup(longMonthNames, value);
					month = _tuple$5[0];
					value = _tuple$5[1];
					err = _tuple$5[2];
					month = month + (1) >> 0;
				} else if ((_1 === (259)) || (_1 === (260))) {
					_tuple$6 = getnum(value, std === 260);
					month = _tuple$6[0];
					value = _tuple$6[1];
					err = _tuple$6[2];
					if (month <= 0 || 12 < month) {
						rangeErrString = "month";
					}
				} else if (_1 === (262)) {
					_tuple$7 = lookup(shortDayNames, value);
					value = _tuple$7[1];
					err = _tuple$7[2];
				} else if (_1 === (261)) {
					_tuple$8 = lookup(longDayNames, value);
					value = _tuple$8[1];
					err = _tuple$8[2];
				} else if ((_1 === (263)) || (_1 === (264)) || (_1 === (265))) {
					if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
						value = $substring(value, 1);
					}
					_tuple$9 = getnum(value, std === 265);
					day = _tuple$9[0];
					value = _tuple$9[1];
					err = _tuple$9[2];
					if (day < 0) {
						rangeErrString = "day";
					}
				} else if (_1 === (522)) {
					_tuple$10 = getnum(value, false);
					hour = _tuple$10[0];
					value = _tuple$10[1];
					err = _tuple$10[2];
					if (hour < 0 || 24 <= hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (523)) || (_1 === (524))) {
					_tuple$11 = getnum(value, std === 524);
					hour = _tuple$11[0];
					value = _tuple$11[1];
					err = _tuple$11[2];
					if (hour < 0 || 12 < hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (525)) || (_1 === (526))) {
					_tuple$12 = getnum(value, std === 526);
					min = _tuple$12[0];
					value = _tuple$12[1];
					err = _tuple$12[2];
					if (min < 0 || 60 <= min) {
						rangeErrString = "minute";
					}
				} else if ((_1 === (527)) || (_1 === (528))) {
					_tuple$13 = getnum(value, std === 528);
					sec = _tuple$13[0];
					value = _tuple$13[1];
					err = _tuple$13[2];
					if (sec < 0 || 60 <= sec) {
						rangeErrString = "second";
						break;
					}
					if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
						_tuple$14 = nextStdChunk(layout);
						std = _tuple$14[1];
						std = std & (65535);
						if ((std === 32) || (std === 33)) {
							break;
						}
						n = 2;
						while (true) {
							if (!(n < value.length && isDigit(value, n))) { break; }
							n = n + (1) >> 0;
						}
						_tuple$15 = parseNanoseconds(value, n);
						nsec = _tuple$15[0];
						rangeErrString = _tuple$15[1];
						err = _tuple$15[2];
						value = $substring(value, n);
					}
				} else if (_1 === (531)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$6 = $substring(value, 0, 2);
					_tmp$7 = $substring(value, 2);
					p = _tmp$6;
					value = _tmp$7;
					_2 = p;
					if (_2 === ("PM")) {
						pmSet = true;
					} else if (_2 === ("AM")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if (_1 === (532)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$8 = $substring(value, 0, 2);
					_tmp$9 = $substring(value, 2);
					p = _tmp$8;
					value = _tmp$9;
					_3 = p;
					if (_3 === ("pm")) {
						pmSet = true;
					} else if (_3 === ("am")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if ((_1 === (22)) || (_1 === (25)) || (_1 === (23)) || (_1 === (24)) || (_1 === (26)) || (_1 === (27)) || (_1 === (29)) || (_1 === (30)) || (_1 === (28)) || (_1 === (31))) {
					if (((std === 22) || (std === 24) || (std === 25)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
						value = $substring(value, 1);
						z = $pkg.UTC;
						break;
					}
					_tmp$10 = "";
					_tmp$11 = "";
					_tmp$12 = "";
					_tmp$13 = "";
					sign = _tmp$10;
					hour$1 = _tmp$11;
					min$1 = _tmp$12;
					seconds = _tmp$13;
					if ((std === 25) || (std === 30)) {
						if (value.length < 6) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58))) {
							err = errBad;
							break;
						}
						_tmp$14 = $substring(value, 0, 1);
						_tmp$15 = $substring(value, 1, 3);
						_tmp$16 = $substring(value, 4, 6);
						_tmp$17 = "00";
						_tmp$18 = $substring(value, 6);
						sign = _tmp$14;
						hour$1 = _tmp$15;
						min$1 = _tmp$16;
						seconds = _tmp$17;
						value = _tmp$18;
					} else if ((std === 29) || (std === 24)) {
						if (value.length < 3) {
							err = errBad;
							break;
						}
						_tmp$19 = $substring(value, 0, 1);
						_tmp$20 = $substring(value, 1, 3);
						_tmp$21 = "00";
						_tmp$22 = "00";
						_tmp$23 = $substring(value, 3);
						sign = _tmp$19;
						hour$1 = _tmp$20;
						min$1 = _tmp$21;
						seconds = _tmp$22;
						value = _tmp$23;
					} else if ((std === 26) || (std === 31)) {
						if (value.length < 9) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
							err = errBad;
							break;
						}
						_tmp$24 = $substring(value, 0, 1);
						_tmp$25 = $substring(value, 1, 3);
						_tmp$26 = $substring(value, 4, 6);
						_tmp$27 = $substring(value, 7, 9);
						_tmp$28 = $substring(value, 9);
						sign = _tmp$24;
						hour$1 = _tmp$25;
						min$1 = _tmp$26;
						seconds = _tmp$27;
						value = _tmp$28;
					} else if ((std === 23) || (std === 28)) {
						if (value.length < 7) {
							err = errBad;
							break;
						}
						_tmp$29 = $substring(value, 0, 1);
						_tmp$30 = $substring(value, 1, 3);
						_tmp$31 = $substring(value, 3, 5);
						_tmp$32 = $substring(value, 5, 7);
						_tmp$33 = $substring(value, 7);
						sign = _tmp$29;
						hour$1 = _tmp$30;
						min$1 = _tmp$31;
						seconds = _tmp$32;
						value = _tmp$33;
					} else {
						if (value.length < 5) {
							err = errBad;
							break;
						}
						_tmp$34 = $substring(value, 0, 1);
						_tmp$35 = $substring(value, 1, 3);
						_tmp$36 = $substring(value, 3, 5);
						_tmp$37 = "00";
						_tmp$38 = $substring(value, 5);
						sign = _tmp$34;
						hour$1 = _tmp$35;
						min$1 = _tmp$36;
						seconds = _tmp$37;
						value = _tmp$38;
					}
					_tmp$39 = 0;
					_tmp$40 = 0;
					_tmp$41 = 0;
					hr = _tmp$39;
					mm = _tmp$40;
					ss = _tmp$41;
					_tuple$16 = atoi(hour$1);
					hr = _tuple$16[0];
					err = _tuple$16[1];
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$17 = atoi(min$1);
						mm = _tuple$17[0];
						err = _tuple$17[1];
					}
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$18 = atoi(seconds);
						ss = _tuple$18[0];
						err = _tuple$18[1];
					}
					zoneOffset = ($imul(((($imul(hr, 60)) + mm >> 0)), 60)) + ss >> 0;
					_4 = sign.charCodeAt(0);
					if (_4 === (43)) {
					} else if (_4 === (45)) {
						zoneOffset = -zoneOffset;
					} else {
						err = errBad;
					}
				} else if (_1 === (21)) {
					if (value.length >= 3 && $substring(value, 0, 3) === "UTC") {
						z = $pkg.UTC;
						value = $substring(value, 3);
						break;
					}
					_tuple$19 = parseTimeZone(value);
					n$1 = _tuple$19[0];
					ok = _tuple$19[1];
					if (!ok) {
						err = errBad;
						break;
					}
					_tmp$42 = $substring(value, 0, n$1);
					_tmp$43 = $substring(value, n$1);
					zoneName = _tmp$42;
					value = _tmp$43;
				} else if (_1 === (32)) {
					ndigit = 1 + ((std >> 16 >> 0)) >> 0;
					if (value.length < ndigit) {
						err = errBad;
						break;
					}
					_tuple$20 = parseNanoseconds(value, ndigit);
					nsec = _tuple$20[0];
					rangeErrString = _tuple$20[1];
					err = _tuple$20[2];
					value = $substring(value, ndigit);
				} else if (_1 === (33)) {
					if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
						break;
					}
					i = 0;
					while (true) {
						if (!(i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57)) { break; }
						i = i + (1) >> 0;
					}
					_tuple$21 = parseNanoseconds(value, 1 + i >> 0);
					nsec = _tuple$21[0];
					rangeErrString = _tuple$21[1];
					err = _tuple$21[2];
					value = $substring(value, (1 + i >> 0));
				}
			}
			if (!(rangeErrString === "")) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + (12) >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		if (day < 1 || day > daysIn(((month >> 0)), year)) {
			$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": day out of range")];
		}
		/* */ if (!(z === ptrType$2.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(z === ptrType$2.nil)) { */ case 1:
			_r = Date(year, ((month >> 0)), day, hour, min, sec, nsec, z); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return [_r, $ifaceNil];
		/* } */ case 2:
		/* */ if (!((zoneOffset === -1))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((zoneOffset === -1))) { */ case 4:
			_r$1 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			t = $clone(_r$1, Time);
			t.addSec((x = (new $Int64(0, zoneOffset)), new $Int64(-x.$high, -x.$low)));
			_r$2 = local.lookup(t.unixSec()); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$22 = _r$2;
			name = _tuple$22[0];
			offset = _tuple$22[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.setLoc(local);
				$s = -1; return [t, $ifaceNil];
			}
			t.setLoc(FixedZone(zoneName, zoneOffset));
			$s = -1; return [t, $ifaceNil];
		/* } */ case 5:
		/* */ if (!(zoneName === "")) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!(zoneName === "")) { */ case 8:
			_r$3 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			t$1 = $clone(_r$3, Time);
			_r$4 = local.lookupName(zoneName, t$1.unixSec()); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$23 = _r$4;
			offset$1 = _tuple$23[0];
			ok$1 = _tuple$23[1];
			if (ok$1) {
				t$1.addSec((x$1 = (new $Int64(0, offset$1)), new $Int64(-x$1.$high, -x$1.$low)));
				t$1.setLoc(local);
				$s = -1; return [t$1, $ifaceNil];
			}
			if (zoneName.length > 3 && $substring(zoneName, 0, 3) === "GMT") {
				_tuple$24 = atoi($substring(zoneName, 3));
				offset$1 = _tuple$24[0];
				offset$1 = $imul(offset$1, (3600));
			}
			t$1.setLoc(FixedZone(zoneName, offset$1));
			$s = -1; return [t$1, $ifaceNil];
		/* } */ case 9:
		_r$5 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, defaultLocation); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return [_r$5, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parse }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$34 = _tmp$34; $f._tmp$35 = _tmp$35; $f._tmp$36 = _tmp$36; $f._tmp$37 = _tmp$37; $f._tmp$38 = _tmp$38; $f._tmp$39 = _tmp$39; $f._tmp$4 = _tmp$4; $f._tmp$40 = _tmp$40; $f._tmp$41 = _tmp$41; $f._tmp$42 = _tmp$42; $f._tmp$43 = _tmp$43; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$17 = _tuple$17; $f._tuple$18 = _tuple$18; $f._tuple$19 = _tuple$19; $f._tuple$2 = _tuple$2; $f._tuple$20 = _tuple$20; $f._tuple$21 = _tuple$21; $f._tuple$22 = _tuple$22; $f._tuple$23 = _tuple$23; $f._tuple$24 = _tuple$24; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.alayout = alayout; $f.amSet = amSet; $f.avalue = avalue; $f.day = day; $f.defaultLocation = defaultLocation; $f.err = err; $f.hour = hour; $f.hour$1 = hour$1; $f.hr = hr; $f.i = i; $f.layout = layout; $f.local = local; $f.min = min; $f.min$1 = min$1; $f.mm = mm; $f.month = month; $f.n = n; $f.n$1 = n$1; $f.name = name; $f.ndigit = ndigit; $f.nsec = nsec; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.pmSet = pmSet; $f.prefix = prefix; $f.rangeErrString = rangeErrString; $f.sec = sec; $f.seconds = seconds; $f.sign = sign; $f.ss = ss; $f.std = std; $f.stdstr = stdstr; $f.suffix = suffix; $f.t = t; $f.t$1 = t$1; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.year = year; $f.z = z; $f.zoneName = zoneName; $f.zoneOffset = zoneOffset; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseTimeZone = function(value) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length, nUpper, ok, value;
		length = 0;
		ok = false;
		if (value.length < 3) {
			_tmp = 0;
			_tmp$1 = false;
			length = _tmp;
			ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && ($substring(value, 0, 4) === "ChST" || $substring(value, 0, 4) === "MeST")) {
			_tmp$2 = 4;
			_tmp$3 = true;
			length = _tmp$2;
			ok = _tmp$3;
			return [length, ok];
		}
		if ($substring(value, 0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length;
			_tmp$5 = true;
			length = _tmp$4;
			ok = _tmp$5;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (true) {
			if (!(nUpper < 6)) { break; }
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + (1) >> 0;
		}
		_1 = nUpper;
		if ((_1 === (0)) || (_1 === (1)) || (_1 === (2)) || (_1 === (6))) {
			_tmp$6 = 0;
			_tmp$7 = false;
			length = _tmp$6;
			ok = _tmp$7;
			return [length, ok];
		} else if (_1 === (5)) {
			if (value.charCodeAt(4) === 84) {
				_tmp$8 = 5;
				_tmp$9 = true;
				length = _tmp$8;
				ok = _tmp$9;
				return [length, ok];
			}
		} else if (_1 === (4)) {
			if ((value.charCodeAt(3) === 84) || $substring(value, 0, 4) === "WITA") {
				_tmp$10 = 4;
				_tmp$11 = true;
				length = _tmp$10;
				ok = _tmp$11;
				return [length, ok];
			}
		} else if (_1 === (3)) {
			_tmp$12 = 3;
			_tmp$13 = true;
			length = _tmp$12;
			ok = _tmp$13;
			return [length, ok];
		}
		_tmp$14 = 0;
		_tmp$15 = false;
		length = _tmp$14;
		ok = _tmp$15;
		return [length, ok];
	};
	parseGMT = function(value) {
		var _tuple, err, rem, sign, value, x;
		value = $substring(value, 3);
		if (value.length === 0) {
			return 3;
		}
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 3;
		}
		_tuple = leadingInt($substring(value, 1));
		x = _tuple[0];
		rem = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 3;
		}
		if (sign === 45) {
			x = new $Int64(-x.$high, -x.$low);
		}
		if ((x.$high === 0 && x.$low === 0) || (x.$high < -1 || (x.$high === -1 && x.$low < 4294967282)) || (0 < x.$high || (0 === x.$high && 12 < x.$low))) {
			return 3;
		}
		return (3 + value.length >> 0) - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var _tuple, err, i, nbytes, ns, rangeErrString, scaleDigits, value;
		ns = 0;
		rangeErrString = "";
		err = $ifaceNil;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		_tuple = atoi($substring(value, 1, nbytes));
		ns = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (true) {
			if (!(i < scaleDigits)) { break; }
			ns = $imul(ns, (10));
			i = i + (1) >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, c, err, i, rem, s, x, x$1, x$2, x$3;
		x = new $Int64(0, 0);
		rem = "";
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x.$high > 214748364 || (x.$high === 214748364 && x.$low > 3435973836))) {
				_tmp = new $Int64(0, 0);
				_tmp$1 = "";
				_tmp$2 = errLeadingInt;
				x = _tmp;
				rem = _tmp$1;
				err = _tmp$2;
				return [x, rem, err];
			}
			x = (x$1 = (x$2 = $mul64(x, new $Int64(0, 10)), x$3 = (new $Int64(0, c)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), new $Int64(x$1.$high - 0, x$1.$low - 48));
			if ((x.$high < 0 || (x.$high === 0 && x.$low < 0))) {
				_tmp$3 = new $Int64(0, 0);
				_tmp$4 = "";
				_tmp$5 = errLeadingInt;
				x = _tmp$3;
				rem = _tmp$4;
				err = _tmp$5;
				return [x, rem, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$6 = x;
		_tmp$7 = $substring(s, i);
		_tmp$8 = $ifaceNil;
		x = _tmp$6;
		rem = _tmp$7;
		err = _tmp$8;
		return [x, rem, err];
	};
	Time.ptr.prototype.nsec = function() {
		var t, x;
		t = this;
		return (((x = t.wall, new $Uint64(x.$high & 0, (x.$low & 1073741823) >>> 0)).$low >> 0));
	};
	Time.prototype.nsec = function() { return this.$val.nsec(); };
	Time.ptr.prototype.sec = function() {
		var t, x, x$1, x$2, x$3;
		t = this;
		if (!((x = (x$1 = t.wall, new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			return (x$2 = ((x$3 = $shiftRightUint64($shiftLeft64(t.wall, 1), 31), new $Int64(x$3.$high, x$3.$low))), new $Int64(13 + x$2.$high, 3618733952 + x$2.$low));
		}
		return (t.ext);
	};
	Time.prototype.sec = function() { return this.$val.sec(); };
	Time.ptr.prototype.unixSec = function() {
		var t, x;
		t = this;
		return (x = t.sec(), new $Int64(x.$high + -15, x.$low + 2288912640));
	};
	Time.prototype.unixSec = function() { return this.$val.unixSec(); };
	Time.ptr.prototype.addSec = function(d) {
		var d, dsec, sec, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		t = this;
		if (!((x = (x$1 = t.wall, new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			sec = ((x$2 = $shiftRightUint64($shiftLeft64(t.wall, 1), 31), new $Int64(x$2.$high, x$2.$low)));
			dsec = new $Int64(sec.$high + d.$high, sec.$low + d.$low);
			if ((0 < dsec.$high || (0 === dsec.$high && 0 <= dsec.$low)) && (dsec.$high < 1 || (dsec.$high === 1 && dsec.$low <= 4294967295))) {
				t.wall = (x$3 = (x$4 = (x$5 = t.wall, new $Uint64(x$5.$high & 0, (x$5.$low & 1073741823) >>> 0)), x$6 = $shiftLeft64((new $Uint64(dsec.$high, dsec.$low)), 30), new $Uint64(x$4.$high | x$6.$high, (x$4.$low | x$6.$low) >>> 0)), new $Uint64(x$3.$high | 2147483648, (x$3.$low | 0) >>> 0));
				return;
			}
			t.stripMono();
		}
		t.ext = (x$7 = t.ext, x$8 = d, new $Int64(x$7.$high + x$8.$high, x$7.$low + x$8.$low));
	};
	Time.prototype.addSec = function(d) { return this.$val.addSec(d); };
	Time.ptr.prototype.setLoc = function(loc) {
		var loc, t;
		t = this;
		if (loc === utcLoc) {
			loc = ptrType$2.nil;
		}
		t.stripMono();
		t.loc = loc;
	};
	Time.prototype.setLoc = function(loc) { return this.$val.setLoc(loc); };
	Time.ptr.prototype.stripMono = function() {
		var t, x, x$1, x$2, x$3;
		t = this;
		if (!((x = (x$1 = t.wall, new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			t.ext = t.sec();
			t.wall = (x$2 = t.wall, x$3 = new $Uint64(0, 1073741823), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		}
	};
	Time.prototype.stripMono = function() { return this.$val.stripMono(); };
	Time.ptr.prototype.After = function(u) {
		var t, ts, u, us, x, x$1, x$2, x$3, x$4, x$5;
		t = this;
		if (!((x = (x$1 = (x$2 = t.wall, x$3 = u.wall, new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0)), new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			return (x$4 = t.ext, x$5 = u.ext, (x$4.$high > x$5.$high || (x$4.$high === x$5.$high && x$4.$low > x$5.$low)));
		}
		ts = t.sec();
		us = u.sec();
		return (ts.$high > us.$high || (ts.$high === us.$high && ts.$low > us.$low)) || (ts.$high === us.$high && ts.$low === us.$low) && t.nsec() > u.nsec();
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.ptr.prototype.Before = function(u) {
		var t, u, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		if (!((x = (x$1 = (x$2 = t.wall, x$3 = u.wall, new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0)), new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			return (x$4 = t.ext, x$5 = u.ext, (x$4.$high < x$5.$high || (x$4.$high === x$5.$high && x$4.$low < x$5.$low)));
		}
		return (x$6 = t.sec(), x$7 = u.sec(), (x$6.$high < x$7.$high || (x$6.$high === x$7.$high && x$6.$low < x$7.$low))) || (x$8 = t.sec(), x$9 = u.sec(), (x$8.$high === x$9.$high && x$8.$low === x$9.$low)) && t.nsec() < u.nsec();
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.ptr.prototype.Equal = function(u) {
		var t, u, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		t = this;
		if (!((x = (x$1 = (x$2 = t.wall, x$3 = u.wall, new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0)), new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			return (x$4 = t.ext, x$5 = u.ext, (x$4.$high === x$5.$high && x$4.$low === x$5.$low));
		}
		return (x$6 = t.sec(), x$7 = u.sec(), (x$6.$high === x$7.$high && x$6.$low === x$7.$low)) && (t.nsec() === u.nsec());
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var buf, m, n, x;
		m = this.$val;
		if (1 <= m && m <= 12) {
			return (x = m - 1 >> 0, ((x < 0 || x >= months.length) ? ($throwRuntimeError("index out of range"), undefined) : months[x]));
		}
		buf = $makeSlice(sliceType$3, 20);
		n = fmtInt(buf, (new $Uint64(0, m)));
		return "%!Month(" + ($bytesToString($subslice(buf, n))) + ")";
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var d;
		d = this.$val;
		return ((d < 0 || d >= days.length) ? ($throwRuntimeError("index out of range"), undefined) : days[d]);
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.ptr.prototype.IsZero = function() {
		var t, x;
		t = this;
		return (x = t.sec(), (x.$high === 0 && x.$low === 0)) && (t.nsec() === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.ptr.prototype.abs = function() {
		var _r, _r$1, _tuple, l, offset, sec, t, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; l = $f.l; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		l = t.loc;
		/* */ if (l === ptrType$2.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$2.nil || l === localLoc) { */ case 1:
			_r = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
		/* } */ case 2:
		sec = t.unixSec();
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) { */ case 6:
				sec = (x$2 = (new $Int64(0, l.cacheZone.offset)), new $Int64(sec.$high + x$2.$high, sec.$low + x$2.$low));
				$s = 8; continue;
			/* } else { */ case 7:
				_r$1 = l.lookup(sec); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				offset = _tuple[1];
				sec = (x$3 = (new $Int64(0, offset)), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
			/* } */ case 8:
		/* } */ case 5:
		$s = -1; return ((x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.abs }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.l = l; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.ptr.prototype.locabs = function() {
		var _r, _r$1, _tuple, abs, l, name, offset, sec, t, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; abs = $f.abs; l = $f.l; name = $f.name; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		abs = new $Uint64(0, 0);
		t = this;
		l = t.loc;
		/* */ if (l === ptrType$2.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$2.nil || l === localLoc) { */ case 1:
			_r = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
		/* } */ case 2:
		sec = t.unixSec();
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) { */ case 7:
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$1 = l.lookup(sec); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				name = _tuple[0];
				offset = _tuple[1];
			/* } */ case 9:
			sec = (x$2 = (new $Int64(0, offset)), new $Int64(sec.$high + x$2.$high, sec.$low + x$2.$low));
			$s = 6; continue;
		/* } else { */ case 5:
			name = "UTC";
		/* } */ case 6:
		abs = ((x$3 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$3.$high, x$3.$low)));
		$s = -1; return [name, offset, abs];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.locabs }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.abs = abs; $f.l = l; $f.name = name; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.ptr.prototype.Date = function() {
		var _r, _tuple, day, month, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; day = $f.day; month = $f.month; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		$s = -1; return [year, month, day];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Date }; } $f._r = _r; $f._tuple = _tuple; $f.day = day; $f.month = month; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.ptr.prototype.Year = function() {
		var _r, _tuple, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		$s = -1; return year;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Year }; } $f._r = _r; $f._tuple = _tuple; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.ptr.prototype.Month = function() {
		var _r, _tuple, month, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; month = $f.month; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		month = _tuple[1];
		$s = -1; return month;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Month }; } $f._r = _r; $f._tuple = _tuple; $f.month = month; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.ptr.prototype.Day = function() {
		var _r, _tuple, day, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; day = $f.day; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		day = _tuple[2];
		$s = -1; return day;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Day }; } $f._r = _r; $f._tuple = _tuple; $f.day = day; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.ptr.prototype.Weekday = function() {
		var _r, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absWeekday(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Weekday }; } $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var _q, abs, sec;
		sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
		return (((_q = ((sec.$low >> 0)) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
	};
	Time.ptr.prototype.ISOWeek = function() {
		var _q, _r, _r$1, _r$2, _r$3, _r$4, _tuple, day, dec31wday, jan1wday, month, t, wday, week, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; day = $f.day; dec31wday = $f.dec31wday; jan1wday = $f.jan1wday; month = $f.month; t = $f.t; wday = $f.wday; week = $f.week; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		week = 0;
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		yday = _tuple[3];
		_r$2 = $clone(t, Time).Weekday(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		wday = (_r$1 = (((_r$2 + 6 >> 0) >> 0)) % 7, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
		week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		jan1wday = (_r$3 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
		if (1 <= jan1wday && jan1wday <= 3) {
			week = week + (1) >> 0;
		}
		if (week === 0) {
			year = year - (1) >> 0;
			week = 52;
			if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
				week = week + (1) >> 0;
			}
		}
		if ((month === 12) && day >= 29 && wday < 3) {
			dec31wday = (_r$4 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
			if (0 <= dec31wday && dec31wday <= 2) {
				year = year + (1) >> 0;
				week = 1;
			}
		}
		$s = -1; return [year, week];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.ISOWeek }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.day = day; $f.dec31wday = dec31wday; $f.jan1wday = jan1wday; $f.month = month; $f.t = t; $f.wday = wday; $f.week = week; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.ptr.prototype.Clock = function() {
		var _r, _r$1, _tuple, hour, min, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; hour = $f.hour; min = $f.min; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		hour = 0;
		min = 0;
		sec = 0;
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absClock(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		hour = _tuple[0];
		min = _tuple[1];
		sec = _tuple[2];
		$s = -1; return [hour, min, sec];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Clock }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.hour = hour; $f.min = min; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var _q, _q$1, abs, hour, min, sec;
		hour = 0;
		min = 0;
		sec = 0;
		sec = (($div64(abs, new $Uint64(0, 86400), true).$low >> 0));
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(hour, 3600))) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(min, 60))) >> 0;
		return [hour, min, sec];
	};
	Time.ptr.prototype.Hour = function() {
		var _q, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (_q = (($div64(_r, new $Uint64(0, 86400), true).$low >> 0)) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Hour }; } $f._q = _q; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.ptr.prototype.Minute = function() {
		var _q, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (_q = (($div64(_r, new $Uint64(0, 3600), true).$low >> 0)) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Minute }; } $f._q = _q; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.ptr.prototype.Second = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (($div64(_r, new $Uint64(0, 60), true).$low >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Second }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.ptr.prototype.Nanosecond = function() {
		var t;
		t = this;
		return ((t.nsec() >> 0));
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.ptr.prototype.YearDay = function() {
		var _r, _tuple, t, yday, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; t = $f.t; yday = $f.yday; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		yday = _tuple[3];
		$s = -1; return yday + 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.YearDay }; } $f._r = _r; $f._tuple = _tuple; $f.t = t; $f.yday = yday; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var _tuple, _tuple$1, buf, d, neg, prec, u, w;
		d = this;
		buf = arrayType$3.zero();
		w = 32;
		u = (new $Uint64(d.$high, d.$low));
		neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
			prec = 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
			w = w - (1) >> 0;
			if ((u.$high === 0 && u.$low === 0)) {
				return "0s";
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
				prec = 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 110);
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
				prec = 3;
				w = w - (1) >> 0;
				$copyString($subslice(new sliceType$3(buf), w), "\xC2\xB5");
			} else {
				prec = 6;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
			}
			_tuple = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, prec);
			w = _tuple[0];
			u = _tuple[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
		} else {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
			_tuple$1 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, 9);
			w = _tuple$1[0];
			u = _tuple$1[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, (new $Uint64(0, 60)), false);
			if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
				w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 104);
					w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
		}
		return ($bytesToString($subslice(new sliceType$3(buf), w)));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var _tmp, _tmp$1, buf, digit, i, nv, nw, prec, print, v, w;
		nw = 0;
		nv = new $Uint64(0, 0);
		w = buf.$length;
		print = false;
		i = 0;
		while (true) {
			if (!(i < prec)) { break; }
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.$high === 0 && digit.$low === 0));
			if (print) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = (((digit.$low << 24 >>> 24)) + 48 << 24 >>> 24));
			}
			v = $div64(v, (new $Uint64(0, 10)), false);
			i = i + (1) >> 0;
		}
		if (print) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
		}
		_tmp = w;
		_tmp$1 = v;
		nw = _tmp;
		nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var buf, v, w;
		w = buf.$length;
		if ((v.$high === 0 && v.$low === 0)) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
		} else {
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = ((($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24)) + 48 << 24 >>> 24));
				v = $div64(v, (new $Uint64(0, 10)), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var d;
		d = this;
		return (new $Int64(d.$high, d.$low));
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Seconds = function() {
		var d, nsec, sec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return ($flatten64(sec)) + ($flatten64(nsec)) / 1e+09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return ($flatten64(min)) + ($flatten64(nsec)) / 6e+10;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return ($flatten64(hour)) + ($flatten64(nsec)) / 3.6e+12;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Duration.prototype.Truncate = function(m) {
		var d, m, x;
		d = this;
		if ((m.$high < 0 || (m.$high === 0 && m.$low <= 0))) {
			return d;
		}
		return (x = $div64(d, m, true), new Duration(d.$high - x.$high, d.$low - x.$low));
	};
	$ptrType(Duration).prototype.Truncate = function(m) { return this.$get().Truncate(m); };
	lessThanHalf = function(x, y) {
		var x, x$1, x$2, x$3, x$4, y;
		return (x$1 = (x$2 = (new $Uint64(x.$high, x.$low)), x$3 = (new $Uint64(x.$high, x.$low)), new $Uint64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), x$4 = (new $Uint64(y.$high, y.$low)), (x$1.$high < x$4.$high || (x$1.$high === x$4.$high && x$1.$low < x$4.$low)));
	};
	Duration.prototype.Round = function(m) {
		var d, d1, d1$1, m, r, x, x$1;
		d = this;
		if ((m.$high < 0 || (m.$high === 0 && m.$low <= 0))) {
			return d;
		}
		r = $div64(d, m, true);
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 0))) {
			r = new Duration(-r.$high, -r.$low);
			if (lessThanHalf(r, m)) {
				return new Duration(d.$high + r.$high, d.$low + r.$low);
			}
			d1 = (x = new Duration(d.$high - m.$high, d.$low - m.$low), new Duration(x.$high + r.$high, x.$low + r.$low));
			if ((d1.$high < d.$high || (d1.$high === d.$high && d1.$low < d.$low))) {
				return d1;
			}
			return new Duration(-2147483648, 0);
		}
		if (lessThanHalf(r, m)) {
			return new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		d1$1 = (x$1 = new Duration(d.$high + m.$high, d.$low + m.$low), new Duration(x$1.$high - r.$high, x$1.$low - r.$low));
		if ((d1$1.$high > d.$high || (d1$1.$high === d.$high && d1$1.$low > d.$low))) {
			return d1$1;
		}
		return new Duration(2147483647, 4294967295);
	};
	$ptrType(Duration).prototype.Round = function(m) { return this.$get().Round(m); };
	Time.ptr.prototype.Add = function(d) {
		var d, dsec, nsec, t, te, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		dsec = ((x = $div64(d, new Duration(0, 1000000000), false), new $Int64(x.$high, x.$low)));
		nsec = t.nsec() + (((x$1 = $div64(d, new Duration(0, 1000000000), true), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0)) >> 0;
		if (nsec >= 1000000000) {
			dsec = (x$2 = new $Int64(0, 1), new $Int64(dsec.$high + x$2.$high, dsec.$low + x$2.$low));
			nsec = nsec - (1000000000) >> 0;
		} else if (nsec < 0) {
			dsec = (x$3 = new $Int64(0, 1), new $Int64(dsec.$high - x$3.$high, dsec.$low - x$3.$low));
			nsec = nsec + (1000000000) >> 0;
		}
		t.wall = (x$4 = (x$5 = t.wall, new $Uint64(x$5.$high & ~0, (x$5.$low & ~1073741823) >>> 0)), x$6 = (new $Uint64(0, nsec)), new $Uint64(x$4.$high | x$6.$high, (x$4.$low | x$6.$low) >>> 0));
		t.addSec(dsec);
		if (!((x$7 = (x$8 = t.wall, new $Uint64(x$8.$high & 2147483648, (x$8.$low & 0) >>> 0)), (x$7.$high === 0 && x$7.$low === 0)))) {
			te = (x$9 = t.ext, x$10 = (new $Int64(d.$high, d.$low)), new $Int64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 0)) && (x$11 = (t.ext), (te.$high > x$11.$high || (te.$high === x$11.$high && te.$low > x$11.$low))) || (d.$high > 0 || (d.$high === 0 && d.$low > 0)) && (x$12 = (t.ext), (te.$high < x$12.$high || (te.$high === x$12.$high && te.$low < x$12.$low)))) {
				t.stripMono();
			} else {
				t.ext = te;
			}
		}
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.ptr.prototype.Sub = function(u) {
		var d, d$1, t, te, u, ue, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		if (!((x = (x$1 = (x$2 = t.wall, x$3 = u.wall, new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0)), new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			te = (t.ext);
			ue = (u.ext);
			d = ((x$4 = new $Int64(te.$high - ue.$high, te.$low - ue.$low), new Duration(x$4.$high, x$4.$low)));
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 0)) && (te.$high > ue.$high || (te.$high === ue.$high && te.$low > ue.$low))) {
				return new Duration(2147483647, 4294967295);
			}
			if ((d.$high > 0 || (d.$high === 0 && d.$low > 0)) && (te.$high < ue.$high || (te.$high === ue.$high && te.$low < ue.$low))) {
				return new Duration(-2147483648, 0);
			}
			return d;
		}
		d$1 = (x$5 = $mul64(((x$6 = (x$7 = t.sec(), x$8 = u.sec(), new $Int64(x$7.$high - x$8.$high, x$7.$low - x$8.$low)), new Duration(x$6.$high, x$6.$low))), new Duration(0, 1000000000)), x$9 = (new Duration(0, (t.nsec() - u.nsec() >> 0))), new Duration(x$5.$high + x$9.$high, x$5.$low + x$9.$low));
		if ($clone($clone(u, Time).Add(d$1), Time).Equal($clone(t, Time))) {
			return d$1;
		} else if ($clone(t, Time).Before($clone(u, Time))) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Time.ptr.prototype.AddDate = function(years, months$1, days$1) {
		var _r, _r$1, _r$2, _tuple, _tuple$1, day, days$1, hour, min, month, months$1, sec, t, year, years, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; day = $f.day; days$1 = $f.days$1; hour = $f.hour; min = $f.min; month = $f.month; months$1 = $f.months$1; sec = $f.sec; t = $f.t; year = $f.year; years = $f.years; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		_r$1 = $clone(t, Time).Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		hour = _tuple$1[0];
		min = _tuple$1[1];
		sec = _tuple$1[2];
		_r$2 = Date(year + years >> 0, month + ((months$1 >> 0)) >> 0, day + days$1 >> 0, hour, min, sec, ((t.nsec() >> 0)), $clone(t, Time).Location()); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AddDate }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.day = day; $f.days$1 = days$1; $f.hour = hour; $f.min = min; $f.month = month; $f.months$1 = months$1; $f.sec = sec; $f.t = t; $f.year = year; $f.years = years; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AddDate = function(years, months$1, days$1) { return this.$val.AddDate(years, months$1, days$1); };
	Time.ptr.prototype.date = function(full) {
		var _r, _r$1, _tuple, day, full, month, t, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; day = $f.day; full = $f.full; month = $f.month; t = $f.t; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absDate(_r, full); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		yday = _tuple[3];
		$s = -1; return [year, month, day, yday];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.date }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.day = day; $f.full = full; $f.month = month; $f.t = t; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var _q, abs, begin, d, day, end, full, month, n, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday, year;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x.$high, d.$low - x.$low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$1 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$1.$high, n.$low - x$1.$low));
		y = (x$2 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$2.$high, y.$low + x$2.$low));
		d = (x$3 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$3.$high, d.$low - x$3.$low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$4 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$4.$high, y.$low + x$4.$low));
		d = (x$5 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$5.$high, d.$low - x$5.$low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$6 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$6.$high, n.$low - x$6.$low));
		y = (x$7 = n, new $Uint64(y.$high + x$7.$high, y.$low + x$7.$low));
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$8.$high, d.$low - x$8.$low));
		year = (((x$9 = (x$10 = (new $Int64(y.$high, y.$low)), new $Int64(x$10.$high + -69, x$10.$low + 4075721025)), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0));
		yday = ((d.$low >> 0));
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - (1) >> 0;
			} else if ((day === 59)) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = (((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
		end = (((x$11 = month + 1 >> 0, ((x$11 < 0 || x$11 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$11])) >> 0));
		begin = 0;
		if (day >= end) {
			month = month + (1) >> 0;
			begin = end;
		} else {
			begin = ((((month < 0 || month >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[month]) >> 0));
		}
		month = month + (1) >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	daysIn = function(m, year) {
		var m, x, year;
		if ((m === 2) && isLeap(year)) {
			return 29;
		}
		return (((((m < 0 || m >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[m]) - (x = m - 1 >> 0, ((x < 0 || x >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x])) >> 0) >> 0));
	};
	unixTime = function(sec, nsec) {
		var nsec, sec;
		return new Time.ptr((new $Uint64(0, nsec)), new $Int64(sec.$high + 14, sec.$low + 2006054656), $pkg.Local);
	};
	Time.ptr.prototype.UTC = function() {
		var t;
		t = this;
		t.setLoc(utcLoc);
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.ptr.prototype.Local = function() {
		var t;
		t = this;
		t.setLoc($pkg.Local);
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.ptr.prototype.In = function(loc) {
		var loc, t;
		t = this;
		if (loc === ptrType$2.nil) {
			$panic(new $String("time: missing Location in call to Time.In"));
		}
		t.setLoc(loc);
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.ptr.prototype.Location = function() {
		var l, t;
		t = this;
		l = t.loc;
		if (l === ptrType$2.nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.ptr.prototype.Zone = function() {
		var _r, _tuple, name, offset, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; name = $f.name; offset = $f.offset; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		t = this;
		_r = t.loc.lookup(t.unixSec()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		name = _tuple[0];
		offset = _tuple[1];
		$s = -1; return [name, offset];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Zone }; } $f._r = _r; $f._tuple = _tuple; $f.name = name; $f.offset = offset; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.ptr.prototype.Unix = function() {
		var t;
		t = this;
		return t.unixSec();
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.ptr.prototype.UnixNano = function() {
		var t, x, x$1;
		t = this;
		return (x = $mul64((t.unixSec()), new $Int64(0, 1000000000)), x$1 = (new $Int64(0, t.nsec())), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.ptr.prototype.MarshalBinary = function() {
		var _q, _r, _r$1, _tuple, enc, nsec, offset, offsetMin, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; enc = $f.enc; nsec = $f.nsec; offset = $f.offset; offsetMin = $f.offsetMin; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		offsetMin = 0;
		/* */ if ($clone(t, Time).Location() === $pkg.UTC) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(t, Time).Location() === $pkg.UTC) { */ case 1:
			offsetMin = -1;
			$s = 3; continue;
		/* } else { */ case 2:
			_r = $clone(t, Time).Zone(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			offset = _tuple[1];
			if (!(((_r$1 = offset % 60, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0))) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = ((offset << 16 >> 16));
		/* } */ case 3:
		sec = t.sec();
		nsec = t.nsec();
		enc = new sliceType$3([1, (($shiftRightInt64(sec, 56).$low << 24 >>> 24)), (($shiftRightInt64(sec, 48).$low << 24 >>> 24)), (($shiftRightInt64(sec, 40).$low << 24 >>> 24)), (($shiftRightInt64(sec, 32).$low << 24 >>> 24)), (($shiftRightInt64(sec, 24).$low << 24 >>> 24)), (($shiftRightInt64(sec, 16).$low << 24 >>> 24)), (($shiftRightInt64(sec, 8).$low << 24 >>> 24)), ((sec.$low << 24 >>> 24)), (((nsec >> 24 >> 0) << 24 >>> 24)), (((nsec >> 16 >> 0) << 24 >>> 24)), (((nsec >> 8 >> 0) << 24 >>> 24)), ((nsec << 24 >>> 24)), (((offsetMin >> 8 << 16 >> 16) << 24 >>> 24)), ((offsetMin << 24 >>> 24))]);
		$s = -1; return [enc, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalBinary }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.enc = enc; $f.nsec = nsec; $f.offset = offset; $f.offsetMin = offsetMin; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.ptr.prototype.UnmarshalBinary = function(data) {
		var _r, _tuple, buf, data, localoff, nsec, offset, sec, t, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; data = $f.data; localoff = $f.localoff; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		buf = data;
		if (buf.$length === 0) {
			$s = -1; return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!(((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 1))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.$length === 15))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Int64(0, (7 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 7]))), x$7 = $shiftLeft64((new $Int64(0, (6 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 6]))), 8), new $Int64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Int64(0, (5 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 5]))), 16), new $Int64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Int64(0, (4 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 4]))), 24), new $Int64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Int64(0, (3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]))), 32), new $Int64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Int64(0, (2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]))), 40), new $Int64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Int64(0, (1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]))), 48), new $Int64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Int64(0, (0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]))), 56), new $Int64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		buf = $subslice(buf, 8);
		nsec = (((((3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]) >> 0)) | ((((2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]) >> 0)) << 8 >> 0)) | ((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) >> 0)) << 16 >> 0)) | ((((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) >> 0)) << 24 >> 0);
		buf = $subslice(buf, 4);
		offset = $imul(((((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) << 16 >> 16)) | ((((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) << 16 >> 16)) << 8 << 16 >> 16)) >> 0)), 60);
		Time.copy(t, new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil));
		t.wall = (new $Uint64(0, nsec));
		t.ext = sec;
		/* */ if (offset === -60) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (offset === -60) { */ case 1:
			t.setLoc(utcLoc);
			$s = 3; continue;
		/* } else { */ case 2:
			_r = $pkg.Local.lookup(t.unixSec()); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			localoff = _tuple[1];
			if (offset === localoff) {
				t.setLoc($pkg.Local);
			} else {
				t.setLoc(FixedZone("", offset));
			}
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalBinary }; } $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.data = data; $f.localoff = localoff; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalBinary = function(data) { return this.$val.UnmarshalBinary(data); };
	Time.ptr.prototype.GobEncode = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).MarshalBinary(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobEncode }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.ptr.prototype.GobDecode = function(data) {
		var _r, data, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; data = $f.data; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.UnmarshalBinary(data); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobDecode }; } $f._r = _r; $f.data = data; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobDecode = function(data) { return this.$val.GobDecode(data); };
	Time.ptr.prototype.MarshalJSON = function() {
		var _r, _r$1, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		y = _r;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 37);
		b = $append(b, 34);
		_r$1 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		b = _r$1;
		b = $append(b, 34);
		$s = -1; return [b, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalJSON }; } $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.ptr.prototype.UnmarshalJSON = function(data) {
		var _r, _tuple, data, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; data = $f.data; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (($bytesToString(data)) === "null") {
			$s = -1; return $ifaceNil;
		}
		err = $ifaceNil;
		_r = Parse("\"2006-01-02T15:04:05Z07:00\"", ($bytesToString(data))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		Time.copy(t, _tuple[0]);
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalJSON }; } $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalJSON = function(data) { return this.$val.UnmarshalJSON(data); };
	Time.ptr.prototype.MarshalText = function() {
		var _r, _r$1, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		y = _r;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 35);
		_r$1 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return [_r$1, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalText }; } $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.ptr.prototype.UnmarshalText = function(data) {
		var _r, _tuple, data, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; data = $f.data; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		err = $ifaceNil;
		_r = Parse("2006-01-02T15:04:05Z07:00", ($bytesToString(data))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		Time.copy(t, _tuple[0]);
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalText }; } $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalText = function(data) { return this.$val.UnmarshalText(data); };
	Unix = function(sec, nsec) {
		var n, nsec, sec, x, x$1, x$2, x$3;
		if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x = n, new $Int64(sec.$high + x.$high, sec.$low + x.$low));
			nsec = (x$1 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$1.$high, nsec.$low - x$1.$low));
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
				nsec = (x$2 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$2.$high, nsec.$low + x$2.$low));
				sec = (x$3 = new $Int64(0, 1), new $Int64(sec.$high - x$3.$high, sec.$low - x$3.$low));
			}
		}
		return unixTime(sec, (((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0)));
	};
	$pkg.Unix = Unix;
	isLeap = function(year) {
		var _r, _r$1, _r$2, year;
		return ((_r = year % 4, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$1 = year % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$2 = year % 400, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var _q, _q$1, _tmp, _tmp$1, base, hi, lo, n, n$1, nhi, nlo;
		nhi = 0;
		nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + (($imul(n, base))) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - (($imul(n$1, base))) >> 0;
		}
		_tmp = hi;
		_tmp$1 = lo;
		nhi = _tmp;
		nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, abs, d, day, end, hour, loc, m, min, month, n, nsec, offset, sec, start, t, unix, utc, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; abs = $f.abs; d = $f.d; day = $f.day; end = $f.end; hour = $f.hour; loc = $f.loc; m = $f.m; min = $f.min; month = $f.month; n = $f.n; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; start = $f.start; t = $f.t; unix = $f.unix; utc = $f.utc; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (loc === ptrType$2.nil) {
			$panic(new $String("time: missing Location in call to Date"));
		}
		m = ((month >> 0)) - 1 >> 0;
		_tuple = norm(year, m, 12);
		year = _tuple[0];
		m = _tuple[1];
		month = ((m >> 0)) + 1 >> 0;
		_tuple$1 = norm(sec, nsec, 1000000000);
		sec = _tuple$1[0];
		nsec = _tuple$1[1];
		_tuple$2 = norm(min, sec, 60);
		min = _tuple$2[0];
		sec = _tuple$2[1];
		_tuple$3 = norm(hour, min, 60);
		hour = _tuple$3[0];
		min = _tuple$3[1];
		_tuple$4 = norm(day, hour, 24);
		day = _tuple$4[0];
		hour = _tuple$4[1];
		y = ((x = (x$1 = (new $Int64(0, year)), new $Int64(x$1.$high - -69, x$1.$low - 4075721025)), new $Uint64(x.$high, x.$low)));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$2 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$2.$high, y.$low - x$2.$low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$5.$high, y.$low - x$5.$low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$6.$high, d.$low + x$6.$low));
		n = y;
		d = (x$7 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
		d = (x$8 = (new $Uint64(0, (x$9 = month - 1 >> 0, ((x$9 < 0 || x$9 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$9])))), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
		if (isLeap(year) && month >= 3) {
			d = (x$10 = new $Uint64(0, 1), new $Uint64(d.$high + x$10.$high, d.$low + x$10.$low));
		}
		d = (x$11 = (new $Uint64(0, (day - 1 >> 0))), new $Uint64(d.$high + x$11.$high, d.$low + x$11.$low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$12 = (new $Uint64(0, ((($imul(hour, 3600)) + ($imul(min, 60)) >> 0) + sec >> 0))), new $Uint64(abs.$high + x$12.$high, abs.$low + x$12.$low));
		unix = (x$13 = (new $Int64(abs.$high, abs.$low)), new $Int64(x$13.$high + -2147483647, x$13.$low + 3844486912));
		_r = loc.lookup(unix); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$5 = _r;
		offset = _tuple$5[1];
		start = _tuple$5[3];
		end = _tuple$5[4];
		/* */ if (!((offset === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((offset === 0))) { */ case 2:
				utc = (x$14 = (new $Int64(0, offset)), new $Int64(unix.$high - x$14.$high, unix.$low - x$14.$low));
				/* */ if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { $s = 5; continue; }
				/* */ if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { */ case 5:
					_r$1 = loc.lookup(new $Int64(start.$high - 0, start.$low - 1)); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$6 = _r$1;
					offset = _tuple$6[1];
					$s = 7; continue;
				/* } else if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { */ case 6:
					_r$2 = loc.lookup(end); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$7 = _r$2;
					offset = _tuple$7[1];
				/* } */ case 7:
			case 4:
			unix = (x$15 = (new $Int64(0, offset)), new $Int64(unix.$high - x$15.$high, unix.$low - x$15.$low));
		/* } */ case 3:
		t = $clone(unixTime(unix, ((nsec >> 0))), Time);
		t.setLoc(loc);
		$s = -1; return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Date }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.abs = abs; $f.d = d; $f.day = day; $f.end = end; $f.hour = hour; $f.loc = loc; $f.m = m; $f.min = min; $f.month = month; $f.n = n; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.start = start; $f.t = t; $f.unix = unix; $f.utc = utc; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Date = Date;
	Time.ptr.prototype.Truncate = function(d) {
		var _tuple, d, r, t;
		t = this;
		t.stripMono();
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple = div($clone(t, Time), d);
		r = _tuple[1];
		return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.ptr.prototype.Round = function(d) {
		var _tuple, d, r, t;
		t = this;
		t.stripMono();
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple = div($clone(t, Time), d);
		r = _tuple[1];
		if (lessThanHalf(r, d)) {
			return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
		}
		return $clone(t, Time).Add(new Duration(d.$high - r.$high, d.$low - r.$low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var _q, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, d0, d1, d1$1, neg, nsec, qmod2, r, sec, sec$1, t, tmp, u0, u0x, u1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		qmod2 = 0;
		r = new Duration(0, 0);
		neg = false;
		nsec = t.nsec();
		sec = t.sec();
		if ((sec.$high < 0 || (sec.$high === 0 && sec.$low < 0))) {
			neg = true;
			sec = new $Int64(-sec.$high, -sec.$low);
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + (1000000000) >> 0;
				sec = (x = new $Int64(0, 1), new $Int64(sec.$high - x.$high, sec.$low - x.$low));
			}
		}
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$1 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$1.$high === 0 && x$1.$low === 0))) {
			qmod2 = (((_q = nsec / (((d.$low + ((d.$high >> 31) * 4294967296)) >> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) & 1;
			r = (new Duration(0, (_r = nsec % (((d.$low + ((d.$high >> 31) * 4294967296)) >> 0)), _r === _r ? _r : $throwRuntimeError("integer divide by zero"))));
		} else if ((x$2 = $div64(d, new Duration(0, 1000000000), true), (x$2.$high === 0 && x$2.$low === 0))) {
			d1 = ((x$3 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$3.$high, x$3.$low)));
			qmod2 = (((x$4 = $div64(sec, d1, false), x$4.$low + ((x$4.$high >> 31) * 4294967296)) >> 0)) & 1;
			r = (x$5 = $mul64(((x$6 = $div64(sec, d1, true), new Duration(x$6.$high, x$6.$low))), new Duration(0, 1000000000)), x$7 = (new Duration(0, nsec)), new Duration(x$5.$high + x$7.$high, x$5.$low + x$7.$low));
		} else {
			sec$1 = (new $Uint64(sec.$high, sec.$low));
			tmp = $mul64(($shiftRightUint64(sec$1, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64((new $Uint64(sec$1.$high & 0, (sec$1.$low & 4294967295) >>> 0)), new $Uint64(0, 1000000000));
			_tmp = u0;
			_tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low);
			u0x = _tmp;
			u0 = _tmp$1;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$8 = new $Uint64(0, 1), new $Uint64(u1.$high + x$8.$high, u1.$low + x$8.$low));
			}
			_tmp$2 = u0;
			_tmp$3 = (x$9 = (new $Uint64(0, nsec)), new $Uint64(u0.$high + x$9.$high, u0.$low + x$9.$low));
			u0x = _tmp$2;
			u0 = _tmp$3;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$10 = new $Uint64(0, 1), new $Uint64(u1.$high + x$10.$high, u1.$low + x$10.$low));
			}
			d1$1 = (new $Uint64(d.$high, d.$low));
			while (true) {
				if (!(!((x$11 = $shiftRightUint64(d1$1, 63), (x$11.$high === 0 && x$11.$low === 1))))) { break; }
				d1$1 = $shiftLeft64(d1$1, (1));
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
					qmod2 = 1;
					_tmp$4 = u0;
					_tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low);
					u0x = _tmp$4;
					u0 = _tmp$5;
					if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
						u1 = (x$12 = new $Uint64(0, 1), new $Uint64(u1.$high - x$12.$high, u1.$low - x$12.$low));
					}
					u1 = (x$13 = d1$1, new $Uint64(u1.$high - x$13.$high, u1.$low - x$13.$low));
				}
				if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$14 = (new $Uint64(d.$high, d.$low)), (d0.$high === x$14.$high && d0.$low === x$14.$low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, (1));
				d0 = (x$15 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$15.$high, (d0.$low | x$15.$low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, (1));
			}
			r = (new Duration(u0.$high, u0.$low));
		}
		if (neg && !((r.$high === 0 && r.$low === 0))) {
			qmod2 = (qmod2 ^ (1)) >> 0;
			r = new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		return [qmod2, r];
	};
	Location.ptr.prototype.get = function() {
		var l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		if (l === ptrType$2.nil) {
			$s = -1; return utcLoc;
		}
		/* */ if (l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === localLoc) { */ case 1:
			$r = localOnce.Do(initLocal); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return l;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.get }; } $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.ptr.prototype.String = function() {
		var _r, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r.name;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.String }; } $f._r = _r; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = function(name, offset) {
		var l, name, offset, x;
		l = new Location.ptr(name, new sliceType([new zone.ptr(name, offset, false)]), new sliceType$1([new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);
		l.cacheZone = (x = l.zone, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		return l;
	};
	$pkg.FixedZone = FixedZone;
	Location.ptr.prototype.lookup = function(sec) {
		var _q, _r, end, hi, isDST, l, lim, lo, m, name, offset, sec, start, tx, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, zone$1, zone$2, zone$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; end = $f.end; hi = $f.hi; isDST = $f.isDST; l = $f.l; lim = $f.lim; lo = $f.lo; m = $f.m; name = $f.name; offset = $f.offset; sec = $f.sec; start = $f.start; tx = $f.tx; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; zone$1 = $f.zone$1; zone$2 = $f.zone$2; zone$3 = $f.zone$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		isDST = false;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = _r;
		if (l.zone.$length === 0) {
			name = "UTC";
			offset = 0;
			isDST = false;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			$s = -1; return [name, offset, isDST, start, end];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			isDST = zone$1.isDST;
			start = l.cacheStart;
			end = l.cacheEnd;
			$s = -1; return [name, offset, isDST, start, end];
		}
		if ((l.tx.$length === 0) || (x$2 = (x$3 = l.tx, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).when, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
			zone$2 = (x$4 = l.zone, x$5 = l.lookupFirstZone(), ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5]));
			name = zone$2.name;
			offset = zone$2.offset;
			isDST = zone$2.isDST;
			start = new $Int64(-2147483648, 0);
			if (l.tx.$length > 0) {
				end = (x$6 = l.tx, (0 >= x$6.$length ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			$s = -1; return [name, offset, isDST, start, end];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.$length;
		while (true) {
			if (!((hi - lo >> 0) > 1)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + m]).when;
			if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$7 = l.zone, x$8 = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).index, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8]));
		name = zone$3.name;
		offset = zone$3.offset;
		isDST = zone$3.isDST;
		start = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).when;
		$s = -1; return [name, offset, isDST, start, end];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookup }; } $f._q = _q; $f._r = _r; $f.end = end; $f.hi = hi; $f.isDST = isDST; $f.l = l; $f.lim = lim; $f.lo = lo; $f.m = m; $f.name = name; $f.offset = offset; $f.sec = sec; $f.start = start; $f.tx = tx; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.zone$3 = zone$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.ptr.prototype.lookupFirstZone = function() {
		var _i, _ref, l, x, x$1, x$2, x$3, x$4, x$5, zi, zi$1;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.$length > 0 && (x = l.zone, x$1 = (x$2 = l.tx, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])).index, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).isDST) {
			zi = (((x$3 = l.tx, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).index >> 0)) - 1 >> 0;
			while (true) {
				if (!(zi >= 0)) { break; }
				if (!(x$4 = l.zone, ((zi < 0 || zi >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + zi])).isDST) {
					return zi;
				}
				zi = zi - (1) >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			zi$1 = _i;
			if (!(x$5 = l.zone, ((zi$1 < 0 || zi$1 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.ptr.prototype.firstZoneUsed = function() {
		var _i, _ref, l, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			tx = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	Location.ptr.prototype.lookupName = function(name, unix) {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, i, i$1, l, nam, name, offset, offset$1, ok, unix, x, x$1, x$2, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; i = $f.i; i$1 = $f.i$1; l = $f.l; nam = $f.nam; name = $f.name; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; unix = $f.unix; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		offset = 0;
		ok = false;
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = _r;
		_ref = l.zone;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			zone$1 = (x = l.zone, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			/* */ if (zone$1.name === name) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (zone$1.name === name) { */ case 4:
				_r$1 = l.lookup((x$1 = (new $Int64(0, zone$1.offset)), new $Int64(unix.$high - x$1.$high, unix.$low - x$1.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				nam = _tuple[0];
				offset$1 = _tuple[1];
				if (nam === zone$1.name) {
					_tmp = offset$1;
					_tmp$1 = true;
					offset = _tmp;
					ok = _tmp$1;
					$s = -1; return [offset, ok];
				}
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		_ref$1 = l.zone;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			zone$2 = (x$2 = l.zone, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			if (zone$2.name === name) {
				_tmp$2 = zone$2.offset;
				_tmp$3 = true;
				offset = _tmp$2;
				ok = _tmp$3;
				$s = -1; return [offset, ok];
			}
			_i$1++;
		}
		$s = -1; return [offset, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookupName }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.i = i; $f.i$1 = i$1; $f.l = l; $f.nam = nam; $f.name = name; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.unix = unix; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Time.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "AppendFormat", name: "AppendFormat", pkg: "", typ: $funcType([sliceType$3, $String], [sliceType$3], false)}, {prop: "After", name: "After", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "abs", name: "abs", pkg: "time", typ: $funcType([], [$Uint64], false)}, {prop: "locabs", name: "locabs", pkg: "time", typ: $funcType([], [$String, $Int, $Uint64], false)}, {prop: "Date", name: "Date", pkg: "", typ: $funcType([], [$Int, Month, $Int], false)}, {prop: "Year", name: "Year", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", typ: $funcType([], [Month], false)}, {prop: "Day", name: "Day", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Weekday", name: "Weekday", pkg: "", typ: $funcType([], [Weekday], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Clock", name: "Clock", pkg: "", typ: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Hour", name: "Hour", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Minute", name: "Minute", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Second", name: "Second", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Time], [Duration], false)}, {prop: "AddDate", name: "AddDate", pkg: "", typ: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "date", name: "date", pkg: "time", typ: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "UTC", name: "UTC", pkg: "", typ: $funcType([], [Time], false)}, {prop: "Local", name: "Local", pkg: "", typ: $funcType([], [Time], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([ptrType$2], [Time], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "Zone", name: "Zone", pkg: "", typ: $funcType([], [$String, $Int], false)}, {prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Time], false)}];
	ptrType$7.methods = [{prop: "nsec", name: "nsec", pkg: "time", typ: $funcType([], [$Int32], false)}, {prop: "sec", name: "sec", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "unixSec", name: "unixSec", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "addSec", name: "addSec", pkg: "time", typ: $funcType([$Int64], [], false)}, {prop: "setLoc", name: "setLoc", pkg: "time", typ: $funcType([ptrType$2], [], false)}, {prop: "stripMono", name: "stripMono", pkg: "time", typ: $funcType([], [], false)}, {prop: "setMono", name: "setMono", pkg: "time", typ: $funcType([$Int64], [], false)}, {prop: "mono", name: "mono", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$3], [$error], false)}];
	Month.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Weekday.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Duration.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Hours", name: "Hours", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Duration], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Duration], false)}];
	ptrType$2.methods = [{prop: "get", name: "get", pkg: "time", typ: $funcType([], [ptrType$2], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "lookup", name: "lookup", pkg: "time", typ: $funcType([$Int64], [$String, $Int, $Bool, $Int64, $Int64], false)}, {prop: "lookupFirstZone", name: "lookupFirstZone", pkg: "time", typ: $funcType([], [$Int], false)}, {prop: "firstZoneUsed", name: "firstZoneUsed", pkg: "time", typ: $funcType([], [$Bool], false)}, {prop: "lookupName", name: "lookupName", pkg: "time", typ: $funcType([$String, $Int64], [$Int, $Bool], false)}];
	ParseError.init("", [{prop: "Layout", name: "Layout", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Value", name: "Value", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "LayoutElem", name: "LayoutElem", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "ValueElem", name: "ValueElem", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Message", name: "Message", anonymous: false, exported: true, typ: $String, tag: ""}]);
	Time.init("time", [{prop: "wall", name: "wall", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "ext", name: "ext", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "loc", name: "loc", anonymous: false, exported: false, typ: ptrType$2, tag: ""}]);
	Location.init("time", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "zone", name: "zone", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "tx", name: "tx", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "cacheStart", name: "cacheStart", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "cacheEnd", name: "cacheEnd", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "cacheZone", name: "cacheZone", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	zone.init("time", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "offset", name: "offset", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "isDST", name: "isDST", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	zoneTrans.init("time", [{prop: "when", name: "when", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "isstd", name: "isstd", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "isutc", name: "isutc", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		localLoc = new Location.ptr("", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		localOnce = new nosync.Once.ptr(false, false);
		zoneSources = new sliceType$2([runtime.GOROOT() + "/lib/time/zoneinfo.zip"]);
		std0x = $toNativeArray($kindInt, [260, 265, 524, 526, 528, 274]);
		longDayNames = new sliceType$2(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new sliceType$2(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new sliceType$2(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new sliceType$2(["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		months = $toNativeArray($kindString, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		days = $toNativeArray($kindString, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		daysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		utcLoc = new Location.ptr("UTC", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		errLocation = errors.New("time: invalid location name");
		badData = errors.New("malformed time zone information");
		$unused(new sliceType$2(["/usr/share/zoneinfo/", "/usr/share/lib/zoneinfo/", "/usr/lib/locale/TZ/", runtime.GOROOT() + "/lib/time/zoneinfo.zip"]));
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/poll"] = (function() {
	var $pkg = {}, $init, errors, io, runtime, atomic, syscall, time, pollDesc, TimeoutError, fdMutex, FD, ptrType, chanType, sliceType, ptrType$1, arrayType, sliceType$1, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, sliceType$2, ptrType$9, funcType, funcType$1, ptrType$10, ptrType$11, ptrType$12, ptrType$13, sliceType$3, ptrType$14, semWaiters, runtime_Semacquire, runtime_Semrelease, errClosing, consume, accept;
	errors = $packages["errors"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	pollDesc = $pkg.pollDesc = $newType(0, $kindStruct, "poll.pollDesc", true, "internal/poll", false, function(closing_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.closing = false;
			return;
		}
		this.closing = closing_;
	});
	TimeoutError = $pkg.TimeoutError = $newType(0, $kindStruct, "poll.TimeoutError", true, "internal/poll", true, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	fdMutex = $pkg.fdMutex = $newType(0, $kindStruct, "poll.fdMutex", true, "internal/poll", false, function(state_, rsema_, wsema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = new $Uint64(0, 0);
			this.rsema = 0;
			this.wsema = 0;
			return;
		}
		this.state = state_;
		this.rsema = rsema_;
		this.wsema = wsema_;
	});
	FD = $pkg.FD = $newType(0, $kindStruct, "poll.FD", true, "internal/poll", true, function(fdmu_, Sysfd_, pd_, iovecs_, csema_, IsStream_, ZeroReadIsEOF_, isFile_, isBlocking_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fdmu = new fdMutex.ptr(new $Uint64(0, 0), 0, 0);
			this.Sysfd = 0;
			this.pd = new pollDesc.ptr(false);
			this.iovecs = ptrType$3.nil;
			this.csema = 0;
			this.IsStream = false;
			this.ZeroReadIsEOF = false;
			this.isFile = false;
			this.isBlocking = false;
			return;
		}
		this.fdmu = fdmu_;
		this.Sysfd = Sysfd_;
		this.pd = pd_;
		this.iovecs = iovecs_;
		this.csema = csema_;
		this.IsStream = IsStream_;
		this.ZeroReadIsEOF = ZeroReadIsEOF_;
		this.isFile = isFile_;
		this.isBlocking = isBlocking_;
	});
	ptrType = $ptrType($Uint32);
	chanType = $chanType($Bool, false, false);
	sliceType = $sliceType(chanType);
	ptrType$1 = $ptrType($Uint64);
	arrayType = $arrayType($Uint8, 4);
	sliceType$1 = $sliceType(syscall.Iovec);
	ptrType$3 = $ptrType(sliceType$1);
	ptrType$4 = $ptrType($Uint8);
	ptrType$5 = $ptrType(FD);
	ptrType$6 = $ptrType(pollDesc);
	ptrType$7 = $ptrType(TimeoutError);
	ptrType$8 = $ptrType(fdMutex);
	sliceType$2 = $sliceType($Uint8);
	ptrType$9 = $ptrType(syscall.Stat_t);
	funcType = $funcType([$Uintptr], [], false);
	funcType$1 = $funcType([$Uintptr], [$Bool], false);
	ptrType$10 = $ptrType(syscall.Linger);
	ptrType$11 = $ptrType(syscall.IPMreqn);
	ptrType$12 = $ptrType(syscall.IPMreq);
	ptrType$13 = $ptrType(syscall.IPv6Mreq);
	sliceType$3 = $sliceType(sliceType$2);
	ptrType$14 = $ptrType(sliceType$3);
	pollDesc.ptr.prototype.init = function(fd) {
		var fd, pd;
		pd = this;
		return $ifaceNil;
	};
	pollDesc.prototype.init = function(fd) { return this.$val.init(fd); };
	pollDesc.ptr.prototype.close = function() {
		var pd;
		pd = this;
	};
	pollDesc.prototype.close = function() { return this.$val.close(); };
	pollDesc.ptr.prototype.evict = function() {
		var pd;
		pd = this;
		pd.closing = true;
	};
	pollDesc.prototype.evict = function() { return this.$val.evict(); };
	pollDesc.ptr.prototype.prepare = function(mode, isFile) {
		var isFile, mode, pd;
		pd = this;
		if (pd.closing) {
			return errClosing(isFile);
		}
		return $ifaceNil;
	};
	pollDesc.prototype.prepare = function(mode, isFile) { return this.$val.prepare(mode, isFile); };
	pollDesc.ptr.prototype.prepareRead = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.prepare(114, isFile);
	};
	pollDesc.prototype.prepareRead = function(isFile) { return this.$val.prepareRead(isFile); };
	pollDesc.ptr.prototype.prepareWrite = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.prepare(119, isFile);
	};
	pollDesc.prototype.prepareWrite = function(isFile) { return this.$val.prepareWrite(isFile); };
	pollDesc.ptr.prototype.wait = function(mode, isFile) {
		var isFile, mode, pd;
		pd = this;
		if (pd.closing) {
			return errClosing(isFile);
		}
		return $pkg.ErrTimeout;
	};
	pollDesc.prototype.wait = function(mode, isFile) { return this.$val.wait(mode, isFile); };
	pollDesc.ptr.prototype.waitRead = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.wait(114, isFile);
	};
	pollDesc.prototype.waitRead = function(isFile) { return this.$val.waitRead(isFile); };
	pollDesc.ptr.prototype.waitWrite = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.wait(119, isFile);
	};
	pollDesc.prototype.waitWrite = function(isFile) { return this.$val.waitWrite(isFile); };
	pollDesc.ptr.prototype.pollable = function() {
		return true;
	};
	pollDesc.prototype.pollable = function() { return this.$val.pollable(); };
	FD.ptr.prototype.SetDeadline = function(t) {
		var t;
		return $ifaceNil;
	};
	FD.prototype.SetDeadline = function(t) { return this.$val.SetDeadline(t); };
	FD.ptr.prototype.SetReadDeadline = function(t) {
		var t;
		return $ifaceNil;
	};
	FD.prototype.SetReadDeadline = function(t) { return this.$val.SetReadDeadline(t); };
	FD.ptr.prototype.SetWriteDeadline = function(t) {
		var t;
		return $ifaceNil;
	};
	FD.prototype.SetWriteDeadline = function(t) { return this.$val.SetWriteDeadline(t); };
	runtime_Semacquire = function(s) {
		var _entry, _key, _r, ch, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _r = $f._r; ch = $f.ch; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (s.$get() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.$get() === 0) { */ case 1:
			ch = new $Chan($Bool, 0);
			_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key)] = { k: _key, v: $append((_entry = semWaiters[ptrType.keyFor(s)], _entry !== undefined ? _entry.v : sliceType.nil), ch) };
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semacquire }; } $f._entry = _entry; $f._key = _key; $f._r = _r; $f.ch = ch; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_Semrelease = function(s) {
		var _entry, _key, ch, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; ch = $f.ch; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = semWaiters[ptrType.keyFor(s)], _entry !== undefined ? _entry.v : sliceType.nil);
		if (w.$length === 0) {
			$s = -1; return;
		}
		ch = (0 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key)] = { k: _key, v: w };
		if (w.$length === 0) {
			delete semWaiters[ptrType.keyFor(s)];
		}
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f._entry = _entry; $f._key = _key; $f.ch = ch; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	errClosing = function(isFile) {
		var isFile;
		if (isFile) {
			return $pkg.ErrFileClosing;
		}
		return $pkg.ErrNetClosing;
	};
	TimeoutError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "i/o timeout";
	};
	TimeoutError.prototype.Error = function() { return this.$val.Error(); };
	TimeoutError.ptr.prototype.Timeout = function() {
		var e;
		e = this;
		return true;
	};
	TimeoutError.prototype.Timeout = function() { return this.$val.Timeout(); };
	TimeoutError.ptr.prototype.Temporary = function() {
		var e;
		e = this;
		return true;
	};
	TimeoutError.prototype.Temporary = function() { return this.$val.Temporary(); };
	consume = function(v, n) {
		var ln0, n, v, x, x$1, x$2, x$3;
		while (true) {
			if (!(v.$get().$length > 0)) { break; }
			ln0 = (new $Int64(0, (x = v.$get(), (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).$length));
			if ((ln0.$high > n.$high || (ln0.$high === n.$high && ln0.$low > n.$low))) {
				(x$2 = v.$get(), (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0] = $subslice((x$1 = v.$get(), (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])), $flatten64(n))));
				return;
			}
			n = (x$3 = ln0, new $Int64(n.$high - x$3.$high, n.$low - x$3.$low));
			v.$set($subslice((v.$get()), 1));
		}
	};
	fdMutex.ptr.prototype.incref = function() {
		var mu, new$1, old, x, x$1;
		mu = this;
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				return false;
			}
			new$1 = new $Uint64(old.$high + 0, old.$low + 8);
			if ((x$1 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				return true;
			}
		}
	};
	fdMutex.prototype.incref = function() { return this.$val.incref(); };
	fdMutex.ptr.prototype.increfAndClose = function() {
		var mu, new$1, old, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; mu = $f.mu; new$1 = $f.new$1; old = $f.old; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mu = this;
		/* while (true) { */ case 1:
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				$s = -1; return false;
			}
			new$1 = (x$1 = new $Uint64(old.$high | 0, (old.$low | 1) >>> 0), new $Uint64(x$1.$high + 0, x$1.$low + 8));
			if ((x$2 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$2.$high === 0 && x$2.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = (x$3 = new $Uint64(2147483647, 4286578688), new $Uint64(new$1.$high & ~x$3.$high, (new$1.$low & ~x$3.$low) >>> 0));
			/* */ if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { */ case 3:
				/* while (true) { */ case 5:
					/* if (!(!((x$4 = new $Uint64(old.$high & 2047, (old.$low & 4286578688) >>> 0), (x$4.$high === 0 && x$4.$low === 0))))) { break; } */ if(!(!((x$4 = new $Uint64(old.$high & 2047, (old.$low & 4286578688) >>> 0), (x$4.$high === 0 && x$4.$low === 0))))) { $s = 6; continue; }
					old = (x$5 = new $Uint64(0, 8388608), new $Uint64(old.$high - x$5.$high, old.$low - x$5.$low));
					$r = runtime_Semrelease((mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ $s = 5; continue; case 6:
				/* while (true) { */ case 8:
					/* if (!(!((x$6 = new $Uint64(old.$high & 2147481600, (old.$low & 0) >>> 0), (x$6.$high === 0 && x$6.$low === 0))))) { break; } */ if(!(!((x$6 = new $Uint64(old.$high & 2147481600, (old.$low & 0) >>> 0), (x$6.$high === 0 && x$6.$low === 0))))) { $s = 9; continue; }
					old = (x$7 = new $Uint64(2048, 0), new $Uint64(old.$high - x$7.$high, old.$low - x$7.$low));
					$r = runtime_Semrelease((mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ $s = 8; continue; case 9:
				$s = -1; return true;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fdMutex.ptr.prototype.increfAndClose }; } $f.mu = mu; $f.new$1 = new$1; $f.old = old; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	fdMutex.prototype.increfAndClose = function() { return this.$val.increfAndClose(); };
	fdMutex.ptr.prototype.decref = function() {
		var mu, new$1, old, x, x$1;
		mu = this;
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if ((x = new $Uint64(old.$high & 0, (old.$low & 8388600) >>> 0), (x.$high === 0 && x.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = new $Uint64(old.$high - 0, old.$low - 8);
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				return (x$1 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388601) >>> 0), (x$1.$high === 0 && x$1.$low === 1));
			}
		}
	};
	fdMutex.prototype.decref = function() { return this.$val.decref(); };
	fdMutex.ptr.prototype.rwlock = function(read) {
		var _tmp, _tmp$1, _tmp$2, mu, mutexBit, mutexMask, mutexSema, mutexWait, new$1, old, read, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; mu = $f.mu; mutexBit = $f.mutexBit; mutexMask = $f.mutexMask; mutexSema = $f.mutexSema; mutexWait = $f.mutexWait; new$1 = $f.new$1; old = $f.old; read = $f.read; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mu = this;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		_tmp$2 = new $Uint64(0, 0);
		mutexBit = _tmp;
		mutexWait = _tmp$1;
		mutexMask = _tmp$2;
		mutexSema = ptrType.nil;
		if (read) {
			mutexBit = new $Uint64(0, 2);
			mutexWait = new $Uint64(0, 8388608);
			mutexMask = new $Uint64(2047, 4286578688);
			mutexSema = (mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)));
		} else {
			mutexBit = new $Uint64(0, 4);
			mutexWait = new $Uint64(2048, 0);
			mutexMask = new $Uint64(2147481600, 0);
			mutexSema = (mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)));
		}
		/* while (true) { */ case 1:
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				$s = -1; return false;
			}
			new$1 = new $Uint64(0, 0);
			if ((x$1 = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				new$1 = (x$2 = new $Uint64(old.$high | mutexBit.$high, (old.$low | mutexBit.$low) >>> 0), new $Uint64(x$2.$high + 0, x$2.$low + 8));
				if ((x$3 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$3.$high === 0 && x$3.$low === 0))) {
					$panic(new $String("inconsistent poll.fdMutex"));
				}
			} else {
				new$1 = new $Uint64(old.$high + mutexWait.$high, old.$low + mutexWait.$low);
				if ((x$4 = new $Uint64(new$1.$high & mutexMask.$high, (new$1.$low & mutexMask.$low) >>> 0), (x$4.$high === 0 && x$4.$low === 0))) {
					$panic(new $String("inconsistent poll.fdMutex"));
				}
			}
			/* */ if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { */ case 3:
				if ((x$5 = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0))) {
					$s = -1; return true;
				}
				$r = runtime_Semacquire(mutexSema); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fdMutex.ptr.prototype.rwlock }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f.mu = mu; $f.mutexBit = mutexBit; $f.mutexMask = mutexMask; $f.mutexSema = mutexSema; $f.mutexWait = mutexWait; $f.new$1 = new$1; $f.old = old; $f.read = read; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	fdMutex.prototype.rwlock = function(read) { return this.$val.rwlock(read); };
	fdMutex.ptr.prototype.rwunlock = function(read) {
		var _tmp, _tmp$1, _tmp$2, mu, mutexBit, mutexMask, mutexSema, mutexWait, new$1, old, read, x, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; mu = $f.mu; mutexBit = $f.mutexBit; mutexMask = $f.mutexMask; mutexSema = $f.mutexSema; mutexWait = $f.mutexWait; new$1 = $f.new$1; old = $f.old; read = $f.read; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mu = this;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		_tmp$2 = new $Uint64(0, 0);
		mutexBit = _tmp;
		mutexWait = _tmp$1;
		mutexMask = _tmp$2;
		mutexSema = ptrType.nil;
		if (read) {
			mutexBit = new $Uint64(0, 2);
			mutexWait = new $Uint64(0, 8388608);
			mutexMask = new $Uint64(2047, 4286578688);
			mutexSema = (mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)));
		} else {
			mutexBit = new $Uint64(0, 4);
			mutexWait = new $Uint64(2048, 0);
			mutexMask = new $Uint64(2147481600, 0);
			mutexSema = (mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)));
		}
		/* while (true) { */ case 1:
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if ((x = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x.$high === 0 && x.$low === 0)) || (x$1 = new $Uint64(old.$high & 0, (old.$low & 8388600) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = (x$2 = new $Uint64(old.$high & ~mutexBit.$high, (old.$low & ~mutexBit.$low) >>> 0), new $Uint64(x$2.$high - 0, x$2.$low - 8));
			if (!((x$3 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$3.$high === 0 && x$3.$low === 0)))) {
				new$1 = (x$4 = mutexWait, new $Uint64(new$1.$high - x$4.$high, new$1.$low - x$4.$low));
			}
			/* */ if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { */ case 3:
				/* */ if (!((x$5 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0)))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!((x$5 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0)))) { */ case 5:
					$r = runtime_Semrelease(mutexSema); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
				$s = -1; return (x$6 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388601) >>> 0), (x$6.$high === 0 && x$6.$low === 1));
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fdMutex.ptr.prototype.rwunlock }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f.mu = mu; $f.mutexBit = mutexBit; $f.mutexMask = mutexMask; $f.mutexSema = mutexSema; $f.mutexWait = mutexWait; $f.new$1 = new$1; $f.old = old; $f.read = read; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	fdMutex.prototype.rwunlock = function(read) { return this.$val.rwunlock(read); };
	FD.ptr.prototype.incref = function() {
		var fd;
		fd = this;
		if (!fd.fdmu.incref()) {
			return errClosing(fd.isFile);
		}
		return $ifaceNil;
	};
	FD.prototype.incref = function() { return this.$val.incref(); };
	FD.ptr.prototype.decref = function() {
		var _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		/* */ if (fd.fdmu.decref()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (fd.fdmu.decref()) { */ case 1:
			_r = fd.destroy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.decref }; } $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.decref = function() { return this.$val.decref(); };
	FD.ptr.prototype.readLock = function() {
		var _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwlock(true); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return errClosing(fd.isFile);
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.readLock }; } $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.readLock = function() { return this.$val.readLock(); };
	FD.ptr.prototype.readUnlock = function() {
		var _r, _r$1, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwunlock(true); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			_r$1 = fd.destroy(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.readUnlock }; } $f._r = _r; $f._r$1 = _r$1; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.readUnlock = function() { return this.$val.readUnlock(); };
	FD.ptr.prototype.writeLock = function() {
		var _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwlock(false); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return errClosing(fd.isFile);
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.writeLock }; } $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.writeLock = function() { return this.$val.writeLock(); };
	FD.ptr.prototype.writeUnlock = function() {
		var _r, _r$1, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwunlock(false); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			_r$1 = fd.destroy(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.writeUnlock }; } $f._r = _r; $f._r$1 = _r$1; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.writeUnlock = function() { return this.$val.writeUnlock(); };
	FD.ptr.prototype.eofError = function(n, err) {
		var err, fd, n;
		fd = this;
		if ((n === 0) && $interfaceIsEqual(err, $ifaceNil) && fd.ZeroReadIsEOF) {
			return io.EOF;
		}
		return err;
	};
	FD.prototype.eofError = function(n, err) { return this.$val.eofError(n, err); };
	FD.ptr.prototype.Fchmod = function(mode) {
		var err, fd, mode, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; mode = $f.mode; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fchmod(fd.Sysfd, mode);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fchmod }; } $f.err = err; $f.fd = fd; $f.mode = mode; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fchmod = function(mode) { return this.$val.Fchmod(mode); };
	FD.ptr.prototype.Fchown = function(uid, gid) {
		var err, fd, gid, uid, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; gid = $f.gid; uid = $f.uid; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fchown(fd.Sysfd, uid, gid);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fchown }; } $f.err = err; $f.fd = fd; $f.gid = gid; $f.uid = uid; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fchown = function(uid, gid) { return this.$val.Fchown(uid, gid); };
	FD.ptr.prototype.Ftruncate = function(size) {
		var err, fd, size, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; size = $f.size; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Ftruncate(fd.Sysfd, size);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Ftruncate }; } $f.err = err; $f.fd = fd; $f.size = size; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Ftruncate = function(size) { return this.$val.Ftruncate(size); };
	FD.ptr.prototype.Fsync = function() {
		var err, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fsync(fd.Sysfd);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fsync }; } $f.err = err; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fsync = function() { return this.$val.Fsync(); };
	FD.ptr.prototype.Init = function(net, pollable) {
		var fd, net, pollable;
		fd = this;
		if (net === "file") {
			fd.isFile = true;
		}
		if (!pollable) {
			fd.isBlocking = true;
			return $ifaceNil;
		}
		return fd.pd.init(fd);
	};
	FD.prototype.Init = function(net, pollable) { return this.$val.Init(net, pollable); };
	FD.ptr.prototype.destroy = function() {
		var _r, err, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		fd.pd.close();
		_r = $pkg.CloseFunc(fd.Sysfd); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		fd.Sysfd = -1;
		$r = runtime_Semrelease((fd.$ptr_csema || (fd.$ptr_csema = new ptrType(function() { return this.$target.csema; }, function($v) { this.$target.csema = $v; }, fd)))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.destroy }; } $f._r = _r; $f.err = err; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.destroy = function() { return this.$val.destroy(); };
	FD.ptr.prototype.Close = function() {
		var _r, _r$1, err, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; err = $f.err; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.increfAndClose(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return errClosing(fd.isFile);
		/* } */ case 2:
		fd.pd.evict();
		_r$1 = fd.decref(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		/* */ if (!fd.isBlocking) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!fd.isBlocking) { */ case 5:
			$r = runtime_Semacquire((fd.$ptr_csema || (fd.$ptr_csema = new ptrType(function() { return this.$target.csema; }, function($v) { this.$target.csema = $v; }, fd)))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Close }; } $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.Close = function() { return this.$val.Close(); };
	FD.ptr.prototype.Shutdown = function(how) {
		var err, fd, how, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; how = $f.how; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Shutdown(fd.Sysfd, how);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Shutdown }; } $f.err = err; $f.fd = fd; $f.how = how; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Shutdown = function(how) { return this.$val.Shutdown(how); };
	FD.ptr.prototype.SetBlocking = function() {
		var err, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		fd.isBlocking = true;
		$s = -1; return syscall.SetNonblock(fd.Sysfd, false);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetBlocking }; } $f.err = err; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetBlocking = function() { return this.$val.SetBlocking(); };
	FD.ptr.prototype.Read = function(p) {
		var _r, _tuple, err, err$1, err$2, fd, n, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; n = $f.n; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		if (p.$length === 0) {
			$s = -1; return [0, $ifaceNil];
		}
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, err$1];
		}
		if (fd.IsStream && p.$length > 1073741824) {
			p = $subslice(p, 0, 1073741824);
		}
		while (true) {
			_tuple = syscall.Read(fd.Sysfd, p);
			n = _tuple[0];
			err$2 = _tuple[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						continue;
					}
				}
				if (false && $interfaceIsEqual(err$2, new syscall.Errno(4))) {
					continue;
				}
			}
			err$2 = fd.eofError(n, err$2);
			$s = -1; return [n, err$2];
		}
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Read }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.n = n; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Read = function(p) { return this.$val.Read(p); };
	FD.ptr.prototype.Pread = function(p, off) {
		var _r, _tuple, err, err$1, fd, n, off, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; fd = $f.fd; n = $f.n; off = $f.off; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		if (fd.IsStream && p.$length > 1073741824) {
			p = $subslice(p, 0, 1073741824);
		}
		_tuple = syscall.Pread(fd.Sysfd, p, off);
		n = _tuple[0];
		err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			n = 0;
		}
		_r = fd.decref(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		err$1 = fd.eofError(n, err$1);
		$s = -1; return [n, err$1];
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Pread }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.fd = fd; $f.n = n; $f.off = off; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.Pread = function(p, off) { return this.$val.Pread(p, off); };
	FD.ptr.prototype.ReadFrom = function(p) {
		var _r, _tuple, err, err$1, err$2, fd, n, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; n = $f.n; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, $ifaceNil, err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, $ifaceNil, err$1];
		}
		while (true) {
			_tuple = syscall.Recvfrom(fd.Sysfd, p, 0);
			n = _tuple[0];
			sa = _tuple[1];
			err$2 = _tuple[2];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$s = -1; return [n, sa, err$2];
		}
		$s = -1; return [0, $ifaceNil, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.ReadFrom }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.n = n; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.ReadFrom = function(p) { return this.$val.ReadFrom(p); };
	FD.ptr.prototype.ReadMsg = function(p, oob) {
		var _r, _tuple, err, err$1, err$2, fd, flags, n, oob, oobn, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; flags = $f.flags; n = $f.n; oob = $f.oob; oobn = $f.oobn; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, 0, 0, $ifaceNil, err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, 0, 0, $ifaceNil, err$1];
		}
		while (true) {
			_tuple = syscall.Recvmsg(fd.Sysfd, p, oob, 0);
			n = _tuple[0];
			oobn = _tuple[1];
			flags = _tuple[2];
			sa = _tuple[3];
			err$2 = _tuple[4];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$s = -1; return [n, oobn, flags, sa, err$2];
		}
		$s = -1; return [0, 0, 0, $ifaceNil, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, 0, $ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.ReadMsg }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.flags = flags; $f.n = n; $f.oob = oob; $f.oobn = oobn; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.ReadMsg = function(p, oob) { return this.$val.ReadMsg(p, oob); };
	FD.ptr.prototype.Write = function(p) {
		var _r, _tuple, err, err$1, err$2, fd, max, n, nn, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; max = $f.max; n = $f.n; nn = $f.nn; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, err$1];
		}
		nn = 0;
		while (true) {
			max = p.$length;
			if (fd.IsStream && (max - nn >> 0) > 1073741824) {
				max = nn + 1073741824 >> 0;
			}
			_tuple = syscall.Write(fd.Sysfd, $subslice(p, nn, max));
			n = _tuple[0];
			err$2 = _tuple[1];
			if (n > 0) {
				nn = nn + (n) >> 0;
			}
			if (nn === p.$length) {
				$s = -1; return [nn, err$2];
			}
			if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					continue;
				}
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return [nn, err$2];
			}
			if (n === 0) {
				$s = -1; return [nn, io.ErrUnexpectedEOF];
			}
		}
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Write }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.max = max; $f.n = n; $f.nn = nn; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Write = function(p) { return this.$val.Write(p); };
	FD.ptr.prototype.Pwrite = function(p, off) {
		var _tuple, err, err$1, fd, max, n, nn, off, p, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; fd = $f.fd; max = $f.max; n = $f.n; nn = $f.nn; off = $f.off; p = $f.p; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		nn = 0;
		while (true) {
			max = p.$length;
			if (fd.IsStream && (max - nn >> 0) > 1073741824) {
				max = nn + 1073741824 >> 0;
			}
			_tuple = syscall.Pwrite(fd.Sysfd, $subslice(p, nn, max), (x = (new $Int64(0, nn)), new $Int64(off.$high + x.$high, off.$low + x.$low)));
			n = _tuple[0];
			err$1 = _tuple[1];
			if (n > 0) {
				nn = nn + (n) >> 0;
			}
			if (nn === p.$length) {
				$s = -1; return [nn, err$1];
			}
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [nn, err$1];
			}
			if (n === 0) {
				$s = -1; return [nn, io.ErrUnexpectedEOF];
			}
		}
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Pwrite }; } $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.fd = fd; $f.max = max; $f.n = n; $f.nn = nn; $f.off = off; $f.p = p; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Pwrite = function(p, off) { return this.$val.Pwrite(p, off); };
	FD.ptr.prototype.WriteTo = function(p, sa) {
		var _r, _r$1, err, err$1, err$2, fd, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, err$1];
		}
		/* while (true) { */ case 2:
			_r$1 = syscall.Sendto(fd.Sysfd, p, 0, sa); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			err$2 = _r$1;
			if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 2; continue;
				}
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return [0, err$2];
			}
			$s = -1; return [p.$length, $ifaceNil];
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.WriteTo }; } $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.WriteTo = function(p, sa) { return this.$val.WriteTo(p, sa); };
	FD.ptr.prototype.WriteMsg = function(p, oob, sa) {
		var _r, _r$1, _tuple, err, err$1, err$2, fd, n, oob, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; n = $f.n; oob = $f.oob; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, 0, err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, 0, err$1];
		}
		/* while (true) { */ case 2:
			_r$1 = syscall.SendmsgN(fd.Sysfd, p, oob, sa, 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			n = _tuple[0];
			err$2 = _tuple[1];
			if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 2; continue;
				}
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return [n, 0, err$2];
			}
			$s = -1; return [n, oob.$length, err$2];
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [0, 0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.WriteMsg }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.n = n; $f.oob = oob; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.WriteMsg = function(p, oob, sa) { return this.$val.WriteMsg(p, oob, sa); };
	FD.ptr.prototype.Accept = function() {
		var _1, _r, _r$1, _tuple, err, err$1, err$2, errcall, fd, rsa, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; errcall = $f.errcall; fd = $f.fd; rsa = $f.rsa; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [-1, $ifaceNil, "", err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [-1, $ifaceNil, "", err$1];
		}
		/* while (true) { */ case 2:
			_r$1 = accept(fd.Sysfd); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			s = _tuple[0];
			rsa = _tuple[1];
			errcall = _tuple[2];
			err$2 = _tuple[3];
			if ($interfaceIsEqual(err$2, $ifaceNil)) {
				$s = -1; return [s, rsa, "", err$2];
			}
			_1 = err$2;
			if ($interfaceIsEqual(_1, new syscall.Errno((11)))) {
				if (fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 2; continue;
					}
				}
			} else if ($interfaceIsEqual(_1, new syscall.Errno((103)))) {
				/* continue; */ $s = 2; continue;
			}
			$s = -1; return [-1, $ifaceNil, errcall, err$2];
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [0, $ifaceNil, "", $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil, "", $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Accept }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.errcall = errcall; $f.fd = fd; $f.rsa = rsa; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Accept = function() { return this.$val.Accept(); };
	FD.ptr.prototype.Seek = function(offset, whence) {
		var err, fd, offset, whence, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; offset = $f.offset; whence = $f.whence; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new $Int64(0, 0), err];
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Seek(fd.Sysfd, offset, whence);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [new $Int64(0, 0), $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Seek }; } $f.err = err; $f.fd = fd; $f.offset = offset; $f.whence = whence; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	FD.ptr.prototype.ReadDirent = function(buf) {
		var _tuple, buf, err, err$1, fd, n, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; buf = $f.buf; err = $f.err; err$1 = $f.err$1; fd = $f.fd; n = $f.n; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		while (true) {
			_tuple = syscall.ReadDirent(fd.Sysfd, buf);
			n = _tuple[0];
			err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$1, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$1 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$1, $ifaceNil)) {
						continue;
					}
				}
			}
			$s = -1; return [n, err$1];
		}
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.ReadDirent }; } $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.err$1 = err$1; $f.fd = fd; $f.n = n; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.ReadDirent = function(buf) { return this.$val.ReadDirent(buf); };
	FD.ptr.prototype.Fchdir = function() {
		var err, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fchdir(fd.Sysfd);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fchdir }; } $f.err = err; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fchdir = function() { return this.$val.Fchdir(); };
	FD.ptr.prototype.Fstat = function(s) {
		var err, fd, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fstat(fd.Sysfd, s);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fstat }; } $f.err = err; $f.fd = fd; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fstat = function(s) { return this.$val.Fstat(s); };
	FD.ptr.prototype.WaitWrite = function() {
		var fd;
		fd = this;
		return fd.pd.waitWrite(fd.isFile);
	};
	FD.prototype.WaitWrite = function() { return this.$val.WaitWrite(); };
	FD.ptr.prototype.WriteOnce = function(p) {
		var _r, err, fd, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; fd = $f.fd; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		$s = -1; return syscall.Write(fd.Sysfd, p);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.WriteOnce }; } $f._r = _r; $f.err = err; $f.fd = fd; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.WriteOnce = function(p) { return this.$val.WriteOnce(p); };
	FD.ptr.prototype.RawControl = function(f) {
		var err, f, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; f = $f.f; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$r = f(((fd.Sysfd >>> 0))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.RawControl }; } $f.err = err; $f.f = f; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.RawControl = function(f) { return this.$val.RawControl(f); };
	FD.ptr.prototype.RawRead = function(f) {
		var _r, _r$1, err, err$1, err$2, f, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; f = $f.f; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		/* while (true) { */ case 2:
			_r$1 = f(((fd.Sysfd >>> 0))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1) { */ case 4:
				$s = -1; return $ifaceNil;
			/* } */ case 5:
			err$2 = fd.pd.waitRead(fd.isFile);
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return err$2;
			}
		/* } */ $s = 2; continue; case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.RawRead }; } $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.f = f; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.RawRead = function(f) { return this.$val.RawRead(f); };
	FD.ptr.prototype.RawWrite = function(f) {
		var _r, _r$1, err, err$1, err$2, f, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; f = $f.f; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		/* while (true) { */ case 2:
			_r$1 = f(((fd.Sysfd >>> 0))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1) { */ case 4:
				$s = -1; return $ifaceNil;
			/* } */ case 5:
			err$2 = fd.pd.waitWrite(fd.isFile);
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return err$2;
			}
		/* } */ $s = 2; continue; case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.RawWrite }; } $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.f = f; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.RawWrite = function(f) { return this.$val.RawWrite(f); };
	accept = function(s) {
		var _1, _r, _r$1, _r$2, _tuple, _tuple$1, err, ns, s, sa, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; ns = $f.ns; s = $f.s; sa = $f.sa; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.Accept4Func(s, 526336); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ns = _tuple[0];
		sa = _tuple[1];
		err = _tuple[2];
		_1 = err;
		if ($interfaceIsEqual(_1, $ifaceNil)) {
			$s = -1; return [ns, sa, "", $ifaceNil];
		} else if ($interfaceIsEqual(_1, new syscall.Errno((38)))) {
		} else if ($interfaceIsEqual(_1, new syscall.Errno((22)))) {
		} else if ($interfaceIsEqual(_1, new syscall.Errno((13)))) {
		} else if ($interfaceIsEqual(_1, new syscall.Errno((14)))) {
		} else {
			$s = -1; return [-1, sa, "accept4", err];
		}
		_r$1 = $pkg.AcceptFunc(s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		ns = _tuple$1[0];
		sa = _tuple$1[1];
		err = _tuple$1[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			syscall.CloseOnExec(ns);
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [-1, $ifaceNil, "accept", err];
		}
		err = syscall.SetNonblock(ns, true);
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 3:
			_r$2 = $pkg.CloseFunc(ns); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			$s = -1; return [-1, $ifaceNil, "setnonblock", err];
		/* } */ case 4:
		$s = -1; return [ns, sa, "", $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: accept }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.ns = ns; $f.s = s; $f.sa = sa; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.ptr.prototype.SetsockoptInt = function(level, name, arg) {
		var arg, err, fd, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; arg = $f.arg; err = $f.err; fd = $f.fd; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptInt(fd.Sysfd, level, name, arg);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptInt }; } $f.arg = arg; $f.err = err; $f.fd = fd; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptInt = function(level, name, arg) { return this.$val.SetsockoptInt(level, name, arg); };
	FD.ptr.prototype.SetsockoptInet4Addr = function(level, name, arg) {
		var arg, err, fd, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; arg = $f.arg; err = $f.err; fd = $f.fd; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptInet4Addr(fd.Sysfd, level, name, $clone(arg, arrayType));
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptInet4Addr }; } $f.arg = arg; $f.err = err; $f.fd = fd; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptInet4Addr = function(level, name, arg) { return this.$val.SetsockoptInet4Addr(level, name, arg); };
	FD.ptr.prototype.SetsockoptLinger = function(level, name, l) {
		var err, fd, l, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; l = $f.l; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptLinger(fd.Sysfd, level, name, l);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptLinger }; } $f.err = err; $f.fd = fd; $f.l = l; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptLinger = function(level, name, l) { return this.$val.SetsockoptLinger(level, name, l); };
	FD.ptr.prototype.SetsockoptIPMreqn = function(level, name, mreq) {
		var err, fd, level, mreq, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; level = $f.level; mreq = $f.mreq; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptIPMreqn(fd.Sysfd, level, name, mreq);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptIPMreqn }; } $f.err = err; $f.fd = fd; $f.level = level; $f.mreq = mreq; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptIPMreqn = function(level, name, mreq) { return this.$val.SetsockoptIPMreqn(level, name, mreq); };
	FD.ptr.prototype.SetsockoptByte = function(level, name, arg) {
		var arg, err, fd, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; arg = $f.arg; err = $f.err; fd = $f.fd; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptByte(fd.Sysfd, level, name, arg);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptByte }; } $f.arg = arg; $f.err = err; $f.fd = fd; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptByte = function(level, name, arg) { return this.$val.SetsockoptByte(level, name, arg); };
	FD.ptr.prototype.SetsockoptIPMreq = function(level, name, mreq) {
		var err, fd, level, mreq, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; level = $f.level; mreq = $f.mreq; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptIPMreq(fd.Sysfd, level, name, mreq);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptIPMreq }; } $f.err = err; $f.fd = fd; $f.level = level; $f.mreq = mreq; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptIPMreq = function(level, name, mreq) { return this.$val.SetsockoptIPMreq(level, name, mreq); };
	FD.ptr.prototype.SetsockoptIPv6Mreq = function(level, name, mreq) {
		var err, fd, level, mreq, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; level = $f.level; mreq = $f.mreq; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptIPv6Mreq(fd.Sysfd, level, name, mreq);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptIPv6Mreq }; } $f.err = err; $f.fd = fd; $f.level = level; $f.mreq = mreq; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptIPv6Mreq = function(level, name, mreq) { return this.$val.SetsockoptIPv6Mreq(level, name, mreq); };
	FD.ptr.prototype.Writev = function(v) {
		var _i, _r, _ref, _tuple, chunk, e0, err, err$1, err$2, fd, iovecs, maxVec, n, v, wrote, x, x$1, x$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; chunk = $f.chunk; e0 = $f.e0; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; iovecs = $f.iovecs; maxVec = $f.maxVec; n = $f.n; v = $f.v; wrote = $f.wrote; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		iovecs = [iovecs];
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new $Int64(0, 0), err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [new $Int64(0, 0), err$1];
		}
		iovecs[0] = sliceType$1.nil;
		if (!(fd.iovecs === ptrType$3.nil)) {
			iovecs[0] = fd.iovecs.$get();
		}
		maxVec = 1024;
		n = new $Int64(0, 0);
		err$2 = $ifaceNil;
		/* while (true) { */ case 2:
			/* if (!(v.$get().$length > 0)) { break; } */ if(!(v.$get().$length > 0)) { $s = 3; continue; }
			iovecs[0] = $subslice(iovecs[0], 0, 0);
			_ref = v.$get();
			_i = 0;
			/* while (true) { */ case 4:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
				chunk = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (chunk.$length === 0) {
					_i++;
					/* continue; */ $s = 4; continue;
				}
				iovecs[0] = $append(iovecs[0], new syscall.Iovec.ptr($indexPtr(chunk.$array, chunk.$offset + 0, ptrType$4), new $Uint64(0, 0)));
				if (fd.IsStream && chunk.$length > 1073741824) {
					(x = iovecs[0].$length - 1 >> 0, ((x < 0 || x >= iovecs[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : iovecs[0].$array[iovecs[0].$offset + x])).SetLen(1073741824);
					/* break; */ $s = 5; continue;
				}
				(x$1 = iovecs[0].$length - 1 >> 0, ((x$1 < 0 || x$1 >= iovecs[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : iovecs[0].$array[iovecs[0].$offset + x$1])).SetLen(chunk.$length);
				if (iovecs[0].$length === maxVec) {
					/* break; */ $s = 5; continue;
				}
				_i++;
			/* } */ $s = 4; continue; case 5:
			if (iovecs[0].$length === 0) {
				/* break; */ $s = 3; continue;
			}
			fd.iovecs = (iovecs.$ptr || (iovecs.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, iovecs)));
			_tuple = syscall.Syscall(20, ((fd.Sysfd >>> 0)), (($sliceToArray(iovecs[0]))), ((iovecs[0].$length >>> 0)));
			wrote = _tuple[0];
			e0 = _tuple[2];
			if (wrote === 4294967295) {
				wrote = 0;
			}
			$r = $pkg.TestHookDidWritev(((wrote >> 0))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			n = (x$2 = (new $Int64(0, wrote.constructor === Number ? wrote : 1)), new $Int64(n.$high + x$2.$high, n.$low + x$2.$low));
			consume(v, (new $Int64(0, wrote.constructor === Number ? wrote : 1)));
			if (e0 === 11) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 2; continue;
				}
			} else if (!((e0 === 0))) {
				err$2 = new syscall.Errno((e0));
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				/* break; */ $s = 3; continue;
			}
			if ((n.$high === 0 && n.$low === 0)) {
				err$2 = io.ErrUnexpectedEOF;
				/* break; */ $s = 3; continue;
			}
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [n, err$2];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [new $Int64(0, 0), $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Writev }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.chunk = chunk; $f.e0 = e0; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.iovecs = iovecs; $f.maxVec = maxVec; $f.n = n; $f.v = v; $f.wrote = wrote; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Writev = function(v) { return this.$val.Writev(v); };
	ptrType$6.methods = [{prop: "init", name: "init", pkg: "internal/poll", typ: $funcType([ptrType$5], [$error], false)}, {prop: "close", name: "close", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "evict", name: "evict", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "prepare", name: "prepare", pkg: "internal/poll", typ: $funcType([$Int, $Bool], [$error], false)}, {prop: "prepareRead", name: "prepareRead", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "prepareWrite", name: "prepareWrite", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "wait", name: "wait", pkg: "internal/poll", typ: $funcType([$Int, $Bool], [$error], false)}, {prop: "waitRead", name: "waitRead", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "waitWrite", name: "waitWrite", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "waitCanceled", name: "waitCanceled", pkg: "internal/poll", typ: $funcType([$Int], [], false)}, {prop: "pollable", name: "pollable", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}];
	ptrType$7.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$8.methods = [{prop: "incref", name: "incref", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "increfAndClose", name: "increfAndClose", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "decref", name: "decref", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "rwlock", name: "rwlock", pkg: "internal/poll", typ: $funcType([$Bool], [$Bool], false)}, {prop: "rwunlock", name: "rwunlock", pkg: "internal/poll", typ: $funcType([$Bool], [$Bool], false)}];
	ptrType$5.methods = [{prop: "SetDeadline", name: "SetDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetReadDeadline", name: "SetReadDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetWriteDeadline", name: "SetWriteDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "incref", name: "incref", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "decref", name: "decref", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "readLock", name: "readLock", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "readUnlock", name: "readUnlock", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "writeLock", name: "writeLock", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "writeUnlock", name: "writeUnlock", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "eofError", name: "eofError", pkg: "internal/poll", typ: $funcType([$Int, $error], [$error], false)}, {prop: "Fchmod", name: "Fchmod", pkg: "", typ: $funcType([$Uint32], [$error], false)}, {prop: "Fchown", name: "Fchown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Ftruncate", name: "Ftruncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Fsync", name: "Fsync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Init", name: "Init", pkg: "", typ: $funcType([$String, $Bool], [$error], false)}, {prop: "destroy", name: "destroy", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Shutdown", name: "Shutdown", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "SetBlocking", name: "SetBlocking", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "Pread", name: "Pread", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([sliceType$2], [$Int, syscall.Sockaddr, $error], false)}, {prop: "ReadMsg", name: "ReadMsg", pkg: "", typ: $funcType([sliceType$2, sliceType$2], [$Int, $Int, $Int, syscall.Sockaddr, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "Pwrite", name: "Pwrite", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([sliceType$2, syscall.Sockaddr], [$Int, $error], false)}, {prop: "WriteMsg", name: "WriteMsg", pkg: "", typ: $funcType([sliceType$2, sliceType$2, syscall.Sockaddr], [$Int, $Int, $error], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([], [$Int, syscall.Sockaddr, $String, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "ReadDirent", name: "ReadDirent", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "Fchdir", name: "Fchdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Fstat", name: "Fstat", pkg: "", typ: $funcType([ptrType$9], [$error], false)}, {prop: "WaitWrite", name: "WaitWrite", pkg: "", typ: $funcType([], [$error], false)}, {prop: "WriteOnce", name: "WriteOnce", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "RawControl", name: "RawControl", pkg: "", typ: $funcType([funcType], [$error], false)}, {prop: "RawRead", name: "RawRead", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "RawWrite", name: "RawWrite", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "SetsockoptInt", name: "SetsockoptInt", pkg: "", typ: $funcType([$Int, $Int, $Int], [$error], false)}, {prop: "SetsockoptInet4Addr", name: "SetsockoptInet4Addr", pkg: "", typ: $funcType([$Int, $Int, arrayType], [$error], false)}, {prop: "SetsockoptLinger", name: "SetsockoptLinger", pkg: "", typ: $funcType([$Int, $Int, ptrType$10], [$error], false)}, {prop: "SetsockoptIPMreqn", name: "SetsockoptIPMreqn", pkg: "", typ: $funcType([$Int, $Int, ptrType$11], [$error], false)}, {prop: "SetsockoptByte", name: "SetsockoptByte", pkg: "", typ: $funcType([$Int, $Int, $Uint8], [$error], false)}, {prop: "SetsockoptIPMreq", name: "SetsockoptIPMreq", pkg: "", typ: $funcType([$Int, $Int, ptrType$12], [$error], false)}, {prop: "SetsockoptIPv6Mreq", name: "SetsockoptIPv6Mreq", pkg: "", typ: $funcType([$Int, $Int, ptrType$13], [$error], false)}, {prop: "Writev", name: "Writev", pkg: "", typ: $funcType([ptrType$14], [$Int64, $error], false)}];
	pollDesc.init("internal/poll", [{prop: "closing", name: "closing", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	TimeoutError.init("", []);
	fdMutex.init("internal/poll", [{prop: "state", name: "state", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "rsema", name: "rsema", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "wsema", name: "wsema", anonymous: false, exported: false, typ: $Uint32, tag: ""}]);
	FD.init("internal/poll", [{prop: "fdmu", name: "fdmu", anonymous: false, exported: false, typ: fdMutex, tag: ""}, {prop: "Sysfd", name: "Sysfd", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "pd", name: "pd", anonymous: false, exported: false, typ: pollDesc, tag: ""}, {prop: "iovecs", name: "iovecs", anonymous: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "csema", name: "csema", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "IsStream", name: "IsStream", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "ZeroReadIsEOF", name: "ZeroReadIsEOF", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "isFile", name: "isFile", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "isBlocking", name: "isBlocking", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		semWaiters = {};
		$pkg.ErrNetClosing = errors.New("use of closed network connection");
		$pkg.ErrFileClosing = errors.New("use of closed file");
		$pkg.ErrNoDeadline = errors.New("file type does not support deadline");
		$pkg.ErrTimeout = new TimeoutError.ptr();
		$pkg.TestHookDidWritev = (function(wrote) {
			var wrote;
		});
		$pkg.Accept4Func = syscall.Accept4;
		$pkg.CloseFunc = syscall.Close;
		$pkg.AcceptFunc = syscall.Accept;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/testlog"] = (function() {
	var $pkg = {}, $init, atomic, Interface, ptrType, logger, Logger, Open, Stat;
	atomic = $packages["sync/atomic"];
	Interface = $pkg.Interface = $newType(8, $kindInterface, "testlog.Interface", true, "internal/testlog", true, null);
	ptrType = $ptrType(Interface);
	Logger = function() {
		var impl;
		impl = logger.Load();
		if ($interfaceIsEqual(impl, $ifaceNil)) {
			return $ifaceNil;
		}
		return $assertType(impl, ptrType).$get();
	};
	$pkg.Logger = Logger;
	Open = function(name) {
		var log, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; log = $f.log; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		log = Logger();
		/* */ if (!($interfaceIsEqual(log, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(log, $ifaceNil))) { */ case 1:
			$r = log.Open(name); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Open }; } $f.log = log; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Open = Open;
	Stat = function(name) {
		var log, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; log = $f.log; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		log = Logger();
		/* */ if (!($interfaceIsEqual(log, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(log, $ifaceNil))) { */ case 1:
			$r = log.Stat(name); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Stat }; } $f.log = log; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Stat = Stat;
	Interface.init([{prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Getenv", name: "Getenv", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Open", name: "Open", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([$String], [], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = atomic.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		logger = new atomic.Value.ptr($ifaceNil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, $init, errors, js, poll, testlog, io, runtime, sync, atomic, syscall, time, timeout, PathError, SyscallError, LinkError, file, dirInfo, File, FileInfo, FileMode, fileStat, sliceType, ptrType, sliceType$1, ptrType$1, sliceType$2, ptrType$2, ptrType$3, ptrType$4, sliceType$5, ptrType$12, ptrType$13, funcType$1, ptrType$15, arrayType$2, arrayType$5, ptrType$16, errFinished, lstat, runtime_args, init, runtime_beforeExit, NewSyscallError, IsNotExist, underlyingError, wrapSyscallError, isNotExist, Open, OpenFile, Chmod, sigpipe, syscallMode, chmod, fixLongPath, NewFile, newFile, epipecheck, openFileNolog, IsPathSeparator, basename, init$1, Exit, Stat, Lstat, fillFileStatFromSys, timespecToTime, statNolog, lstatNolog;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	poll = $packages["internal/poll"];
	testlog = $packages["internal/testlog"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	timeout = $pkg.timeout = $newType(8, $kindInterface, "os.timeout", true, "os", false, null);
	PathError = $pkg.PathError = $newType(0, $kindStruct, "os.PathError", true, "os", true, function(Op_, Path_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Path = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Path = Path_;
		this.Err = Err_;
	});
	SyscallError = $pkg.SyscallError = $newType(0, $kindStruct, "os.SyscallError", true, "os", true, function(Syscall_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Syscall = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Syscall = Syscall_;
		this.Err = Err_;
	});
	LinkError = $pkg.LinkError = $newType(0, $kindStruct, "os.LinkError", true, "os", true, function(Op_, Old_, New_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Old = "";
			this.New = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Old = Old_;
		this.New = New_;
		this.Err = Err_;
	});
	file = $pkg.file = $newType(0, $kindStruct, "os.file", true, "os", false, function(pfd_, name_, dirinfo_, nonblock_, stdoutOrErr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pfd = new poll.FD.ptr(new poll.fdMutex.ptr(new $Uint64(0, 0), 0, 0), 0, new poll.pollDesc.ptr(false), ptrType$12.nil, 0, false, false, false, false);
			this.name = "";
			this.dirinfo = ptrType$1.nil;
			this.nonblock = false;
			this.stdoutOrErr = false;
			return;
		}
		this.pfd = pfd_;
		this.name = name_;
		this.dirinfo = dirinfo_;
		this.nonblock = nonblock_;
		this.stdoutOrErr = stdoutOrErr_;
	});
	dirInfo = $pkg.dirInfo = $newType(0, $kindStruct, "os.dirInfo", true, "os", false, function(buf_, nbuf_, bufp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType$2.nil;
			this.nbuf = 0;
			this.bufp = 0;
			return;
		}
		this.buf = buf_;
		this.nbuf = nbuf_;
		this.bufp = bufp_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "os.File", true, "os", true, function(file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$13.nil;
			return;
		}
		this.file = file_;
	});
	FileInfo = $pkg.FileInfo = $newType(8, $kindInterface, "os.FileInfo", true, "os", true, null);
	FileMode = $pkg.FileMode = $newType(4, $kindUint32, "os.FileMode", true, "os", true, null);
	fileStat = $pkg.fileStat = $newType(0, $kindStruct, "os.fileStat", true, "os", false, function(name_, size_, mode_, modTime_, sys_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.size = new $Int64(0, 0);
			this.mode = 0;
			this.modTime = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$15.nil);
			this.sys = new syscall.Stat_t.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Uint64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), arrayType$2.zero());
			return;
		}
		this.name = name_;
		this.size = size_;
		this.mode = mode_;
		this.modTime = modTime_;
		this.sys = sys_;
	});
	sliceType = $sliceType($String);
	ptrType = $ptrType(File);
	sliceType$1 = $sliceType(FileInfo);
	ptrType$1 = $ptrType(dirInfo);
	sliceType$2 = $sliceType($Uint8);
	ptrType$2 = $ptrType(PathError);
	ptrType$3 = $ptrType(LinkError);
	ptrType$4 = $ptrType(SyscallError);
	sliceType$5 = $sliceType(syscall.Iovec);
	ptrType$12 = $ptrType(sliceType$5);
	ptrType$13 = $ptrType(file);
	funcType$1 = $funcType([ptrType$13], [$error], false);
	ptrType$15 = $ptrType(time.Location);
	arrayType$2 = $arrayType($Int64, 3);
	arrayType$5 = $arrayType($Uint8, 32);
	ptrType$16 = $ptrType(fileStat);
	runtime_args = function() {
		return $pkg.Args;
	};
	init = function() {
		var argv, i, process;
		process = $global.process;
		if (!(process === undefined)) {
			argv = process.argv;
			$pkg.Args = $makeSlice(sliceType, ($parseInt(argv.length) - 1 >> 0));
			i = 0;
			while (true) {
				if (!(i < ($parseInt(argv.length) - 1 >> 0))) { break; }
				((i < 0 || i >= $pkg.Args.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(argv[(i + 1 >> 0)], $String));
				i = i + (1) >> 0;
			}
		}
		if ($pkg.Args.$length === 0) {
			$pkg.Args = new sliceType(["?"]);
		}
	};
	runtime_beforeExit = function() {
	};
	File.ptr.prototype.Readdir = function(n) {
		var _r, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType.nil) {
			$s = -1; return [sliceType$1.nil, $pkg.ErrInvalid];
		}
		_r = f.readdir(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdir }; } $f._r = _r; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.ptr.prototype.Readdirnames = function(n) {
		var _r, _tmp, _tmp$1, _tuple, err, f, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType.nil) {
			_tmp = sliceType.nil;
			_tmp$1 = $pkg.ErrInvalid;
			names = _tmp;
			err = _tmp$1;
			$s = -1; return [names, err];
		}
		_r = f.readdirnames(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		names = _tuple[0];
		err = _tuple[1];
		$s = -1; return [names, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdirnames }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	File.ptr.prototype.readdir = function(n) {
		var _i, _r, _r$1, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, dirname, err, f, fi, filename, fip, lerr, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dirname = $f.dirname; err = $f.err; f = $f.f; fi = $f.fi; filename = $f.filename; fip = $f.fip; lerr = $f.lerr; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fi = sliceType$1.nil;
		err = $ifaceNil;
		f = this;
		dirname = f.file.name;
		if (dirname === "") {
			dirname = ".";
		}
		_r = f.Readdirnames(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		names = _tuple[0];
		err = _tuple[1];
		fi = $makeSlice(sliceType$1, 0, names.$length);
		_ref = names;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			filename = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$1 = lstat(dirname + "/" + filename); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			fip = _tuple$1[0];
			lerr = _tuple$1[1];
			if (IsNotExist(lerr)) {
				_i++;
				/* continue; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(lerr, $ifaceNil))) {
				_tmp = fi;
				_tmp$1 = lerr;
				fi = _tmp;
				err = _tmp$1;
				$s = -1; return [fi, err];
			}
			fi = $append(fi, fip);
			_i++;
		/* } */ $s = 2; continue; case 3:
		if ((fi.$length === 0) && $interfaceIsEqual(err, $ifaceNil) && n > 0) {
			err = io.EOF;
		}
		_tmp$2 = fi;
		_tmp$3 = err;
		fi = _tmp$2;
		err = _tmp$3;
		$s = -1; return [fi, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdir }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dirname = dirname; $f.err = err; $f.f = f; $f.fi = fi; $f.filename = filename; $f.fip = fip; $f.lerr = lerr; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readdir = function(n) { return this.$val.readdir(n); };
	File.ptr.prototype.readdirnames = function(n) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, d, err, errno, f, n, names, nb, nc, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; d = $f.d; err = $f.err; errno = $f.errno; f = $f.f; n = $f.n; names = $f.names; nb = $f.nb; nc = $f.nc; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f.file.dirinfo === ptrType$1.nil) {
			f.file.dirinfo = new dirInfo.ptr(sliceType$2.nil, 0, 0);
			f.file.dirinfo.buf = $makeSlice(sliceType$2, 4096);
		}
		d = f.file.dirinfo;
		size = n;
		if (size <= 0) {
			size = 100;
			n = -1;
		}
		names = $makeSlice(sliceType, 0, size);
		/* while (true) { */ case 1:
			/* if (!(!((n === 0)))) { break; } */ if(!(!((n === 0)))) { $s = 2; continue; }
			/* */ if (d.bufp >= d.nbuf) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (d.bufp >= d.nbuf) { */ case 3:
				d.bufp = 0;
				errno = $ifaceNil;
				_r = f.file.pfd.ReadDirent(d.buf); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				d.nbuf = _tuple[0];
				errno = _tuple[1];
				runtime.KeepAlive(f);
				if (!($interfaceIsEqual(errno, $ifaceNil))) {
					_tmp = names;
					_tmp$1 = wrapSyscallError("readdirent", errno);
					names = _tmp;
					err = _tmp$1;
					$s = -1; return [names, err];
				}
				if (d.nbuf <= 0) {
					/* break; */ $s = 2; continue;
				}
			/* } */ case 4:
			_tmp$2 = 0;
			_tmp$3 = 0;
			nb = _tmp$2;
			nc = _tmp$3;
			_tuple$1 = syscall.ParseDirent($subslice(d.buf, d.bufp, d.nbuf), n, names);
			nb = _tuple$1[0];
			nc = _tuple$1[1];
			names = _tuple$1[2];
			d.bufp = d.bufp + (nb) >> 0;
			n = n - (nc) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (n >= 0 && (names.$length === 0)) {
			_tmp$4 = names;
			_tmp$5 = io.EOF;
			names = _tmp$4;
			err = _tmp$5;
			$s = -1; return [names, err];
		}
		_tmp$6 = names;
		_tmp$7 = $ifaceNil;
		names = _tmp$6;
		err = _tmp$7;
		$s = -1; return [names, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdirnames }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.d = d; $f.err = err; $f.errno = errno; $f.f = f; $f.n = n; $f.names = names; $f.nb = nb; $f.nc = nc; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readdirnames = function(n) { return this.$val.readdirnames(n); };
	PathError.ptr.prototype.Error = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Op + " " + e.Path + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PathError.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	PathError.ptr.prototype.Timeout = function() {
		var _r, _tuple, _v, e, ok, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _v = $f._v; e = $f.e; ok = $f.ok; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, timeout, true);
		t = _tuple[0];
		ok = _tuple[1];
		if (!(ok)) { _v = false; $s = 1; continue s; }
		_r = t.Timeout(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PathError.ptr.prototype.Timeout }; } $f._r = _r; $f._tuple = _tuple; $f._v = _v; $f.e = e; $f.ok = ok; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	PathError.prototype.Timeout = function() { return this.$val.Timeout(); };
	SyscallError.ptr.prototype.Error = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Syscall + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SyscallError.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyscallError.prototype.Error = function() { return this.$val.Error(); };
	SyscallError.ptr.prototype.Timeout = function() {
		var _r, _tuple, _v, e, ok, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _v = $f._v; e = $f.e; ok = $f.ok; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, timeout, true);
		t = _tuple[0];
		ok = _tuple[1];
		if (!(ok)) { _v = false; $s = 1; continue s; }
		_r = t.Timeout(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SyscallError.ptr.prototype.Timeout }; } $f._r = _r; $f._tuple = _tuple; $f._v = _v; $f.e = e; $f.ok = ok; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyscallError.prototype.Timeout = function() { return this.$val.Timeout(); };
	NewSyscallError = function(syscall$1, err) {
		var err, syscall$1;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return $ifaceNil;
		}
		return new SyscallError.ptr(syscall$1, err);
	};
	$pkg.NewSyscallError = NewSyscallError;
	IsNotExist = function(err) {
		var err;
		return isNotExist(err);
	};
	$pkg.IsNotExist = IsNotExist;
	underlyingError = function(err) {
		var _ref, err, err$1, err$2, err$3;
		_ref = err;
		if ($assertType(_ref, ptrType$2, true)[1]) {
			err$1 = _ref.$val;
			return err$1.Err;
		} else if ($assertType(_ref, ptrType$3, true)[1]) {
			err$2 = _ref.$val;
			return err$2.Err;
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			err$3 = _ref.$val;
			return err$3.Err;
		}
		return err;
	};
	wrapSyscallError = function(name, err) {
		var _tuple, err, name, ok;
		_tuple = $assertType(err, syscall.Errno, true);
		ok = _tuple[1];
		if (ok) {
			err = NewSyscallError(name, err);
		}
		return err;
	};
	isNotExist = function(err) {
		var err;
		err = underlyingError(err);
		return $interfaceIsEqual(err, new syscall.Errno(2)) || $interfaceIsEqual(err, $pkg.ErrNotExist);
	};
	File.ptr.prototype.Name = function() {
		var f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	LinkError.ptr.prototype.Error = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Op + " " + e.Old + " " + e.New + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LinkError.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	LinkError.prototype.Error = function() { return this.$val.Error(); };
	File.ptr.prototype.Read = function(b) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("read");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r = f.read(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		e = _tuple[1];
		_tmp$2 = n;
		_tmp$3 = f.wrapErr("read", e);
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Read }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.ptr.prototype.ReadAt = function(b, off) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, m, n, off, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; m = $f.m; n = $f.n; off = $f.off; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("read");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp$2 = 0;
			_tmp$3 = new PathError.ptr("readat", f.file.name, errors.New("negative offset"));
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			_r = f.pread(b, off); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = f.wrapErr("read", e);
				/* break; */ $s = 2; continue;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = (new $Int64(0, m)), new $Int64(off.$high + x.$high, off.$low + x.$low));
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.ReadAt }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.m = m; $f.n = n; $f.off = off; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.ptr.prototype.Write = function(b) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r = f.write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.$length))) {
			err = io.ErrShortWrite;
		}
		epipecheck(f, e);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = f.wrapErr("write", e);
		}
		_tmp$2 = n;
		_tmp$3 = err;
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Write }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.ptr.prototype.WriteAt = function(b, off) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, m, n, off, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; m = $f.m; n = $f.n; off = $f.off; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp$2 = 0;
			_tmp$3 = new PathError.ptr("writeat", f.file.name, errors.New("negative offset"));
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			_r = f.pwrite(b, off); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = f.wrapErr("write", e);
				/* break; */ $s = 2; continue;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = (new $Int64(0, m)), new $Int64(off.$high + x.$high, off.$low + x.$low));
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.WriteAt }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.m = m; $f.n = n; $f.off = off; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.ptr.prototype.Seek = function(offset, whence) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err, err$1, f, offset, r, ret, whence, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; offset = $f.offset; r = $f.r; ret = $f.ret; whence = $f.whence; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("seek");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = err$1;
			ret = _tmp;
			err = _tmp$1;
			$s = -1; return [ret, err];
		}
		_r = f.seek(offset, whence); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		e = _tuple[1];
		if ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ptrType$1.nil) && !((r.$high === 0 && r.$low === 0))) {
			e = new syscall.Errno(21);
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = f.wrapErr("seek", e);
			ret = _tmp$2;
			err = _tmp$3;
			$s = -1; return [ret, err];
		}
		_tmp$4 = r;
		_tmp$5 = $ifaceNil;
		ret = _tmp$4;
		err = _tmp$5;
		$s = -1; return [ret, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Seek }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.offset = offset; $f.r = r; $f.ret = ret; $f.whence = whence; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	File.ptr.prototype.WriteString = function(s) {
		var _r, _tuple, err, f, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; f = $f.f; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.Write((new sliceType$2($stringToBytes(s)))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.WriteString }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Open = function(name) {
		var _r, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = OpenFile(name, 0, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Open }; } $f._r = _r; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Open = Open;
	OpenFile = function(name, flag, perm) {
		var _r, flag, name, perm, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; flag = $f.flag; name = $f.name; perm = $f.perm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = testlog.Open(name); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = openFileNolog(name, flag, perm); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: OpenFile }; } $f._r = _r; $f.flag = flag; $f.name = name; $f.perm = perm; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.OpenFile = OpenFile;
	File.ptr.prototype.wrapErr = function(op, err) {
		var err, f, op;
		f = this;
		if ($interfaceIsEqual(err, $ifaceNil) || $interfaceIsEqual(err, io.EOF)) {
			return err;
		}
		if ($interfaceIsEqual(err, poll.ErrFileClosing)) {
			err = $pkg.ErrClosed;
		}
		return new PathError.ptr(op, f.file.name, err);
	};
	File.prototype.wrapErr = function(op, err) { return this.$val.wrapErr(op, err); };
	Chmod = function(name, mode) {
		var mode, name;
		return chmod(name, mode);
	};
	$pkg.Chmod = Chmod;
	File.ptr.prototype.Chmod = function(mode) {
		var _r, f, mode, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; mode = $f.mode; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = f.chmod(mode); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Chmod }; } $f._r = _r; $f.f = f; $f.mode = mode; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	File.ptr.prototype.SetDeadline = function(t) {
		var f, t;
		f = this;
		return f.setDeadline($clone(t, time.Time));
	};
	File.prototype.SetDeadline = function(t) { return this.$val.SetDeadline(t); };
	File.ptr.prototype.SetReadDeadline = function(t) {
		var f, t;
		f = this;
		return f.setReadDeadline($clone(t, time.Time));
	};
	File.prototype.SetReadDeadline = function(t) { return this.$val.SetReadDeadline(t); };
	File.ptr.prototype.SetWriteDeadline = function(t) {
		var f, t;
		f = this;
		return f.setWriteDeadline($clone(t, time.Time));
	};
	File.prototype.SetWriteDeadline = function(t) { return this.$val.SetWriteDeadline(t); };
	sigpipe = function() {
		$throwRuntimeError("native function not implemented: os.sigpipe");
	};
	syscallMode = function(i) {
		var i, o;
		o = 0;
		o = (o | (((new FileMode(i).Perm() >>> 0)))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | (2048)) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | (1024)) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | (512)) >>> 0;
		}
		return o;
	};
	chmod = function(name, mode) {
		var e, mode, name;
		e = syscall.Chmod(fixLongPath(name), syscallMode(mode));
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chmod", name, e);
		}
		return $ifaceNil;
	};
	File.ptr.prototype.chmod = function(mode) {
		var _r, e, err, f, mode, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; mode = $f.mode; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chmod");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Fchmod(syscallMode(mode)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chmod", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.chmod }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.mode = mode; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.chmod = function(mode) { return this.$val.chmod(mode); };
	File.ptr.prototype.Chown = function(uid, gid) {
		var _r, e, err, f, gid, uid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; gid = $f.gid; uid = $f.uid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chown");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Fchown(uid, gid); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chown", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Chown }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.gid = gid; $f.uid = uid; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.ptr.prototype.Truncate = function(size) {
		var _r, e, err, f, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("truncate");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Ftruncate(size); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("truncate", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Truncate }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.ptr.prototype.Sync = function() {
		var _r, e, err, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("sync");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Fsync(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("sync", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Sync }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.ptr.prototype.Chdir = function() {
		var _r, e, err, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chdir");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Fchdir(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chdir", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Chdir }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	File.ptr.prototype.setDeadline = function(t) {
		var err, f, t;
		f = this;
		err = f.checkValid("SetDeadline");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		return f.file.pfd.SetDeadline($clone(t, time.Time));
	};
	File.prototype.setDeadline = function(t) { return this.$val.setDeadline(t); };
	File.ptr.prototype.setReadDeadline = function(t) {
		var err, f, t;
		f = this;
		err = f.checkValid("SetReadDeadline");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		return f.file.pfd.SetReadDeadline($clone(t, time.Time));
	};
	File.prototype.setReadDeadline = function(t) { return this.$val.setReadDeadline(t); };
	File.ptr.prototype.setWriteDeadline = function(t) {
		var err, f, t;
		f = this;
		err = f.checkValid("SetWriteDeadline");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		return f.file.pfd.SetWriteDeadline($clone(t, time.Time));
	};
	File.prototype.setWriteDeadline = function(t) { return this.$val.setWriteDeadline(t); };
	File.ptr.prototype.checkValid = function(op) {
		var f, op;
		f = this;
		if (f === ptrType.nil) {
			return $pkg.ErrInvalid;
		}
		return $ifaceNil;
	};
	File.prototype.checkValid = function(op) { return this.$val.checkValid(op); };
	fixLongPath = function(path) {
		var path;
		return path;
	};
	File.ptr.prototype.Fd = function() {
		var _r, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType.nil) {
			$s = -1; return 4294967295;
		}
		/* */ if (f.file.nonblock) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (f.file.nonblock) { */ case 1:
			_r = f.file.pfd.SetBlocking(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ case 2:
		$s = -1; return ((f.file.pfd.Sysfd >>> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Fd }; } $f._r = _r; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	NewFile = function(fd, name) {
		var fd, name;
		return newFile(fd, name, 0);
	};
	$pkg.NewFile = NewFile;
	newFile = function(fd, name, kind) {
		var err, err$1, f, fd, fdi, kind, name, pollable;
		fdi = ((fd >> 0));
		if (fdi < 0) {
			return ptrType.nil;
		}
		f = new File.ptr(new file.ptr(new poll.FD.ptr(new poll.fdMutex.ptr(new $Uint64(0, 0), 0, 0), fdi, new poll.pollDesc.ptr(false), ptrType$12.nil, 0, true, true, false, false), name, ptrType$1.nil, false, (fdi === 1) || (fdi === 2)));
		if (false && (kind === 1)) {
			kind = 0;
		}
		pollable = (kind === 1) || (kind === 2);
		err = f.file.pfd.Init("file", pollable);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
		} else if (pollable) {
			err$1 = syscall.SetNonblock(fdi, true);
			if ($interfaceIsEqual(err$1, $ifaceNil)) {
				f.file.nonblock = true;
			}
		}
		runtime.SetFinalizer(f.file, new funcType$1($methodExpr(ptrType$13, "close")));
		return f;
	};
	epipecheck = function(file$1, e) {
		var e, file$1;
		if ($interfaceIsEqual(e, new syscall.Errno(32)) && file$1.file.stdoutOrErr) {
			sigpipe();
		}
	};
	openFileNolog = function(name, flag, perm) {
		var _r, _tuple, _tuple$1, chmod$1, e, err, flag, name, perm, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; chmod$1 = $f.chmod$1; e = $f.e; err = $f.err; flag = $f.flag; name = $f.name; perm = $f.perm; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		chmod$1 = false;
		/* */ if (false && !(((flag & 64) === 0)) && !((((perm & 1048576) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false && !(((flag & 64) === 0)) && !((((perm & 1048576) >>> 0) === 0))) { */ case 1:
			_r = Stat(name); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			err = _tuple[1];
			if (IsNotExist(err)) {
				chmod$1 = true;
			}
		/* } */ case 2:
		r = 0;
		while (true) {
			e = $ifaceNil;
			_tuple$1 = syscall.Open(name, flag | 524288, syscallMode(perm));
			r = _tuple$1[0];
			e = _tuple$1[1];
			if ($interfaceIsEqual(e, $ifaceNil)) {
				break;
			}
			if (false && $interfaceIsEqual(e, new syscall.Errno(4))) {
				continue;
			}
			$s = -1; return [ptrType.nil, new PathError.ptr("open", name, e)];
		}
		if (chmod$1) {
			Chmod(name, perm);
		}
		if (false) {
			syscall.CloseOnExec(r);
		}
		$s = -1; return [newFile(((r >>> 0)), name, 1), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: openFileNolog }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.chmod$1 = chmod$1; $f.e = e; $f.err = err; $f.flag = flag; $f.name = name; $f.perm = perm; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.ptr.prototype.Close = function() {
		var _r, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType.nil) {
			$s = -1; return $pkg.ErrInvalid;
		}
		_r = f.file.close(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Close }; } $f._r = _r; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	file.ptr.prototype.close = function() {
		var _r, e, err, file$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; file$1 = $f.file$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		file$1 = this;
		if (file$1 === ptrType$13.nil) {
			$s = -1; return new syscall.Errno(22);
		}
		err = $ifaceNil;
		_r = file$1.pfd.Close(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			if ($interfaceIsEqual(e, poll.ErrFileClosing)) {
				e = $pkg.ErrClosed;
			}
			err = new PathError.ptr("close", file$1.name, e);
		}
		runtime.SetFinalizer(file$1, $ifaceNil);
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: file.ptr.prototype.close }; } $f._r = _r; $f.e = e; $f.err = err; $f.file$1 = file$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.read = function(b) {
		var _r, _tmp, _tmp$1, _tuple, b, err, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Read(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.read }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.ptr.prototype.pread = function(b, off) {
		var _r, _tmp, _tmp$1, _tuple, b, err, f, n, off, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; off = $f.off; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Pread(b, off); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.pread }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.off = off; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.ptr.prototype.write = function(b) {
		var _r, _tmp, _tmp$1, _tuple, b, err, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.write }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.ptr.prototype.pwrite = function(b, off) {
		var _r, _tmp, _tmp$1, _tuple, b, err, f, n, off, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; off = $f.off; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Pwrite(b, off); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.pwrite }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.off = off; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	File.ptr.prototype.seek = function(offset, whence) {
		var _r, _tmp, _tmp$1, _tuple, err, f, offset, ret, whence, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; offset = $f.offset; ret = $f.ret; whence = $f.whence; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Seek(offset, whence); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ret = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = ret;
		_tmp$1 = err;
		ret = _tmp;
		err = _tmp$1;
		$s = -1; return [ret, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.seek }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.offset = offset; $f.ret = ret; $f.whence = whence; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	IsPathSeparator = function(c) {
		var c;
		return 47 === c;
	};
	$pkg.IsPathSeparator = IsPathSeparator;
	basename = function(name) {
		var i, name;
		i = name.length - 1 >> 0;
		while (true) {
			if (!(i > 0 && (name.charCodeAt(i) === 47))) { break; }
			name = $substring(name, 0, i);
			i = i - (1) >> 0;
		}
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (name.charCodeAt(i) === 47) {
				name = $substring(name, (i + 1 >> 0));
				break;
			}
			i = i - (1) >> 0;
		}
		return name;
	};
	init$1 = function() {
		if (false) {
			return;
		}
		$pkg.Args = runtime_args();
	};
	Exit = function(code) {
		var code;
		if (code === 0) {
			runtime_beforeExit();
		}
		syscall.Exit(code);
	};
	$pkg.Exit = Exit;
	Stat = function(name) {
		var name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = testlog.Stat(name); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return statNolog(name);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Stat }; } $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Stat = Stat;
	Lstat = function(name) {
		var name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = testlog.Stat(name); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return lstatNolog(name);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Lstat }; } $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Lstat = Lstat;
	fillFileStatFromSys = function(fs, name) {
		var _1, fs, name;
		fs.name = basename(name);
		fs.size = fs.sys.Size;
		time.Time.copy(fs.modTime, timespecToTime($clone(fs.sys.Mtim, syscall.Timespec)));
		fs.mode = ((((fs.sys.Mode & 511) >>> 0) >>> 0));
		_1 = (fs.sys.Mode & 61440) >>> 0;
		if (_1 === (24576)) {
			fs.mode = (fs.mode | (67108864)) >>> 0;
		} else if (_1 === (8192)) {
			fs.mode = (fs.mode | (69206016)) >>> 0;
		} else if (_1 === (16384)) {
			fs.mode = (fs.mode | (2147483648)) >>> 0;
		} else if (_1 === (4096)) {
			fs.mode = (fs.mode | (33554432)) >>> 0;
		} else if (_1 === (40960)) {
			fs.mode = (fs.mode | (134217728)) >>> 0;
		} else if (_1 === (32768)) {
		} else if (_1 === (49152)) {
			fs.mode = (fs.mode | (16777216)) >>> 0;
		}
		if (!((((fs.sys.Mode & 1024) >>> 0) === 0))) {
			fs.mode = (fs.mode | (4194304)) >>> 0;
		}
		if (!((((fs.sys.Mode & 2048) >>> 0) === 0))) {
			fs.mode = (fs.mode | (8388608)) >>> 0;
		}
		if (!((((fs.sys.Mode & 512) >>> 0) === 0))) {
			fs.mode = (fs.mode | (1048576)) >>> 0;
		}
	};
	timespecToTime = function(ts) {
		var ts;
		return time.Unix((ts.Sec), (ts.Nsec));
	};
	File.ptr.prototype.Stat = function() {
		var _r, err, f, fs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; f = $f.f; fs = $f.fs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fs = [fs];
		f = this;
		if (f === ptrType.nil) {
			$s = -1; return [$ifaceNil, $pkg.ErrInvalid];
		}
		fs[0] = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$15.nil), new syscall.Stat_t.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Uint64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), arrayType$2.zero()));
		_r = f.file.pfd.Fstat(fs[0].sys); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, new PathError.ptr("stat", f.file.name, err)];
		}
		fillFileStatFromSys(fs[0], f.file.name);
		$s = -1; return [fs[0], $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Stat }; } $f._r = _r; $f.err = err; $f.f = f; $f.fs = fs; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	statNolog = function(name) {
		var err, fs, name;
		fs = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$15.nil), new syscall.Stat_t.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Uint64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), arrayType$2.zero()));
		err = syscall.Stat(name, fs.sys);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("stat", name, err)];
		}
		fillFileStatFromSys(fs, name);
		return [fs, $ifaceNil];
	};
	lstatNolog = function(name) {
		var err, fs, name;
		fs = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$15.nil), new syscall.Stat_t.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Uint64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), arrayType$2.zero()));
		err = syscall.Lstat(name, fs.sys);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("lstat", name, err)];
		}
		fillFileStatFromSys(fs, name);
		return [fs, $ifaceNil];
	};
	FileMode.prototype.String = function() {
		var _i, _i$1, _ref, _ref$1, _rune, _rune$1, buf, c, c$1, i, i$1, m, w, y, y$1;
		m = this.$val;
		buf = arrayType$5.zero();
		w = 0;
		_ref = "dalTLDpSugct";
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = (((31 - i >> 0) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = ((c << 24 >>> 24)));
				w = w + (1) >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			w = w + (1) >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.length)) { break; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = (((8 - i$1 >> 0) >>> 0)), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = ((c$1 << 24 >>> 24)));
			} else {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			}
			w = w + (1) >> 0;
			_i$1 += _rune$1[1];
		}
		return ($bytesToString($subslice(new sliceType$2(buf), 0, w)));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var m;
		m = this.$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var m;
		m = this.$val;
		return ((m & 2399141888) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var m;
		m = this.$val;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	fileStat.ptr.prototype.Name = function() {
		var fs;
		fs = this;
		return fs.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.ptr.prototype.IsDir = function() {
		var fs;
		fs = this;
		return new FileMode(fs.Mode()).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	fileStat.ptr.prototype.Size = function() {
		var fs;
		fs = this;
		return fs.size;
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.ptr.prototype.Mode = function() {
		var fs;
		fs = this;
		return fs.mode;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.ptr.prototype.ModTime = function() {
		var fs;
		fs = this;
		return fs.modTime;
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.ptr.prototype.Sys = function() {
		var fs;
		fs = this;
		return fs.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	ptrType$2.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$13.methods = [{prop: "close", name: "close", pkg: "os", typ: $funcType([], [$error], false)}];
	ptrType.methods = [{prop: "Readdir", name: "Readdir", pkg: "", typ: $funcType([$Int], [sliceType$1, $error], false)}, {prop: "Readdirnames", name: "Readdirnames", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "readdir", name: "readdir", pkg: "os", typ: $funcType([$Int], [sliceType$1, $error], false)}, {prop: "readdirnames", name: "readdirnames", pkg: "os", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "WriteAt", name: "WriteAt", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "wrapErr", name: "wrapErr", pkg: "os", typ: $funcType([$String, $error], [$error], false)}, {prop: "Chmod", name: "Chmod", pkg: "", typ: $funcType([FileMode], [$error], false)}, {prop: "SetDeadline", name: "SetDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetReadDeadline", name: "SetReadDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetWriteDeadline", name: "SetWriteDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "chmod", name: "chmod", pkg: "os", typ: $funcType([FileMode], [$error], false)}, {prop: "Chown", name: "Chown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "setDeadline", name: "setDeadline", pkg: "os", typ: $funcType([time.Time], [$error], false)}, {prop: "setReadDeadline", name: "setReadDeadline", pkg: "os", typ: $funcType([time.Time], [$error], false)}, {prop: "setWriteDeadline", name: "setWriteDeadline", pkg: "os", typ: $funcType([time.Time], [$error], false)}, {prop: "checkValid", name: "checkValid", pkg: "os", typ: $funcType([$String], [$error], false)}, {prop: "Fd", name: "Fd", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "read", name: "read", pkg: "os", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "pread", name: "pread", pkg: "os", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "write", name: "write", pkg: "os", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "pwrite", name: "pwrite", pkg: "os", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "seek", name: "seek", pkg: "os", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([], [FileInfo, $error], false)}];
	FileMode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsRegular", name: "IsRegular", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([], [FileMode], false)}];
	ptrType$16.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	timeout.init([{prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}]);
	PathError.init("", [{prop: "Op", name: "Op", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Path", name: "Path", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", anonymous: false, exported: true, typ: $error, tag: ""}]);
	SyscallError.init("", [{prop: "Syscall", name: "Syscall", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", anonymous: false, exported: true, typ: $error, tag: ""}]);
	LinkError.init("", [{prop: "Op", name: "Op", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Old", name: "Old", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "New", name: "New", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", anonymous: false, exported: true, typ: $error, tag: ""}]);
	file.init("os", [{prop: "pfd", name: "pfd", anonymous: false, exported: false, typ: poll.FD, tag: ""}, {prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "dirinfo", name: "dirinfo", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "nonblock", name: "nonblock", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "stdoutOrErr", name: "stdoutOrErr", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	dirInfo.init("os", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "nbuf", name: "nbuf", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "bufp", name: "bufp", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	File.init("os", [{prop: "file", name: "file", anonymous: true, exported: false, typ: ptrType$13, tag: ""}]);
	FileInfo.init([{prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}]);
	fileStat.init("os", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "size", name: "size", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "mode", name: "mode", anonymous: false, exported: false, typ: FileMode, tag: ""}, {prop: "modTime", name: "modTime", anonymous: false, exported: false, typ: time.Time, tag: ""}, {prop: "sys", name: "sys", anonymous: false, exported: false, typ: syscall.Stat_t, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = poll.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = testlog.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Args = sliceType.nil;
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		$pkg.ErrClosed = errors.New("file already closed");
		errFinished = errors.New("os: process already finished");
		$pkg.Stdin = NewFile(((syscall.Stdin >>> 0)), "/dev/stdin");
		$pkg.Stdout = NewFile(((syscall.Stdout >>> 0)), "/dev/stdout");
		$pkg.Stderr = NewFile(((syscall.Stderr >>> 0)), "/dev/stderr");
		lstat = Lstat;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, $init, errors, js, math, runtime, strconv, sync, unicode, utf8, uncommonType, funcType, name, nameData, mapIter, Type, Kind, tflag, rtype, typeAlg, method, ChanDir, arrayType, chanType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, nameOff, typeOff, textOff, StructField, StructTag, fieldScan, Value, flag, ValueError, sliceType$1, ptrType$1, sliceType$2, sliceType$3, ptrType$2, funcType$1, sliceType$4, ptrType$3, ptrType$4, sliceType$5, sliceType$6, sliceType$7, ptrType$5, ptrType$6, structType$3, sliceType$8, sliceType$9, sliceType$10, sliceType$11, ptrType$7, ptrType$8, sliceType$13, sliceType$14, ptrType$9, sliceType$15, ptrType$15, sliceType$17, ptrType$16, funcType$3, funcType$4, funcType$5, ptrType$17, arrayType$12, ptrType$18, initialized, uncommonTypeMap, nameMap, nameOffList, typeOffList, callHelper, jsObjectPtr, selectHelper, kindNames, methodCache, uint8Type, init, jsType, reflectType, setKindType, newName, newNameOff, newTypeOff, internalStr, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, FuncOf, SliceOf, Zero, unsafe_New, makeInt, typedmemmove, keyFor, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapiternext, maplen, cvtDirect, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, chanrecv, chansend, Swapper, PtrTo, implements$1, directlyAssignable, haveIdenticalType, haveIdenticalUnderlyingType, toType, ifaceIndir, overflowFloat32, New, convertOp, makeFloat, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	math = $packages["math"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", true, "reflect", false, function(pkgPath_, mcount_, _$2_, moff_, _$4_, _methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pkgPath = 0;
			this.mcount = 0;
			this._$2 = 0;
			this.moff = 0;
			this._$4 = 0;
			this._methods = sliceType$5.nil;
			return;
		}
		this.pkgPath = pkgPath_;
		this.mcount = mcount_;
		this._$2 = _$2_;
		this.moff = moff_;
		this._$4 = _$4_;
		this._methods = _methods_;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", true, "reflect", false, function(rtype_, inCount_, outCount_, _in_, _out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.inCount = 0;
			this.outCount = 0;
			this._in = sliceType$2.nil;
			this._out = sliceType$2.nil;
			return;
		}
		this.rtype = rtype_;
		this.inCount = inCount_;
		this.outCount = outCount_;
		this._in = _in_;
		this._out = _out_;
	});
	name = $pkg.name = $newType(0, $kindStruct, "reflect.name", true, "reflect", false, function(bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bytes = ptrType$4.nil;
			return;
		}
		this.bytes = bytes_;
	});
	nameData = $pkg.nameData = $newType(0, $kindStruct, "reflect.nameData", true, "reflect", false, function(name_, tag_, exported_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.tag = "";
			this.exported = false;
			return;
		}
		this.name = name_;
		this.tag = tag_;
		this.exported = exported_;
	});
	mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflect.mapIter", true, "reflect", false, function(t_, m_, keys_, i_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = $ifaceNil;
			this.m = null;
			this.keys = null;
			this.i = 0;
			return;
		}
		this.t = t_;
		this.m = m_;
		this.keys = keys_;
		this.i = i_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", true, "reflect", true, null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", true, "reflect", true, null);
	tflag = $pkg.tflag = $newType(1, $kindUint8, "reflect.tflag", true, "reflect", false, null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", true, "reflect", false, function(size_, ptrdata_, hash_, tflag_, align_, fieldAlign_, kind_, alg_, gcdata_, str_, ptrToThis_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.ptrdata = 0;
			this.hash = 0;
			this.tflag = 0;
			this.align = 0;
			this.fieldAlign = 0;
			this.kind = 0;
			this.alg = ptrType$3.nil;
			this.gcdata = ptrType$4.nil;
			this.str = 0;
			this.ptrToThis = 0;
			return;
		}
		this.size = size_;
		this.ptrdata = ptrdata_;
		this.hash = hash_;
		this.tflag = tflag_;
		this.align = align_;
		this.fieldAlign = fieldAlign_;
		this.kind = kind_;
		this.alg = alg_;
		this.gcdata = gcdata_;
		this.str = str_;
		this.ptrToThis = ptrToThis_;
	});
	typeAlg = $pkg.typeAlg = $newType(0, $kindStruct, "reflect.typeAlg", true, "reflect", false, function(hash_, equal_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.hash = $throwNilPointerError;
			this.equal = $throwNilPointerError;
			return;
		}
		this.hash = hash_;
		this.equal = equal_;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflect.method", true, "reflect", false, function(name_, mtyp_, ifn_, tfn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.mtyp = 0;
			this.ifn = 0;
			this.tfn = 0;
			return;
		}
		this.name = name_;
		this.mtyp = mtyp_;
		this.ifn = ifn_;
		this.tfn = tfn_;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", true, "reflect", true, null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", true, "reflect", false, function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.slice = ptrType$1.nil;
			this.len = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.slice = slice_;
		this.len = len_;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", true, "reflect", false, function(rtype_, elem_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.dir = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.dir = dir_;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", true, "reflect", false, function(name_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.typ = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", true, "reflect", false, function(rtype_, pkgPath_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$4.nil);
			this.methods = sliceType$6.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.methods = methods_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", true, "reflect", false, function(rtype_, key_, elem_, bucket_, hmap_, keysize_, indirectkey_, valuesize_, indirectvalue_, bucketsize_, reflexivekey_, needkeyupdate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.key = ptrType$1.nil;
			this.elem = ptrType$1.nil;
			this.bucket = ptrType$1.nil;
			this.hmap = ptrType$1.nil;
			this.keysize = 0;
			this.indirectkey = 0;
			this.valuesize = 0;
			this.indirectvalue = 0;
			this.bucketsize = 0;
			this.reflexivekey = false;
			this.needkeyupdate = false;
			return;
		}
		this.rtype = rtype_;
		this.key = key_;
		this.elem = elem_;
		this.bucket = bucket_;
		this.hmap = hmap_;
		this.keysize = keysize_;
		this.indirectkey = indirectkey_;
		this.valuesize = valuesize_;
		this.indirectvalue = indirectvalue_;
		this.bucketsize = bucketsize_;
		this.reflexivekey = reflexivekey_;
		this.needkeyupdate = needkeyupdate_;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", true, "reflect", false, function(name_, typ_, offsetAnon_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = new name.ptr(ptrType$4.nil);
			this.typ = ptrType$1.nil;
			this.offsetAnon = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
		this.offsetAnon = offsetAnon_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", true, "reflect", false, function(rtype_, pkgPath_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$4.nil);
			this.fields = sliceType$7.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.fields = fields_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", true, "reflect", true, function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Func = new Value.ptr(ptrType$1.nil, 0, 0);
			this.Index = 0;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Func = Func_;
		this.Index = Index_;
	});
	nameOff = $pkg.nameOff = $newType(4, $kindInt32, "reflect.nameOff", true, "reflect", false, null);
	typeOff = $pkg.typeOff = $newType(4, $kindInt32, "reflect.typeOff", true, "reflect", false, null);
	textOff = $pkg.textOff = $newType(4, $kindInt32, "reflect.textOff", true, "reflect", false, null);
	StructField = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", true, "reflect", true, function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Tag = "";
			this.Offset = 0;
			this.Index = sliceType$13.nil;
			this.Anonymous = false;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Tag = Tag_;
		this.Offset = Offset_;
		this.Index = Index_;
		this.Anonymous = Anonymous_;
	});
	StructTag = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", true, "reflect", true, null);
	fieldScan = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", true, "reflect", false, function(typ_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$9.nil;
			this.index = sliceType$13.nil;
			return;
		}
		this.typ = typ_;
		this.index = index_;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", true, "reflect", true, function(typ_, ptr_, flag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$1.nil;
			this.ptr = 0;
			this.flag = 0;
			return;
		}
		this.typ = typ_;
		this.ptr = ptr_;
		this.flag = flag_;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", true, "reflect", false, null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", true, "reflect", true, function(Method_, Kind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Kind = 0;
			return;
		}
		this.Method = Method_;
		this.Kind = Kind_;
	});
	sliceType$1 = $sliceType(name);
	ptrType$1 = $ptrType(rtype);
	sliceType$2 = $sliceType(ptrType$1);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$2 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$3], [ptrType$2], true);
	sliceType$4 = $sliceType($String);
	ptrType$3 = $ptrType(typeAlg);
	ptrType$4 = $ptrType($Uint8);
	sliceType$5 = $sliceType(method);
	sliceType$6 = $sliceType(imethod);
	sliceType$7 = $sliceType(structField);
	ptrType$5 = $ptrType(uncommonType);
	ptrType$6 = $ptrType(nameData);
	structType$3 = $structType("reflect", [{prop: "str", name: "str", anonymous: false, exported: false, typ: $String, tag: ""}]);
	sliceType$8 = $sliceType(ptrType$2);
	sliceType$9 = $sliceType(Value);
	sliceType$10 = $sliceType(Type);
	sliceType$11 = $sliceType(sliceType$8);
	ptrType$7 = $ptrType(interfaceType);
	ptrType$8 = $ptrType(imethod);
	sliceType$13 = $sliceType($Int);
	sliceType$14 = $sliceType(fieldScan);
	ptrType$9 = $ptrType(structType);
	sliceType$15 = $sliceType($Uint8);
	ptrType$15 = $ptrType($UnsafePointer);
	sliceType$17 = $sliceType($Int32);
	ptrType$16 = $ptrType(funcType);
	funcType$3 = $funcType([$String], [$Bool], false);
	funcType$4 = $funcType([$UnsafePointer, $Uintptr], [$Uintptr], false);
	funcType$5 = $funcType([$UnsafePointer, $UnsafePointer], [$Bool], false);
	ptrType$17 = $ptrType(structField);
	arrayType$12 = $arrayType($Uintptr, 2);
	ptrType$18 = $ptrType(ValueError);
	init = function() {
		var used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; used = $f.used; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		used = (function(i) {
			var i;
		});
		$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$1 = new uncommonType.ptr(0, 0, 0, 0, 0, sliceType$5.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$2 = new method.ptr(0, 0, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$3 = new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$4 = new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$5 = new funcType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), 0, 0, sliceType$2.nil, sliceType$2.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), new name.ptr(ptrType$4.nil), sliceType$6.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$7 = new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$8 = new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$9 = new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$10 = new structType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), new name.ptr(ptrType$4.nil), sliceType$7.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$11 = new imethod.ptr(0, 0), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$12 = new structField.ptr(new name.ptr(ptrType$4.nil), ptrType$1.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.used = used; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	jsType = function(typ) {
		var typ;
		return typ.jsType;
	};
	reflectType = function(typ) {
		var _1, _i, _i$1, _i$2, _i$3, _i$4, _key, _ref, _ref$1, _ref$2, _ref$3, _ref$4, dir, f, fields, i, i$1, i$2, i$3, i$4, imethods, in$1, m, m$1, methodSet, methods, offsetAnon, out, outCount, params, reflectFields, reflectMethods, results, rt, typ, ut;
		if (typ.reflectType === undefined) {
			rt = new rtype.ptr(((($parseInt(typ.size) >> 0) >>> 0)), 0, 0, 0, 0, 0, ((($parseInt(typ.kind) >> 0) << 24 >>> 24)), ptrType$3.nil, ptrType$4.nil, newNameOff($clone(newName(internalStr(typ.string), "", !!(typ.exported)), name)), 0);
			rt.jsType = typ;
			typ.reflectType = rt;
			methodSet = $methodSet(typ);
			if (!(($parseInt(methodSet.length) === 0)) || !!(typ.named)) {
				rt.tflag = (rt.tflag | (1)) >>> 0;
				if (!!(typ.named)) {
					rt.tflag = (rt.tflag | (4)) >>> 0;
				}
				reflectMethods = $makeSlice(sliceType$5, $parseInt(methodSet.length));
				_ref = reflectMethods;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					m = methodSet[i];
					method.copy(((i < 0 || i >= reflectMethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectMethods.$array[reflectMethods.$offset + i]), new method.ptr(newNameOff($clone(newName(internalStr(m.name), "", internalStr(m.pkg) === ""), name)), newTypeOff(reflectType(m.typ)), 0, 0));
					_i++;
				}
				ut = new uncommonType.ptr(newNameOff($clone(newName(internalStr(typ.pkg), "", false), name)), (($parseInt(methodSet.length) << 16 >>> 16)), 0, 0, 0, reflectMethods);
				_key = rt; (uncommonTypeMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: ut };
				ut.jsType = typ;
			}
			_1 = rt.Kind();
			if (_1 === (17)) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem), ptrType$1.nil, ((($parseInt(typ.len) >> 0) >>> 0))));
			} else if (_1 === (18)) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem), ((dir >>> 0))));
			} else if (_1 === (19)) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$2, $parseInt(params.length));
				_ref$1 = in$1;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					i$1 = _i$1;
					((i$1 < 0 || i$1 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i$1] = reflectType(params[i$1]));
					_i$1++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$2, $parseInt(results.length));
				_ref$2 = out;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$2 = _i$2;
					((i$2 < 0 || i$2 >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i$2] = reflectType(results[i$2]));
					_i$2++;
				}
				outCount = (($parseInt(results.length) << 16 >>> 16));
				if (!!(typ.variadic)) {
					outCount = (outCount | (32768)) >>> 0;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), (($parseInt(params.length) << 16 >>> 16)), outCount, in$1, out));
			} else if (_1 === (20)) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$6, $parseInt(methods.length));
				_ref$3 = imethods;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$3.$length)) { break; }
					i$3 = _i$3;
					m$1 = methods[i$3];
					imethod.copy(((i$3 < 0 || i$3 >= imethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : imethods.$array[imethods.$offset + i$3]), new imethod.ptr(newNameOff($clone(newName(internalStr(m$1.name), "", internalStr(m$1.pkg) === ""), name)), newTypeOff(reflectType(m$1.typ))));
					_i$3++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkg), "", false), name), imethods));
			} else if (_1 === (21)) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false));
			} else if (_1 === (22)) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (23)) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (25)) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$7, $parseInt(fields.length));
				_ref$4 = reflectFields;
				_i$4 = 0;
				while (true) {
					if (!(_i$4 < _ref$4.$length)) { break; }
					i$4 = _i$4;
					f = fields[i$4];
					offsetAnon = ((i$4 >>> 0)) << 1 >>> 0;
					if (!!(f.anonymous)) {
						offsetAnon = (offsetAnon | (1)) >>> 0;
					}
					structField.copy(((i$4 < 0 || i$4 >= reflectFields.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectFields.$array[reflectFields.$offset + i$4]), new structField.ptr($clone(newName(internalStr(f.name), internalStr(f.tag), !!(f.exported)), name), reflectType(f.typ), offsetAnon));
					_i$4++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkgPath), "", false), name), reflectFields));
			}
		}
		return ((typ.reflectType));
	};
	setKindType = function(rt, kindType) {
		var kindType, rt;
		rt.kindType = kindType;
		kindType.rtype = rt;
	};
	uncommonType.ptr.prototype.methods = function() {
		var t;
		t = this;
		return t._methods;
	};
	uncommonType.prototype.methods = function() { return this.$val.methods(); };
	rtype.ptr.prototype.uncommon = function() {
		var _entry, t;
		t = this;
		return (_entry = uncommonTypeMap[ptrType$1.keyFor(t)], _entry !== undefined ? _entry.v : ptrType$5.nil);
	};
	rtype.prototype.uncommon = function() { return this.$val.uncommon(); };
	funcType.ptr.prototype.in$ = function() {
		var t;
		t = this;
		return t._in;
	};
	funcType.prototype.in$ = function() { return this.$val.in$(); };
	funcType.ptr.prototype.out = function() {
		var t;
		t = this;
		return t._out;
	};
	funcType.prototype.out = function() { return this.$val.out(); };
	name.ptr.prototype.name = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = nameMap[ptrType$4.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$6.nil).name;
		return s;
	};
	name.prototype.name = function() { return this.$val.name(); };
	name.ptr.prototype.tag = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = nameMap[ptrType$4.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$6.nil).tag;
		return s;
	};
	name.prototype.tag = function() { return this.$val.tag(); };
	name.ptr.prototype.pkgPath = function() {
		var n;
		n = this;
		return "";
	};
	name.prototype.pkgPath = function() { return this.$val.pkgPath(); };
	name.ptr.prototype.isExported = function() {
		var _entry, n;
		n = this;
		return (_entry = nameMap[ptrType$4.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$6.nil).exported;
	};
	name.prototype.isExported = function() { return this.$val.isExported(); };
	newName = function(n, tag, exported) {
		var _key, b, exported, n, tag;
		b = $newDataPointer(0, ptrType$4);
		_key = b; (nameMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$4.keyFor(_key)] = { k: _key, v: new nameData.ptr(n, tag, exported) };
		return new name.ptr(b);
	};
	rtype.ptr.prototype.nameOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= nameOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : nameOffList.$array[nameOffList.$offset + x]));
	};
	rtype.prototype.nameOff = function(off) { return this.$val.nameOff(off); };
	newNameOff = function(n) {
		var i, n;
		i = nameOffList.$length;
		nameOffList = $append(nameOffList, n);
		return ((i >> 0));
	};
	rtype.ptr.prototype.typeOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= typeOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : typeOffList.$array[typeOffList.$offset + x]));
	};
	rtype.prototype.typeOff = function(off) { return this.$val.typeOff(off); };
	newTypeOff = function(t) {
		var i, t;
		i = typeOffList.$length;
		typeOffList = $append(typeOffList, t);
		return ((i >> 0));
	};
	internalStr = function(strObj) {
		var c, strObj;
		c = new structType$3.ptr("");
		c.str = strObj;
		return c.str;
	};
	isWrapped = function(typ) {
		var typ;
		return !!(jsType(typ).wrapped);
	};
	copyStruct = function(dst, src, typ) {
		var dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; _v$1 = $f._v$1; fl = $f.fl; rt = $f.rt; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rt = _r;
		_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
		_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 25; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3 === 22; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return new Value.ptr(rt, (v), (fl | ((_r$4 >>> 0))) >>> 0);
		/* } */ case 3:
		_r$5 = t.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(rt, ($newDataPointer(v, jsType(rt.ptrTo()))), (((fl | ((_r$5 >>> 0))) >>> 0) | 128) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeValue }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f._v$1 = _v$1; $f.fl = fl; $f.rt = rt; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	MakeSlice = function(typ, len, cap) {
		var _r, _r$1, cap, len, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; len = $f.len; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		typ = [typ];
		_r = typ[0].Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 23))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 23))) { */ case 1:
			$panic(new $String("reflect.MakeSlice of non-slice type"));
		/* } */ case 2:
		if (len < 0) {
			$panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			$panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			$panic(new $String("reflect.MakeSlice: len > cap"));
		}
		_r$1 = makeValue(typ[0], $makeSlice(jsType(typ[0]), len, cap, (function(typ) { return function $b() {
			var _r$1, _r$2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$1 = typ[0].Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = jsType(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2.zero();
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f.$s = $s; $f.$r = $r; return $f;
		}; })(typ)), 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeSlice }; } $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.len = len; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeSlice = MakeSlice;
	TypeOf = function(i) {
		var i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	$pkg.TypeOf = TypeOf;
	ValueOf = function(i) {
		var _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(i, $ifaceNil)) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ValueOf }; } $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ValueOf = ValueOf;
	FuncOf = function(in$1, out, variadic) {
		var _i, _i$1, _r, _ref, _ref$1, _v, _v$1, i, i$1, in$1, jsIn, jsOut, out, v, v$1, variadic, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; _v$1 = $f._v$1; i = $f.i; i$1 = $f.i$1; in$1 = $f.in$1; jsIn = $f.jsIn; jsOut = $f.jsOut; out = $f.out; v = $f.v; v$1 = $f.v$1; variadic = $f.variadic; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!(variadic)) { _v = false; $s = 3; continue s; }
		if (in$1.$length === 0) { _v$1 = true; $s = 4; continue s; }
		_r = (x = in$1.$length - 1 >> 0, ((x < 0 || x >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x])).Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v$1 = !((_r === 23)); case 4:
		_v = _v$1; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect.FuncOf: last arg of variadic func must be slice"));
		/* } */ case 2:
		jsIn = $makeSlice(sliceType$8, in$1.$length);
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= jsIn.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsIn.$array[jsIn.$offset + i] = jsType(v));
			_i++;
		}
		jsOut = $makeSlice(sliceType$8, out.$length);
		_ref$1 = out;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			((i$1 < 0 || i$1 >= jsOut.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsOut.$array[jsOut.$offset + i$1] = jsType(v$1));
			_i$1++;
		}
		$s = -1; return reflectType($funcType($externalize(jsIn, sliceType$8), $externalize(jsOut, sliceType$8), $externalize(variadic, $Bool)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncOf }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f._v$1 = _v$1; $f.i = i; $f.i$1 = i$1; $f.in$1 = in$1; $f.jsIn = jsIn; $f.jsOut = jsOut; $f.out = out; $f.v = v; $f.v$1 = v$1; $f.variadic = variadic; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FuncOf = FuncOf;
	rtype.ptr.prototype.ptrTo = function() {
		var t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = function(t) {
		var t;
		return reflectType($sliceType(jsType(t)));
	};
	$pkg.SliceOf = SliceOf;
	Zero = function(typ) {
		var _r, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeValue(typ, jsType(typ).zero(), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Zero }; } $f._r = _r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Zero = Zero;
	unsafe_New = function(typ) {
		var _1, typ;
		_1 = typ.Kind();
		if (_1 === (25)) {
			return (new (jsType(typ).ptr)());
		} else if (_1 === (17)) {
			return (jsType(typ).zero());
		} else {
			return ($newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo())));
		}
	};
	makeInt = function(f, bits, t) {
		var _1, _r, bits, f, ptr, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; bits = $f.bits; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.Kind();
		if (_1 === (3)) {
			(ptr).$set(((bits.$low << 24 >> 24)));
		} else if (_1 === (4)) {
			(ptr).$set(((bits.$low << 16 >> 16)));
		} else if ((_1 === (2)) || (_1 === (5))) {
			(ptr).$set(((bits.$low >> 0)));
		} else if (_1 === (6)) {
			(ptr).$set((new $Int64(bits.$high, bits.$low)));
		} else if (_1 === (8)) {
			(ptr).$set(((bits.$low << 24 >>> 24)));
		} else if (_1 === (9)) {
			(ptr).$set(((bits.$low << 16 >>> 16)));
		} else if ((_1 === (7)) || (_1 === (10)) || (_1 === (12))) {
			(ptr).$set(((bits.$low >>> 0)));
		} else if (_1 === (11)) {
			(ptr).$set((bits));
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeInt }; } $f._1 = _1; $f._r = _r; $f.bits = bits; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	typedmemmove = function(t, dst, src) {
		var dst, src, t;
		dst.$set(src.$get());
	};
	keyFor = function(t, key) {
		var k, key, kv, t;
		kv = key;
		if (!(kv.$get === undefined)) {
			kv = kv.$get();
		}
		k = $internalize(jsType(t.Key()).keyFor(kv), $String);
		return [kv, k];
	};
	mapaccess = function(t, m, key) {
		var _tuple, entry, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		entry = m[$externalize(k, $String)];
		if (entry === undefined) {
			return 0;
		}
		return ($newDataPointer(entry.v, jsType(PtrTo(t.Elem()))));
	};
	mapassign = function(t, m, key, val) {
		var _r, _tuple, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; entry = $f.entry; et = $f.et; jsVal = $f.jsVal; k = $f.k; key = $f.key; kv = $f.kv; m = $f.m; newVal = $f.newVal; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = keyFor(t, key);
		kv = _tuple[0];
		k = _tuple[1];
		jsVal = val.$get();
		et = t.Elem();
		_r = et.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 25) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 25) { */ case 1:
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		/* } */ case 2:
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m[$externalize(k, $String)] = entry;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapassign }; } $f._r = _r; $f._tuple = _tuple; $f.entry = entry; $f.et = et; $f.jsVal = jsVal; $f.k = k; $f.key = key; $f.kv = kv; $f.m = m; $f.newVal = newVal; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapdelete = function(t, m, key) {
		var _tuple, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		delete m[$externalize(k, $String)];
	};
	mapiterinit = function(t, m) {
		var m, t;
		return ((new mapIter.ptr(t, m, $keys(m), 0)));
	};
	mapiterkey = function(it) {
		var _r, _r$1, _r$2, it, iter, k, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; iter = $f.iter; k = $f.k; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		iter = ((it));
		k = iter.keys[iter.i];
		_r = iter.t.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return ($newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, _r$2));
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapiterkey }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.iter = iter; $f.k = k; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapiternext = function(it) {
		var it, iter;
		iter = ((it));
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		var m;
		return $parseInt($keys(m).length);
	};
	cvtDirect = function(v, typ) {
		var _1, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, k, slice, srcVal, typ, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; k = $f.k; slice = $f.slice; srcVal = $f.srcVal; typ = $f.typ; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		srcVal = $clone(v, Value).object();
		/* */ if (srcVal === jsType(v.typ).nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (srcVal === jsType(v.typ).nil) { */ case 1:
			_r = makeValue(typ, jsType(typ).nil, v.flag); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		val = null;
			_r$1 = typ.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			k = _r$1;
			_1 = k;
			/* */ if (_1 === (23)) { $s = 6; continue; }
			/* */ if (_1 === (22)) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (23)) { */ case 6:
				slice = new (jsType(typ))(srcVal.$array);
				slice.$offset = srcVal.$offset;
				slice.$length = srcVal.$length;
				slice.$capacity = srcVal.$capacity;
				val = $newDataPointer(slice, jsType(PtrTo(typ)));
				$s = 11; continue;
			/* } else if (_1 === (22)) { */ case 7:
				_r$2 = typ.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 25) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_r$3 === 25) { */ case 12:
					_r$4 = typ.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if ($interfaceIsEqual(_r$4, v.typ.Elem())) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if ($interfaceIsEqual(_r$4, v.typ.Elem())) { */ case 16:
						val = srcVal;
						/* break; */ $s = 4; continue;
					/* } */ case 17:
					val = new (jsType(typ))();
					_arg = val;
					_arg$1 = srcVal;
					_r$5 = typ.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg$2 = _r$5;
					$r = copyStruct(_arg, _arg$1, _arg$2); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 4; continue;
				/* } */ case 13:
				val = new (jsType(typ))(srcVal.$get, srcVal.$set);
				$s = 11; continue;
			/* } else if (_1 === (25)) { */ case 8:
				val = new (jsType(typ).ptr)();
				copyStruct(val, srcVal, typ);
				$s = 11; continue;
			/* } else if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24))) { */ case 9:
				val = v.ptr;
				$s = 11; continue;
			/* } else { */ case 10:
				$panic(new ValueError.ptr("reflect.Convert", k));
			/* } */ case 11:
		case 4:
		_r$6 = typ.common(); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = typ.Kind(); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$6, (val), (((new flag(v.flag).ro() | ((v.flag & 128) >>> 0)) >>> 0) | ((_r$7 >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtDirect }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.k = k; $f.slice = slice; $f.srcVal = srcVal; $f.typ = typ; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	methodReceiver = function(op, v, i) {
		var _$38, _r, fn, i, m, m$1, ms, op, prop, rcvr, t, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _$38 = $f._$38; _r = $f._r; fn = $f.fn; i = $f.i; m = $f.m; m$1 = $f.m$1; ms = $f.ms; op = $f.op; prop = $f.prop; rcvr = $f.rcvr; t = $f.t; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_$38 = ptrType$1.nil;
		t = ptrType$1.nil;
		fn = 0;
		prop = "";
		/* */ if (v.typ.Kind() === 20) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v.typ.Kind() === 20) { */ case 1:
			tt = (v.typ.kindType);
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if (!$clone(tt.rtype.nameOff(m.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = tt.rtype.typeOff(m.typ);
			prop = $clone(tt.rtype.nameOff(m.name), name).name();
			$s = 3; continue;
		/* } else { */ case 2:
			_r = v.typ.exportedMethods(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ms = _r;
			if (((i >>> 0)) >= ((ms.$length >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = $clone(((i < 0 || i >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + i]), method);
			if (!$clone(v.typ.nameOff(m$1.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = v.typ.typeOff(m$1.mtyp);
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		/* } */ case 3:
		rcvr = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = (rcvr[$externalize(prop, $String)]);
		$s = -1; return [_$38, t, fn];
		/* */ } return; } if ($f === undefined) { $f = { $blk: methodReceiver }; } $f._$38 = _$38; $f._r = _r; $f.fn = fn; $f.i = i; $f.m = m; $f.m$1 = m$1; $f.ms = ms; $f.op = op; $f.prop = prop; $f.rcvr = rcvr; $f.t = t; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	valueInterface = function(v, safe) {
		var _r, safe, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; safe = $f.safe; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 96) >>> 0) === 0))) {
			$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Interface", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		if (isWrapped(v.typ)) {
			$s = -1; return ((new (jsType(v.typ))($clone(v, Value).object())));
		}
		$s = -1; return (($clone(v, Value).object()));
		/* */ } return; } if ($f === undefined) { $f = { $blk: valueInterface }; } $f._r = _r; $f.safe = safe; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ifaceE2I = function(t, src, dst) {
		var dst, src, t;
		dst.$set(src);
	};
	methodName = function() {
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var _r, _r$1, _r$2, _tuple, fn, fv, op, rcvr, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; fn = $f.fn; fv = $f.fv; op = $f.op; rcvr = $f.rcvr; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fn = [fn];
		rcvr = [rcvr];
		if (((v.flag & 512) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_r = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		fn[0] = _tuple[2];
		rcvr[0] = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr[0] = new (jsType(v.typ))(rcvr[0]);
		}
		fv = js.MakeFunc((function(fn, rcvr) { return function(this$1, arguments$1) {
			var arguments$1, this$1;
			return new $jsObjectPtr(fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$8)));
		}; })(fn, rcvr));
		_r$1 = $clone(v, Value).Type(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = _r$1.common(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$2, (fv), (new flag(v.flag).ro() | 19) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeMethodValue }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.fn = fn; $f.fv = fv; $f.op = op; $f.rcvr = rcvr; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.ptr.prototype.pointers = function() {
		var _1, t;
		t = this;
		_1 = t.Kind();
		if ((_1 === (22)) || (_1 === (21)) || (_1 === (18)) || (_1 === (19)) || (_1 === (25)) || (_1 === (17))) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.Comparable = function() {
		var _1, _r, _r$1, i, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; i = $f.i; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
			_1 = t.Kind();
			/* */ if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { $s = 2; continue; }
			/* */ if (_1 === (17)) { $s = 3; continue; }
			/* */ if (_1 === (25)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { */ case 2:
				$s = -1; return false;
			/* } else if (_1 === (17)) { */ case 3:
				_r = t.Elem().Comparable(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (25)) { */ case 4:
				i = 0;
				/* while (true) { */ case 7:
					/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 8; continue; }
					_r$1 = t.Field(i).Type.Comparable(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (!_r$1) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!_r$1) { */ case 9:
						$s = -1; return false;
					/* } */ case 10:
					i = i + (1) >> 0;
				/* } */ $s = 7; continue; case 8:
			/* } */ case 5:
		case 1:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Comparable }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	rtype.ptr.prototype.Method = function(i) {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, arg, fl, fn, ft, i, in$1, m, methods, mt, mtyp, out, p, pname, prop, ret, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; arg = $f.arg; fl = $f.fl; fn = $f.fn; ft = $f.ft; i = $f.i; in$1 = $f.in$1; m = $f.m; methods = $f.methods; mt = $f.mt; mtyp = $f.mtyp; out = $f.out; p = $f.p; pname = $f.pname; prop = $f.prop; ret = $f.ret; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prop = [prop];
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			Method.copy(m, tt.Method(i));
			$s = -1; return m;
		}
		_r = t.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		methods = _r;
		if (i < 0 || i >= methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = $clone(((i < 0 || i >= methods.$length) ? ($throwRuntimeError("index out of range"), undefined) : methods.$array[methods.$offset + i]), method);
		pname = $clone(t.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		fl = 19;
		mtyp = t.typeOff(p.mtyp);
		ft = (mtyp.kindType);
		in$1 = $makeSlice(sliceType$10, 0, (1 + ft.in$().$length >> 0));
		in$1 = $append(in$1, t);
		_ref = ft.in$();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			in$1 = $append(in$1, arg);
			_i++;
		}
		out = $makeSlice(sliceType$10, 0, ft.out().$length);
		_ref$1 = ft.out();
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			ret = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			out = $append(out, ret);
			_i$1++;
		}
		_r$1 = FuncOf(in$1, out, ft.rtype.IsVariadic()); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		mt = _r$1;
		m.Type = mt;
		prop[0] = $internalize($methodSet(t.jsType)[i].prop, $String);
		fn = js.MakeFunc((function(prop) { return function(this$1, arguments$1) {
			var arguments$1, rcvr, this$1;
			rcvr = (0 >= arguments$1.$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1.$array[arguments$1.$offset + 0]);
			return new $jsObjectPtr(rcvr[$externalize(prop[0], $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$8)));
		}; })(prop));
		m.Func = new Value.ptr($assertType(mt, ptrType$1), (fn), fl);
		m.Index = i;
		Method.copy(m, m);
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Method }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.arg = arg; $f.fl = fl; $f.fn = fn; $f.ft = ft; $f.i = i; $f.in$1 = in$1; $f.m = m; $f.methods = methods; $f.mt = mt; $f.mtyp = mtyp; $f.out = out; $f.p = p; $f.pname = pname; $f.prop = prop; $f.ret = ret; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.object = function() {
		var _1, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				switch (0) { default:
					_1 = v.typ.Kind();
					if ((_1 === (11)) || (_1 === (6))) {
						val = new (jsType(v.typ))(val.$high, val.$low);
					} else if ((_1 === (15)) || (_1 === (16))) {
						val = new (jsType(v.typ))(val.$real, val.$imag);
					} else if (_1 === (23)) {
						if (val === val.constructor.nil) {
							val = jsType(v.typ).nil;
							break;
						}
						newVal = new (jsType(v.typ))(val.$array);
						newVal.$offset = val.$offset;
						newVal.$length = val.$length;
						newVal.$capacity = val.$capacity;
						val = newVal;
					}
				}
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var _r, _r$1, _r$2, _r$3, context, dst, fl, target, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; context = $f.context; dst = $f.dst; fl = $f.fl; target = $f.target; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue(context, $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
			_r$1 = directlyAssignable(dst, v.typ); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 5; continue; }
			/* */ if (implements$1(dst, v.typ)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$1) { */ case 5:
				fl = (((v.flag & 384) >>> 0) | new flag(v.flag).ro()) >>> 0;
				fl = (fl | (((dst.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(dst, v.ptr, fl);
			/* } else if (implements$1(dst, v.typ)) { */ case 6:
				if (target === 0) {
					target = unsafe_New(dst);
				}
				_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				x = _r$2;
				_r$3 = dst.NumMethod(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 0) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_r$3 === 0) { */ case 10:
					(target).$set(x);
					$s = 12; continue;
				/* } else { */ case 11:
					ifaceE2I(dst, x, target);
				/* } */ case 12:
				$s = -1; return new Value.ptr(dst, target, 148);
			/* } */ case 7:
		case 4:
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.assignTo }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.context = context; $f.dst = dst; $f.fl = fl; $f.target = target; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.call = function(op, in$1) {
		var _1, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; arg = $f.arg; argsArray = $f.argsArray; elem = $f.elem; fn = $f.fn; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; in$1 = $f.in$1; isSlice = $f.isSlice; m = $f.m; n = $f.n; nin = $f.nin; nout = $f.nout; op = $f.op; origIn = $f.origIn; rcvr = $f.rcvr; results = $f.results; ret = $f.ret; slice = $f.slice; t = $f.t; targ = $f.targ; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; xt = $f.xt; xt$1 = $f.xt$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		t = ptrType$1.nil;
		fn = 0;
		rcvr = null;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			t = _tuple[1];
			fn = _tuple[2];
			rcvr = $clone(v, Value).object();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
			$s = 3; continue;
		/* } else { */ case 2:
			t = v.typ;
			fn = ($clone(v, Value).object());
			rcvr = undefined;
		/* } */ case 3:
		if (fn === 0) {
			$panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.NumIn();
		if (isSlice) {
			if (!t.IsVariadic()) {
				$panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.$length > n) {
				$panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.IsVariadic()) {
				n = n - (1) >> 0;
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.IsVariadic() && in$1.$length > n) {
				$panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if ($clone(x, Value).Kind() === 0) {
				$panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		/* while (true) { */ case 5:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 6; continue; }
			_r$1 = $clone(((i < 0 || i >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i]), Value).Type(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tmp = _r$1;
			_tmp$1 = t.In(i);
			xt = _tmp;
			targ = _tmp$1;
			_r$2 = xt.AssignableTo(targ); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (!_r$2) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!_r$2) { */ case 8:
				_r$3 = xt.String(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$4 = targ.String(); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$panic(new $String("reflect: " + op + " using " + _r$3 + " as type " + _r$4));
			/* } */ case 9:
			i = i + (1) >> 0;
		/* } */ $s = 5; continue; case 6:
		/* */ if (!isSlice && t.IsVariadic()) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!isSlice && t.IsVariadic()) { */ case 13:
			m = in$1.$length - n >> 0;
			_r$5 = MakeSlice(t.In(n), m, m); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			slice = _r$5;
			_r$6 = t.In(n).Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			elem = _r$6;
			i$1 = 0;
			/* while (true) { */ case 17:
				/* if (!(i$1 < m)) { break; } */ if(!(i$1 < m)) { $s = 18; continue; }
				x$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x$1]));
				_r$7 = $clone(x$2, Value).Type(); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				xt$1 = _r$7;
				_r$8 = xt$1.AssignableTo(elem); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				/* */ if (!_r$8) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (!_r$8) { */ case 20:
					_r$9 = xt$1.String(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_r$10 = elem.String(); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					$panic(new $String("reflect: cannot use " + _r$9 + " as type " + _r$10 + " in " + op));
				/* } */ case 21:
				_r$11 = $clone(slice, Value).Index(i$1); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				$r = $clone(_r$11, Value).Set($clone(x$2, Value)); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 17; continue; case 18:
			origIn = in$1;
			in$1 = $makeSlice(sliceType$9, (n + 1 >> 0));
			$copySlice($subslice(in$1, 0, n), origIn);
			((n < 0 || n >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + n] = slice);
		/* } */ case 14:
		nin = in$1.$length;
		if (!((nin === t.NumIn()))) {
			$panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.NumOut();
		argsArray = new ($global.Array)(t.NumIn());
		_ref$1 = in$1;
		_i$1 = 0;
		/* while (true) { */ case 27:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 28; continue; }
			i$2 = _i$1;
			arg = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			_arg = t.In(i$2);
			_r$12 = t.In(i$2).common(); /* */ $s = 29; case 29: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_arg$1 = _r$12;
			_arg$2 = 0;
			_r$13 = $clone(arg, Value).assignTo("reflect.Value.Call", _arg$1, _arg$2); /* */ $s = 30; case 30: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = $clone(_r$13, Value).object(); /* */ $s = 31; case 31: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_arg$3 = _r$14;
			_r$15 = unwrapJsObject(_arg, _arg$3); /* */ $s = 32; case 32: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			argsArray[i$2] = _r$15;
			_i$1++;
		/* } */ $s = 27; continue; case 28:
		_r$16 = callHelper(new sliceType$3([new $jsObjectPtr(fn), new $jsObjectPtr(rcvr), new $jsObjectPtr(argsArray)])); /* */ $s = 33; case 33: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		results = _r$16;
			_1 = nout;
			/* */ if (_1 === (0)) { $s = 35; continue; }
			/* */ if (_1 === (1)) { $s = 36; continue; }
			/* */ $s = 37; continue;
			/* if (_1 === (0)) { */ case 35:
				$s = -1; return sliceType$9.nil;
			/* } else if (_1 === (1)) { */ case 36:
				_r$17 = makeValue(t.Out(0), wrapJsObject(t.Out(0), results), 0); /* */ $s = 39; case 39: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				$s = -1; return new sliceType$9([$clone(_r$17, Value)]);
			/* } else { */ case 37:
				ret = $makeSlice(sliceType$9, nout);
				_ref$2 = ret;
				_i$2 = 0;
				/* while (true) { */ case 40:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 41; continue; }
					i$3 = _i$2;
					_r$18 = makeValue(t.Out(i$3), wrapJsObject(t.Out(i$3), results[i$3]), 0); /* */ $s = 42; case 42: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					((i$3 < 0 || i$3 >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + i$3] = _r$18);
					_i$2++;
				/* } */ $s = 40; continue; case 41:
				$s = -1; return ret;
			/* } */ case 38:
		case 34:
		$s = -1; return sliceType$9.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.call }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.arg = arg; $f.argsArray = argsArray; $f.elem = elem; $f.fn = fn; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.in$1 = in$1; $f.isSlice = isSlice; $f.m = m; $f.n = n; $f.nin = nin; $f.nout = nout; $f.op = op; $f.origIn = origIn; $f.rcvr = rcvr; $f.results = results; $f.ret = ret; $f.slice = slice; $f.t = t; $f.targ = targ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.xt = xt; $f.xt$1 = xt$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.ptr.prototype.Cap = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (17)) {
			return v.typ.Len();
		} else if ((_1 === (18)) || (_1 === (23))) {
			return $parseInt($clone(v, Value).object().$capacity) >> 0;
		}
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	wrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return new (jsType(jsObjectPtr))(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return val.object;
		}
		return val;
	};
	Value.ptr.prototype.Elem = function() {
		var _1, _r, fl, k, tt, typ, v, val, val$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; fl = $f.fl; k = $f.k; tt = $f.tt; typ = $f.typ; v = $f.v; val = $f.val; val$1 = $f.val$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (20)) { $s = 2; continue; }
			/* */ if (_1 === (22)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (20)) { */ case 2:
				val = $clone(v, Value).object();
				if (val === $ifaceNil) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				typ = reflectType(val.constructor);
				_r = makeValue(typ, val.$val, new flag(v.flag).ro()); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (22)) { */ case 3:
				if ($clone(v, Value).IsNil()) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				val$1 = $clone(v, Value).object();
				tt = (v.typ.kindType);
				fl = (((((v.flag & 96) >>> 0) | 128) >>> 0) | 256) >>> 0;
				fl = (fl | (((tt.elem.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(tt.elem, (wrapJsObject(tt.elem, val$1)), fl);
			/* } else { */ case 4:
				$panic(new ValueError.ptr("reflect.Value.Elem", k));
			/* } */ case 5:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Elem }; } $f._1 = _1; $f._r = _r; $f.fl = fl; $f.k = k; $f.tt = tt; $f.typ = typ; $f.v = v; $f.val = val; $f.val$1 = val$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.Field = function(i) {
		var _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; field = $f.field; fl = $f.fl; i = $f.i; jsTag = $f.jsTag; o = $f.o; prop = $f.prop; s = $f.s; tag = $f.tag; tt = $f.tt; typ = $f.typ; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsTag = [jsTag];
		prop = [prop];
		s = [s];
		typ = [typ];
		v = this;
		if (!((new flag(v.flag).kind() === 25))) {
			$panic(new ValueError.ptr("reflect.Value.Field", new flag(v.flag).kind()));
		}
		tt = (v.typ.kindType);
		if (((i >>> 0)) >= ((tt.fields.$length >>> 0))) {
			$panic(new $String("reflect: Field index out of range"));
		}
		prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		typ[0] = field.typ;
		fl = (((v.flag & 416) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
		if (!$clone(field.name, name).isExported()) {
			if (field.anon()) {
				fl = (fl | (64)) >>> 0;
			} else {
				fl = (fl | (32)) >>> 0;
			}
		}
		tag = $clone((x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).name, name).tag();
		/* */ if (!(tag === "") && !((i === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tag === "") && !((i === 0))) { */ case 1:
			jsTag[0] = getJsTag(tag);
			/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(jsTag[0] === "")) { */ case 3:
				/* while (true) { */ case 5:
					o = [o];
					_r = $clone(v, Value).Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (v.typ === jsObjectPtr) { */ case 8:
						o[0] = $clone(v, Value).object().object;
						$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ))), fl);
					/* } */ case 9:
					/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (v.typ.Kind() === 22) { */ case 10:
						_r$1 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						v = _r$1;
					/* } */ case 11:
				/* } */ $s = 5; continue; case 6:
			/* } */ case 4:
		/* } */ case 2:
		s[0] = v.ptr;
		/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
			$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ))), fl);
		/* } */ case 14:
		_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Field }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.field = field; $f.fl = fl; $f.i = i; $f.jsTag = jsTag; $f.o = o; $f.prop = prop; $f.s = s; $f.tag = tag; $f.tt = tt; $f.typ = typ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	getJsTag = function(tag) {
		var _tuple, i, name$1, qvalue, tag, value;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (name$1 === "js") {
				_tuple = strconv.Unquote(qvalue);
				value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	Value.ptr.prototype.Index = function(i) {
		var _1, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; a = $f.a; a$1 = $f.a$1; c = $f.c; fl = $f.fl; fl$1 = $f.fl$1; fl$2 = $f.fl$2; i = $f.i; k = $f.k; s = $f.s; str = $f.str; tt = $f.tt; tt$1 = $f.tt$1; typ = $f.typ; typ$1 = $f.typ$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		a$1 = [a$1];
		c = [c];
		i = [i];
		typ = [typ];
		typ$1 = [typ$1];
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				tt = (v.typ.kindType);
				if (i[0] < 0 || i[0] > ((tt.len >> 0))) {
					$panic(new $String("reflect: array index out of range"));
				}
				typ[0] = tt.elem;
				fl = (((((v.flag & 384) >>> 0) | new flag(v.flag).ro()) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
				a[0] = v.ptr;
				/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 7:
					$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ[0], a[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a[0][i[0]] = unwrapJsObject(typ[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl);
				/* } */ case 8:
				_r = makeValue(typ[0], wrapJsObject(typ[0], a[0][i[0]]), fl); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (23)) { */ case 3:
				s = $clone(v, Value).object();
				if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
					$panic(new $String("reflect: slice index out of range"));
				}
				tt$1 = (v.typ.kindType);
				typ$1[0] = tt$1.elem;
				fl$1 = (((384 | new flag(v.flag).ro()) >>> 0) | ((typ$1[0].Kind() >>> 0))) >>> 0;
				i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
				a$1[0] = s.$array;
				/* */ if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 10:
					$s = -1; return new Value.ptr(typ$1[0], (new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ$1[0], a$1[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl$1);
				/* } */ case 11:
				_r$1 = makeValue(typ$1[0], wrapJsObject(typ$1[0], a$1[0][i[0]]), fl$1); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i[0] < 0 || i[0] >= str.length) {
					$panic(new $String("reflect: string index out of range"));
				}
				fl$2 = (((new flag(v.flag).ro() | 8) >>> 0) | 128) >>> 0;
				c[0] = str.charCodeAt(i[0]);
				$s = -1; return new Value.ptr(uint8Type, ((c.$ptr || (c.$ptr = new ptrType$4(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c)))), fl$2);
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Index", k));
			/* } */ case 6:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Index }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.a$1 = a$1; $f.c = c; $f.fl = fl; $f.fl$1 = fl$1; $f.fl$2 = fl$2; $f.i = i; $f.k = k; $f.s = s; $f.str = str; $f.tt = tt; $f.tt$1 = tt$1; $f.typ = typ; $f.typ$1 = typ$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.InterfaceData = function() {
		var v;
		v = this;
		$panic(errors.New("InterfaceData is not supported by GopherJS"));
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsNil = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (22)) || (_1 === (23))) {
			return $clone(v, Value).object() === jsType(v.typ).nil;
		} else if (_1 === (18)) {
			return $clone(v, Value).object() === $chanNil;
		} else if (_1 === (19)) {
			return $clone(v, Value).object() === $throwNilPointerError;
		} else if (_1 === (21)) {
			return $clone(v, Value).object() === false;
		} else if (_1 === (20)) {
			return $clone(v, Value).object() === $ifaceNil;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (17)) || (_1 === (24))) {
			return $parseInt($clone(v, Value).object().length);
		} else if (_1 === (23)) {
			return $parseInt($clone(v, Value).object().$length) >> 0;
		} else if (_1 === (18)) {
			return $parseInt($clone(v, Value).object().$buffer.length) >> 0;
		} else if (_1 === (21)) {
			return $parseInt($keys($clone(v, Value).object()).length);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (18)) || (_1 === (21)) || (_1 === (22)) || (_1 === (26))) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object();
		} else if (_1 === (19)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return 1;
		} else if (_1 === (23)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var _1, _r, _r$1, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		/* */ if (!((((v.flag & 128) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((v.flag & 128) >>> 0) === 0))) { */ case 2:
				_1 = v.typ.Kind();
				/* */ if (_1 === (17)) { $s = 5; continue; }
				/* */ if (_1 === (20)) { $s = 6; continue; }
				/* */ if (_1 === (25)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (17)) { */ case 5:
					jsType(v.typ).copy(v.ptr, x.ptr);
					$s = 9; continue;
				/* } else if (_1 === (20)) { */ case 6:
					_r$1 = valueInterface($clone(x, Value), false); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					v.ptr.$set(_r$1);
					$s = 9; continue;
				/* } else if (_1 === (25)) { */ case 7:
					copyStruct(v.ptr, x.ptr, v.typ);
					$s = 9; continue;
				/* } else { */ case 8:
					v.ptr.$set($clone(x, Value).object());
				/* } */ case 9:
			case 4:
			$s = -1; return;
		/* } */ case 3:
		v.ptr = x.ptr;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Set }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.SetBytes = function(x) {
		var _r, _r$1, _v, slice, typedSlice, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; slice = $f.slice; typedSlice = $f.typedSlice; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		/* } */ case 2:
		slice = x;
		if (!(v.typ.Name() === "")) { _v = true; $s = 6; continue s; }
		_r$1 = v.typ.Elem().Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = !(_r$1 === ""); case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			typedSlice = new (jsType(v.typ))(slice.$array);
			typedSlice.$offset = slice.$offset;
			typedSlice.$length = slice.$length;
			typedSlice.$capacity = slice.$capacity;
			slice = typedSlice;
		/* } */ case 5:
		v.ptr.$set(slice);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetBytes }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.slice = slice; $f.typedSlice = typedSlice; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var _1, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; i = $f.i; j = $f.j; kind = $f.kind; s = $f.s; str = $f.str; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
			kind = new flag(v.flag).kind();
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				if (((v.flag & 256) >>> 0) === 0) {
					$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
				}
				tt = (v.typ.kindType);
				cap = ((tt.len >> 0));
				typ = SliceOf(tt.elem);
				s = new (jsType(typ))($clone(v, Value).object());
				$s = 6; continue;
			/* } else if (_1 === (23)) { */ case 3:
				typ = v.typ;
				s = $clone(v, Value).object();
				cap = $parseInt(s.$capacity) >> 0;
				$s = 6; continue;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i < 0 || j < i || j > str.length) {
					$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
				}
				_r = ValueOf(new $String($substring(str, i, j))); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Slice", kind));
			/* } */ case 6:
		case 1:
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		_r$1 = makeValue(typ, $subslice(s, i, j), new flag(v.flag).ro()); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.i = i; $f.j = j; $f.kind = kind; $f.s = s; $f.str = str; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var _1, _r, cap, i, j, k, kind, s, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; cap = $f.cap; i = $f.i; j = $f.j; k = $f.k; kind = $f.kind; s = $f.s; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_1 = kind;
		if (_1 === (17)) {
			if (((v.flag & 256) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = (v.typ.kindType);
			cap = ((tt.len >> 0));
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))($clone(v, Value).object());
		} else if (_1 === (23)) {
			typ = v.typ;
			s = $clone(v, Value).object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		_r = makeValue(typ, $subslice(s, i, j, k), new flag(v.flag).ro()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice3 }; } $f._1 = _1; $f._r = _r; $f.cap = cap; $f.i = i; $f.j = j; $f.k = k; $f.kind = kind; $f.s = s; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close($clone(v, Value).object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	chanrecv = function(ch, nb, val) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; ch = $f.ch; comms = $f.comms; nb = $f.nb; received = $f.received; recvRes = $f.recvRes; selectRes = $f.selectRes; selected = $f.selected; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		received = false;
		comms = new sliceType$11([new sliceType$8([ch])]);
		if (nb) {
			comms = $append(comms, new sliceType$8([]));
		}
		_r = selectHelper(new sliceType$3([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			_tmp = false;
			_tmp$1 = false;
			selected = _tmp;
			received = _tmp$1;
			$s = -1; return [selected, received];
		}
		recvRes = selectRes[1];
		val.$set(recvRes[0]);
		_tmp$2 = true;
		_tmp$3 = !!(recvRes[1]);
		selected = _tmp$2;
		received = _tmp$3;
		$s = -1; return [selected, received];
		/* */ } return; } if ($f === undefined) { $f = { $blk: chanrecv }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.received = received; $f.recvRes = recvRes; $f.selectRes = selectRes; $f.selected = selected; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	chansend = function(ch, val, nb) {
		var _r, ch, comms, nb, selectRes, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; ch = $f.ch; comms = $f.comms; nb = $f.nb; selectRes = $f.selectRes; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		comms = new sliceType$11([new sliceType$8([ch, val.$get()])]);
		if (nb) {
			comms = $append(comms, new sliceType$8([]));
		}
		_r = selectHelper(new sliceType$3([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			$s = -1; return false;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: chansend }; } $f._r = _r; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.selectRes = selectRes; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Swapper = function(slice) {
		var _1, _r, _r$1, _r$2, _r$3, _r$4, slice, tmp, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; slice = $f.slice; tmp = $f.tmp; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		tmp = [tmp];
		v = [v];
		_r = ValueOf(slice); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		v[0] = _r;
		if (!(($clone(v[0], Value).Kind() === 23))) {
			$panic(new ValueError.ptr("Swapper", $clone(v[0], Value).Kind()));
		}
			_1 = $clone(v[0], Value).Len();
			if (_1 === (0)) {
				$s = -1; return (function(tmp, v) { return function(i, j) {
					var i, j;
					$panic(new $String("reflect: slice index out of range"));
				}; })(tmp, v);
			} else if (_1 === (1)) {
				$s = -1; return (function(tmp, v) { return function(i, j) {
					var i, j;
					if (!((i === 0)) || !((j === 0))) {
						$panic(new $String("reflect: slice index out of range"));
					}
				}; })(tmp, v);
			}
		case 2:
		_r$1 = $clone(v[0], Value).Type(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = _r$1.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = New(_r$2); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = $clone(_r$3, Value).Elem(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		tmp[0] = _r$4;
		$s = -1; return (function(tmp, v) { return function $b(i, j) {
			var _r$5, _r$6, i, j, v1, v2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$5 = $f._r$5; _r$6 = $f._r$6; i = $f.i; j = $f.j; v1 = $f.v1; v2 = $f.v2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$5 = $clone(v[0], Value).Index(i); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			v1 = _r$5;
			_r$6 = $clone(v[0], Value).Index(j); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			v2 = _r$6;
			$r = $clone(tmp[0], Value).Set($clone(v1, Value)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = $clone(v1, Value).Set($clone(v2, Value)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = $clone(v2, Value).Set($clone(tmp[0], Value)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$5 = _r$5; $f._r$6 = _r$6; $f.i = i; $f.j = j; $f.v1 = v1; $f.v2 = v2; $f.$s = $s; $f.$r = $r; return $f;
		}; })(tmp, v);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Swapper }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.slice = slice; $f.tmp = tmp; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Swapper = Swapper;
	structField.ptr.prototype.offset = function() {
		var f;
		f = this;
		return f.offsetAnon >>> 1 >>> 0;
	};
	structField.prototype.offset = function() { return this.$val.offset(); };
	structField.ptr.prototype.anon = function() {
		var f;
		f = this;
		return !((((f.offsetAnon & 1) >>> 0) === 0));
	};
	structField.prototype.anon = function() { return this.$val.anon(); };
	Kind.prototype.String = function() {
		var k;
		k = this.$val;
		if (((k >> 0)) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : kindNames.$array[kindNames.$offset + k]);
		}
		return "kind" + strconv.Itoa(((k >> 0)));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	rtype.ptr.prototype.String = function() {
		var s, t;
		t = this;
		s = $clone(t.nameOff(t.str), name).name();
		if (!((((t.tflag & 2) >>> 0) === 0))) {
			return $substring(s, 1);
		}
		return s;
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Bits = function() {
		var k, t;
		t = this;
		if (t === ptrType$1.nil) {
			$panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return $imul(((t.size >> 0)), 8);
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.ptr.prototype.Align = function() {
		var t;
		t = this;
		return ((t.align >> 0));
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.ptr.prototype.FieldAlign = function() {
		var t;
		t = this;
		return ((t.fieldAlign >> 0));
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.ptr.prototype.Kind = function() {
		var t;
		t = this;
		return ((((t.kind & 31) >>> 0) >>> 0));
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.common = function() {
		var t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	rtype.ptr.prototype.exportedMethods = function() {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, _tuple, _tuple$1, allExported, allm, found, m, m$1, methods, methodsi, name$1, name$2, t, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; allExported = $f.allExported; allm = $f.allm; found = $f.found; m = $f.m; m$1 = $f.m$1; methods = $f.methods; methodsi = $f.methodsi; name$1 = $f.name$1; name$2 = $f.name$2; t = $f.t; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = methodCache.Load(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		methodsi = _tuple[0];
		found = _tuple[1];
		if (found) {
			$s = -1; return $assertType(methodsi, sliceType$5);
		}
		ut = t.uncommon();
		if (ut === ptrType$5.nil) {
			$s = -1; return sliceType$5.nil;
		}
		allm = ut.methods();
		allExported = true;
		_ref = allm;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			m = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), method);
			name$1 = $clone(t.nameOff(m.name), name);
			if (!$clone(name$1, name).isExported()) {
				allExported = false;
				break;
			}
			_i++;
		}
		methods = sliceType$5.nil;
		if (allExported) {
			methods = allm;
		} else {
			methods = $makeSlice(sliceType$5, 0, allm.$length);
			_ref$1 = allm;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				m$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), method);
				name$2 = $clone(t.nameOff(m$1.name), name);
				if ($clone(name$2, name).isExported()) {
					methods = $append(methods, m$1);
				}
				_i$1++;
			}
			methods = $subslice(methods, 0, methods.$length, methods.$length);
		}
		_r$1 = methodCache.LoadOrStore(t, methods); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		methodsi = _tuple$1[0];
		$s = -1; return $assertType(methodsi, sliceType$5);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.exportedMethods }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.allExported = allExported; $f.allm = allm; $f.found = found; $f.m = m; $f.m$1 = m$1; $f.methods = methods; $f.methodsi = methodsi; $f.name$1 = name$1; $f.name$2 = name$2; $f.t = t; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.NumMethod = function() {
		var _r, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			$s = -1; return tt.NumMethod();
		}
		if (((t.tflag & 1) >>> 0) === 0) {
			$s = -1; return 0;
		}
		_r = t.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r.$length;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.NumMethod }; } $f._r = _r; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.MethodByName = function(name$1) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, eidx, i, m, name$1, ok, p, pname, t, tt, ut, utmethods, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; eidx = $f.eidx; i = $f.i; m = $f.m; name$1 = $f.name$1; ok = $f.ok; p = $f.p; pname = $f.pname; t = $f.t; tt = $f.tt; ut = $f.ut; utmethods = $f.utmethods; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			_tuple = tt.MethodByName(name$1);
			Method.copy(m, _tuple[0]);
			ok = _tuple[1];
			$s = -1; return [m, ok];
		}
		ut = t.uncommon();
		if (ut === ptrType$5.nil) {
			_tmp = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
			_tmp$1 = false;
			Method.copy(m, _tmp);
			ok = _tmp$1;
			$s = -1; return [m, ok];
		}
		utmethods = ut.methods();
		eidx = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < ((ut.mcount >> 0)))) { break; } */ if(!(i < ((ut.mcount >> 0)))) { $s = 2; continue; }
			p = $clone(((i < 0 || i >= utmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : utmethods.$array[utmethods.$offset + i]), method);
			pname = $clone(t.nameOff(p.name), name);
			/* */ if ($clone(pname, name).isExported()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($clone(pname, name).isExported()) { */ case 3:
				/* */ if ($clone(pname, name).name() === name$1) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ($clone(pname, name).name() === name$1) { */ case 5:
					_r = t.Method(eidx); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_tmp$2 = $clone(_r, Method);
					_tmp$3 = true;
					Method.copy(m, _tmp$2);
					ok = _tmp$3;
					$s = -1; return [m, ok];
				/* } */ case 6:
				eidx = eidx + (1) >> 0;
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_tmp$4 = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		_tmp$5 = false;
		Method.copy(m, _tmp$4);
		ok = _tmp$5;
		$s = -1; return [m, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.MethodByName }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.eidx = eidx; $f.i = i; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.p = p; $f.pname = pname; $f.t = t; $f.tt = tt; $f.ut = ut; $f.utmethods = utmethods; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	rtype.ptr.prototype.PkgPath = function() {
		var t, ut;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		ut = t.uncommon();
		if (ut === ptrType$5.nil) {
			return "";
		}
		return $clone(t.nameOff(ut.pkgPath), name).name();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.Name = function() {
		var i, s, t;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		s = t.String();
		i = s.length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (s.charCodeAt(i) === 46) {
				break;
			}
			i = i - (1) >> 0;
		}
		return $substring(s, (i + 1 >> 0));
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.ChanDir = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: ChanDir of non-chan type"));
		}
		tt = (t.kindType);
		return ((tt.dir >> 0));
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = (t.kindType);
		return !((((tt.outCount & 32768) >>> 0) === 0));
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Elem = function() {
		var _1, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_1 = t.Kind();
		if (_1 === (17)) {
			tt = (t.kindType);
			return toType(tt.elem);
		} else if (_1 === (18)) {
			tt$1 = (t.kindType);
			return toType(tt$1.elem);
		} else if (_1 === (21)) {
			tt$2 = (t.kindType);
			return toType(tt$2.elem);
		} else if (_1 === (22)) {
			tt$3 = (t.kindType);
			return toType(tt$3.elem);
		} else if (_1 === (23)) {
			tt$4 = (t.kindType);
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.Field = function(i) {
		var i, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type"));
		}
		tt = (t.kindType);
		return tt.Field(i);
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.FieldByIndex = function(index) {
		var _r, index, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; index = $f.index; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByIndex of non-struct type"));
		}
		tt = (t.kindType);
		_r = tt.FieldByIndex(index); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByIndex }; } $f._r = _r; $f.index = index; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.ptr.prototype.FieldByName = function(name$1) {
		var _r, name$1, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; name$1 = $f.name$1; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByName of non-struct type"));
		}
		tt = (t.kindType);
		_r = tt.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByName }; } $f._r = _r; $f.name$1 = name$1; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	rtype.ptr.prototype.FieldByNameFunc = function(match) {
		var _r, match, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; match = $f.match; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByNameFunc of non-struct type"));
		}
		tt = (t.kindType);
		_r = tt.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByNameFunc }; } $f._r = _r; $f.match = match; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.ptr.prototype.In = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type"));
		}
		tt = (t.kindType);
		return toType((x = tt.in$(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Key = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type"));
		}
		tt = (t.kindType);
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.Len = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type"));
		}
		tt = (t.kindType);
		return ((tt.len >> 0));
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumField = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = (t.kindType);
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.NumIn = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = (t.kindType);
		return ((tt.inCount >> 0));
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = (t.kindType);
		return tt.out().$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type"));
		}
		tt = (t.kindType);
		return toType((x = tt.out(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var _1, d;
		d = this.$val;
		_1 = d;
		if (_1 === (2)) {
			return "chan<-";
		} else if (_1 === (1)) {
			return "<-chan";
		} else if (_1 === (3)) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa(((d >> 0)));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.ptr.prototype.Method = function(i) {
		var i, m, p, pname, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (i < 0 || i >= t.methods.$length) {
			return m;
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		pname = $clone(t.rtype.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		if (!$clone(pname, name).isExported()) {
			m.PkgPath = $clone(pname, name).pkgPath();
			if (m.PkgPath === "") {
				m.PkgPath = $clone(t.pkgPath, name).name();
			}
		}
		m.Type = toType(t.rtype.typeOff(p.typ));
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.ptr.prototype.MethodByName = function(name$1) {
		var _i, _ref, _tmp, _tmp$1, i, m, name$1, ok, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t === ptrType$7.nil) {
			return [m, ok];
		}
		p = ptrType$8.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if ($clone(t.rtype.nameOff(p.name), name).name() === name$1) {
				_tmp = $clone(t.Method(i), Method);
				_tmp$1 = true;
				Method.copy(m, _tmp);
				ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	StructTag.prototype.Get = function(key) {
		var _tuple, key, tag, v;
		tag = this.$val;
		_tuple = new StructTag(tag).Lookup(key);
		v = _tuple[0];
		return v;
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	StructTag.prototype.Lookup = function(key) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, i, key, name$1, ok, qvalue, tag, value, value$1;
		value = "";
		ok = false;
		tag = this.$val;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && tag.charCodeAt(i) > 32 && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)) && !((tag.charCodeAt(i) === 127)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i === 0) || (i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (key === name$1) {
				_tuple = strconv.Unquote(qvalue);
				value$1 = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					break;
				}
				_tmp = value$1;
				_tmp$1 = true;
				value = _tmp;
				ok = _tmp$1;
				return [value, ok];
			}
		}
		_tmp$2 = "";
		_tmp$3 = false;
		value = _tmp$2;
		ok = _tmp$3;
		return [value, ok];
	};
	$ptrType(StructTag).prototype.Lookup = function(key) { return new StructTag(this.$get()).Lookup(key); };
	structType.ptr.prototype.Field = function(i) {
		var f, i, p, t, tag, x;
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		t = this;
		if (i < 0 || i >= t.fields.$length) {
			$panic(new $String("reflect: Field index out of bounds"));
		}
		p = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		f.Type = toType(p.typ);
		f.Name = $clone(p.name, name).name();
		f.Anonymous = p.anon();
		if (!$clone(p.name, name).isExported()) {
			f.PkgPath = $clone(t.pkgPath, name).name();
		}
		tag = $clone(p.name, name).tag();
		if (!(tag === "")) {
			f.Tag = (tag);
		}
		f.Offset = p.offset();
		f.Index = new sliceType$13([i]);
		return f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.ptr.prototype.FieldByIndex = function(index) {
		var _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _v = $f._v; f = $f.f; ft = $f.ft; i = $f.i; index = $f.index; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				ft = f.Type;
				_r = ft.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				if (!(_r === 22)) { _v = false; $s = 7; continue s; }
				_r$1 = ft.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 25; case 7:
				/* */ if (_v) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_v) { */ case 5:
					_r$3 = ft.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ft = _r$3;
				/* } */ case 6:
				f.Type = ft;
			/* } */ case 4:
			_r$4 = f.Type.Field(x); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			StructField.copy(f, _r$4);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByIndex }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._v = _v; $f.f = f; $f.ft = ft; $f.i = i; $f.index = index; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.ptr.prototype.FieldByNameFunc = function(match) {
		var _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; count = $f.count; current = $f.current; f = $f.f; fname = $f.fname; i = $f.i; index = $f.index; match = $f.match; next = $f.next; nextCount = $f.nextCount; ntyp = $f.ntyp; ok = $f.ok; result = $f.result; scan = $f.scan; styp = $f.styp; t = $f.t; t$1 = $f.t$1; visited = $f.visited; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		ok = false;
		t = this;
		current = new sliceType$14([]);
		next = new sliceType$14([new fieldScan.ptr(t, sliceType$13.nil)]);
		nextCount = false;
		visited = $makeMap(ptrType$9.keyFor, []);
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next;
			_tmp$1 = $subslice(current, 0, 0);
			current = _tmp;
			next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				scan = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), fieldScan);
				t$1 = scan.typ;
				/* */ if ((_entry = visited[ptrType$9.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((_entry = visited[ptrType$9.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { */ case 5:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				_key = t$1; (visited || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key)] = { k: _key, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				/* while (true) { */ case 7:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }
					i = _i$1;
					f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
					fname = $clone(f.name, name).name();
					ntyp = ptrType$1.nil;
					/* */ if (f.anon()) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (f.anon()) { */ case 9:
						ntyp = f.typ;
						/* */ if (ntyp.Kind() === 22) { $s = 11; continue; }
						/* */ $s = 12; continue;
						/* if (ntyp.Kind() === 22) { */ case 11:
							_r = ntyp.Elem().common(); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							ntyp = _r;
						/* } */ case 12:
					/* } */ case 10:
					_r$1 = match(fname); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (_r$1) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (_r$1) { */ case 14:
						if ((_entry$1 = count[ptrType$9.keyFor(t$1)], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
							_tmp$3 = false;
							StructField.copy(result, _tmp$2);
							ok = _tmp$3;
							$s = -1; return [result, ok];
						}
						StructField.copy(result, t$1.Field(i));
						result.Index = sliceType$13.nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						/* continue; */ $s = 7; continue;
					/* } */ case 15:
					if (ok || ntyp === ptrType$1.nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					styp = (ntyp.kindType);
					if ((_entry$2 = nextCount[ptrType$9.keyFor(styp)], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$1 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key$1)] = { k: _key$1, v: 2 };
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					if (nextCount === false) {
						nextCount = $makeMap(ptrType$9.keyFor, []);
					}
					_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key$2)] = { k: _key$2, v: 1 };
					if ((_entry$3 = count[ptrType$9.keyFor(t$1)], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$3 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key$3)] = { k: _key$3, v: 2 };
					}
					index = sliceType$13.nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.ptr(styp, index));
					_i$1++;
				/* } */ $s = 7; continue; case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
			if (ok) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [result, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByNameFunc }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.count = count; $f.current = current; $f.f = f; $f.fname = fname; $f.i = i; $f.index = index; $f.match = match; $f.next = next; $f.nextCount = nextCount; $f.ntyp = ntyp; $f.ok = ok; $f.result = result; $f.scan = scan; $f.styp = styp; $f.t = t; $f.t$1 = t$1; $f.visited = visited; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.ptr.prototype.FieldByName = function(name$1) {
		var _i, _r, _ref, _tmp, _tmp$1, _tuple, f, hasAnon, i, name$1, present, t, tf, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; hasAnon = $f.hasAnon; i = $f.i; name$1 = $f.name$1; present = $f.present; t = $f.t; tf = $f.tf; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name$1 = [name$1];
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		present = false;
		t = this;
		hasAnon = false;
		if (!(name$1[0] === "")) {
			_ref = t.fields;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				tf = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				if ($clone(tf.name, name).name() === name$1[0]) {
					_tmp = $clone(t.Field(i), StructField);
					_tmp$1 = true;
					StructField.copy(f, _tmp);
					present = _tmp$1;
					$s = -1; return [f, present];
				}
				if (tf.anon()) {
					hasAnon = true;
				}
				_i++;
			}
		}
		if (!hasAnon) {
			$s = -1; return [f, present];
		}
		_r = t.FieldByNameFunc((function(name$1) { return function(s) {
			var s;
			return s === name$1[0];
		}; })(name$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		StructField.copy(f, _tuple[0]);
		present = _tuple[1];
		$s = -1; return [f, present];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByName }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.hasAnon = hasAnon; $f.i = i; $f.name$1 = name$1; $f.present = present; $f.t = t; $f.tf = tf; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	PtrTo = function(t) {
		var t;
		return $assertType(t, ptrType$1).ptrTo();
	};
	$pkg.PtrTo = PtrTo;
	rtype.ptr.prototype.Implements = function(u) {
		var _r, t, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 20))) { */ case 1:
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		/* } */ case 2:
		$s = -1; return implements$1($assertType(u, ptrType$1), t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Implements }; } $f._r = _r; $f.t = t; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = directlyAssignable(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r || implements$1(uu, t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.AssignableTo }; } $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.ptr.prototype.ConvertibleTo = function(u) {
		var _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = convertOp(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return !(_r === $throwNilPointerError);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.ConvertibleTo }; } $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var T, V, i, i$1, j, j$1, t, tm, tm$1, tmName, tmName$1, tmPkgPath, tmPkgPath$1, v, v$1, vm, vm$1, vmName, vmName$1, vmPkgPath, vmPkgPath$1, vmethods, x, x$1, x$2;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = (T.kindType);
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = (V.kindType);
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				tmName = $clone(t.rtype.nameOff(tm.name), name);
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j]));
				vmName = $clone(V.nameOff(vm.name), name);
				if ($clone(vmName, name).name() === $clone(tmName, name).name() && V.typeOff(vm.typ) === t.rtype.typeOff(tm.typ)) {
					if (!$clone(tmName, name).isExported()) {
						tmPkgPath = $clone(tmName, name).pkgPath();
						if (tmPkgPath === "") {
							tmPkgPath = $clone(t.pkgPath, name).name();
						}
						vmPkgPath = $clone(vmName, name).pkgPath();
						if (vmPkgPath === "") {
							vmPkgPath = $clone(v.pkgPath, name).name();
						}
						if (!(tmPkgPath === vmPkgPath)) {
							j = j + (1) >> 0;
							continue;
						}
					}
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommon();
		if (v$1 === ptrType$5.nil) {
			return false;
		}
		i$1 = 0;
		vmethods = v$1.methods();
		j$1 = 0;
		while (true) {
			if (!(j$1 < ((v$1.mcount >> 0)))) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			tmName$1 = $clone(t.rtype.nameOff(tm$1.name), name);
			vm$1 = $clone(((j$1 < 0 || j$1 >= vmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : vmethods.$array[vmethods.$offset + j$1]), method);
			vmName$1 = $clone(V.nameOff(vm$1.name), name);
			if ($clone(vmName$1, name).name() === $clone(tmName$1, name).name() && V.typeOff(vm$1.mtyp) === t.rtype.typeOff(tm$1.typ)) {
				if (!$clone(tmName$1, name).isExported()) {
					tmPkgPath$1 = $clone(tmName$1, name).pkgPath();
					if (tmPkgPath$1 === "") {
						tmPkgPath$1 = $clone(t.pkgPath, name).name();
					}
					vmPkgPath$1 = $clone(vmName$1, name).pkgPath();
					if (vmPkgPath$1 === "") {
						vmPkgPath$1 = $clone(V.nameOff(v$1.pkgPath), name).name();
					}
					if (!(tmPkgPath$1 === vmPkgPath$1)) {
						j$1 = j$1 + (1) >> 0;
						continue;
					}
				}
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		var T, V, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; V = $f.V; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
			$s = -1; return false;
		}
		_r = haveIdenticalUnderlyingType(T, V, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: directlyAssignable }; } $f.T = T; $f.V = V; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	haveIdenticalType = function(T, V, cmpTags) {
		var T, V, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _v, cmpTags, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; V = $f.V; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _v = $f._v; cmpTags = $f.cmpTags; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (cmpTags) {
			$s = -1; return $interfaceIsEqual(T, V);
		}
		_r = T.Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = V.Name(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (!(_r === _r$1)) { _v = true; $s = 3; continue s; }
		_r$2 = T.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = V.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = !((_r$2 === _r$3)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return false;
		/* } */ case 2:
		_r$4 = T.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = _r$4;
		_r$5 = V.common(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$1 = _r$5;
		_r$6 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: haveIdenticalType }; } $f.T = T; $f.V = V; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._v = _v; $f.cmpTags = cmpTags; $f.$s = $s; $f.$r = $r; return $f;
	};
	haveIdenticalUnderlyingType = function(T, V, cmpTags) {
		var T, V, _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _v, _v$1, _v$2, _v$3, cmpTags, i, i$1, i$2, kind, t, t$1, t$2, tf, v, v$1, v$2, vf, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; V = $f.V; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; cmpTags = $f.cmpTags; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; kind = $f.kind; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; tf = $f.tf; v = $f.v; v$1 = $f.v$1; v$2 = $f.v$2; vf = $f.vf; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			$s = -1; return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			$s = -1; return true;
		}
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (18)) { $s = 3; continue; }
			/* */ if (_1 === (19)) { $s = 4; continue; }
			/* */ if (_1 === (20)) { $s = 5; continue; }
			/* */ if (_1 === (21)) { $s = 6; continue; }
			/* */ if ((_1 === (22)) || (_1 === (23))) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === (17)) { */ case 2:
				if (!(T.Len() === V.Len())) { _v = false; $s = 10; continue s; }
				_r = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 10:
				$s = -1; return _v;
			/* } else if (_1 === (18)) { */ case 3:
				if (!(V.ChanDir() === 3)) { _v$1 = false; $s = 14; continue s; }
				_r$1 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = _r$1; case 14:
				/* */ if (_v$1) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_v$1) { */ case 12:
					$s = -1; return true;
				/* } */ case 13:
				if (!(V.ChanDir() === T.ChanDir())) { _v$2 = false; $s = 16; continue s; }
				_r$2 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 16:
				$s = -1; return _v$2;
			/* } else if (_1 === (19)) { */ case 4:
				t = (T.kindType);
				v = (V.kindType);
				if (!((t.outCount === v.outCount)) || !((t.inCount === v.inCount))) {
					$s = -1; return false;
				}
				i = 0;
				/* while (true) { */ case 18:
					/* if (!(i < t.rtype.NumIn())) { break; } */ if(!(i < t.rtype.NumIn())) { $s = 19; continue; }
					_r$3 = haveIdenticalType(t.rtype.In(i), v.rtype.In(i), cmpTags); /* */ $s = 22; case 22: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (!_r$3) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (!_r$3) { */ case 20:
						$s = -1; return false;
					/* } */ case 21:
					i = i + (1) >> 0;
				/* } */ $s = 18; continue; case 19:
				i$1 = 0;
				/* while (true) { */ case 23:
					/* if (!(i$1 < t.rtype.NumOut())) { break; } */ if(!(i$1 < t.rtype.NumOut())) { $s = 24; continue; }
					_r$4 = haveIdenticalType(t.rtype.Out(i$1), v.rtype.Out(i$1), cmpTags); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if (!_r$4) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (!_r$4) { */ case 25:
						$s = -1; return false;
					/* } */ case 26:
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 23; continue; case 24:
				$s = -1; return true;
			/* } else if (_1 === (20)) { */ case 5:
				t$1 = (T.kindType);
				v$1 = (V.kindType);
				if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
					$s = -1; return true;
				}
				$s = -1; return false;
			/* } else if (_1 === (21)) { */ case 6:
				_r$5 = haveIdenticalType(T.Key(), V.Key(), cmpTags); /* */ $s = 29; case 29: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				if (!(_r$5)) { _v$3 = false; $s = 28; continue s; }
				_r$6 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 30; case 30: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_v$3 = _r$6; case 28:
				$s = -1; return _v$3;
			/* } else if ((_1 === (22)) || (_1 === (23))) { */ case 7:
				_r$7 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 31; case 31: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$s = -1; return _r$7;
			/* } else if (_1 === (25)) { */ case 8:
				t$2 = (T.kindType);
				v$2 = (V.kindType);
				if (!((t$2.fields.$length === v$2.fields.$length))) {
					$s = -1; return false;
				}
				if (!($clone(t$2.pkgPath, name).name() === $clone(v$2.pkgPath, name).name())) {
					$s = -1; return false;
				}
				_ref = t$2.fields;
				_i = 0;
				/* while (true) { */ case 32:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 33; continue; }
					i$2 = _i;
					tf = (x = t$2.fields, ((i$2 < 0 || i$2 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$2]));
					vf = (x$1 = v$2.fields, ((i$2 < 0 || i$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$2]));
					if (!($clone(tf.name, name).name() === $clone(vf.name, name).name())) {
						$s = -1; return false;
					}
					_r$8 = haveIdenticalType(tf.typ, vf.typ, cmpTags); /* */ $s = 36; case 36: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					/* */ if (!_r$8) { $s = 34; continue; }
					/* */ $s = 35; continue;
					/* if (!_r$8) { */ case 34:
						$s = -1; return false;
					/* } */ case 35:
					if (cmpTags && !($clone(tf.name, name).tag() === $clone(vf.name, name).tag())) {
						$s = -1; return false;
					}
					if (!((tf.offsetAnon === vf.offsetAnon))) {
						$s = -1; return false;
					}
					_i++;
				/* } */ $s = 32; continue; case 33:
				$s = -1; return true;
			/* } */ case 9:
		case 1:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: haveIdenticalUnderlyingType }; } $f.T = T; $f.V = V; $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.cmpTags = cmpTags; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.kind = kind; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.tf = tf; $f.v = v; $f.v$1 = v$1; $f.v$2 = v$2; $f.vf = vf; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	toType = function(t) {
		var t;
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	flag.prototype.kind = function() {
		var f;
		f = this.$val;
		return ((((f & 31) >>> 0) >>> 0));
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	flag.prototype.ro = function() {
		var f;
		f = this.$val;
		if (!((((f & 96) >>> 0) === 0))) {
			return 32;
		}
		return 0;
	};
	$ptrType(flag).prototype.ro = function() { return new flag(this.$get()).ro(); };
	Value.ptr.prototype.pointer = function() {
		var v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			return (v.ptr).$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBe = function(expected) {
		var expected, f;
		f = this.$val;
		if (!((new flag(f).kind() === expected))) {
			$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 256) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.ptr.prototype.Addr = function() {
		var v;
		v = this;
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		return new Value.ptr(v.typ.ptrTo(), v.ptr, (new flag(v.flag).ro() | 22) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.ptr.prototype.Bool = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(1);
		return (v.ptr).$get();
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.ptr.prototype.Bytes = function() {
		var _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-byte slice"));
		/* } */ case 2:
		$s = -1; return (v.ptr).$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Bytes }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.ptr.prototype.runes = function() {
		var _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-rune slice"));
		/* } */ case 2:
		$s = -1; return (v.ptr).$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.runes }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.ptr.prototype.CanAddr = function() {
		var v;
		v = this;
		return !((((v.flag & 256) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.ptr.prototype.CanSet = function() {
		var v;
		v = this;
		return ((v.flag & 352) >>> 0) === 256;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.Call = function(in$1) {
		var _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).call("Call", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Call }; } $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.ptr.prototype.CallSlice = function(in$1) {
		var _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).call("CallSlice", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.CallSlice }; } $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.ptr.prototype.Complex = function() {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return ((x = (v.ptr).$get(), new $Complex128(x.$real, x.$imag)));
		} else if (_1 === (16)) {
			return (v.ptr).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Complex", new flag(v.flag).kind()));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.ptr.prototype.FieldByIndex = function(index) {
		var _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _v = $f._v; i = $f.i; index = $f.index; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (index.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index.$length === 1) { */ case 1:
			_r = $clone(v, Value).Field((0 >= index.$length ? ($throwRuntimeError("index out of range"), undefined) : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (i > 0) { */ case 6:
				if (!($clone(v, Value).Kind() === 22)) { _v = false; $s = 10; continue s; }
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1 === 25; case 10:
				/* */ if (_v) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_v) { */ case 8:
					if ($clone(v, Value).IsNil()) {
						$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					_r$2 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					v = _r$2;
				/* } */ case 9:
			/* } */ case 7:
			_r$3 = $clone(v, Value).Field(x); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByIndex }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._v = _v; $f.i = i; $f.index = index; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.ptr.prototype.FieldByName = function(name$1) {
		var _r, _r$1, _tuple, f, name$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(25);
		_r = v.typ.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByName }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	Value.ptr.prototype.FieldByNameFunc = function(match) {
		var _r, _r$1, _tuple, f, match, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; match = $f.match; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		_r = v.typ.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByNameFunc }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.match = match; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.ptr.prototype.Float = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return ((v.ptr).$get());
		} else if (_1 === (14)) {
			return (v.ptr).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Float", new flag(v.flag).kind()));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Int = function() {
		var _1, k, p, v;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (2)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (3)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (4)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (5)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (6)) {
			return (p).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Int", new flag(v.flag).kind()));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.CanInterface = function() {
		var v;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 96) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.ptr.prototype.Interface = function() {
		var _r, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = $ifaceNil;
		v = this;
		_r = valueInterface($clone(v, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Interface }; } $f._r = _r; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.ptr.prototype.IsValid = function() {
		var v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.Kind = function() {
		var v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var _r, c, e, fl, k, key, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; e = $f.e; fl = $f.fl; k = $f.k; key = $f.key; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		_r = $clone(key, Value).assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
		}
		e = mapaccess(v.typ, $clone(v, Value).pointer(), k);
		if (e === 0) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = new flag((((v.flag | key.flag) >>> 0))).ro();
		fl = (fl | (((typ.Kind() >>> 0)))) >>> 0;
		if (!ifaceIndir(typ)) {
			$s = -1; return new Value.ptr(typ, (e).$get(), fl);
		}
		c = unsafe_New(typ);
		typedmemmove(typ, c, e);
		$s = -1; return new Value.ptr(typ, c, (fl | 128) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapIndex }; } $f._r = _r; $f.c = c; $f.e = e; $f.fl = fl; $f.k = k; $f.key = key; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.MapKeys = function() {
		var _r, a, c, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; c = $f.c; fl = $f.fl; i = $f.i; it = $f.it; key = $f.key; keyType = $f.keyType; m = $f.m; mlen = $f.mlen; tt = $f.tt; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		keyType = tt.key;
		fl = (new flag(v.flag).ro() | ((keyType.Kind() >>> 0))) >>> 0;
		m = $clone(v, Value).pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = $makeSlice(sliceType$9, mlen);
		i = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			_r = mapiterkey(it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			if (key === 0) {
				/* break; */ $s = 2; continue;
			}
			if (ifaceIndir(keyType)) {
				c = unsafe_New(keyType);
				typedmemmove(keyType, c, key);
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = new Value.ptr(keyType, c, (fl | 128) >>> 0));
			} else {
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = new Value.ptr(keyType, (key).$get(), fl));
			}
			mapiternext(it);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $subslice(a, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapKeys }; } $f._r = _r; $f.a = a; $f.c = c; $f.fl = fl; $f.i = i; $f.it = it; $f.key = key; $f.keyType = keyType; $f.m = m; $f.mlen = mlen; $f.tt = tt; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.ptr.prototype.Method = function(i) {
		var _r, _v, fl, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _v = $f._v; fl = $f.fl; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) { _v = true; $s = 3; continue s; }
		_r = v.typ.NumMethod(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = ((i >>> 0)) >= ((_r >>> 0)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect: Method index out of range"));
		/* } */ case 2:
		if ((v.typ.Kind() === 20) && $clone(v, Value).IsNil()) {
			$panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (v.flag & 160) >>> 0;
		fl = (fl | (19)) >>> 0;
		fl = (fl | ((((((i >>> 0)) << 10 >>> 0) | 512) >>> 0))) >>> 0;
		$s = -1; return new Value.ptr(v.typ, v.ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Method }; } $f._r = _r; $f._v = _v; $f.fl = fl; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.NumMethod = function() {
		var _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return 0;
		}
		_r = v.typ.NumMethod(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.NumMethod }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.ptr.prototype.MethodByName = function(name$1) {
		var _r, _r$1, _tuple, m, name$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; m = $f.m; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = v.typ.MethodByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = $clone(_tuple[0], Method);
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r$1 = $clone(v, Value).Method(m.Index); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MethodByName }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	Value.ptr.prototype.NumField = function() {
		var tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = (v.typ.kindType);
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.OverflowComplex = function(x) {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
		} else if (_1 === (16)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowComplex", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
	Value.ptr.prototype.OverflowFloat = function(x) {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return overflowFloat32(x);
		} else if (_1 === (14)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowFloat", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		var x;
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.ptr.prototype.OverflowInt = function(x) {
		var _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowInt", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
	Value.ptr.prototype.OverflowUint = function(x) {
		var _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (7)) || (_1 === (12)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowUint", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
	Value.ptr.prototype.Recv = function() {
		var _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).recv(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$s = -1; return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Recv }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	Value.ptr.prototype.recv = function(nb) {
		var _r, _tuple, nb, ok, p, selected, t, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; nb = $f.nb; ok = $f.ok; p = $f.p; selected = $f.selected; t = $f.t; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		tt = (v.typ.kindType);
		if ((((tt.dir >> 0)) & 1) === 0) {
			$panic(new $String("reflect: recv on send-only channel"));
		}
		t = tt.elem;
		val = new Value.ptr(t, 0, ((t.Kind() >>> 0)));
		p = 0;
		if (ifaceIndir(t)) {
			p = unsafe_New(t);
			val.ptr = p;
			val.flag = (val.flag | (128)) >>> 0;
		} else {
			p = ((val.$ptr_ptr || (val.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val))));
		}
		_r = chanrecv($clone(v, Value).pointer(), nb, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		selected = _tuple[0];
		ok = _tuple[1];
		if (!selected) {
			val = new Value.ptr(ptrType$1.nil, 0, 0);
		}
		$s = -1; return [val, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.recv }; } $f._r = _r; $f._tuple = _tuple; $f.nb = nb; $f.ok = ok; $f.p = p; $f.selected = selected; $f.t = t; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.recv = function(nb) { return this.$val.recv(nb); };
	Value.ptr.prototype.Send = function(x) {
		var _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).send($clone(x, Value), false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Send }; } $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Send = function(x) { return this.$val.Send(x); };
	Value.ptr.prototype.send = function(x, nb) {
		var _r, _r$1, nb, p, selected, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; nb = $f.nb; p = $f.p; selected = $f.selected; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		v = this;
		tt = (v.typ.kindType);
		if ((((tt.dir >> 0)) & 2) === 0) {
			$panic(new $String("reflect: send on recv-only channel"));
		}
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Value.Send", tt.elem, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		p = 0;
		if (!((((x.flag & 128) >>> 0) === 0))) {
			p = x.ptr;
		} else {
			p = ((x.$ptr_ptr || (x.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, x))));
		}
		_r$1 = chansend($clone(v, Value).pointer(), p, nb); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		selected = _r$1;
		$s = -1; return selected;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.send }; } $f._r = _r; $f._r$1 = _r$1; $f.nb = nb; $f.p = p; $f.selected = selected; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.send = function(x, nb) { return this.$val.send(x, nb); };
	Value.ptr.prototype.SetBool = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(1);
		(v.ptr).$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
	Value.ptr.prototype.setRunes = function(x) {
		var _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.setRunes of non-rune slice"));
		/* } */ case 2:
		(v.ptr).$set(x);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.setRunes }; } $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
	Value.ptr.prototype.SetComplex = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			(v.ptr).$set((new $Complex64(x.$real, x.$imag)));
		} else if (_1 === (16)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetComplex", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
	Value.ptr.prototype.SetFloat = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			(v.ptr).$set(($fround(x)));
		} else if (_1 === (14)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetFloat", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
	Value.ptr.prototype.SetInt = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (2)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		} else if (_1 === (3)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24)));
		} else if (_1 === (4)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16)));
		} else if (_1 === (5)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		} else if (_1 === (6)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetInt", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Value.ptr.prototype.SetMapIndex = function(key, val) {
		var _r, _r$1, e, k, key, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; e = $f.e; k = $f.k; key = $f.key; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		new flag(v.flag).mustBeExported();
		new flag(key.flag).mustBeExported();
		tt = (v.typ.kindType);
		_r = $clone(key, Value).assignTo("reflect.Value.SetMapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
		}
		if (val.typ === ptrType$1.nil) {
			mapdelete(v.typ, $clone(v, Value).pointer(), k);
			$s = -1; return;
		}
		new flag(val.flag).mustBeExported();
		_r$1 = $clone(val, Value).assignTo("reflect.Value.SetMapIndex", tt.elem, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		val = _r$1;
		e = 0;
		if (!((((val.flag & 128) >>> 0) === 0))) {
			e = val.ptr;
		} else {
			e = ((val.$ptr_ptr || (val.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val))));
		}
		$r = mapassign(v.typ, $clone(v, Value).pointer(), k, e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetMapIndex }; } $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.k = k; $f.key = key; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetMapIndex = function(key, val) { return this.$val.SetMapIndex(key, val); };
	Value.ptr.prototype.SetUint = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (7)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else if (_1 === (8)) {
			(v.ptr).$set(((x.$low << 24 >>> 24)));
		} else if (_1 === (9)) {
			(v.ptr).$set(((x.$low << 16 >>> 16)));
		} else if (_1 === (10)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else if (_1 === (11)) {
			(v.ptr).$set(x);
		} else if (_1 === (12)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetUint", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
	Value.ptr.prototype.SetPointer = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(26);
		(v.ptr).$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
	Value.ptr.prototype.SetString = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(24);
		(v.ptr).$set(x);
	};
	Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
	Value.ptr.prototype.String = function() {
		var _1, _r, _r$1, k, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; k = $f.k; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (0)) {
			$s = -1; return "<invalid Value>";
		} else if (_1 === (24)) {
			$s = -1; return (v.ptr).$get();
		}
		_r = $clone(v, Value).Type(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.String(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return "<" + _r$1 + " Value>";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.String }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.k = k; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.TryRecv = function() {
		var _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).recv(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$s = -1; return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TryRecv }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.ptr.prototype.TrySend = function(x) {
		var _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).send($clone(x, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TrySend }; } $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
	Value.ptr.prototype.Type = function() {
		var _r, f, i, m, m$1, ms, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; i = $f.i; m = $f.m; m$1 = $f.m$1; ms = $f.ms; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.ptr("reflect.Value.Type", 0));
		}
		if (((f & 512) >>> 0) === 0) {
			$s = -1; return v.typ;
		}
		i = ((v.flag >> 0)) >> 10 >> 0;
		if (v.typ.Kind() === 20) {
			tt = (v.typ.kindType);
			if (((i >>> 0)) >= ((tt.methods.$length >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			$s = -1; return v.typ.typeOff(m.typ);
		}
		_r = v.typ.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ms = _r;
		if (((i >>> 0)) >= ((ms.$length >>> 0))) {
			$panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = $clone(((i < 0 || i >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + i]), method);
		$s = -1; return v.typ.typeOff(m$1.mtyp);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Type }; } $f._r = _r; $f.f = f; $f.i = i; $f.m = m; $f.m$1 = m$1; $f.ms = ms; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.Uint = function() {
		var _1, k, p, v, x;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (7)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (8)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (9)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (10)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (11)) {
			return (p).$get();
		} else if (_1 === (12)) {
			return ((x = (p).$get(), new $Uint64(0, x.constructor === Number ? x : 1)));
		}
		$panic(new ValueError.ptr("reflect.Value.Uint", new flag(v.flag).kind()));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.ptr.prototype.UnsafeAddr = function() {
		var v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return (v.ptr);
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	New = function(typ) {
		var _r, _r$1, fl, ptr, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; fl = $f.fl; ptr = $f.ptr; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$panic(new $String("reflect: New(nil)"));
		}
		ptr = unsafe_New($assertType(typ, ptrType$1));
		fl = 22;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.ptrTo(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$1, ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: New }; } $f._r = _r; $f._r$1 = _r$1; $f.fl = fl; $f.ptr = ptr; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	Value.ptr.prototype.Convert = function(t) {
		var _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; op = $f.op; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Convert", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		_r$1 = t.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = convertOp(_r$1, v.typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		/* */ if (op === $throwNilPointerError) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (op === $throwNilPointerError) { */ case 6:
			_r$3 = t.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + _r$3));
		/* } */ case 7:
		_r$4 = op($clone(v, Value), t); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Convert }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.op = op; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	convertOp = function(dst, src) {
		var _1, _2, _3, _4, _5, _6, _7, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _v, _v$1, _v$2, dst, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _7 = $f._7; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; dst = $f.dst; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = src.Kind();
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 2; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 3; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 4; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 5; continue; }
			/* */ if (_1 === (24)) { $s = 6; continue; }
			/* */ if (_1 === (23)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 2:
				_2 = dst.Kind();
				if ((_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6)) || (_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10)) || (_2 === (11)) || (_2 === (12))) {
					$s = -1; return cvtInt;
				} else if ((_2 === (13)) || (_2 === (14))) {
					$s = -1; return cvtIntFloat;
				} else if (_2 === (24)) {
					$s = -1; return cvtIntString;
				}
				$s = 8; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 3:
				_3 = dst.Kind();
				if ((_3 === (2)) || (_3 === (3)) || (_3 === (4)) || (_3 === (5)) || (_3 === (6)) || (_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10)) || (_3 === (11)) || (_3 === (12))) {
					$s = -1; return cvtUint;
				} else if ((_3 === (13)) || (_3 === (14))) {
					$s = -1; return cvtUintFloat;
				} else if (_3 === (24)) {
					$s = -1; return cvtUintString;
				}
				$s = 8; continue;
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 4:
				_4 = dst.Kind();
				if ((_4 === (2)) || (_4 === (3)) || (_4 === (4)) || (_4 === (5)) || (_4 === (6))) {
					$s = -1; return cvtFloatInt;
				} else if ((_4 === (7)) || (_4 === (8)) || (_4 === (9)) || (_4 === (10)) || (_4 === (11)) || (_4 === (12))) {
					$s = -1; return cvtFloatUint;
				} else if ((_4 === (13)) || (_4 === (14))) {
					$s = -1; return cvtFloat;
				}
				$s = 8; continue;
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 5:
				_5 = dst.Kind();
				if ((_5 === (15)) || (_5 === (16))) {
					$s = -1; return cvtComplex;
				}
				$s = 8; continue;
			/* } else if (_1 === (24)) { */ case 6:
				if (!(dst.Kind() === 23)) { _v = false; $s = 11; continue s; }
				_r = dst.Elem().PkgPath(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r === ""; case 11:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 9:
						_r$1 = dst.Elem().Kind(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_6 = _r$1;
						if (_6 === (8)) {
							$s = -1; return cvtStringBytes;
						} else if (_6 === (5)) {
							$s = -1; return cvtStringRunes;
						}
					case 13:
				/* } */ case 10:
				$s = 8; continue;
			/* } else if (_1 === (23)) { */ case 7:
				if (!(dst.Kind() === 24)) { _v$1 = false; $s = 17; continue s; }
				_r$2 = src.Elem().PkgPath(); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$1 = _r$2 === ""; case 17:
				/* */ if (_v$1) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (_v$1) { */ case 15:
						_r$3 = src.Elem().Kind(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_7 = _r$3;
						if (_7 === (8)) {
							$s = -1; return cvtBytesString;
						} else if (_7 === (5)) {
							$s = -1; return cvtRunesString;
						}
					case 19:
				/* } */ case 16:
			/* } */ case 8:
		case 1:
		_r$4 = haveIdenticalUnderlyingType(dst, src, false); /* */ $s = 23; case 23: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (_r$4) { */ case 21:
			$s = -1; return cvtDirect;
		/* } */ case 22:
		if (!((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "")) { _v$2 = false; $s = 26; continue s; }
		_r$5 = dst.Elem().common(); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg = _r$5;
		_r$6 = src.Elem().common(); /* */ $s = 28; case 28: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_arg$1 = _r$6;
		_r$7 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 29; case 29: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_v$2 = _r$7; case 26:
		/* */ if (_v$2) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (_v$2) { */ case 24:
			$s = -1; return cvtDirect;
		/* } */ case 25:
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				$s = -1; return cvtI2I;
			}
			$s = -1; return cvtT2I;
		}
		$s = -1; return $throwNilPointerError;
		/* */ } return; } if ($f === undefined) { $f = { $blk: convertOp }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._7 = _7; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.dst = dst; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeFloat = function(f, v, t) {
		var _1, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (4)) {
			(ptr).$set(($fround(v)));
		} else if (_1 === (8)) {
			(ptr).$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeFloat }; } $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeComplex = function(f, v, t) {
		var _1, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (8)) {
			(ptr).$set((new $Complex64(v.$real, v.$imag)));
		} else if (_1 === (16)) {
			(ptr).$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeComplex }; } $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeString = function(f, v, t) {
		var _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$clone(ret, Value).SetString(v);
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeString }; } $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeBytes = function(f, v, t) {
		var _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = $clone(ret, Value).SetBytes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeBytes }; } $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeRunes = function(f, v, t) {
		var _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = $clone(ret, Value).setRunes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeRunes }; } $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtInt = function(v, t) {
		var _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), ((x = $clone(v, Value).Int(), new $Uint64(x.$high, x.$low))), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtInt }; } $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUint = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), $clone(v, Value).Uint(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUint }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatInt = function(v, t) {
		var _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), ((x = (new $Int64(0, $clone(v, Value).Float())), new $Uint64(x.$high, x.$low))), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatInt }; } $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatUint = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), (new $Uint64(0, $clone(v, Value).Float())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatUint }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntFloat = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat(new flag(v.flag).ro(), ($flatten64($clone(v, Value).Int())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntFloat }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintFloat = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat(new flag(v.flag).ro(), ($flatten64($clone(v, Value).Uint())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintFloat }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloat = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat(new flag(v.flag).ro(), $clone(v, Value).Float(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloat }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtComplex = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeComplex(new flag(v.flag).ro(), $clone(v, Value).Complex(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtComplex }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntString = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeString(new flag(v.flag).ro(), ($encodeRune($clone(v, Value).Int().$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntString }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintString = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeString(new flag(v.flag).ro(), ($encodeRune($clone(v, Value).Uint().$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintString }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtBytesString = function(v, t) {
		var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = ($bytesToString(_r));
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtBytesString }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringBytes = function(v, t) {
		var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = (new sliceType$15($stringToBytes(_r)));
		_arg$2 = t;
		_r$1 = makeBytes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringBytes }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtRunesString = function(v, t) {
		var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).runes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = ($runesToString(_r));
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtRunesString }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringRunes = function(v, t) {
		var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = (new sliceType$17($stringToRunes(_r)));
		_arg$2 = t;
		_r$1 = makeRunes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringRunes }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtT2I = function(v, typ) {
		var _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; target = $f.target; typ = $f.typ; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = unsafe_New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		target = _r$1;
		_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		x = _r$2;
		_r$3 = typ.NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 0) { */ case 4:
			(target).$set(x);
			$s = 6; continue;
		/* } else { */ case 5:
			ifaceE2I($assertType(typ, ptrType$1), x, target);
		/* } */ case 6:
		_r$4 = typ.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$4, target, (((new flag(v.flag).ro() | 128) >>> 0) | 20) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtT2I }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.target = target; $f.typ = typ; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtI2I = function(v, typ) {
		var _r, _r$1, _r$2, ret, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ret = $f.ret; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if ($clone(v, Value).IsNil()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(v, Value).IsNil()) { */ case 1:
			_r = Zero(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ret = _r;
			ret.flag = (ret.flag | (new flag(v.flag).ro())) >>> 0;
			$s = -1; return ret;
		/* } */ case 2:
		_r$1 = $clone(v, Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = cvtT2I($clone(_r$1, Value), typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtI2I }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ret = ret; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType$5.methods = [{prop: "methods", name: "methods", pkg: "reflect", typ: $funcType([], [sliceType$5], false)}];
	ptrType$16.methods = [{prop: "in$", name: "in", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}, {prop: "out", name: "out", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}];
	name.methods = [{prop: "name", name: "name", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "tag", name: "tag", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "isExported", name: "isExported", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "data", name: "data", pkg: "reflect", typ: $funcType([$Int, $String], [ptrType$4], false)}, {prop: "nameLen", name: "nameLen", pkg: "reflect", typ: $funcType([], [$Int], false)}, {prop: "tagLen", name: "tagLen", pkg: "reflect", typ: $funcType([], [$Int], false)}];
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$5], false)}, {prop: "nameOff", name: "nameOff", pkg: "reflect", typ: $funcType([nameOff], [name], false)}, {prop: "typeOff", name: "typeOff", pkg: "reflect", typ: $funcType([typeOff], [ptrType$1], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "textOff", name: "textOff", pkg: "reflect", typ: $funcType([textOff], [$UnsafePointer], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "reflect", typ: $funcType([], [sliceType$5], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}];
	ChanDir.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$7.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ptrType$17.methods = [{prop: "offset", name: "offset", pkg: "reflect", typ: $funcType([], [$Uintptr], false)}, {prop: "anon", name: "anon", pkg: "reflect", typ: $funcType([], [$Bool], false)}];
	ptrType$9.methods = [{prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}];
	StructTag.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [$String, $Bool], false)}];
	Value.methods = [{prop: "object", name: "object", pkg: "reflect", typ: $funcType([], [ptrType$2], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "call", name: "call", pkg: "reflect", typ: $funcType([$String, sliceType$9], [sliceType$9], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$12], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$15], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "pointer", name: "pointer", pkg: "reflect", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$15], false)}, {prop: "runes", name: "runes", pkg: "reflect", typ: $funcType([], [sliceType$17], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$9], [sliceType$9], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", typ: $funcType([sliceType$9], [sliceType$9], false)}, {prop: "Complex", name: "Complex", pkg: "", typ: $funcType([], [$Complex128], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [Value], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [Value], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$9], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", typ: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", typ: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", typ: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", typ: $funcType([$Uint64], [$Bool], false)}, {prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "recv", name: "recv", pkg: "reflect", typ: $funcType([$Bool], [Value, $Bool], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([Value], [], false)}, {prop: "send", name: "send", pkg: "reflect", typ: $funcType([Value, $Bool], [$Bool], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", typ: $funcType([sliceType$17], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", typ: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", typ: $funcType([Value, Value], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", typ: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "TrySend", name: "TrySend", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Type], [Value], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "reflect", typ: $funcType([], [Kind], false)}, {prop: "ro", name: "ro", pkg: "reflect", typ: $funcType([], [flag], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", typ: $funcType([Kind], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", typ: $funcType([], [], false)}];
	ptrType$18.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	uncommonType.init("reflect", [{prop: "pkgPath", name: "pkgPath", anonymous: false, exported: false, typ: nameOff, tag: ""}, {prop: "mcount", name: "mcount", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "_$2", name: "_", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "moff", name: "moff", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "_$4", name: "_", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "_methods", name: "_methods", anonymous: false, exported: false, typ: sliceType$5, tag: ""}]);
	funcType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"func\""}, {prop: "inCount", name: "inCount", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "outCount", name: "outCount", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "_in", name: "_in", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "_out", name: "_out", anonymous: false, exported: false, typ: sliceType$2, tag: ""}]);
	name.init("reflect", [{prop: "bytes", name: "bytes", anonymous: false, exported: false, typ: ptrType$4, tag: ""}]);
	nameData.init("reflect", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "tag", name: "tag", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "exported", name: "exported", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	mapIter.init("reflect", [{prop: "t", name: "t", anonymous: false, exported: false, typ: Type, tag: ""}, {prop: "m", name: "m", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "keys", name: "keys", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "i", name: "i", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	Type.init([{prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$5], false)}]);
	rtype.init("reflect", [{prop: "size", name: "size", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "ptrdata", name: "ptrdata", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "tflag", name: "tflag", anonymous: false, exported: false, typ: tflag, tag: ""}, {prop: "align", name: "align", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "alg", name: "alg", anonymous: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "gcdata", name: "gcdata", anonymous: false, exported: false, typ: ptrType$4, tag: ""}, {prop: "str", name: "str", anonymous: false, exported: false, typ: nameOff, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", anonymous: false, exported: false, typ: typeOff, tag: ""}]);
	typeAlg.init("reflect", [{prop: "hash", name: "hash", anonymous: false, exported: false, typ: funcType$4, tag: ""}, {prop: "equal", name: "equal", anonymous: false, exported: false, typ: funcType$5, tag: ""}]);
	method.init("reflect", [{prop: "name", name: "name", anonymous: false, exported: false, typ: nameOff, tag: ""}, {prop: "mtyp", name: "mtyp", anonymous: false, exported: false, typ: typeOff, tag: ""}, {prop: "ifn", name: "ifn", anonymous: false, exported: false, typ: textOff, tag: ""}, {prop: "tfn", name: "tfn", anonymous: false, exported: false, typ: textOff, tag: ""}]);
	arrayType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"array\""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "len", name: "len", anonymous: false, exported: false, typ: $Uintptr, tag: ""}]);
	chanType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"chan\""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", anonymous: false, exported: false, typ: $Uintptr, tag: ""}]);
	imethod.init("reflect", [{prop: "name", name: "name", anonymous: false, exported: false, typ: nameOff, tag: ""}, {prop: "typ", name: "typ", anonymous: false, exported: false, typ: typeOff, tag: ""}]);
	interfaceType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"interface\""}, {prop: "pkgPath", name: "pkgPath", anonymous: false, exported: false, typ: name, tag: ""}, {prop: "methods", name: "methods", anonymous: false, exported: false, typ: sliceType$6, tag: ""}]);
	mapType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"map\""}, {prop: "key", name: "key", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "hmap", name: "hmap", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "keysize", name: "keysize", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "indirectkey", name: "indirectkey", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "indirectvalue", name: "indirectvalue", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "reflexivekey", name: "reflexivekey", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "needkeyupdate", name: "needkeyupdate", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	ptrType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"ptr\""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}]);
	sliceType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"slice\""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}]);
	structField.init("reflect", [{prop: "name", name: "name", anonymous: false, exported: false, typ: name, tag: ""}, {prop: "typ", name: "typ", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "offsetAnon", name: "offsetAnon", anonymous: false, exported: false, typ: $Uintptr, tag: ""}]);
	structType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"struct\""}, {prop: "pkgPath", name: "pkgPath", anonymous: false, exported: false, typ: name, tag: ""}, {prop: "fields", name: "fields", anonymous: false, exported: false, typ: sliceType$7, tag: ""}]);
	Method.init("", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: Type, tag: ""}, {prop: "Func", name: "Func", anonymous: false, exported: true, typ: Value, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	StructField.init("", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: Type, tag: ""}, {prop: "Tag", name: "Tag", anonymous: false, exported: true, typ: StructTag, tag: ""}, {prop: "Offset", name: "Offset", anonymous: false, exported: true, typ: $Uintptr, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: sliceType$13, tag: ""}, {prop: "Anonymous", name: "Anonymous", anonymous: false, exported: true, typ: $Bool, tag: ""}]);
	fieldScan.init("reflect", [{prop: "typ", name: "typ", anonymous: false, exported: false, typ: ptrType$9, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: sliceType$13, tag: ""}]);
	Value.init("reflect", [{prop: "typ", name: "typ", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "flag", anonymous: true, exported: false, typ: flag, tag: ""}]);
	ValueError.init("", [{prop: "Method", name: "Method", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Kind", name: "Kind", anonymous: false, exported: true, typ: Kind, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		nameOffList = sliceType$1.nil;
		typeOffList = sliceType$2.nil;
		methodCache = new sync.Map.ptr(new sync.Mutex.ptr(0, 0), new $packages["sync/atomic"].Value.ptr($ifaceNil), false, 0);
		initialized = false;
		uncommonTypeMap = {};
		nameMap = {};
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
		jsObjectPtr = reflectType($jsObjectPtr);
		kindNames = new sliceType$4(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$r = init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, $init, errors, io, math, os, reflect, strconv, sync, utf8, fmtFlags, fmt, State, Formatter, Stringer, GoStringer, buffer, pp, ScanState, scanError, ss, ssave, sliceType, ptrType, ptrType$1, arrayType, arrayType$1, sliceType$1, sliceType$2, arrayType$2, ptrType$2, ptrType$5, ptrType$25, funcType, ppFree, space, ssFree, complexError, boolError, newPrinter, Fprintf, Printf, Sprintf, Errorf, Fprint, Print, Fprintln, Println, getField, tooLarge, parsenum, intFromArg, parseArgNumber, isSpace, notSpace, indexRune;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	utf8 = $packages["unicode/utf8"];
	fmtFlags = $pkg.fmtFlags = $newType(0, $kindStruct, "fmt.fmtFlags", true, "fmt", false, function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, zero_, plusV_, sharpV_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.widPresent = false;
			this.precPresent = false;
			this.minus = false;
			this.plus = false;
			this.sharp = false;
			this.space = false;
			this.zero = false;
			this.plusV = false;
			this.sharpV = false;
			return;
		}
		this.widPresent = widPresent_;
		this.precPresent = precPresent_;
		this.minus = minus_;
		this.plus = plus_;
		this.sharp = sharp_;
		this.space = space_;
		this.zero = zero_;
		this.plusV = plusV_;
		this.sharpV = sharpV_;
	});
	fmt = $pkg.fmt = $newType(0, $kindStruct, "fmt.fmt", true, "fmt", false, function(buf_, fmtFlags_, wid_, prec_, intbuf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = ptrType$1.nil;
			this.fmtFlags = new fmtFlags.ptr(false, false, false, false, false, false, false, false, false);
			this.wid = 0;
			this.prec = 0;
			this.intbuf = arrayType.zero();
			return;
		}
		this.buf = buf_;
		this.fmtFlags = fmtFlags_;
		this.wid = wid_;
		this.prec = prec_;
		this.intbuf = intbuf_;
	});
	State = $pkg.State = $newType(8, $kindInterface, "fmt.State", true, "fmt", true, null);
	Formatter = $pkg.Formatter = $newType(8, $kindInterface, "fmt.Formatter", true, "fmt", true, null);
	Stringer = $pkg.Stringer = $newType(8, $kindInterface, "fmt.Stringer", true, "fmt", true, null);
	GoStringer = $pkg.GoStringer = $newType(8, $kindInterface, "fmt.GoStringer", true, "fmt", true, null);
	buffer = $pkg.buffer = $newType(12, $kindSlice, "fmt.buffer", true, "fmt", false, null);
	pp = $pkg.pp = $newType(0, $kindStruct, "fmt.pp", true, "fmt", false, function(buf_, arg_, value_, fmt_, reordered_, goodArgNum_, panicking_, erroring_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = buffer.nil;
			this.arg = $ifaceNil;
			this.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
			this.fmt = new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType.zero());
			this.reordered = false;
			this.goodArgNum = false;
			this.panicking = false;
			this.erroring = false;
			return;
		}
		this.buf = buf_;
		this.arg = arg_;
		this.value = value_;
		this.fmt = fmt_;
		this.reordered = reordered_;
		this.goodArgNum = goodArgNum_;
		this.panicking = panicking_;
		this.erroring = erroring_;
	});
	ScanState = $pkg.ScanState = $newType(8, $kindInterface, "fmt.ScanState", true, "fmt", true, null);
	scanError = $pkg.scanError = $newType(0, $kindStruct, "fmt.scanError", true, "fmt", false, function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	ss = $pkg.ss = $newType(0, $kindStruct, "fmt.ss", true, "fmt", false, function(rs_, buf_, count_, atEOF_, ssave_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rs = $ifaceNil;
			this.buf = buffer.nil;
			this.count = 0;
			this.atEOF = false;
			this.ssave = new ssave.ptr(false, false, false, 0, 0, 0);
			return;
		}
		this.rs = rs_;
		this.buf = buf_;
		this.count = count_;
		this.atEOF = atEOF_;
		this.ssave = ssave_;
	});
	ssave = $pkg.ssave = $newType(0, $kindStruct, "fmt.ssave", true, "fmt", false, function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.validSave = false;
			this.nlIsEnd = false;
			this.nlIsSpace = false;
			this.argLimit = 0;
			this.limit = 0;
			this.maxWid = 0;
			return;
		}
		this.validSave = validSave_;
		this.nlIsEnd = nlIsEnd_;
		this.nlIsSpace = nlIsSpace_;
		this.argLimit = argLimit_;
		this.limit = limit_;
		this.maxWid = maxWid_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(reflect.rtype);
	ptrType$1 = $ptrType(buffer);
	arrayType = $arrayType($Uint8, 68);
	arrayType$1 = $arrayType($Uint16, 2);
	sliceType$1 = $sliceType(arrayType$1);
	sliceType$2 = $sliceType($Uint8);
	arrayType$2 = $arrayType($Uint8, 5);
	ptrType$2 = $ptrType(pp);
	ptrType$5 = $ptrType(ss);
	ptrType$25 = $ptrType(fmt);
	funcType = $funcType([$Int32], [$Bool], false);
	fmt.ptr.prototype.clearflags = function() {
		var f;
		f = this;
		fmtFlags.copy(f.fmtFlags, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false));
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.ptr.prototype.init = function(buf) {
		var buf, f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.ptr.prototype.writePadding = function(n) {
		var _i, _ref, buf, f, i, n, newLen, oldLen, padByte, padding;
		f = this;
		if (n <= 0) {
			return;
		}
		buf = f.buf.$get();
		oldLen = buf.$length;
		newLen = oldLen + n >> 0;
		if (newLen > buf.$capacity) {
			buf = $makeSlice(buffer, (($imul(buf.$capacity, 2)) + n >> 0));
			$copySlice(buf, f.buf.$get());
		}
		padByte = 32;
		if (f.fmtFlags.zero) {
			padByte = 48;
		}
		padding = $subslice(buf, oldLen, newLen);
		_ref = padding;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= padding.$length) ? ($throwRuntimeError("index out of range"), undefined) : padding.$array[padding.$offset + i] = padByte);
			_i++;
		}
		f.buf.$set($subslice(buf, 0, newLen));
	};
	fmt.prototype.writePadding = function(n) { return this.$val.writePadding(n); };
	fmt.ptr.prototype.pad = function(b) {
		var b, f, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.Write(b);
			return;
		}
		width = f.wid - utf8.RuneCount(b) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.Write(b);
		} else {
			f.buf.Write(b);
			f.writePadding(width);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.ptr.prototype.padString = function(s) {
		var f, s, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.WriteString(s);
			return;
		}
		width = f.wid - utf8.RuneCountInString(s) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.WriteString(s);
		} else {
			f.buf.WriteString(s);
			f.writePadding(width);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.ptr.prototype.fmt_boolean = function(v) {
		var f, v;
		f = this;
		if (v) {
			f.padString("true");
		} else {
			f.padString("false");
		}
	};
	fmt.prototype.fmt_boolean = function(v) { return this.$val.fmt_boolean(v); };
	fmt.ptr.prototype.fmt_unicode = function(u) {
		var buf, f, i, oldZero, prec, u, width;
		f = this;
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		prec = 4;
		if (f.fmtFlags.precPresent && f.prec > 4) {
			prec = f.prec;
			width = (((2 + prec >> 0) + 2 >> 0) + 4 >> 0) + 1 >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		i = buf.$length;
		if (f.fmtFlags.sharp && (u.$high < 0 || (u.$high === 0 && u.$low <= 1114111)) && strconv.IsPrint(((u.$low >> 0)))) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 39);
			i = i - (utf8.RuneLen(((u.$low >> 0)))) >> 0;
			utf8.EncodeRune($subslice(buf, i), ((u.$low >> 0)));
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 39);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 32);
		}
		while (true) {
			if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
			prec = prec - (1) >> 0;
			u = $shiftRightUint64(u, (4));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(u)));
		prec = prec - (1) >> 0;
		while (true) {
			if (!(prec > 0)) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			prec = prec - (1) >> 0;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 43);
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 85);
		oldZero = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero;
	};
	fmt.prototype.fmt_unicode = function(u) { return this.$val.fmt_unicode(u); };
	fmt.ptr.prototype.fmt_integer = function(u, base, isSigned, digits) {
		var _1, _2, base, buf, digits, f, i, isSigned, negative, next, oldZero, oldZero$1, prec, u, width, x, x$1, x$2, x$3, x$4;
		f = this;
		negative = isSigned && (x = (new $Int64(u.$high, u.$low)), (x.$high < 0 || (x.$high === 0 && x.$low < 0)));
		if (negative) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		if (f.fmtFlags.widPresent || f.fmtFlags.precPresent) {
			width = (3 + f.wid >> 0) + f.prec >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		prec = 0;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
			if ((prec === 0) && (u.$high === 0 && u.$low === 0)) {
				oldZero = f.fmtFlags.zero;
				f.fmtFlags.zero = false;
				f.writePadding(f.wid);
				f.fmtFlags.zero = oldZero;
				return;
			}
		} else if (f.fmtFlags.zero && f.fmtFlags.widPresent) {
			prec = f.wid;
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				prec = prec - (1) >> 0;
			}
		}
		i = buf.$length;
		_1 = base;
		if (_1 === (10)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 10)))) { break; }
				i = i - (1) >> 0;
				next = $div64(u, new $Uint64(0, 10), false);
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$1 = new $Uint64(0 + u.$high, 48 + u.$low), x$2 = $mul64(next, new $Uint64(0, 10)), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low)).$low << 24 >>> 24)));
				u = next;
			}
		} else if (_1 === (16)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
				u = $shiftRightUint64(u, (4));
			}
		} else if (_1 === (8)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 8)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$3 = new $Uint64(u.$high & 0, (u.$low & 7) >>> 0), new $Uint64(0 + x$3.$high, 48 + x$3.$low)).$low << 24 >>> 24)));
				u = $shiftRightUint64(u, (3));
			}
		} else if (_1 === (2)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 2)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$4 = new $Uint64(u.$high & 0, (u.$low & 1) >>> 0), new $Uint64(0 + x$4.$high, 48 + x$4.$low)).$low << 24 >>> 24)));
				u = $shiftRightUint64(u, (1));
			}
		} else {
			$panic(new $String("fmt: unknown base; can't happen"));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(u)));
		while (true) {
			if (!(i > 0 && prec > (buf.$length - i >> 0))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
		}
		if (f.fmtFlags.sharp) {
			_2 = base;
			if (_2 === (8)) {
				if (!((((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i]) === 48))) {
					i = i - (1) >> 0;
					((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
				}
			} else if (_2 === (16)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt(16));
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			}
		}
		if (negative) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 45);
		} else if (f.fmtFlags.plus) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 43);
		} else if (f.fmtFlags.space) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 32);
		}
		oldZero$1 = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero$1;
	};
	fmt.prototype.fmt_integer = function(u, base, isSigned, digits) { return this.$val.fmt_integer(u, base, isSigned, digits); };
	fmt.ptr.prototype.truncate = function(s) {
		var _i, _ref, _rune, f, i, n, s;
		f = this;
		if (f.fmtFlags.precPresent) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				n = n - (1) >> 0;
				if (n < 0) {
					return $substring(s, 0, i);
				}
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncate = function(s) { return this.$val.truncate(s); };
	fmt.ptr.prototype.fmt_s = function(s) {
		var f, s;
		f = this;
		s = f.truncate(s);
		f.padString(s);
	};
	fmt.prototype.fmt_s = function(s) { return this.$val.fmt_s(s); };
	fmt.ptr.prototype.fmt_sbx = function(s, b, digits) {
		var b, buf, c, digits, f, i, length, s, width;
		f = this;
		length = b.$length;
		if (b === sliceType$2.nil) {
			length = s.length;
		}
		if (f.fmtFlags.precPresent && f.prec < length) {
			length = f.prec;
		}
		width = $imul(2, length);
		if (width > 0) {
			if (f.fmtFlags.space) {
				if (f.fmtFlags.sharp) {
					width = $imul(width, (2));
				}
				width = width + ((length - 1 >> 0)) >> 0;
			} else if (f.fmtFlags.sharp) {
				width = width + (2) >> 0;
			}
		} else {
			if (f.fmtFlags.widPresent) {
				f.writePadding(f.wid);
			}
			return;
		}
		if (f.fmtFlags.widPresent && f.wid > width && !f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
		buf = f.buf.$get();
		if (f.fmtFlags.sharp) {
			buf = $append(buf, 48, digits.charCodeAt(16));
		}
		c = 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			if (f.fmtFlags.space && i > 0) {
				buf = $append(buf, 32);
				if (f.fmtFlags.sharp) {
					buf = $append(buf, 48, digits.charCodeAt(16));
				}
			}
			if (!(b === sliceType$2.nil)) {
				c = ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]);
			} else {
				c = s.charCodeAt(i);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + (1) >> 0;
		}
		f.buf.$set(buf);
		if (f.fmtFlags.widPresent && f.wid > width && f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
	};
	fmt.prototype.fmt_sbx = function(s, b, digits) { return this.$val.fmt_sbx(s, b, digits); };
	fmt.ptr.prototype.fmt_sx = function(s, digits) {
		var digits, f, s;
		f = this;
		f.fmt_sbx(s, sliceType$2.nil, digits);
	};
	fmt.prototype.fmt_sx = function(s, digits) { return this.$val.fmt_sx(s, digits); };
	fmt.ptr.prototype.fmt_bx = function(b, digits) {
		var b, digits, f;
		f = this;
		f.fmt_sbx("", b, digits);
	};
	fmt.prototype.fmt_bx = function(b, digits) { return this.$val.fmt_bx(b, digits); };
	fmt.ptr.prototype.fmt_q = function(s) {
		var buf, f, s;
		f = this;
		s = f.truncate(s);
		if (f.fmtFlags.sharp && strconv.CanBackquote(s)) {
			f.padString("`" + s + "`");
			return;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteToASCII(buf, s));
		} else {
			f.pad(strconv.AppendQuote(buf, s));
		}
	};
	fmt.prototype.fmt_q = function(s) { return this.$val.fmt_q(s); };
	fmt.ptr.prototype.fmt_c = function(c) {
		var buf, c, f, r, w;
		f = this;
		r = ((c.$low >> 0));
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		w = utf8.EncodeRune($subslice(buf, 0, 4), r);
		f.pad($subslice(buf, 0, w));
	};
	fmt.prototype.fmt_c = function(c) { return this.$val.fmt_c(c); };
	fmt.ptr.prototype.fmt_qc = function(c) {
		var buf, c, f, r;
		f = this;
		r = ((c.$low >> 0));
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteRuneToASCII(buf, r));
		} else {
			f.pad(strconv.AppendQuoteRune(buf, r));
		}
	};
	fmt.prototype.fmt_qc = function(c) { return this.$val.fmt_qc(c); };
	fmt.ptr.prototype.fmt_float = function(v, size, verb, prec) {
		var _1, _2, digits, f, hasDecimalPoint, i, num, oldZero, prec, size, tail, tailBuf, v, verb;
		f = this;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
		}
		num = strconv.AppendFloat($subslice(new sliceType$2(f.intbuf), 0, 1), v, ((verb << 24 >>> 24)), prec, size);
		if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 45) || ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 43)) {
			num = $subslice(num, 1);
		} else {
			(0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0] = 43);
		}
		if (f.fmtFlags.space && ((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]) === 43) && !f.fmtFlags.plus) {
			(0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0] = 32);
		}
		if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 73) || ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 78)) {
			oldZero = f.fmtFlags.zero;
			f.fmtFlags.zero = false;
			if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 78) && !f.fmtFlags.space && !f.fmtFlags.plus) {
				num = $subslice(num, 1);
			}
			f.pad(num);
			f.fmtFlags.zero = oldZero;
			return;
		}
		if (f.fmtFlags.sharp && !((verb === 98))) {
			digits = 0;
			_1 = verb;
			if ((_1 === (118)) || (_1 === (103)) || (_1 === (71))) {
				digits = prec;
				if (digits === -1) {
					digits = 6;
				}
			}
			tailBuf = arrayType$2.zero();
			tail = $subslice(new sliceType$2(tailBuf), 0, 0);
			hasDecimalPoint = false;
			i = 1;
			while (true) {
				if (!(i < num.$length)) { break; }
				_2 = ((i < 0 || i >= num.$length) ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + i]);
				if (_2 === (46)) {
					hasDecimalPoint = true;
				} else if ((_2 === (101)) || (_2 === (69))) {
					tail = $appendSlice(tail, $subslice(num, i));
					num = $subslice(num, 0, i);
				} else {
					digits = digits - (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (!hasDecimalPoint) {
				num = $append(num, 46);
			}
			while (true) {
				if (!(digits > 0)) { break; }
				num = $append(num, 48);
				digits = digits - (1) >> 0;
			}
			num = $appendSlice(num, tail);
		}
		if (f.fmtFlags.plus || !(((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]) === 43))) {
			if (f.fmtFlags.zero && f.fmtFlags.widPresent && f.wid > num.$length) {
				f.buf.WriteByte((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]));
				f.writePadding(f.wid - num.$length >> 0);
				f.buf.Write($subslice(num, 1));
				return;
			}
			f.pad(num);
			return;
		}
		f.pad($subslice(num, 1));
	};
	fmt.prototype.fmt_float = function(v, size, verb, prec) { return this.$val.fmt_float(v, size, verb, prec); };
	$ptrType(buffer).prototype.Write = function(p) {
		var b, p;
		b = this;
		b.$set($appendSlice(b.$get(), p));
	};
	$ptrType(buffer).prototype.WriteString = function(s) {
		var b, s;
		b = this;
		b.$set($appendSlice(b.$get(), s));
	};
	$ptrType(buffer).prototype.WriteByte = function(c) {
		var b, c;
		b = this;
		b.$set($append(b.$get(), c));
	};
	$ptrType(buffer).prototype.WriteRune = function(r) {
		var b, bp, n, r, w, x;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), ((r << 24 >>> 24))));
			return;
		}
		b = bp.$get();
		n = b.$length;
		while (true) {
			if (!((n + 4 >> 0) > b.$capacity)) { break; }
			b = $append(b, 0);
		}
		w = utf8.EncodeRune((x = $subslice(b, n, (n + 4 >> 0)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length)), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
	};
	newPrinter = function() {
		var _r, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = ppFree.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = $assertType(_r, ptrType$2);
		p.panicking = false;
		p.erroring = false;
		p.fmt.init((p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))));
		$s = -1; return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newPrinter }; } $f._r = _r; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.ptr.prototype.free = function() {
		var p;
		p = this;
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = $ifaceNil;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.ptr.prototype.Width = function() {
		var _tmp, _tmp$1, ok, p, wid;
		wid = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.wid;
		_tmp$1 = p.fmt.fmtFlags.widPresent;
		wid = _tmp;
		ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.ptr.prototype.Precision = function() {
		var _tmp, _tmp$1, ok, p, prec;
		prec = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.prec;
		_tmp$1 = p.fmt.fmtFlags.precPresent;
		prec = _tmp;
		ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.ptr.prototype.Flag = function(b) {
		var _1, b, p;
		p = this;
		_1 = b;
		if (_1 === (45)) {
			return p.fmt.fmtFlags.minus;
		} else if (_1 === (43)) {
			return p.fmt.fmtFlags.plus || p.fmt.fmtFlags.plusV;
		} else if (_1 === (35)) {
			return p.fmt.fmtFlags.sharp || p.fmt.fmtFlags.sharpV;
		} else if (_1 === (32)) {
			return p.fmt.fmtFlags.space;
		} else if (_1 === (48)) {
			return p.fmt.fmtFlags.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.ptr.prototype.Write = function(b) {
		var _tmp, _tmp$1, b, err, p, ret;
		ret = 0;
		err = $ifaceNil;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(b);
		_tmp = b.$length;
		_tmp$1 = $ifaceNil;
		ret = _tmp;
		err = _tmp$1;
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	pp.ptr.prototype.WriteString = function(s) {
		var _tmp, _tmp$1, err, p, ret, s;
		ret = 0;
		err = $ifaceNil;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(s);
		_tmp = s.length;
		_tmp$1 = $ifaceNil;
		ret = _tmp;
		err = _tmp$1;
		return [ret, err];
	};
	pp.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Fprintf = function(w, format, a) {
		var _r, _r$1, _tuple, a, err, format, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; err = $f.err; format = $f.format; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = w.Write((x = p.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprintf }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.format = format; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprintf = Fprintf;
	Printf = function(format, a) {
		var _r, _tuple, a, err, format, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; a = $f.a; err = $f.err; format = $f.format; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = Fprintf(os.Stdout, format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Printf }; } $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.format = format; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Printf = Printf;
	Sprintf = function(format, a) {
		var _r, a, format, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; format = $f.format; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = ($bytesToString(p.buf));
		p.free();
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintf }; } $f._r = _r; $f.a = a; $f.format = format; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintf = Sprintf;
	Errorf = function(format, a) {
		var _r, _r$1, a, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; a = $f.a; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Sprintf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = errors.New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Errorf }; } $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Errorf = Errorf;
	Fprint = function(w, a) {
		var _r, _r$1, _tuple, a, err, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrint(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = w.Write((x = p.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprint }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprint = Fprint;
	Print = function(a) {
		var _r, _tuple, a, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = Fprint(os.Stdout, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Print }; } $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Print = Print;
	Fprintln = function(w, a) {
		var _r, _r$1, _tuple, a, err, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintln(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = w.Write((x = p.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprintln }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprintln = Fprintln;
	Println = function(a) {
		var _r, _tuple, a, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = Fprintln(os.Stdout, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Println }; } $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Println = Println;
	getField = function(v, i) {
		var _r, _r$1, i, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; i = $f.i; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $clone(v, reflect.Value).Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		val = _r;
		/* */ if (($clone(val, reflect.Value).Kind() === 20) && !$clone(val, reflect.Value).IsNil()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (($clone(val, reflect.Value).Kind() === 20) && !$clone(val, reflect.Value).IsNil()) { */ case 2:
			_r$1 = $clone(val, reflect.Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			val = _r$1;
		/* } */ case 3:
		$s = -1; return val;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getField }; } $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	tooLarge = function(x) {
		var x;
		return x > 1000000 || x < -1000000;
	};
	parsenum = function(s, start, end) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, end, isnum, newi, num, s, start;
		num = 0;
		isnum = false;
		newi = 0;
		if (start >= end) {
			_tmp = 0;
			_tmp$1 = false;
			_tmp$2 = end;
			num = _tmp;
			isnum = _tmp$1;
			newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (true) {
			if (!(newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57)) { break; }
			if (tooLarge(num)) {
				_tmp$3 = 0;
				_tmp$4 = false;
				_tmp$5 = end;
				num = _tmp$3;
				isnum = _tmp$4;
				newi = _tmp$5;
				return [num, isnum, newi];
			}
			num = ($imul(num, 10)) + (((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0)) >> 0;
			isnum = true;
			newi = newi + (1) >> 0;
		}
		return [num, isnum, newi];
	};
	pp.ptr.prototype.unknownType = function(v) {
		var _r, _r$1, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!$clone(v, reflect.Value).IsValid()) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
			$s = -1; return;
		}
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		_r = $clone(v, reflect.Value).Type(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.String(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.unknownType }; } $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.ptr.prototype.badVerb = function(verb) {
		var _r, _r$1, _r$2, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.erroring = true;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
			/* */ if (!($interfaceIsEqual(p.arg, $ifaceNil))) { $s = 2; continue; }
			/* */ if ($clone(p.value, reflect.Value).IsValid()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(p.arg, $ifaceNil))) { */ case 2:
				_r = reflect.TypeOf(p.arg).String(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				$r = p.printArg(p.arg, 118); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else if ($clone(p.value, reflect.Value).IsValid()) { */ case 3:
				_r$1 = $clone(p.value, reflect.Value).Type(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.String(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				$r = p.printValue($clone(p.value, reflect.Value), 118, 0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
			/* } */ case 5:
		case 1:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		p.erroring = false;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.badVerb }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.ptr.prototype.fmtBool = function(v, verb) {
		var _1, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (116)) || (_1 === (118))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (116)) || (_1 === (118))) { */ case 2:
				p.fmt.fmt_boolean(v);
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBool }; } $f._1 = _1; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.ptr.prototype.fmt0x64 = function(v, leading0x) {
		var leading0x, p, sharp, v;
		p = this;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = leading0x;
		p.fmt.fmt_integer(v, 16, false, "0123456789abcdefx");
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.ptr.prototype.fmtInteger = function(v, isSigned, verb) {
		var _1, isSigned, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; isSigned = $f.isSigned; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (100)) { $s = 3; continue; }
			/* */ if (_1 === (98)) { $s = 4; continue; }
			/* */ if (_1 === (111)) { $s = 5; continue; }
			/* */ if (_1 === (120)) { $s = 6; continue; }
			/* */ if (_1 === (88)) { $s = 7; continue; }
			/* */ if (_1 === (99)) { $s = 8; continue; }
			/* */ if (_1 === (113)) { $s = 9; continue; }
			/* */ if (_1 === (85)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV && !isSigned) {
					p.fmt0x64(v, true);
				} else {
					p.fmt.fmt_integer(v, 10, isSigned, "0123456789abcdefx");
				}
				$s = 12; continue;
			/* } else if (_1 === (100)) { */ case 3:
				p.fmt.fmt_integer(v, 10, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (98)) { */ case 4:
				p.fmt.fmt_integer(v, 2, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (111)) { */ case 5:
				p.fmt.fmt_integer(v, 8, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (120)) { */ case 6:
				p.fmt.fmt_integer(v, 16, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (88)) { */ case 7:
				p.fmt.fmt_integer(v, 16, isSigned, "0123456789ABCDEFX");
				$s = 12; continue;
			/* } else if (_1 === (99)) { */ case 8:
				p.fmt.fmt_c(v);
				$s = 12; continue;
			/* } else if (_1 === (113)) { */ case 9:
				/* */ if ((v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ((v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 13:
					p.fmt.fmt_qc(v);
					$s = 15; continue;
				/* } else { */ case 14:
					$r = p.badVerb(verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 15:
				$s = 12; continue;
			/* } else if (_1 === (85)) { */ case 10:
				p.fmt.fmt_unicode(v);
				$s = 12; continue;
			/* } else { */ case 11:
				$r = p.badVerb(verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtInteger }; } $f._1 = _1; $f.isSigned = isSigned; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtInteger = function(v, isSigned, verb) { return this.$val.fmtInteger(v, isSigned, verb); };
	pp.ptr.prototype.fmtFloat = function(v, size, verb) {
		var _1, p, size, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; size = $f.size; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if ((_1 === (98)) || (_1 === (103)) || (_1 === (71))) { $s = 3; continue; }
			/* */ if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { $s = 4; continue; }
			/* */ if (_1 === (70)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (118)) { */ case 2:
				p.fmt.fmt_float(v, size, 103, -1);
				$s = 7; continue;
			/* } else if ((_1 === (98)) || (_1 === (103)) || (_1 === (71))) { */ case 3:
				p.fmt.fmt_float(v, size, verb, -1);
				$s = 7; continue;
			/* } else if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { */ case 4:
				p.fmt.fmt_float(v, size, verb, 6);
				$s = 7; continue;
			/* } else if (_1 === (70)) { */ case 5:
				p.fmt.fmt_float(v, size, 102, 6);
				$s = 7; continue;
			/* } else { */ case 6:
				$r = p.badVerb(verb); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 7:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat }; } $f._1 = _1; $f.p = p; $f.size = size; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtFloat = function(v, size, verb) { return this.$val.fmtFloat(v, size, verb); };
	pp.ptr.prototype.fmtComplex = function(v, size, verb) {
		var _1, _q, _q$1, oldPlus, p, size, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; oldPlus = $f.oldPlus; p = $f.p; size = $f.size; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { */ case 2:
				oldPlus = p.fmt.fmtFlags.plus;
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
				$r = p.fmtFloat(v.$real, (_q = size / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p.fmt.fmtFlags.plus = true;
				$r = p.fmtFloat(v.$imag, (_q$1 = size / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("i)");
				p.fmt.fmtFlags.plus = oldPlus;
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex }; } $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f.oldPlus = oldPlus; $f.p = p; $f.size = size; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtComplex = function(v, size, verb) { return this.$val.fmtComplex(v, size, verb); };
	pp.ptr.prototype.fmtString = function(v, verb) {
		var _1, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					p.fmt.fmt_q(v);
				} else {
					p.fmt.fmt_s(v);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmt_s(v);
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmt_sx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmt_sx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmt_q(v);
				$s = 8; continue;
			/* } else { */ case 7:
				$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtString }; } $f._1 = _1; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtString = function(v, verb) { return this.$val.fmtString(v, verb); };
	pp.ptr.prototype.fmtBytes = function(v, verb, typeString) {
		var _1, _i, _i$1, _r, _ref, _ref$1, c, c$1, i, i$1, p, typeString, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; c$1 = $f.c$1; i = $f.i; i$1 = $f.i$1; p = $f.p; typeString = $f.typeString; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (100))) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_1 === (118)) || (_1 === (100))) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(typeString);
					if (v === sliceType$2.nil) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					_ref = v;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						i = _i;
						c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
						if (i > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						}
						p.fmt0x64((new $Uint64(0, c)), true);
						_i++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
					_ref$1 = v;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						i$1 = _i$1;
						c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (i$1 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
						p.fmt.fmt_integer((new $Uint64(0, c$1)), 10, false, "0123456789abcdefx");
						_i$1++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmt_s(($bytesToString(v)));
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmt_bx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmt_bx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmt_q(($bytesToString(v)));
				$s = 8; continue;
			/* } else { */ case 7:
				_r = reflect.ValueOf(v); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.printValue($clone(_r, reflect.Value), verb, 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBytes }; } $f._1 = _1; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.c$1 = c$1; $f.i = i; $f.i$1 = i$1; $f.p = p; $f.typeString = typeString; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBytes = function(v, verb, typeString) { return this.$val.fmtBytes(v, verb, typeString); };
	pp.ptr.prototype.fmtPointer = function(value, verb) {
		var _1, _2, _r, _r$1, p, u, value, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; p = $f.p; u = $f.u; value = $f.value; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		u = 0;
			_1 = $clone(value, reflect.Value).Kind();
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { */ case 2:
				u = $clone(value, reflect.Value).Pointer();
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
		case 1:
			_2 = verb;
			/* */ if (_2 === (118)) { $s = 7; continue; }
			/* */ if (_2 === (112)) { $s = 8; continue; }
			/* */ if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_2 === (118)) { */ case 7:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 12:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
					_r = $clone(value, reflect.Value).Type(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r$1 = _r.String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$1); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(")(");
					if (u === 0) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("nil");
					} else {
						p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), true);
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
					$s = 14; continue;
				/* } else { */ case 13:
					if (u === 0) {
						p.fmt.padString("<nil>");
					} else {
						p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), !p.fmt.fmtFlags.sharp);
					}
				/* } */ case 14:
				$s = 11; continue;
			/* } else if (_2 === (112)) { */ case 8:
				p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), !p.fmt.fmtFlags.sharp);
				$s = 11; continue;
			/* } else if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { */ case 9:
				$r = p.fmtInteger((new $Uint64(0, u.constructor === Number ? u : 1)), false, verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 11; continue;
			/* } else { */ case 10:
				$r = p.badVerb(verb); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
		case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtPointer }; } $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.u = u; $f.value = value; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtPointer = function(value, verb) { return this.$val.fmtPointer(value, verb); };
	pp.ptr.prototype.catchPanic = function(arg, verb) {
		var _r, arg, err, oldFlags, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; arg = $f.arg; err = $f.err; oldFlags = $f.oldFlags; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		err = $recover();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			_r = reflect.ValueOf(arg); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
			if (($clone(v, reflect.Value).Kind() === 22) && $clone(v, reflect.Value).IsNil()) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
				$s = -1; return;
			}
			if (p.panicking) {
				$panic(err);
			}
			oldFlags = $clone(p.fmt.fmtFlags, fmtFlags);
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(PANIC=");
			p.panicking = true;
			$r = p.printArg(err, 118); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p.panicking = false;
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
			fmtFlags.copy(p.fmt.fmtFlags, oldFlags);
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.catchPanic }; } $f._r = _r; $f.arg = arg; $f.err = err; $f.oldFlags = oldFlags; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.catchPanic = function(arg, verb) { return this.$val.catchPanic(arg, verb); };
	pp.ptr.prototype.handleMethods = function(verb) {
		var _1, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, formatter, handled, ok, ok$1, p, stringer, v, v$1, verb, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; formatter = $f.formatter; handled = $f.handled; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; stringer = $f.stringer; v = $f.v; v$1 = $f.v$1; verb = $f.verb; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		handled = false;
		p = this;
		if (p.erroring) {
			$s = -1; return handled;
		}
		_tuple = $assertType(p.arg, Formatter, true);
		formatter = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			handled = true;
			$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
			$r = formatter.Format(p, verb); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return handled;
		/* } */ case 2:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 4:
			_tuple$1 = $assertType(p.arg, GoStringer, true);
			stringer = _tuple$1[0];
			ok$1 = _tuple$1[1];
			/* */ if (ok$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (ok$1) { */ case 7:
				handled = true;
				$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
				_r = stringer.GoString(); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return handled;
			/* } */ case 8:
			$s = 6; continue;
		/* } else { */ case 5:
				_1 = verb;
				/* */ if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { */ case 12:
					_ref = p.arg;
					/* */ if ($assertType(_ref, $error, true)[1]) { $s = 14; continue; }
					/* */ if ($assertType(_ref, Stringer, true)[1]) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if ($assertType(_ref, $error, true)[1]) { */ case 14:
						v = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$1 = v.Error(); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$1, verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return handled;
					/* } else if ($assertType(_ref, Stringer, true)[1]) { */ case 15:
						v$1 = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$2 = v$1.String(); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$2, verb); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return handled;
					/* } */ case 16:
				/* } */ case 13:
			case 11:
		/* } */ case 6:
		handled = false;
		$s = -1; return handled;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  handled; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: pp.ptr.prototype.handleMethods }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.formatter = formatter; $f.handled = handled; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.stringer = stringer; $f.v = v; $f.v$1 = v$1; $f.verb = verb; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	pp.prototype.handleMethods = function(verb) { return this.$val.handleMethods(verb); };
	pp.ptr.prototype.printArg = function(arg, verb) {
		var _1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, arg, f, f$1, f$10, f$11, f$12, f$13, f$14, f$15, f$16, f$17, f$18, f$19, f$2, f$3, f$4, f$5, f$6, f$7, f$8, f$9, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; arg = $f.arg; f = $f.f; f$1 = $f.f$1; f$10 = $f.f$10; f$11 = $f.f$11; f$12 = $f.f$12; f$13 = $f.f$13; f$14 = $f.f$14; f$15 = $f.f$15; f$16 = $f.f$16; f$17 = $f.f$17; f$18 = $f.f$18; f$19 = $f.f$19; f$2 = $f.f$2; f$3 = $f.f$3; f$4 = $f.f$4; f$5 = $f.f$5; f$6 = $f.f$6; f$7 = $f.f$7; f$8 = $f.f$8; f$9 = $f.f$9; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 1:
				_1 = verb;
				/* */ if ((_1 === (84)) || (_1 === (118))) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if ((_1 === (84)) || (_1 === (118))) { */ case 4:
					p.fmt.padString("<nil>");
					$s = 6; continue;
				/* } else { */ case 5:
					$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
			case 3:
			$s = -1; return;
		/* } */ case 2:
			_2 = verb;
			/* */ if (_2 === (84)) { $s = 9; continue; }
			/* */ if (_2 === (112)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_2 === (84)) { */ case 9:
				_r = reflect.TypeOf(arg).String(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } else if (_2 === (112)) { */ case 10:
				_r$1 = reflect.ValueOf(arg); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = p.fmtPointer($clone(_r$1, reflect.Value), 112); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 11:
		case 8:
		_ref = arg;
		/* */ if ($assertType(_ref, $Bool, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, $Float32, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, $Float64, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, $Complex64, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, $Complex128, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, $Int, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref, $Int8, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref, $Int16, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref, $Int32, true)[1]) { $s = 24; continue; }
		/* */ if ($assertType(_ref, $Int64, true)[1]) { $s = 25; continue; }
		/* */ if ($assertType(_ref, $Uint, true)[1]) { $s = 26; continue; }
		/* */ if ($assertType(_ref, $Uint8, true)[1]) { $s = 27; continue; }
		/* */ if ($assertType(_ref, $Uint16, true)[1]) { $s = 28; continue; }
		/* */ if ($assertType(_ref, $Uint32, true)[1]) { $s = 29; continue; }
		/* */ if ($assertType(_ref, $Uint64, true)[1]) { $s = 30; continue; }
		/* */ if ($assertType(_ref, $Uintptr, true)[1]) { $s = 31; continue; }
		/* */ if ($assertType(_ref, $String, true)[1]) { $s = 32; continue; }
		/* */ if ($assertType(_ref, sliceType$2, true)[1]) { $s = 33; continue; }
		/* */ if ($assertType(_ref, reflect.Value, true)[1]) { $s = 34; continue; }
		/* */ $s = 35; continue;
		/* if ($assertType(_ref, $Bool, true)[1]) { */ case 16:
			f = _ref.$val;
			$r = p.fmtBool(f, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float32, true)[1]) { */ case 17:
			f$1 = _ref.$val;
			$r = p.fmtFloat((f$1), 32, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float64, true)[1]) { */ case 18:
			f$2 = _ref.$val;
			$r = p.fmtFloat(f$2, 64, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex64, true)[1]) { */ case 19:
			f$3 = _ref.$val;
			$r = p.fmtComplex((new $Complex128(f$3.$real, f$3.$imag)), 64, verb); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex128, true)[1]) { */ case 20:
			f$4 = _ref.$val;
			$r = p.fmtComplex(f$4, 128, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int, true)[1]) { */ case 21:
			f$5 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$5)), true, verb); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int8, true)[1]) { */ case 22:
			f$6 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$6)), true, verb); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int16, true)[1]) { */ case 23:
			f$7 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$7)), true, verb); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int32, true)[1]) { */ case 24:
			f$8 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$8)), true, verb); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int64, true)[1]) { */ case 25:
			f$9 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(f$9.$high, f$9.$low)), true, verb); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint, true)[1]) { */ case 26:
			f$10 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$10)), false, verb); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint8, true)[1]) { */ case 27:
			f$11 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$11)), false, verb); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint16, true)[1]) { */ case 28:
			f$12 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$12)), false, verb); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint32, true)[1]) { */ case 29:
			f$13 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$13)), false, verb); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint64, true)[1]) { */ case 30:
			f$14 = _ref.$val;
			$r = p.fmtInteger(f$14, false, verb); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uintptr, true)[1]) { */ case 31:
			f$15 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$15.constructor === Number ? f$15 : 1)), false, verb); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $String, true)[1]) { */ case 32:
			f$16 = _ref.$val;
			$r = p.fmtString(f$16, verb); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, sliceType$2, true)[1]) { */ case 33:
			f$17 = _ref.$val;
			$r = p.fmtBytes(f$17, verb, "[]byte"); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, reflect.Value, true)[1]) { */ case 34:
			f$18 = _ref.$val;
			/* */ if ($clone(f$18, reflect.Value).IsValid() && $clone(f$18, reflect.Value).CanInterface()) { $s = 55; continue; }
			/* */ $s = 56; continue;
			/* if ($clone(f$18, reflect.Value).IsValid() && $clone(f$18, reflect.Value).CanInterface()) { */ case 55:
				_r$2 = $clone(f$18, reflect.Value).Interface(); /* */ $s = 57; case 57: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				p.arg = _r$2;
				_r$3 = p.handleMethods(verb); /* */ $s = 60; case 60: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3) { $s = 58; continue; }
				/* */ $s = 59; continue;
				/* if (_r$3) { */ case 58:
					$s = -1; return;
				/* } */ case 59:
			/* } */ case 56:
			$r = p.printValue($clone(f$18, reflect.Value), verb, 0); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else { */ case 35:
			f$19 = _ref;
			_r$4 = p.handleMethods(verb); /* */ $s = 64; case 64: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 62; continue; }
			/* */ $s = 63; continue;
			/* if (!_r$4) { */ case 62:
				_r$5 = reflect.ValueOf(f$19); /* */ $s = 65; case 65: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$r = p.printValue($clone(_r$5, reflect.Value), verb, 0); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 63:
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printArg }; } $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.arg = arg; $f.f = f; $f.f$1 = f$1; $f.f$10 = f$10; $f.f$11 = f$11; $f.f$12 = f$12; $f.f$13 = f$13; $f.f$14 = f$14; $f.f$15 = f$15; $f.f$16 = f$16; $f.f$17 = f$17; $f.f$18 = f$18; $f.f$19 = f$19; $f.f$2 = f$2; $f.f$3 = f$3; $f.f$4 = f$4; $f.f$5 = f$5; $f.f$6 = f$6; $f.f$7 = f$7; $f.f$8 = f$8; $f.f$9 = f$9; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printArg = function(arg, verb) { return this.$val.printArg(arg, verb); };
	pp.ptr.prototype.printValue = function(value, verb, depth) {
		var _1, _2, _3, _4, _arg, _arg$1, _arg$2, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, a, bytes, depth, f, i, i$1, i$2, i$3, i$4, key, keys, name, p, t, value, value$1, verb, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; a = $f.a; bytes = $f.bytes; depth = $f.depth; f = $f.f; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; key = $f.key; keys = $f.keys; name = $f.name; p = $f.p; t = $f.t; value = $f.value; value$1 = $f.value$1; verb = $f.verb; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (depth > 0 && $clone(value, reflect.Value).IsValid() && $clone(value, reflect.Value).CanInterface()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (depth > 0 && $clone(value, reflect.Value).IsValid() && $clone(value, reflect.Value).CanInterface()) { */ case 1:
			_r = $clone(value, reflect.Value).Interface(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			p.arg = _r;
			_r$1 = p.handleMethods(verb); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1) { */ case 4:
				$s = -1; return;
			/* } */ case 5:
		/* } */ case 2:
		p.arg = $ifaceNil;
		p.value = value;
			f = value;
			_1 = $clone(value, reflect.Value).Kind();
			/* */ if (_1 === (0)) { $s = 8; continue; }
			/* */ if (_1 === (1)) { $s = 9; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 10; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 11; continue; }
			/* */ if (_1 === (13)) { $s = 12; continue; }
			/* */ if (_1 === (14)) { $s = 13; continue; }
			/* */ if (_1 === (15)) { $s = 14; continue; }
			/* */ if (_1 === (16)) { $s = 15; continue; }
			/* */ if (_1 === (24)) { $s = 16; continue; }
			/* */ if (_1 === (21)) { $s = 17; continue; }
			/* */ if (_1 === (25)) { $s = 18; continue; }
			/* */ if (_1 === (20)) { $s = 19; continue; }
			/* */ if ((_1 === (17)) || (_1 === (23))) { $s = 20; continue; }
			/* */ if (_1 === (22)) { $s = 21; continue; }
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (_1 === (0)) { */ case 8:
				/* */ if (depth === 0) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (depth === 0) { */ case 25:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<invalid reflect.Value>");
					$s = 27; continue;
				/* } else { */ case 26:
						_2 = verb;
						/* */ if (_2 === (118)) { $s = 29; continue; }
						/* */ $s = 30; continue;
						/* if (_2 === (118)) { */ case 29:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
							$s = 31; continue;
						/* } else { */ case 30:
							$r = p.badVerb(verb); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 31:
					case 28:
				/* } */ case 27:
				$s = 24; continue;
			/* } else if (_1 === (1)) { */ case 9:
				$r = p.fmtBool($clone(f, reflect.Value).Bool(), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 10:
				$r = p.fmtInteger(((x = $clone(f, reflect.Value).Int(), new $Uint64(x.$high, x.$low))), true, verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 11:
				$r = p.fmtInteger($clone(f, reflect.Value).Uint(), false, verb); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (13)) { */ case 12:
				$r = p.fmtFloat($clone(f, reflect.Value).Float(), 32, verb); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (14)) { */ case 13:
				$r = p.fmtFloat($clone(f, reflect.Value).Float(), 64, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (15)) { */ case 14:
				$r = p.fmtComplex($clone(f, reflect.Value).Complex(), 64, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (16)) { */ case 15:
				$r = p.fmtComplex($clone(f, reflect.Value).Complex(), 128, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (24)) { */ case 16:
				_r$2 = $clone(f, reflect.Value).String(); /* */ $s = 40; case 40: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = p.fmtString(_r$2, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (21)) { */ case 17:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 42:
					_r$3 = $clone(f, reflect.Value).Type(); /* */ $s = 45; case 45: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = _r$3.String(); /* */ $s = 46; case 46: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$4); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if ($clone(f, reflect.Value).IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					$s = 44; continue;
				/* } else { */ case 43:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("map[");
				/* } */ case 44:
				_r$5 = $clone(f, reflect.Value).MapKeys(); /* */ $s = 48; case 48: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				keys = _r$5;
				_ref = keys;
				_i = 0;
				/* while (true) { */ case 49:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 50; continue; }
					i = _i;
					key = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					if (i > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					$r = p.printValue($clone(key, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
					_r$6 = $clone(f, reflect.Value).MapIndex($clone(key, reflect.Value)); /* */ $s = 52; case 52: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$r = p.printValue($clone(_r$6, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
				/* } */ $s = 49; continue; case 50:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 24; continue;
			/* } else if (_1 === (25)) { */ case 18:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 54; continue; }
				/* */ $s = 55; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 54:
					_r$7 = $clone(f, reflect.Value).Type(); /* */ $s = 56; case 56: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_r$8 = _r$7.String(); /* */ $s = 57; case 57: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$8); /* */ $s = 58; case 58: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 55:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
				i$1 = 0;
				/* while (true) { */ case 59:
					/* if (!(i$1 < $clone(f, reflect.Value).NumField())) { break; } */ if(!(i$1 < $clone(f, reflect.Value).NumField())) { $s = 60; continue; }
					if (i$1 > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					/* */ if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { $s = 61; continue; }
					/* */ $s = 62; continue;
					/* if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { */ case 61:
						_r$9 = $clone(f, reflect.Value).Type(); /* */ $s = 63; case 63: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_r$10 = _r$9.Field(i$1); /* */ $s = 64; case 64: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						name = _r$10.Name;
						if (!(name === "")) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(name);
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
						}
					/* } */ case 62:
					_r$11 = getField($clone(f, reflect.Value), i$1); /* */ $s = 65; case 65: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					$r = p.printValue($clone(_r$11, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 59; continue; case 60:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				$s = 24; continue;
			/* } else if (_1 === (20)) { */ case 19:
				_r$12 = $clone(f, reflect.Value).Elem(); /* */ $s = 67; case 67: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				value$1 = _r$12;
				/* */ if (!$clone(value$1, reflect.Value).IsValid()) { $s = 68; continue; }
				/* */ $s = 69; continue;
				/* if (!$clone(value$1, reflect.Value).IsValid()) { */ case 68:
					/* */ if (p.fmt.fmtFlags.sharpV) { $s = 71; continue; }
					/* */ $s = 72; continue;
					/* if (p.fmt.fmtFlags.sharpV) { */ case 71:
						_r$13 = $clone(f, reflect.Value).Type(); /* */ $s = 74; case 74: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						_r$14 = _r$13.String(); /* */ $s = 75; case 75: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$14); /* */ $s = 76; case 76: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = 73; continue;
					/* } else { */ case 72:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
					/* } */ case 73:
					$s = 70; continue;
				/* } else { */ case 69:
					$r = p.printValue($clone(value$1, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 77; case 77: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 70:
				$s = 24; continue;
			/* } else if ((_1 === (17)) || (_1 === (23))) { */ case 20:
					_3 = verb;
					/* */ if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { $s = 79; continue; }
					/* */ $s = 80; continue;
					/* if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { */ case 79:
						_r$15 = $clone(f, reflect.Value).Type(); /* */ $s = 81; case 81: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						t = _r$15;
						_r$16 = t.Elem(); /* */ $s = 84; case 84: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						_r$17 = _r$16.Kind(); /* */ $s = 85; case 85: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						/* */ if (_r$17 === 8) { $s = 82; continue; }
						/* */ $s = 83; continue;
						/* if (_r$17 === 8) { */ case 82:
							bytes = sliceType$2.nil;
							/* */ if ($clone(f, reflect.Value).Kind() === 23) { $s = 86; continue; }
							/* */ if ($clone(f, reflect.Value).CanAddr()) { $s = 87; continue; }
							/* */ $s = 88; continue;
							/* if ($clone(f, reflect.Value).Kind() === 23) { */ case 86:
								_r$18 = $clone(f, reflect.Value).Bytes(); /* */ $s = 90; case 90: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
								bytes = _r$18;
								$s = 89; continue;
							/* } else if ($clone(f, reflect.Value).CanAddr()) { */ case 87:
								_r$19 = $clone(f, reflect.Value).Slice(0, $clone(f, reflect.Value).Len()); /* */ $s = 91; case 91: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
								_r$20 = $clone(_r$19, reflect.Value).Bytes(); /* */ $s = 92; case 92: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
								bytes = _r$20;
								$s = 89; continue;
							/* } else { */ case 88:
								bytes = $makeSlice(sliceType$2, $clone(f, reflect.Value).Len());
								_ref$1 = bytes;
								_i$1 = 0;
								/* while (true) { */ case 93:
									/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 94; continue; }
									i$2 = _i$1;
									_r$21 = $clone(f, reflect.Value).Index(i$2); /* */ $s = 95; case 95: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
									_r$22 = $clone(_r$21, reflect.Value).Uint(); /* */ $s = 96; case 96: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
									((i$2 < 0 || i$2 >= bytes.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + i$2] = ((_r$22.$low << 24 >>> 24)));
									_i$1++;
								/* } */ $s = 93; continue; case 94:
							/* } */ case 89:
							_arg = bytes;
							_arg$1 = verb;
							_r$23 = t.String(); /* */ $s = 97; case 97: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
							_arg$2 = _r$23;
							$r = p.fmtBytes(_arg, _arg$1, _arg$2); /* */ $s = 98; case 98: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 83:
					/* } */ case 80:
				case 78:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 99; continue; }
				/* */ $s = 100; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 99:
					_r$24 = $clone(f, reflect.Value).Type(); /* */ $s = 102; case 102: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
					_r$25 = _r$24.String(); /* */ $s = 103; case 103: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$25); /* */ $s = 104; case 104: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (($clone(f, reflect.Value).Kind() === 23) && $clone(f, reflect.Value).IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					i$3 = 0;
					/* while (true) { */ case 105:
						/* if (!(i$3 < $clone(f, reflect.Value).Len())) { break; } */ if(!(i$3 < $clone(f, reflect.Value).Len())) { $s = 106; continue; }
						if (i$3 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						}
						_r$26 = $clone(f, reflect.Value).Index(i$3); /* */ $s = 107; case 107: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
						$r = p.printValue($clone(_r$26, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 108; case 108: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$3 = i$3 + (1) >> 0;
					/* } */ $s = 105; continue; case 106:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
					$s = 101; continue;
				/* } else { */ case 100:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
					i$4 = 0;
					/* while (true) { */ case 109:
						/* if (!(i$4 < $clone(f, reflect.Value).Len())) { break; } */ if(!(i$4 < $clone(f, reflect.Value).Len())) { $s = 110; continue; }
						if (i$4 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
						_r$27 = $clone(f, reflect.Value).Index(i$4); /* */ $s = 111; case 111: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
						$r = p.printValue($clone(_r$27, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 112; case 112: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$4 = i$4 + (1) >> 0;
					/* } */ $s = 109; continue; case 110:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				/* } */ case 101:
				$s = 24; continue;
			/* } else if (_1 === (22)) { */ case 21:
				/* */ if ((depth === 0) && !(($clone(f, reflect.Value).Pointer() === 0))) { $s = 113; continue; }
				/* */ $s = 114; continue;
				/* if ((depth === 0) && !(($clone(f, reflect.Value).Pointer() === 0))) { */ case 113:
						_r$28 = $clone(f, reflect.Value).Elem(); /* */ $s = 116; case 116: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
						a = _r$28;
						_4 = $clone(a, reflect.Value).Kind();
						/* */ if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { $s = 117; continue; }
						/* */ $s = 118; continue;
						/* if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { */ case 117:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
							$r = p.printValue($clone(a, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 119; case 119: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 118:
					case 115:
				/* } */ case 114:
				$r = p.fmtPointer($clone(f, reflect.Value), verb); /* */ $s = 120; case 120: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { */ case 22:
				$r = p.fmtPointer($clone(f, reflect.Value), verb); /* */ $s = 121; case 121: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else { */ case 23:
				$r = p.unknownType($clone(f, reflect.Value)); /* */ $s = 122; case 122: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 24:
		case 7:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printValue }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.a = a; $f.bytes = bytes; $f.depth = depth; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.key = key; $f.keys = keys; $f.name = name; $f.p = p; $f.t = t; $f.value = value; $f.value$1 = value$1; $f.verb = verb; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printValue = function(value, verb, depth) { return this.$val.printValue(value, verb, depth); };
	intFromArg = function(a, argNum) {
		var _1, _r, _tuple, a, argNum, isInt, n, n$1, newArgNum, num, v, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _tuple = $f._tuple; a = $f.a; argNum = $f.argNum; isInt = $f.isInt; n = $f.n; n$1 = $f.n$1; newArgNum = $f.newArgNum; num = $f.num; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		num = 0;
		isInt = false;
		newArgNum = 0;
		newArgNum = argNum;
		/* */ if (argNum < a.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (argNum < a.$length) { */ case 1:
			_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), $Int, true);
			num = _tuple[0];
			isInt = _tuple[1];
			/* */ if (!isInt) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!isInt) { */ case 3:
					_r = reflect.ValueOf(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					_1 = $clone(v, reflect.Value).Kind();
					if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
						n = $clone(v, reflect.Value).Int();
						if ((x = (new $Int64(0, (((n.$low + ((n.$high >> 31) * 4294967296)) >> 0)))), (x.$high === n.$high && x.$low === n.$low))) {
							num = (((n.$low + ((n.$high >> 31) * 4294967296)) >> 0));
							isInt = true;
						}
					} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) {
						n$1 = $clone(v, reflect.Value).Uint();
						if ((x$1 = (new $Int64(n$1.$high, n$1.$low)), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0))) && (x$2 = (new $Uint64(0, ((n$1.$low >> 0)))), (x$2.$high === n$1.$high && x$2.$low === n$1.$low))) {
							num = ((n$1.$low >> 0));
							isInt = true;
						}
					}
				case 5:
			/* } */ case 4:
			newArgNum = argNum + 1 >> 0;
			if (tooLarge(num)) {
				num = 0;
				isInt = false;
			}
		/* } */ case 2:
		$s = -1; return [num, isInt, newArgNum];
		/* */ } return; } if ($f === undefined) { $f = { $blk: intFromArg }; } $f._1 = _1; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.argNum = argNum; $f.isInt = isInt; $f.n = n; $f.n$1 = n$1; $f.newArgNum = newArgNum; $f.num = num; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseArgNumber = function(format) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, format, i, index, newi, ok, ok$1, wid, width;
		index = 0;
		wid = 0;
		ok = false;
		if (format.length < 3) {
			_tmp = 0;
			_tmp$1 = 1;
			_tmp$2 = false;
			index = _tmp;
			wid = _tmp$1;
			ok = _tmp$2;
			return [index, wid, ok];
		}
		i = 1;
		while (true) {
			if (!(i < format.length)) { break; }
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i);
				width = _tuple[0];
				ok$1 = _tuple[1];
				newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp$3 = 0;
					_tmp$4 = i + 1 >> 0;
					_tmp$5 = false;
					index = _tmp$3;
					wid = _tmp$4;
					ok = _tmp$5;
					return [index, wid, ok];
				}
				_tmp$6 = width - 1 >> 0;
				_tmp$7 = i + 1 >> 0;
				_tmp$8 = true;
				index = _tmp$6;
				wid = _tmp$7;
				ok = _tmp$8;
				return [index, wid, ok];
			}
			i = i + (1) >> 0;
		}
		_tmp$9 = 0;
		_tmp$10 = 1;
		_tmp$11 = false;
		index = _tmp$9;
		wid = _tmp$10;
		ok = _tmp$11;
		return [index, wid, ok];
	};
	pp.ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, argNum, format, found, i, index, newArgNum, newi, numArgs, ok, p, wid;
		newArgNum = 0;
		newi = 0;
		found = false;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum;
			_tmp$1 = i;
			_tmp$2 = false;
			newArgNum = _tmp;
			newi = _tmp$1;
			found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber($substring(format, i));
		index = _tuple[0];
		wid = _tuple[1];
		ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index;
			_tmp$4 = i + wid >> 0;
			_tmp$5 = true;
			newArgNum = _tmp$3;
			newi = _tmp$4;
			found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum;
		_tmp$7 = i + wid >> 0;
		_tmp$8 = ok;
		newArgNum = _tmp$6;
		newi = _tmp$7;
		found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.ptr.prototype.badArgNum = function(verb) {
		var p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(BADINDEX)");
	};
	pp.prototype.badArgNum = function(verb) { return this.$val.badArgNum(verb); };
	pp.ptr.prototype.missingArg = function(verb) {
		var p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(MISSING)");
	};
	pp.prototype.missingArg = function(verb) { return this.$val.missingArg(verb); };
	pp.ptr.prototype.doPrintf = function(format, a) {
		var _1, _i, _r, _r$1, _r$2, _ref, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, argNum, c, end, format, i, i$1, lasti, p, size, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; a = $f.a; afterIndex = $f.afterIndex; arg = $f.arg; argNum = $f.argNum; c = $f.c; end = $f.end; format = $f.format; i = $f.i; i$1 = $f.i$1; lasti = $f.lasti; p = $f.p; size = $f.size; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 2; continue; }
			p.goodArgNum = true;
			lasti = i;
			while (true) {
				if (!(i < end && !((format.charCodeAt(i) === 37)))) { break; }
				i = i + (1) >> 0;
			}
			if (i > lasti) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString($substring(format, lasti, i));
			}
			if (i >= end) {
				/* break; */ $s = 2; continue;
			}
			i = i + (1) >> 0;
			p.fmt.clearflags();
			/* while (true) { */ case 3:
				/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 4; continue; }
				c = format.charCodeAt(i);
					_1 = c;
					/* */ if (_1 === (35)) { $s = 6; continue; }
					/* */ if (_1 === (48)) { $s = 7; continue; }
					/* */ if (_1 === (43)) { $s = 8; continue; }
					/* */ if (_1 === (45)) { $s = 9; continue; }
					/* */ if (_1 === (32)) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (_1 === (35)) { */ case 6:
						p.fmt.fmtFlags.sharp = true;
						$s = 12; continue;
					/* } else if (_1 === (48)) { */ case 7:
						p.fmt.fmtFlags.zero = !p.fmt.fmtFlags.minus;
						$s = 12; continue;
					/* } else if (_1 === (43)) { */ case 8:
						p.fmt.fmtFlags.plus = true;
						$s = 12; continue;
					/* } else if (_1 === (45)) { */ case 9:
						p.fmt.fmtFlags.minus = true;
						p.fmt.fmtFlags.zero = false;
						$s = 12; continue;
					/* } else if (_1 === (32)) { */ case 10:
						p.fmt.fmtFlags.space = true;
						$s = 12; continue;
					/* } else { */ case 11:
						/* */ if (97 <= c && c <= 122 && argNum < a.$length) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (97 <= c && c <= 122 && argNum < a.$length) { */ case 13:
							if (c === 118) {
								p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
								p.fmt.fmtFlags.sharp = false;
								p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
								p.fmt.fmtFlags.plus = false;
							}
							$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), ((c >> 0))); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							argNum = argNum + (1) >> 0;
							i = i + (1) >> 0;
							/* continue formatLoop; */ $s = 1; continue s;
						/* } */ case 14:
						/* break simpleFormat; */ $s = 4; continue s;
					/* } */ case 12:
				case 5:
				i = i + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			_tuple = p.argNumber(argNum, format, i, a.$length);
			argNum = _tuple[0];
			i = _tuple[1];
			afterIndex = _tuple[2];
			/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 16:
				i = i + (1) >> 0;
				_r = intFromArg(a, argNum); /* */ $s = 19; case 19: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				p.fmt.wid = _tuple$1[0];
				p.fmt.fmtFlags.widPresent = _tuple$1[1];
				argNum = _tuple$1[2];
				if (!p.fmt.fmtFlags.widPresent) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(BADWIDTH)");
				}
				if (p.fmt.wid < 0) {
					p.fmt.wid = -p.fmt.wid;
					p.fmt.fmtFlags.minus = true;
					p.fmt.fmtFlags.zero = false;
				}
				afterIndex = false;
				$s = 18; continue;
			/* } else { */ case 17:
				_tuple$2 = parsenum(format, i, end);
				p.fmt.wid = _tuple$2[0];
				p.fmt.fmtFlags.widPresent = _tuple$2[1];
				i = _tuple$2[2];
				if (afterIndex && p.fmt.fmtFlags.widPresent) {
					p.goodArgNum = false;
				}
			/* } */ case 18:
			/* */ if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { */ case 20:
				i = i + (1) >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$3[0];
				i = _tuple$3[1];
				afterIndex = _tuple$3[2];
				/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 22:
					i = i + (1) >> 0;
					_r$1 = intFromArg(a, argNum); /* */ $s = 25; case 25: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$4 = _r$1;
					p.fmt.prec = _tuple$4[0];
					p.fmt.fmtFlags.precPresent = _tuple$4[1];
					argNum = _tuple$4[2];
					if (p.fmt.prec < 0) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = false;
					}
					if (!p.fmt.fmtFlags.precPresent) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(BADPREC)");
					}
					afterIndex = false;
					$s = 24; continue;
				/* } else { */ case 23:
					_tuple$5 = parsenum(format, i, end);
					p.fmt.prec = _tuple$5[0];
					p.fmt.fmtFlags.precPresent = _tuple$5[1];
					i = _tuple$5[2];
					if (!p.fmt.fmtFlags.precPresent) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = true;
					}
				/* } */ case 24:
			/* } */ case 21:
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$6[0];
				i = _tuple$6[1];
				afterIndex = _tuple$6[2];
			}
			if (i >= end) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(NOVERB)");
				/* break; */ $s = 2; continue;
			}
			_tmp = ((format.charCodeAt(i) >> 0));
			_tmp$1 = 1;
			verb = _tmp;
			size = _tmp$1;
			if (verb >= 128) {
				_tuple$7 = utf8.DecodeRuneInString($substring(format, i));
				verb = _tuple$7[0];
				size = _tuple$7[1];
			}
			i = i + (size) >> 0;
				/* */ if ((verb === 37)) { $s = 27; continue; }
				/* */ if (!p.goodArgNum) { $s = 28; continue; }
				/* */ if (argNum >= a.$length) { $s = 29; continue; }
				/* */ if ((verb === 118)) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if ((verb === 37)) { */ case 27:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(37);
					$s = 32; continue;
				/* } else if (!p.goodArgNum) { */ case 28:
					p.badArgNum(verb);
					$s = 32; continue;
				/* } else if (argNum >= a.$length) { */ case 29:
					p.missingArg(verb);
					$s = 32; continue;
				/* } else if ((verb === 118)) { */ case 30:
					p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
					p.fmt.fmtFlags.sharp = false;
					p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
					p.fmt.fmtFlags.plus = false;
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
					$s = 32; continue;
				/* } else { */ case 31:
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
				/* } */ case 32:
			case 26:
		/* } */ $s = 1; continue; case 2:
		/* */ if (!p.reordered && argNum < a.$length) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (!p.reordered && argNum < a.$length) { */ case 35:
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(EXTRA ");
			_ref = $subslice(a, argNum);
			_i = 0;
			/* while (true) { */ case 37:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 38; continue; }
				i$1 = _i;
				arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (i$1 > 0) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
				}
				/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 39:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
					$s = 41; continue;
				/* } else { */ case 40:
					_r$2 = reflect.TypeOf(arg).String(); /* */ $s = 42; case 42: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
					$r = p.printArg(arg, 118); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 41:
				_i++;
			/* } */ $s = 37; continue; case 38:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintf }; } $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.a = a; $f.afterIndex = afterIndex; $f.arg = arg; $f.argNum = argNum; $f.c = c; $f.end = end; $f.format = format; $f.i = i; $f.i$1 = i$1; $f.lasti = lasti; $f.p = p; $f.size = size; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	pp.ptr.prototype.doPrint = function(a) {
		var _i, _r, _ref, _v, a, arg, argNum, isString, p, prevString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _v = $f._v; a = $f.a; arg = $f.arg; argNum = $f.argNum; isString = $f.isString; p = $f.p; prevString = $f.prevString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		prevString = false;
		_ref = a;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			argNum = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!(!($interfaceIsEqual(arg, $ifaceNil)))) { _v = false; $s = 3; continue s; }
			_r = reflect.TypeOf(arg).Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r === 24; case 3:
			isString = _v;
			if (argNum > 0 && !isString && !prevString) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
			}
			$r = p.printArg(arg, 118); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			prevString = isString;
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrint }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._v = _v; $f.a = a; $f.arg = arg; $f.argNum = argNum; $f.isString = isString; $f.p = p; $f.prevString = prevString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrint = function(a) { return this.$val.doPrint(a); };
	pp.ptr.prototype.doPrintln = function(a) {
		var _i, _ref, a, arg, argNum, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; a = $f.a; arg = $f.arg; argNum = $f.argNum; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = a;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			argNum = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (argNum > 0) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
			}
			$r = p.printArg(arg, 118); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(10);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintln }; } $f._i = _i; $f._ref = _ref; $f.a = a; $f.arg = arg; $f.argNum = argNum; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintln = function(a) { return this.$val.doPrintln(a); };
	ss.ptr.prototype.Read = function(buf) {
		var _tmp, _tmp$1, buf, err, n, s;
		n = 0;
		err = $ifaceNil;
		s = this;
		_tmp = 0;
		_tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune");
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.ptr.prototype.ReadRune = function() {
		var _r, _tuple, err, r, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		s = this;
		if (s.atEOF || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			$s = -1; return [r, size, err];
		}
		_r = s.rs.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		size = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			s.count = s.count + (1) >> 0;
			if (s.ssave.nlIsEnd && (r === 10)) {
				s.atEOF = true;
			}
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		$s = -1; return [r, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.ReadRune }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.ptr.prototype.Width = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, ok, s, wid;
		wid = 0;
		ok = false;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0;
			_tmp$1 = false;
			wid = _tmp;
			ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid;
		_tmp$3 = true;
		wid = _tmp$2;
		ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.ptr.prototype.getRune = function() {
		var _r, _tuple, err, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		s = this;
		_r = s.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				$s = -1; return r;
			}
			s.error(err);
		}
		$s = -1; return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.getRune }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.ptr.prototype.UnreadRune = function() {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.rs.UnreadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		s.atEOF = false;
		s.count = s.count - (1) >> 0;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.UnreadRune }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.ptr.prototype.error = function(err) {
		var err, s, x;
		s = this;
		$panic((x = new scanError.ptr(err), new x.constructor.elem(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.ptr.prototype.errorString = function(err) {
		var err, s, x;
		s = this;
		$panic((x = new scanError.ptr(errors.New(err)), new x.constructor.elem(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.ptr.prototype.Token = function(skipSpace, f) {
		var _r, err, f, s, skipSpace, tok, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; f = $f.f; s = $f.s; skipSpace = $f.skipSpace; tok = $f.tok; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		tok = sliceType$2.nil;
		err[0] = $ifaceNil;
		s = this;
		$deferred.push([(function(err) { return function() {
			var _tuple, e, ok, se;
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple = $assertType(e, scanError, true);
				se = $clone(_tuple[0], scanError);
				ok = _tuple[1];
				if (ok) {
					err[0] = se.err;
				} else {
					$panic(e);
				}
			}
		}; })(err), []]);
		if (f === $throwNilPointerError) {
			f = notSpace;
		}
		s.buf = $subslice(s.buf, 0, 0);
		_r = s.token(skipSpace, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		tok = _r;
		$s = -1; return [tok, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tok, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ss.ptr.prototype.Token }; } $f._r = _r; $f.err = err; $f.f = f; $f.s = s; $f.skipSpace = skipSpace; $f.tok = tok; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var _i, _ref, r, rng, rx;
		if (r >= 65536) {
			return false;
		}
		rx = ((r << 16 >>> 16));
		_ref = space;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rng = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), arrayType$1);
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		var r;
		return !isSpace(r);
	};
	ss.ptr.prototype.free = function(old) {
		var old, s;
		s = this;
		if (old.validSave) {
			ssave.copy(s.ssave, old);
			return;
		}
		if (s.buf.$capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rs = $ifaceNil;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.ptr.prototype.SkipSpace = function() {
		var _r, _r$1, _r$2, _v, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _v = $f._v; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			_r = s.getRune(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				$s = -1; return;
			}
			if (!(r === 13)) { _v = false; $s = 6; continue s; }
			_r$1 = s.peek("\n"); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			/* */ if (r === 10) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (r === 10) { */ case 8:
				if (s.ssave.nlIsSpace) {
					/* continue; */ $s = 1; continue;
				}
				s.errorString("unexpected newline");
				$s = -1; return;
			/* } */ case 9:
			/* */ if (!isSpace(r)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!isSpace(r)) { */ case 10:
				_r$2 = s.UnreadRune(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 2; continue;
			/* } */ case 11:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.SkipSpace }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._v = _v; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	ss.ptr.prototype.token = function(skipSpace, f) {
		var _r, _r$1, _r$2, f, r, s, skipSpace, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; r = $f.r; s = $f.s; skipSpace = $f.skipSpace; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (skipSpace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (skipSpace) { */ case 1:
			$r = s.SkipSpace(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* while (true) { */ case 4:
			_r = s.getRune(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				/* break; */ $s = 5; continue;
			}
			_r$1 = f(r); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				_r$2 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 5; continue;
			/* } */ case 8:
			(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r);
		/* } */ $s = 4; continue; case 5:
		$s = -1; return (x = s.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.token }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.r = r; $f.s = s; $f.skipSpace = skipSpace; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var _i, _ref, _rune, c, i, r, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.ptr.prototype.peek = function(ok) {
		var _r, _r$1, ok, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; ok = $f.ok; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = _r;
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$1 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		$s = -1; return indexRune(ok, r) >= 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.peek }; } $f._r = _r; $f._r$1 = _r$1; $f.ok = ok; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	ptrType$25.methods = [{prop: "clearflags", name: "clearflags", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "init", name: "init", pkg: "fmt", typ: $funcType([ptrType$1], [], false)}, {prop: "writePadding", name: "writePadding", pkg: "fmt", typ: $funcType([$Int], [], false)}, {prop: "pad", name: "pad", pkg: "fmt", typ: $funcType([sliceType$2], [], false)}, {prop: "padString", name: "padString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_boolean", name: "fmt_boolean", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "fmt_unicode", name: "fmt_unicode", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_integer", name: "fmt_integer", pkg: "fmt", typ: $funcType([$Uint64, $Int, $Bool, $String], [], false)}, {prop: "truncate", name: "truncate", pkg: "fmt", typ: $funcType([$String], [$String], false)}, {prop: "fmt_s", name: "fmt_s", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_sbx", name: "fmt_sbx", pkg: "fmt", typ: $funcType([$String, sliceType$2, $String], [], false)}, {prop: "fmt_sx", name: "fmt_sx", pkg: "fmt", typ: $funcType([$String, $String], [], false)}, {prop: "fmt_bx", name: "fmt_bx", pkg: "fmt", typ: $funcType([sliceType$2, $String], [], false)}, {prop: "fmt_q", name: "fmt_q", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_c", name: "fmt_c", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_qc", name: "fmt_qc", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_float", name: "fmt_float", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32, $Int], [], false)}];
	ptrType$1.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [], false)}];
	ptrType$2.methods = [{prop: "free", name: "free", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "unknownType", name: "unknownType", pkg: "fmt", typ: $funcType([reflect.Value], [], false)}, {prop: "badVerb", name: "badVerb", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "fmtBool", name: "fmtBool", pkg: "fmt", typ: $funcType([$Bool, $Int32], [], false)}, {prop: "fmt0x64", name: "fmt0x64", pkg: "fmt", typ: $funcType([$Uint64, $Bool], [], false)}, {prop: "fmtInteger", name: "fmtInteger", pkg: "fmt", typ: $funcType([$Uint64, $Bool, $Int32], [], false)}, {prop: "fmtFloat", name: "fmtFloat", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32], [], false)}, {prop: "fmtComplex", name: "fmtComplex", pkg: "fmt", typ: $funcType([$Complex128, $Int, $Int32], [], false)}, {prop: "fmtString", name: "fmtString", pkg: "fmt", typ: $funcType([$String, $Int32], [], false)}, {prop: "fmtBytes", name: "fmtBytes", pkg: "fmt", typ: $funcType([sliceType$2, $Int32, $String], [], false)}, {prop: "fmtPointer", name: "fmtPointer", pkg: "fmt", typ: $funcType([reflect.Value, $Int32], [], false)}, {prop: "catchPanic", name: "catchPanic", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "handleMethods", name: "handleMethods", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "printArg", name: "printArg", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "printValue", name: "printValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [], false)}, {prop: "argNumber", name: "argNumber", pkg: "fmt", typ: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: "badArgNum", name: "badArgNum", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "missingArg", name: "missingArg", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "doPrintf", name: "doPrintf", pkg: "fmt", typ: $funcType([$String, sliceType], [], false)}, {prop: "doPrint", name: "doPrint", pkg: "fmt", typ: $funcType([sliceType], [], false)}, {prop: "doPrintln", name: "doPrintln", pkg: "fmt", typ: $funcType([sliceType], [], false)}];
	ptrType$5.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "getRune", name: "getRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "mustReadRune", name: "mustReadRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "error", name: "error", pkg: "fmt", typ: $funcType([$error], [], false)}, {prop: "errorString", name: "errorString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType$2, $error], false)}, {prop: "free", name: "free", pkg: "fmt", typ: $funcType([ssave], [], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "token", name: "token", pkg: "fmt", typ: $funcType([$Bool, funcType], [sliceType$2], false)}, {prop: "consume", name: "consume", pkg: "fmt", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: "peek", name: "peek", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "notEOF", name: "notEOF", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "accept", name: "accept", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "okVerb", name: "okVerb", pkg: "fmt", typ: $funcType([$Int32, $String, $String], [$Bool], false)}, {prop: "scanBool", name: "scanBool", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "getBase", name: "getBase", pkg: "fmt", typ: $funcType([$Int32], [$Int, $String], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "fmt", typ: $funcType([$String, $Bool], [$String], false)}, {prop: "scanRune", name: "scanRune", pkg: "fmt", typ: $funcType([$Int], [$Int64], false)}, {prop: "scanBasePrefix", name: "scanBasePrefix", pkg: "fmt", typ: $funcType([], [$Int, $String, $Bool], false)}, {prop: "scanInt", name: "scanInt", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Int64], false)}, {prop: "scanUint", name: "scanUint", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Uint64], false)}, {prop: "floatToken", name: "floatToken", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "complexTokens", name: "complexTokens", pkg: "fmt", typ: $funcType([], [$String, $String], false)}, {prop: "convertFloat", name: "convertFloat", pkg: "fmt", typ: $funcType([$String, $Int], [$Float64], false)}, {prop: "scanComplex", name: "scanComplex", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Complex128], false)}, {prop: "convertString", name: "convertString", pkg: "fmt", typ: $funcType([$Int32], [$String], false)}, {prop: "quotedString", name: "quotedString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "hexByte", name: "hexByte", pkg: "fmt", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "hexString", name: "hexString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "scanOne", name: "scanOne", pkg: "fmt", typ: $funcType([$Int32, $emptyInterface], [], false)}, {prop: "doScan", name: "doScan", pkg: "fmt", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "advance", name: "advance", pkg: "fmt", typ: $funcType([$String], [$Int], false)}, {prop: "doScanf", name: "doScanf", pkg: "fmt", typ: $funcType([$String, sliceType], [$Int, $error], false)}];
	fmtFlags.init("fmt", [{prop: "widPresent", name: "widPresent", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "precPresent", name: "precPresent", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "minus", name: "minus", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "plus", name: "plus", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "sharp", name: "sharp", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "space", name: "space", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "zero", name: "zero", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "plusV", name: "plusV", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "sharpV", name: "sharpV", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	fmt.init("fmt", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "fmtFlags", name: "fmtFlags", anonymous: true, exported: false, typ: fmtFlags, tag: ""}, {prop: "wid", name: "wid", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "prec", name: "prec", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "intbuf", name: "intbuf", anonymous: false, exported: false, typ: arrayType, tag: ""}]);
	State.init([{prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}]);
	Formatter.init([{prop: "Format", name: "Format", pkg: "", typ: $funcType([State, $Int32], [], false)}]);
	Stringer.init([{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	GoStringer.init([{prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}]);
	buffer.init($Uint8);
	pp.init("fmt", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: buffer, tag: ""}, {prop: "arg", name: "arg", anonymous: false, exported: false, typ: $emptyInterface, tag: ""}, {prop: "value", name: "value", anonymous: false, exported: false, typ: reflect.Value, tag: ""}, {prop: "fmt", name: "fmt", anonymous: false, exported: false, typ: fmt, tag: ""}, {prop: "reordered", name: "reordered", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "goodArgNum", name: "goodArgNum", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "panicking", name: "panicking", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "erroring", name: "erroring", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	ScanState.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType$2, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}]);
	scanError.init("fmt", [{prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}]);
	ss.init("fmt", [{prop: "rs", name: "rs", anonymous: false, exported: false, typ: io.RuneScanner, tag: ""}, {prop: "buf", name: "buf", anonymous: false, exported: false, typ: buffer, tag: ""}, {prop: "count", name: "count", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "atEOF", name: "atEOF", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "ssave", name: "ssave", anonymous: true, exported: false, typ: ssave, tag: ""}]);
	ssave.init("fmt", [{prop: "validSave", name: "validSave", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "nlIsEnd", name: "nlIsEnd", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "nlIsSpace", name: "nlIsSpace", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "argLimit", name: "argLimit", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "limit", name: "limit", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "maxWid", name: "maxWid", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ppFree = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			return new pp.ptr(buffer.nil, $ifaceNil, new reflect.Value.ptr(ptrType.nil, 0, 0), new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType.zero()), false, false, false, false);
		}));
		space = new sliceType$1([$toNativeArray($kindUint16, [9, 13]), $toNativeArray($kindUint16, [32, 32]), $toNativeArray($kindUint16, [133, 133]), $toNativeArray($kindUint16, [160, 160]), $toNativeArray($kindUint16, [5760, 5760]), $toNativeArray($kindUint16, [8192, 8202]), $toNativeArray($kindUint16, [8232, 8233]), $toNativeArray($kindUint16, [8239, 8239]), $toNativeArray($kindUint16, [8287, 8287]), $toNativeArray($kindUint16, [12288, 12288])]);
		ssFree = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			return new ss.ptr($ifaceNil, buffer.nil, 0, false, new ssave.ptr(false, false, false, 0, 0, 0));
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sort"] = (function() {
	var $pkg = {}, $init, reflect, lessSwap, StringSlice, sliceType$2, funcType, funcType$1, Search, SearchStrings, Slice, insertionSort, siftDown, heapSort, medianOfThree, doPivot, quickSort, Sort, maxDepth, IsSorted, Strings, insertionSort_func, siftDown_func, heapSort_func, medianOfThree_func, doPivot_func, quickSort_func;
	reflect = $packages["reflect"];
	lessSwap = $pkg.lessSwap = $newType(0, $kindStruct, "sort.lessSwap", true, "sort", false, function(Less_, Swap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Less = $throwNilPointerError;
			this.Swap = $throwNilPointerError;
			return;
		}
		this.Less = Less_;
		this.Swap = Swap_;
	});
	StringSlice = $pkg.StringSlice = $newType(12, $kindSlice, "sort.StringSlice", true, "sort", true, null);
	sliceType$2 = $sliceType($String);
	funcType = $funcType([$Int, $Int], [$Bool], false);
	funcType$1 = $funcType([$Int, $Int], [], false);
	Search = function(n, f) {
		var _r, _tmp, _tmp$1, f, h, i, j, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; f = $f.f; h = $f.h; i = $f.i; j = $f.j; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = 0;
		_tmp$1 = n;
		i = _tmp;
		j = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(i < j)) { break; } */ if(!(i < j)) { $s = 2; continue; }
			h = ((((((i + j >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
			_r = f(h); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				i = h + 1 >> 0;
				$s = 5; continue;
			/* } else { */ case 4:
				j = h;
			/* } */ case 5:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Search }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.f = f; $f.h = h; $f.i = i; $f.j = j; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Search = Search;
	SearchStrings = function(a, x) {
		var _r, a, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		x = [x];
		_r = Search(a[0].$length, (function(a, x) { return function(i) {
			var i;
			return ((i < 0 || i >= a[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : a[0].$array[a[0].$offset + i]) >= x[0];
		}; })(a, x)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SearchStrings }; } $f._r = _r; $f.a = a; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SearchStrings = SearchStrings;
	StringSlice.prototype.Search = function(x) {
		var _r, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = SearchStrings($subslice(new sliceType$2(p.$array), p.$offset, p.$offset + p.$length), x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StringSlice.prototype.Search }; } $f._r = _r; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(StringSlice).prototype.Search = function(x) { return this.$get().Search(x); };
	Slice = function(slice, less) {
		var _r, _r$1, length, less, rv, slice, swap, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; length = $f.length; less = $f.less; rv = $f.rv; slice = $f.slice; swap = $f.swap; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = reflect.ValueOf(slice); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rv = _r;
		_r$1 = reflect.Swapper(slice); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		swap = _r$1;
		length = $clone(rv, reflect.Value).Len();
		$r = quickSort_func(new lessSwap.ptr(less, swap), 0, length, maxDepth(length)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Slice }; } $f._r = _r; $f._r$1 = _r$1; $f.length = length; $f.less = less; $f.rv = rv; $f.slice = slice; $f.swap = swap; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Slice = Slice;
	insertionSort = function(data, a, b) {
		var _r, _v, a, b, data, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _v = $f._v; a = $f.a; b = $f.b; data = $f.data; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
			j = i;
			/* while (true) { */ case 3:
				if (!(j > a)) { _v = false; $s = 5; continue s; }
				_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: insertionSort }; } $f._r = _r; $f._v = _v; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	siftDown = function(data, lo, hi, first) {
		var _r, _r$1, _v, child, data, first, hi, lo, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; child = $f.child; data = $f.data; first = $f.first; hi = $f.hi; lo = $f.lo; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = lo;
		/* while (true) { */ case 1:
			child = ($imul(2, root)) + 1 >> 0;
			if (child >= hi) {
				/* break; */ $s = 2; continue;
			}
			if (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }
			_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				child = child + (1) >> 0;
			/* } */ case 4:
			_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				$s = -1; return;
			/* } */ case 8:
			$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			root = child;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: siftDown }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.child = child; $f.data = data; $f.first = first; $f.hi = hi; $f.lo = lo; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	heapSort = function(data, a, b) {
		var _q, a, b, data, first, hi, i, i$1, lo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; a = $f.a; b = $f.b; data = $f.data; first = $f.first; hi = $f.hi; i = $f.i; i$1 = $f.i$1; lo = $f.lo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			$r = siftDown(data, i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		i$1 = hi - 1 >> 0;
		/* while (true) { */ case 4:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }
			$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = siftDown(data, lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 - (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: heapSort }; } $f._q = _q; $f.a = a; $f.b = b; $f.data = data; $f.first = first; $f.hi = hi; $f.i = i; $f.i$1 = i$1; $f.lo = lo; $f.$s = $s; $f.$r = $r; return $f;
	};
	medianOfThree = function(data, m1, m0, m2) {
		var _r, _r$1, _r$2, data, m0, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; data = $f.data; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Less(m1, m0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$r = data.Swap(m1, m0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$1 = data.Less(m2, m1); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$1) { */ case 5:
			$r = data.Swap(m2, m1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = data.Less(m1, m0); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r$2) { */ case 9:
				$r = data.Swap(m1, m0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
		/* } */ case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: medianOfThree }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.data = data; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	doPivot = function(data, lo, hi) {
		var _q, _q$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tmp$3, _v, _v$1, _v$2, _v$3, _v$4, a, b, c, data, dups, hi, lo, m, midhi, midlo, pivot, protect, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; a = $f.a; b = $f.b; c = $f.c; data = $f.data; dups = $f.dups; hi = $f.hi; lo = $f.lo; m = $f.m; midhi = $f.midhi; midlo = $f.midlo; pivot = $f.pivot; protect = $f.protect; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		midlo = 0;
		midhi = 0;
		m = ((((((lo + hi >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
		/* */ if ((hi - lo >> 0) > 40) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((hi - lo >> 0) > 40) { */ case 1:
			s = (_q = ((hi - lo >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			$r = medianOfThree(data, lo, lo + s >> 0, lo + ($imul(2, s)) >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, m, m - s >> 0, m + s >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - ($imul(2, s)) >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = medianOfThree(data, lo, m, hi - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pivot = lo;
		_tmp = lo + 1 >> 0;
		_tmp$1 = hi - 1 >> 0;
		a = _tmp;
		c = _tmp$1;
		/* while (true) { */ case 7:
			if (!(a < c)) { _v = false; $s = 9; continue s; }
			_r = data.Less(a, pivot); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 9:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 8; continue; }
			a = a + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		b = a;
		/* while (true) { */ case 11:
			/* while (true) { */ case 13:
				if (!(b < c)) { _v$1 = false; $s = 15; continue s; }
				_r$1 = data.Less(pivot, b); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = !_r$1; case 15:
				/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 14; continue; }
				b = b + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			/* while (true) { */ case 17:
				if (!(b < c)) { _v$2 = false; $s = 19; continue s; }
				_r$2 = data.Less(pivot, c - 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 19:
				/* if (!(_v$2)) { break; } */ if(!(_v$2)) { $s = 18; continue; }
				c = c - (1) >> 0;
			/* } */ $s = 17; continue; case 18:
			if (b >= c) {
				/* break; */ $s = 12; continue;
			}
			$r = data.Swap(b, c - 1 >> 0); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			b = b + (1) >> 0;
			c = c - (1) >> 0;
		/* } */ $s = 11; continue; case 12:
		protect = (hi - c >> 0) < 5;
		/* */ if (!protect && (hi - c >> 0) < (_q$1 = ((hi - lo >> 0)) / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (!protect && (hi - c >> 0) < (_q$1 = ((hi - lo >> 0)) / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) { */ case 22:
			dups = 0;
			_r$3 = data.Less(pivot, hi - 1 >> 0); /* */ $s = 26; case 26: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (!_r$3) { */ case 24:
				$r = data.Swap(c, hi - 1 >> 0); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				c = c + (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 25:
			_r$4 = data.Less(b - 1 >> 0, pivot); /* */ $s = 30; case 30: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (!_r$4) { */ case 28:
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 29:
			_r$5 = data.Less(m, pivot); /* */ $s = 33; case 33: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (!_r$5) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (!_r$5) { */ case 31:
				$r = data.Swap(m, b - 1 >> 0); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 32:
			protect = dups > 1;
		/* } */ case 23:
		/* */ if (protect) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (protect) { */ case 35:
			/* while (true) { */ case 37:
				/* while (true) { */ case 39:
					if (!(a < b)) { _v$3 = false; $s = 41; continue s; }
					_r$6 = data.Less(b - 1 >> 0, pivot); /* */ $s = 42; case 42: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_v$3 = !_r$6; case 41:
					/* if (!(_v$3)) { break; } */ if(!(_v$3)) { $s = 40; continue; }
					b = b - (1) >> 0;
				/* } */ $s = 39; continue; case 40:
				/* while (true) { */ case 43:
					if (!(a < b)) { _v$4 = false; $s = 45; continue s; }
					_r$7 = data.Less(a, pivot); /* */ $s = 46; case 46: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_v$4 = _r$7; case 45:
					/* if (!(_v$4)) { break; } */ if(!(_v$4)) { $s = 44; continue; }
					a = a + (1) >> 0;
				/* } */ $s = 43; continue; case 44:
				if (a >= b) {
					/* break; */ $s = 38; continue;
				}
				$r = data.Swap(a, b - 1 >> 0); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = a + (1) >> 0;
				b = b - (1) >> 0;
			/* } */ $s = 37; continue; case 38:
		/* } */ case 36:
		$r = data.Swap(pivot, b - 1 >> 0); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$2 = b - 1 >> 0;
		_tmp$3 = c;
		midlo = _tmp$2;
		midhi = _tmp$3;
		$s = -1; return [midlo, midhi];
		/* */ } return; } if ($f === undefined) { $f = { $blk: doPivot }; } $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f.a = a; $f.b = b; $f.c = c; $f.data = data; $f.dups = dups; $f.hi = hi; $f.lo = lo; $f.m = m; $f.midhi = midhi; $f.midlo = midlo; $f.pivot = pivot; $f.protect = protect; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	quickSort = function(data, a, b, maxDepth$1) {
		var _r, _r$1, _tuple, a, b, data, i, maxDepth$1, mhi, mlo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; b = $f.b; data = $f.data; i = $f.i; maxDepth$1 = $f.maxDepth$1; mhi = $f.mhi; mlo = $f.mlo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			/* if (!((b - a >> 0) > 12)) { break; } */ if(!((b - a >> 0) > 12)) { $s = 2; continue; }
			/* */ if (maxDepth$1 === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (maxDepth$1 === 0) { */ case 3:
				$r = heapSort(data, a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
			maxDepth$1 = maxDepth$1 - (1) >> 0;
			_r = doPivot(data, a, b); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			mlo = _tuple[0];
			mhi = _tuple[1];
			/* */ if ((mlo - a >> 0) < (b - mhi >> 0)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((mlo - a >> 0) < (b - mhi >> 0)) { */ case 7:
				$r = quickSort(data, a, mlo, maxDepth$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = mhi;
				$s = 9; continue;
			/* } else { */ case 8:
				$r = quickSort(data, mhi, b, maxDepth$1); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = mlo;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		/* */ if ((b - a >> 0) > 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((b - a >> 0) > 1) { */ case 12:
			i = a + 6 >> 0;
			/* while (true) { */ case 14:
				/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 15; continue; }
				_r$1 = data.Less(i, i - 6 >> 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_r$1) { */ case 16:
					$r = data.Swap(i, i - 6 >> 0); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 17:
				i = i + (1) >> 0;
			/* } */ $s = 14; continue; case 15:
			$r = insertionSort(data, a, b); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: quickSort }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.maxDepth$1 = maxDepth$1; $f.mhi = mhi; $f.mlo = mlo; $f.$s = $s; $f.$r = $r; return $f;
	};
	Sort = function(data) {
		var _r, data, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; data = $f.data; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		$r = quickSort(data, 0, n, maxDepth(n)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sort }; } $f._r = _r; $f.data = data; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sort = Sort;
	maxDepth = function(n) {
		var depth, i, n;
		depth = 0;
		i = n;
		while (true) {
			if (!(i > 0)) { break; }
			depth = depth + (1) >> 0;
			i = (i >> $min((1), 31)) >> 0;
		}
		return $imul(depth, 2);
	};
	IsSorted = function(data) {
		var _r, _r$1, data, i, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; data = $f.data; i = $f.i; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		i = n - 1 >> 0;
		/* while (true) { */ case 2:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 3; continue; }
			_r$1 = data.Less(i, i - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1) { */ case 4:
				$s = -1; return false;
			/* } */ case 5:
			i = i - (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IsSorted }; } $f._r = _r; $f._r$1 = _r$1; $f.data = data; $f.i = i; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.IsSorted = IsSorted;
	StringSlice.prototype.Len = function() {
		var p;
		p = this;
		return p.$length;
	};
	$ptrType(StringSlice).prototype.Len = function() { return this.$get().Len(); };
	StringSlice.prototype.Less = function(i, j) {
		var i, j, p;
		p = this;
		return ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]) < ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]);
	};
	$ptrType(StringSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	StringSlice.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, p;
		p = this;
		_tmp = ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]);
		_tmp$1 = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
		((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i] = _tmp);
		((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j] = _tmp$1);
	};
	$ptrType(StringSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	StringSlice.prototype.Sort = function() {
		var p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = Sort(p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StringSlice.prototype.Sort }; } $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(StringSlice).prototype.Sort = function() { return this.$get().Sort(); };
	Strings = function(a) {
		var a, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = Sort(($subslice(new StringSlice(a.$array), a.$offset, a.$offset + a.$length))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Strings }; } $f.a = a; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Strings = Strings;
	insertionSort_func = function(data, a, b) {
		var _r, _v, a, b, data, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _v = $f._v; a = $f.a; b = $f.b; data = $f.data; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
			j = i;
			/* while (true) { */ case 3:
				if (!(j > a)) { _v = false; $s = 5; continue s; }
				_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: insertionSort_func }; } $f._r = _r; $f._v = _v; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	siftDown_func = function(data, lo, hi, first) {
		var _r, _r$1, _v, child, data, first, hi, lo, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; child = $f.child; data = $f.data; first = $f.first; hi = $f.hi; lo = $f.lo; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = lo;
		/* while (true) { */ case 1:
			child = ($imul(2, root)) + 1 >> 0;
			if (child >= hi) {
				/* break; */ $s = 2; continue;
			}
			if (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }
			_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				child = child + (1) >> 0;
			/* } */ case 4:
			_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				$s = -1; return;
			/* } */ case 8:
			$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			root = child;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: siftDown_func }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.child = child; $f.data = data; $f.first = first; $f.hi = hi; $f.lo = lo; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	heapSort_func = function(data, a, b) {
		var _q, a, b, data, first, hi, i, i$1, lo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; a = $f.a; b = $f.b; data = $f.data; first = $f.first; hi = $f.hi; i = $f.i; i$1 = $f.i$1; lo = $f.lo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			$r = siftDown_func($clone(data, lessSwap), i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		i$1 = hi - 1 >> 0;
		/* while (true) { */ case 4:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }
			$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = siftDown_func($clone(data, lessSwap), lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 - (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: heapSort_func }; } $f._q = _q; $f.a = a; $f.b = b; $f.data = data; $f.first = first; $f.hi = hi; $f.i = i; $f.i$1 = i$1; $f.lo = lo; $f.$s = $s; $f.$r = $r; return $f;
	};
	medianOfThree_func = function(data, m1, m0, m2) {
		var _r, _r$1, _r$2, data, m0, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; data = $f.data; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Less(m1, m0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$r = data.Swap(m1, m0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$1 = data.Less(m2, m1); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$1) { */ case 5:
			$r = data.Swap(m2, m1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = data.Less(m1, m0); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r$2) { */ case 9:
				$r = data.Swap(m1, m0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
		/* } */ case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: medianOfThree_func }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.data = data; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	doPivot_func = function(data, lo, hi) {
		var _q, _q$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tmp$3, _v, _v$1, _v$2, _v$3, _v$4, a, b, c, data, dups, hi, lo, m, midhi, midlo, pivot, protect, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; a = $f.a; b = $f.b; c = $f.c; data = $f.data; dups = $f.dups; hi = $f.hi; lo = $f.lo; m = $f.m; midhi = $f.midhi; midlo = $f.midlo; pivot = $f.pivot; protect = $f.protect; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		midlo = 0;
		midhi = 0;
		m = ((((((lo + hi >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
		/* */ if ((hi - lo >> 0) > 40) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((hi - lo >> 0) > 40) { */ case 1:
			s = (_q = ((hi - lo >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			$r = medianOfThree_func($clone(data, lessSwap), lo, lo + s >> 0, lo + ($imul(2, s)) >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree_func($clone(data, lessSwap), m, m - s >> 0, m + s >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree_func($clone(data, lessSwap), hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - ($imul(2, s)) >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = medianOfThree_func($clone(data, lessSwap), lo, m, hi - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pivot = lo;
		_tmp = lo + 1 >> 0;
		_tmp$1 = hi - 1 >> 0;
		a = _tmp;
		c = _tmp$1;
		/* while (true) { */ case 7:
			if (!(a < c)) { _v = false; $s = 9; continue s; }
			_r = data.Less(a, pivot); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 9:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 8; continue; }
			a = a + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		b = a;
		/* while (true) { */ case 11:
			/* while (true) { */ case 13:
				if (!(b < c)) { _v$1 = false; $s = 15; continue s; }
				_r$1 = data.Less(pivot, b); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = !_r$1; case 15:
				/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 14; continue; }
				b = b + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			/* while (true) { */ case 17:
				if (!(b < c)) { _v$2 = false; $s = 19; continue s; }
				_r$2 = data.Less(pivot, c - 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 19:
				/* if (!(_v$2)) { break; } */ if(!(_v$2)) { $s = 18; continue; }
				c = c - (1) >> 0;
			/* } */ $s = 17; continue; case 18:
			if (b >= c) {
				/* break; */ $s = 12; continue;
			}
			$r = data.Swap(b, c - 1 >> 0); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			b = b + (1) >> 0;
			c = c - (1) >> 0;
		/* } */ $s = 11; continue; case 12:
		protect = (hi - c >> 0) < 5;
		/* */ if (!protect && (hi - c >> 0) < (_q$1 = ((hi - lo >> 0)) / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (!protect && (hi - c >> 0) < (_q$1 = ((hi - lo >> 0)) / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) { */ case 22:
			dups = 0;
			_r$3 = data.Less(pivot, hi - 1 >> 0); /* */ $s = 26; case 26: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (!_r$3) { */ case 24:
				$r = data.Swap(c, hi - 1 >> 0); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				c = c + (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 25:
			_r$4 = data.Less(b - 1 >> 0, pivot); /* */ $s = 30; case 30: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (!_r$4) { */ case 28:
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 29:
			_r$5 = data.Less(m, pivot); /* */ $s = 33; case 33: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (!_r$5) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (!_r$5) { */ case 31:
				$r = data.Swap(m, b - 1 >> 0); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 32:
			protect = dups > 1;
		/* } */ case 23:
		/* */ if (protect) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (protect) { */ case 35:
			/* while (true) { */ case 37:
				/* while (true) { */ case 39:
					if (!(a < b)) { _v$3 = false; $s = 41; continue s; }
					_r$6 = data.Less(b - 1 >> 0, pivot); /* */ $s = 42; case 42: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_v$3 = !_r$6; case 41:
					/* if (!(_v$3)) { break; } */ if(!(_v$3)) { $s = 40; continue; }
					b = b - (1) >> 0;
				/* } */ $s = 39; continue; case 40:
				/* while (true) { */ case 43:
					if (!(a < b)) { _v$4 = false; $s = 45; continue s; }
					_r$7 = data.Less(a, pivot); /* */ $s = 46; case 46: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_v$4 = _r$7; case 45:
					/* if (!(_v$4)) { break; } */ if(!(_v$4)) { $s = 44; continue; }
					a = a + (1) >> 0;
				/* } */ $s = 43; continue; case 44:
				if (a >= b) {
					/* break; */ $s = 38; continue;
				}
				$r = data.Swap(a, b - 1 >> 0); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = a + (1) >> 0;
				b = b - (1) >> 0;
			/* } */ $s = 37; continue; case 38:
		/* } */ case 36:
		$r = data.Swap(pivot, b - 1 >> 0); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$2 = b - 1 >> 0;
		_tmp$3 = c;
		midlo = _tmp$2;
		midhi = _tmp$3;
		$s = -1; return [midlo, midhi];
		/* */ } return; } if ($f === undefined) { $f = { $blk: doPivot_func }; } $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f.a = a; $f.b = b; $f.c = c; $f.data = data; $f.dups = dups; $f.hi = hi; $f.lo = lo; $f.m = m; $f.midhi = midhi; $f.midlo = midlo; $f.pivot = pivot; $f.protect = protect; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	quickSort_func = function(data, a, b, maxDepth$1) {
		var _r, _r$1, _tuple, a, b, data, i, maxDepth$1, mhi, mlo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; b = $f.b; data = $f.data; i = $f.i; maxDepth$1 = $f.maxDepth$1; mhi = $f.mhi; mlo = $f.mlo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			/* if (!((b - a >> 0) > 12)) { break; } */ if(!((b - a >> 0) > 12)) { $s = 2; continue; }
			/* */ if (maxDepth$1 === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (maxDepth$1 === 0) { */ case 3:
				$r = heapSort_func($clone(data, lessSwap), a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
			maxDepth$1 = maxDepth$1 - (1) >> 0;
			_r = doPivot_func($clone(data, lessSwap), a, b); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			mlo = _tuple[0];
			mhi = _tuple[1];
			/* */ if ((mlo - a >> 0) < (b - mhi >> 0)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((mlo - a >> 0) < (b - mhi >> 0)) { */ case 7:
				$r = quickSort_func($clone(data, lessSwap), a, mlo, maxDepth$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = mhi;
				$s = 9; continue;
			/* } else { */ case 8:
				$r = quickSort_func($clone(data, lessSwap), mhi, b, maxDepth$1); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = mlo;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		/* */ if ((b - a >> 0) > 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((b - a >> 0) > 1) { */ case 12:
			i = a + 6 >> 0;
			/* while (true) { */ case 14:
				/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 15; continue; }
				_r$1 = data.Less(i, i - 6 >> 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_r$1) { */ case 16:
					$r = data.Swap(i, i - 6 >> 0); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 17:
				i = i + (1) >> 0;
			/* } */ $s = 14; continue; case 15:
			$r = insertionSort_func($clone(data, lessSwap), a, b); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: quickSort_func }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.maxDepth$1 = maxDepth$1; $f.mhi = mhi; $f.mlo = mlo; $f.$s = $s; $f.$r = $r; return $f;
	};
	StringSlice.methods = [{prop: "Search", name: "Search", pkg: "", typ: $funcType([$String], [$Int], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Sort", name: "Sort", pkg: "", typ: $funcType([], [], false)}];
	lessSwap.init("", [{prop: "Less", name: "Less", anonymous: false, exported: true, typ: funcType, tag: ""}, {prop: "Swap", name: "Swap", anonymous: false, exported: true, typ: funcType$1, tag: ""}]);
	StringSlice.init($String);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = reflect.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["go/token"] = (function() {
	var $pkg = {}, $init, fmt, nosync, sort, strconv, Position, Pos, File, lineInfo, FileSet, serializedFile, serializedFileSet, Token, sliceType, sliceType$1, ptrType, sliceType$2, ptrType$1, sliceType$3, sliceType$4, ptrType$2, sliceType$5, funcType, funcType$1, tokens, keywords, searchLineInfos, NewFileSet, searchFiles, searchInts, init, Lookup;
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	Position = $pkg.Position = $newType(0, $kindStruct, "token.Position", true, "go/token", true, function(Filename_, Offset_, Line_, Column_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Filename = "";
			this.Offset = 0;
			this.Line = 0;
			this.Column = 0;
			return;
		}
		this.Filename = Filename_;
		this.Offset = Offset_;
		this.Line = Line_;
		this.Column = Column_;
	});
	Pos = $pkg.Pos = $newType(4, $kindInt, "token.Pos", true, "go/token", true, null);
	File = $pkg.File = $newType(0, $kindStruct, "token.File", true, "go/token", true, function(set_, name_, base_, size_, mutex_, lines_, infos_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.set = ptrType$1.nil;
			this.name = "";
			this.base = 0;
			this.size = 0;
			this.mutex = new nosync.Mutex.ptr(false);
			this.lines = sliceType$1.nil;
			this.infos = sliceType$3.nil;
			return;
		}
		this.set = set_;
		this.name = name_;
		this.base = base_;
		this.size = size_;
		this.mutex = mutex_;
		this.lines = lines_;
		this.infos = infos_;
	});
	lineInfo = $pkg.lineInfo = $newType(0, $kindStruct, "token.lineInfo", true, "go/token", false, function(Offset_, Filename_, Line_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Offset = 0;
			this.Filename = "";
			this.Line = 0;
			return;
		}
		this.Offset = Offset_;
		this.Filename = Filename_;
		this.Line = Line_;
	});
	FileSet = $pkg.FileSet = $newType(0, $kindStruct, "token.FileSet", true, "go/token", true, function(mutex_, base_, files_, last_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mutex = new nosync.RWMutex.ptr(false, 0);
			this.base = 0;
			this.files = sliceType$2.nil;
			this.last = ptrType.nil;
			return;
		}
		this.mutex = mutex_;
		this.base = base_;
		this.files = files_;
		this.last = last_;
	});
	serializedFile = $pkg.serializedFile = $newType(0, $kindStruct, "token.serializedFile", true, "go/token", false, function(Name_, Base_, Size_, Lines_, Infos_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Base = 0;
			this.Size = 0;
			this.Lines = sliceType$1.nil;
			this.Infos = sliceType$3.nil;
			return;
		}
		this.Name = Name_;
		this.Base = Base_;
		this.Size = Size_;
		this.Lines = Lines_;
		this.Infos = Infos_;
	});
	serializedFileSet = $pkg.serializedFileSet = $newType(0, $kindStruct, "token.serializedFileSet", true, "go/token", false, function(Base_, Files_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Base = 0;
			this.Files = sliceType$4.nil;
			return;
		}
		this.Base = Base_;
		this.Files = Files_;
	});
	Token = $pkg.Token = $newType(4, $kindInt, "token.Token", true, "go/token", true, null);
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Int);
	ptrType = $ptrType(File);
	sliceType$2 = $sliceType(ptrType);
	ptrType$1 = $ptrType(FileSet);
	sliceType$3 = $sliceType(lineInfo);
	sliceType$4 = $sliceType(serializedFile);
	ptrType$2 = $ptrType(Position);
	sliceType$5 = $sliceType($Uint8);
	funcType = $funcType([ptrType], [$Bool], false);
	funcType$1 = $funcType([$emptyInterface], [$error], false);
	Position.ptr.prototype.IsValid = function() {
		var pos;
		pos = this;
		return pos.Line > 0;
	};
	Position.prototype.IsValid = function() { return this.$val.IsValid(); };
	Position.ptr.prototype.String = function() {
		var _r, pos, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; pos = $f.pos; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = this;
		s = pos.Filename;
		/* */ if (pos.IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (pos.IsValid()) { */ case 1:
			if (!(s === "")) {
				s = s + (":");
			}
			_r = fmt.Sprintf("%d:%d", new sliceType([new $Int(pos.Line), new $Int(pos.Column)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			s = s + (_r);
		/* } */ case 2:
		if (s === "") {
			s = "-";
		}
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Position.ptr.prototype.String }; } $f._r = _r; $f.pos = pos; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Position.prototype.String = function() { return this.$val.String(); };
	Pos.prototype.IsValid = function() {
		var p;
		p = this.$val;
		return !((p === 0));
	};
	$ptrType(Pos).prototype.IsValid = function() { return new Pos(this.$get()).IsValid(); };
	File.ptr.prototype.Name = function() {
		var f;
		f = this;
		return f.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	File.ptr.prototype.Base = function() {
		var f;
		f = this;
		return f.base;
	};
	File.prototype.Base = function() { return this.$val.Base(); };
	File.ptr.prototype.Size = function() {
		var f;
		f = this;
		return f.size;
	};
	File.prototype.Size = function() { return this.$val.Size(); };
	File.ptr.prototype.LineCount = function() {
		var f, n;
		f = this;
		f.mutex.Lock();
		n = f.lines.$length;
		f.mutex.Unlock();
		return n;
	};
	File.prototype.LineCount = function() { return this.$val.LineCount(); };
	File.ptr.prototype.AddLine = function(offset) {
		var f, i, offset, x, x$1;
		f = this;
		f.mutex.Lock();
		i = f.lines.$length;
		if (((i === 0) || (x = f.lines, x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) < offset) && offset < f.size) {
			f.lines = $append(f.lines, offset);
		}
		f.mutex.Unlock();
	};
	File.prototype.AddLine = function(offset) { return this.$val.AddLine(offset); };
	File.ptr.prototype.MergeLine = function(line) {
		var f, line, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		f = this;
		if (line <= 0) {
			$panic(new $String("illegal line number (line numbering starts at 1)"));
		}
		f.mutex.Lock();
		$deferred.push([$methodVal(f.mutex, "Unlock"), []]);
		if (line >= f.lines.$length) {
			$panic(new $String("illegal line number"));
		}
		$copySlice($subslice(f.lines, line), $subslice(f.lines, (line + 1 >> 0)));
		f.lines = $subslice(f.lines, 0, (f.lines.$length - 1 >> 0));
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	File.prototype.MergeLine = function(line) { return this.$val.MergeLine(line); };
	File.ptr.prototype.SetLines = function(lines) {
		var _i, _ref, f, i, lines, offset, size, x;
		f = this;
		size = f.size;
		_ref = lines;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			offset = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (i > 0 && offset <= (x = i - 1 >> 0, ((x < 0 || x >= lines.$length) ? ($throwRuntimeError("index out of range"), undefined) : lines.$array[lines.$offset + x])) || size <= offset) {
				return false;
			}
			_i++;
		}
		f.mutex.Lock();
		f.lines = lines;
		f.mutex.Unlock();
		return true;
	};
	File.prototype.SetLines = function(lines) { return this.$val.SetLines(lines); };
	File.ptr.prototype.SetLinesForContent = function(content) {
		var _i, _ref, b, content, f, line, lines, offset;
		f = this;
		lines = sliceType$1.nil;
		line = 0;
		_ref = content;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			offset = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (line >= 0) {
				lines = $append(lines, line);
			}
			line = -1;
			if (b === 10) {
				line = offset + 1 >> 0;
			}
			_i++;
		}
		f.mutex.Lock();
		f.lines = lines;
		f.mutex.Unlock();
	};
	File.prototype.SetLinesForContent = function(content) { return this.$val.SetLinesForContent(content); };
	File.ptr.prototype.AddLineInfo = function(offset, filename, line) {
		var f, filename, i, line, offset, x, x$1;
		f = this;
		f.mutex.Lock();
		i = f.infos.$length;
		if ((i === 0) || (x = f.infos, x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).Offset < offset && offset < f.size) {
			f.infos = $append(f.infos, new lineInfo.ptr(offset, filename, line));
		}
		f.mutex.Unlock();
	};
	File.prototype.AddLineInfo = function(offset, filename, line) { return this.$val.AddLineInfo(offset, filename, line); };
	File.ptr.prototype.Pos = function(offset) {
		var f, offset;
		f = this;
		if (offset > f.size) {
			$panic(new $String("illegal file offset"));
		}
		return (((f.base + offset >> 0) >> 0));
	};
	File.prototype.Pos = function(offset) { return this.$val.Pos(offset); };
	File.ptr.prototype.Offset = function(p) {
		var f, p;
		f = this;
		if (((p >> 0)) < f.base || ((p >> 0)) > (f.base + f.size >> 0)) {
			$panic(new $String("illegal Pos value"));
		}
		return ((p >> 0)) - f.base >> 0;
	};
	File.prototype.Offset = function(p) { return this.$val.Offset(p); };
	File.ptr.prototype.Line = function(p) {
		var _r, f, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = f.Position(p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r.Line;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Line }; } $f._r = _r; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Line = function(p) { return this.$val.Line(p); };
	searchLineInfos = function(a, x) {
		var _r, a, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		x = [x];
		_r = sort.Search(a[0].$length, (function(a, x) { return function(i) {
			var i;
			return ((i < 0 || i >= a[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : a[0].$array[a[0].$offset + i]).Offset > x[0];
		}; })(a, x)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r - 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: searchLineInfos }; } $f._r = _r; $f.a = a; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.ptr.prototype.unpack = function(offset, adjusted) {
		var _r, _tmp, _tmp$1, adjusted, alt, column, f, filename, i, i$1, i$2, line, offset, x, x$1, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; adjusted = $f.adjusted; alt = $f.alt; column = $f.column; f = $f.f; filename = $f.filename; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; line = $f.line; offset = $f.offset; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		filename = "";
		line = 0;
		column = 0;
		f = this;
		f.mutex.Lock();
		$deferred.push([$methodVal(f.mutex, "Unlock"), []]);
		filename = f.name;
		i = searchInts(f.lines, offset);
		if (i >= 0) {
			_tmp = i + 1 >> 0;
			_tmp$1 = (offset - (x = f.lines, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])) >> 0) + 1 >> 0;
			line = _tmp;
			column = _tmp$1;
		}
		/* */ if (adjusted && f.infos.$length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (adjusted && f.infos.$length > 0) { */ case 1:
			_r = searchLineInfos(f.infos, offset); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			i$1 = _r;
			if (i$1 >= 0) {
				alt = (x$1 = f.infos, ((i$1 < 0 || i$1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$1]));
				filename = alt.Filename;
				i$2 = searchInts(f.lines, alt.Offset);
				if (i$2 >= 0) {
					line = line + (((alt.Line - i$2 >> 0) - 1 >> 0)) >> 0;
				}
			}
		/* } */ case 2:
		$s = -1; return [filename, line, column];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [filename, line, column]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: File.ptr.prototype.unpack }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.adjusted = adjusted; $f.alt = alt; $f.column = column; $f.f = f; $f.filename = filename; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.line = line; $f.offset = offset; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	File.prototype.unpack = function(offset, adjusted) { return this.$val.unpack(offset, adjusted); };
	File.ptr.prototype.position = function(p, adjusted) {
		var _r, _tuple, adjusted, f, offset, p, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; adjusted = $f.adjusted; f = $f.f; offset = $f.offset; p = $f.p; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = new Position.ptr("", 0, 0, 0);
		f = this;
		offset = ((p >> 0)) - f.base >> 0;
		pos.Offset = offset;
		_r = f.unpack(offset, adjusted); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		pos.Filename = _tuple[0];
		pos.Line = _tuple[1];
		pos.Column = _tuple[2];
		$s = -1; return pos;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.position }; } $f._r = _r; $f._tuple = _tuple; $f.adjusted = adjusted; $f.f = f; $f.offset = offset; $f.p = p; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.position = function(p, adjusted) { return this.$val.position(p, adjusted); };
	File.ptr.prototype.PositionFor = function(p, adjusted) {
		var _r, adjusted, f, p, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; adjusted = $f.adjusted; f = $f.f; p = $f.p; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = new Position.ptr("", 0, 0, 0);
		f = this;
		/* */ if (!((p === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((p === 0))) { */ case 1:
			if (((p >> 0)) < f.base || ((p >> 0)) > (f.base + f.size >> 0)) {
				$panic(new $String("illegal Pos value"));
			}
			_r = f.position(p, adjusted); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			Position.copy(pos, _r);
		/* } */ case 2:
		$s = -1; return pos;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.PositionFor }; } $f._r = _r; $f.adjusted = adjusted; $f.f = f; $f.p = p; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.PositionFor = function(p, adjusted) { return this.$val.PositionFor(p, adjusted); };
	File.ptr.prototype.Position = function(p) {
		var _r, f, p, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; p = $f.p; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = new Position.ptr("", 0, 0, 0);
		f = this;
		_r = f.PositionFor(p, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		Position.copy(pos, _r);
		$s = -1; return pos;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Position }; } $f._r = _r; $f.f = f; $f.p = p; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Position = function(p) { return this.$val.Position(p); };
	NewFileSet = function() {
		return new FileSet.ptr(new nosync.RWMutex.ptr(false, 0), 1, sliceType$2.nil, ptrType.nil);
	};
	$pkg.NewFileSet = NewFileSet;
	FileSet.ptr.prototype.Base = function() {
		var b, s;
		s = this;
		s.mutex.RLock();
		b = s.base;
		s.mutex.RUnlock();
		return b;
	};
	FileSet.prototype.Base = function() { return this.$val.Base(); };
	FileSet.ptr.prototype.AddFile = function(filename, base, size) {
		var base, f, filename, s, size, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		s = this;
		s.mutex.Lock();
		$deferred.push([$methodVal(s.mutex, "Unlock"), []]);
		if (base < 0) {
			base = s.base;
		}
		if (base < s.base || size < 0) {
			$panic(new $String("illegal base or size"));
		}
		f = new File.ptr(s, filename, base, size, new nosync.Mutex.ptr(false), new sliceType$1([0]), sliceType$3.nil);
		base = base + ((size + 1 >> 0)) >> 0;
		if (base < 0) {
			$panic(new $String("token.Pos offset overflow (> 2G of source code in file set)"));
		}
		s.base = base;
		s.files = $append(s.files, f);
		s.last = f;
		return f;
		/* */ } catch(err) { $err = err; return ptrType.nil; } finally { $callDeferred($deferred, $err); }
	};
	FileSet.prototype.AddFile = function(filename, base, size) { return this.$val.AddFile(filename, base, size); };
	FileSet.ptr.prototype.Iterate = function(f) {
		var _r, _v, f, file, i, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _v = $f._v; f = $f.f; file = $f.file; i = $f.i; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		i = 0;
		/* while (true) { */ case 1:
			file = ptrType.nil;
			s.mutex.RLock();
			if (i < s.files.$length) {
				file = (x = s.files, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			}
			s.mutex.RUnlock();
			if (file === ptrType.nil) { _v = true; $s = 5; continue s; }
			_r = f(file); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = !_r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				/* break; */ $s = 2; continue;
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FileSet.ptr.prototype.Iterate }; } $f._r = _r; $f._v = _v; $f.f = f; $f.file = file; $f.i = i; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	FileSet.prototype.Iterate = function(f) { return this.$val.Iterate(f); };
	searchFiles = function(a, x) {
		var _r, a, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		x = [x];
		_r = sort.Search(a[0].$length, (function(a, x) { return function(i) {
			var i;
			return ((i < 0 || i >= a[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : a[0].$array[a[0].$offset + i]).base > x[0];
		}; })(a, x)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r - 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: searchFiles }; } $f._r = _r; $f.a = a; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	FileSet.ptr.prototype.file = function(p) {
		var _r, f, f$1, i, p, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; f$1 = $f.f$1; i = $f.i; p = $f.p; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.mutex.RLock();
		f = s.last;
		if (!(f === ptrType.nil) && f.base <= ((p >> 0)) && ((p >> 0)) <= (f.base + f.size >> 0)) {
			s.mutex.RUnlock();
			$s = -1; return f;
		}
		_r = searchFiles(s.files, ((p >> 0))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i >= 0) {
			f$1 = (x = s.files, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if (((p >> 0)) <= (f$1.base + f$1.size >> 0)) {
				s.mutex.RUnlock();
				s.mutex.Lock();
				s.last = f$1;
				s.mutex.Unlock();
				$s = -1; return f$1;
			}
		}
		s.mutex.RUnlock();
		$s = -1; return ptrType.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FileSet.ptr.prototype.file }; } $f._r = _r; $f.f = f; $f.f$1 = f$1; $f.i = i; $f.p = p; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	FileSet.prototype.file = function(p) { return this.$val.file(p); };
	FileSet.ptr.prototype.File = function(p) {
		var _r, f, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = ptrType.nil;
		s = this;
		/* */ if (!((p === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((p === 0))) { */ case 1:
			_r = s.file(p); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			f = _r;
		/* } */ case 2:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FileSet.ptr.prototype.File }; } $f._r = _r; $f.f = f; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	FileSet.prototype.File = function(p) { return this.$val.File(p); };
	FileSet.ptr.prototype.PositionFor = function(p, adjusted) {
		var _r, _r$1, adjusted, f, p, pos, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; adjusted = $f.adjusted; f = $f.f; p = $f.p; pos = $f.pos; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = new Position.ptr("", 0, 0, 0);
		s = this;
		/* */ if (!((p === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((p === 0))) { */ case 1:
			_r = s.file(p); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			f = _r;
			/* */ if (!(f === ptrType.nil)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!(f === ptrType.nil)) { */ case 4:
				_r$1 = f.position(p, adjusted); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				Position.copy(pos, _r$1);
				$s = -1; return pos;
			/* } */ case 5:
		/* } */ case 2:
		$s = -1; return pos;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FileSet.ptr.prototype.PositionFor }; } $f._r = _r; $f._r$1 = _r$1; $f.adjusted = adjusted; $f.f = f; $f.p = p; $f.pos = pos; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	FileSet.prototype.PositionFor = function(p, adjusted) { return this.$val.PositionFor(p, adjusted); };
	FileSet.ptr.prototype.Position = function(p) {
		var _r, p, pos, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; pos = $f.pos; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = new Position.ptr("", 0, 0, 0);
		s = this;
		_r = s.PositionFor(p, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		Position.copy(pos, _r);
		$s = -1; return pos;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FileSet.ptr.prototype.Position }; } $f._r = _r; $f.p = p; $f.pos = pos; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	FileSet.prototype.Position = function(p) { return this.$val.Position(p); };
	searchInts = function(a, x) {
		var _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) <= x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i - 1 >> 0;
	};
	FileSet.ptr.prototype.Read = function(decode) {
		var _r, decode, err, f, files, i, s, ss, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; decode = $f.decode; err = $f.err; f = $f.f; files = $f.files; i = $f.i; s = $f.s; ss = $f.ss; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ss = [ss];
		s = this;
		ss[0] = new serializedFileSet.ptr(0, sliceType$4.nil);
		_r = decode(ss[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		s.mutex.Lock();
		s.base = ss[0].Base;
		files = $makeSlice(sliceType$2, ss[0].Files.$length);
		i = 0;
		while (true) {
			if (!(i < ss[0].Files.$length)) { break; }
			f = (x = ss[0].Files, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			((i < 0 || i >= files.$length) ? ($throwRuntimeError("index out of range"), undefined) : files.$array[files.$offset + i] = new File.ptr(s, f.Name, f.Base, f.Size, new nosync.Mutex.ptr(false), f.Lines, f.Infos));
			i = i + (1) >> 0;
		}
		s.files = files;
		s.last = ptrType.nil;
		s.mutex.Unlock();
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FileSet.ptr.prototype.Read }; } $f._r = _r; $f.decode = decode; $f.err = err; $f.f = f; $f.files = files; $f.i = i; $f.s = s; $f.ss = ss; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	FileSet.prototype.Read = function(decode) { return this.$val.Read(decode); };
	FileSet.ptr.prototype.Write = function(encode) {
		var _i, _r, _ref, encode, f, files, i, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; encode = $f.encode; f = $f.f; files = $f.files; i = $f.i; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		ss = new serializedFileSet.ptr(0, sliceType$4.nil);
		s.mutex.Lock();
		ss.Base = s.base;
		files = $makeSlice(sliceType$4, s.files.$length);
		_ref = s.files;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			f.mutex.Lock();
			serializedFile.copy(((i < 0 || i >= files.$length) ? ($throwRuntimeError("index out of range"), undefined) : files.$array[files.$offset + i]), new serializedFile.ptr(f.name, f.base, f.size, $appendSlice((sliceType$1.nil), f.lines), $appendSlice((sliceType$3.nil), f.infos)));
			f.mutex.Unlock();
			_i++;
		}
		ss.Files = files;
		s.mutex.Unlock();
		_r = encode(new ss.constructor.elem(ss)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FileSet.ptr.prototype.Write }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.encode = encode; $f.f = f; $f.files = files; $f.i = i; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	FileSet.prototype.Write = function(encode) { return this.$val.Write(encode); };
	Token.prototype.String = function() {
		var s, tok;
		tok = this.$val;
		s = "";
		if (0 <= tok && tok < 86) {
			s = ((tok < 0 || tok >= tokens.length) ? ($throwRuntimeError("index out of range"), undefined) : tokens[tok]);
		}
		if (s === "") {
			s = "token(" + strconv.Itoa(((tok >> 0))) + ")";
		}
		return s;
	};
	$ptrType(Token).prototype.String = function() { return new Token(this.$get()).String(); };
	Token.prototype.Precedence = function() {
		var _1, op;
		op = this.$val;
		_1 = op;
		if (_1 === (35)) {
			return 1;
		} else if (_1 === (34)) {
			return 2;
		} else if ((_1 === (39)) || (_1 === (44)) || (_1 === (40)) || (_1 === (45)) || (_1 === (41)) || (_1 === (46))) {
			return 3;
		} else if ((_1 === (12)) || (_1 === (13)) || (_1 === (18)) || (_1 === (19))) {
			return 4;
		} else if ((_1 === (14)) || (_1 === (15)) || (_1 === (16)) || (_1 === (20)) || (_1 === (21)) || (_1 === (17)) || (_1 === (22))) {
			return 5;
		}
		return 0;
	};
	$ptrType(Token).prototype.Precedence = function() { return new Token(this.$get()).Precedence(); };
	init = function() {
		var _key, i;
		keywords = {};
		i = 61;
		while (true) {
			if (!(i < 86)) { break; }
			_key = ((i < 0 || i >= tokens.length) ? ($throwRuntimeError("index out of range"), undefined) : tokens[i]); (keywords || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: i };
			i = i + (1) >> 0;
		}
	};
	Lookup = function(ident) {
		var _entry, _tuple, ident, is_keyword, tok;
		_tuple = (_entry = keywords[$String.keyFor(ident)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		tok = _tuple[0];
		is_keyword = _tuple[1];
		if (is_keyword) {
			return tok;
		}
		return 4;
	};
	$pkg.Lookup = Lookup;
	Token.prototype.IsLiteral = function() {
		var tok;
		tok = this.$val;
		return 3 < tok && tok < 10;
	};
	$ptrType(Token).prototype.IsLiteral = function() { return new Token(this.$get()).IsLiteral(); };
	Token.prototype.IsOperator = function() {
		var tok;
		tok = this.$val;
		return 11 < tok && tok < 59;
	};
	$ptrType(Token).prototype.IsOperator = function() { return new Token(this.$get()).IsOperator(); };
	Token.prototype.IsKeyword = function() {
		var tok;
		tok = this.$val;
		return 60 < tok && tok < 86;
	};
	$ptrType(Token).prototype.IsKeyword = function() { return new Token(this.$get()).IsKeyword(); };
	Position.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}];
	Pos.methods = [{prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Base", name: "Base", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "LineCount", name: "LineCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AddLine", name: "AddLine", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "MergeLine", name: "MergeLine", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLines", name: "SetLines", pkg: "", typ: $funcType([sliceType$1], [$Bool], false)}, {prop: "SetLinesForContent", name: "SetLinesForContent", pkg: "", typ: $funcType([sliceType$5], [], false)}, {prop: "AddLineInfo", name: "AddLineInfo", pkg: "", typ: $funcType([$Int, $String, $Int], [], false)}, {prop: "Pos", name: "Pos", pkg: "", typ: $funcType([$Int], [Pos], false)}, {prop: "Offset", name: "Offset", pkg: "", typ: $funcType([Pos], [$Int], false)}, {prop: "Line", name: "Line", pkg: "", typ: $funcType([Pos], [$Int], false)}, {prop: "unpack", name: "unpack", pkg: "go/token", typ: $funcType([$Int, $Bool], [$String, $Int, $Int], false)}, {prop: "position", name: "position", pkg: "go/token", typ: $funcType([Pos, $Bool], [Position], false)}, {prop: "PositionFor", name: "PositionFor", pkg: "", typ: $funcType([Pos, $Bool], [Position], false)}, {prop: "Position", name: "Position", pkg: "", typ: $funcType([Pos], [Position], false)}];
	ptrType$1.methods = [{prop: "Base", name: "Base", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AddFile", name: "AddFile", pkg: "", typ: $funcType([$String, $Int, $Int], [ptrType], false)}, {prop: "Iterate", name: "Iterate", pkg: "", typ: $funcType([funcType], [], false)}, {prop: "file", name: "file", pkg: "go/token", typ: $funcType([Pos], [ptrType], false)}, {prop: "File", name: "File", pkg: "", typ: $funcType([Pos], [ptrType], false)}, {prop: "PositionFor", name: "PositionFor", pkg: "", typ: $funcType([Pos, $Bool], [Position], false)}, {prop: "Position", name: "Position", pkg: "", typ: $funcType([Pos], [Position], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([funcType$1], [$error], false)}];
	Token.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Precedence", name: "Precedence", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "IsLiteral", name: "IsLiteral", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsOperator", name: "IsOperator", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsKeyword", name: "IsKeyword", pkg: "", typ: $funcType([], [$Bool], false)}];
	Position.init("", [{prop: "Filename", name: "Filename", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Offset", name: "Offset", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Line", name: "Line", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Column", name: "Column", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	File.init("go/token", [{prop: "set", name: "set", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "base", name: "base", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "size", name: "size", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "mutex", name: "mutex", anonymous: false, exported: false, typ: nosync.Mutex, tag: ""}, {prop: "lines", name: "lines", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "infos", name: "infos", anonymous: false, exported: false, typ: sliceType$3, tag: ""}]);
	lineInfo.init("", [{prop: "Offset", name: "Offset", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Filename", name: "Filename", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Line", name: "Line", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	FileSet.init("go/token", [{prop: "mutex", name: "mutex", anonymous: false, exported: false, typ: nosync.RWMutex, tag: ""}, {prop: "base", name: "base", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "files", name: "files", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "last", name: "last", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	serializedFile.init("", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Base", name: "Base", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Size", name: "Size", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Lines", name: "Lines", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Infos", name: "Infos", anonymous: false, exported: true, typ: sliceType$3, tag: ""}]);
	serializedFileSet.init("", [{prop: "Base", name: "Base", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Files", name: "Files", anonymous: false, exported: true, typ: sliceType$4, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		keywords = false;
		tokens = $toNativeArray($kindString, ["ILLEGAL", "EOF", "COMMENT", "", "IDENT", "INT", "FLOAT", "IMAG", "CHAR", "STRING", "", "", "+", "-", "*", "/", "%", "&", "|", "^", "<<", ">>", "&^", "+=", "-=", "*=", "/=", "%=", "&=", "|=", "^=", "<<=", ">>=", "&^=", "&&", "||", "<-", "++", "--", "==", "<", ">", "=", "!", "!=", "<=", ">=", ":=", "...", "(", "[", "{", ",", ".", ")", "]", "}", ";", ":", "", "", "break", "case", "chan", "const", "continue", "default", "defer", "else", "fallthrough", "for", "func", "go", "goto", "if", "import", "interface", "map", "package", "range", "return", "select", "struct", "switch", "type", "var"]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, $init, errors, js, io, unicode, utf8, Reader, asciiSet, sliceType, sliceType$3, ptrType$6, arrayType$3, ptrType$7, IndexByte, Index, LastIndex, Count, NewReader, explode, Contains, ContainsRune, IndexRune, LastIndexAny, genSplit, Split, Join, HasPrefix, Repeat, makeASCIISet, Replace;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Reader = $pkg.Reader = $newType(0, $kindStruct, "strings.Reader", true, "strings", true, function(s_, i_, prevRune_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			this.i = new $Int64(0, 0);
			this.prevRune = 0;
			return;
		}
		this.s = s_;
		this.i = i_;
		this.prevRune = prevRune_;
	});
	asciiSet = $pkg.asciiSet = $newType(32, $kindArray, "strings.asciiSet", true, "strings", false, null);
	sliceType = $sliceType($Uint8);
	sliceType$3 = $sliceType($String);
	ptrType$6 = $ptrType(asciiSet);
	arrayType$3 = $arrayType($Uint32, 8);
	ptrType$7 = $ptrType(Reader);
	IndexByte = function(s, c) {
		var c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	$pkg.IndexByte = IndexByte;
	Index = function(s, sep) {
		var s, sep;
		return $parseInt(s.indexOf(sep)) >> 0;
	};
	$pkg.Index = Index;
	LastIndex = function(s, sep) {
		var s, sep;
		return $parseInt(s.lastIndexOf(sep)) >> 0;
	};
	$pkg.LastIndex = LastIndex;
	Count = function(s, sep) {
		var n, pos, s, sep;
		n = 0;
		if ((sep.length === 0)) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length > s.length) {
			return 0;
		} else if ((sep.length === s.length)) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		while (true) {
			pos = Index(s, sep);
			if (pos === -1) {
				break;
			}
			n = n + (1) >> 0;
			s = $substring(s, (pos + sep.length >> 0));
		}
		return n;
	};
	$pkg.Count = Count;
	Reader.ptr.prototype.Len = function() {
		var r, x, x$1, x$2, x$3, x$4;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return 0;
		}
		return (((x$2 = (x$3 = (new $Int64(0, r.s.length)), x$4 = r.i, new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low)), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0));
	};
	Reader.prototype.Len = function() { return this.$val.Len(); };
	Reader.ptr.prototype.Size = function() {
		var r;
		r = this;
		return (new $Int64(0, r.s.length));
	};
	Reader.prototype.Size = function() { return this.$val.Size(); };
	Reader.ptr.prototype.Read = function(b) {
		var _tmp, _tmp$1, b, err, n, r, x, x$1, x$2, x$3;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = 0;
			_tmp$1 = io.EOF;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		r.prevRune = -1;
		n = $copyString(b, $substring(r.s, $flatten64(r.i)));
		r.i = (x$2 = r.i, x$3 = (new $Int64(0, n)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [n, err];
	};
	Reader.prototype.Read = function(b) { return this.$val.Read(b); };
	Reader.ptr.prototype.ReadAt = function(b, off) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, off, r, x;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp = 0;
			_tmp$1 = errors.New("strings.Reader.ReadAt: negative offset");
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		if ((x = (new $Int64(0, r.s.length)), (off.$high > x.$high || (off.$high === x.$high && off.$low >= x.$low)))) {
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		n = $copyString(b, $substring(r.s, $flatten64(off)));
		if (n < b.$length) {
			err = io.EOF;
		}
		return [n, err];
	};
	Reader.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	Reader.ptr.prototype.ReadByte = function() {
		var b, r, x, x$1, x$2, x$3;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return [0, io.EOF];
		}
		b = r.s.charCodeAt($flatten64(r.i));
		r.i = (x$2 = r.i, x$3 = new $Int64(0, 1), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [b, $ifaceNil];
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var r, x, x$1, x$2;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			return errors.New("strings.Reader.UnreadByte: at beginning of string");
		}
		r.i = (x$1 = r.i, x$2 = new $Int64(0, 1), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, c, ch, err, r, size, x, x$1, x$2, x$3, x$4, x$5, x$6;
		ch = 0;
		size = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			r.prevRune = -1;
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			ch = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [ch, size, err];
		}
		r.prevRune = (((x$2 = r.i, x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0));
		c = r.s.charCodeAt($flatten64(r.i));
		if (c < 128) {
			r.i = (x$3 = r.i, x$4 = new $Int64(0, 1), new $Int64(x$3.$high + x$4.$high, x$3.$low + x$4.$low));
			_tmp$3 = ((c >> 0));
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			ch = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [ch, size, err];
		}
		_tuple = utf8.DecodeRuneInString($substring(r.s, $flatten64(r.i)));
		ch = _tuple[0];
		size = _tuple[1];
		r.i = (x$5 = r.i, x$6 = (new $Int64(0, size)), new $Int64(x$5.$high + x$6.$high, x$5.$low + x$6.$low));
		return [ch, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var r;
		r = this;
		if (r.prevRune < 0) {
			return errors.New("strings.Reader.UnreadRune: previous operation was not ReadRune");
		}
		r.i = (new $Int64(0, r.prevRune));
		r.prevRune = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Seek = function(offset, whence) {
		var _1, abs, offset, r, whence, x, x$1;
		r = this;
		r.prevRune = -1;
		abs = new $Int64(0, 0);
		_1 = whence;
		if (_1 === (0)) {
			abs = offset;
		} else if (_1 === (1)) {
			abs = (x = r.i, new $Int64(x.$high + offset.$high, x.$low + offset.$low));
		} else if (_1 === (2)) {
			abs = (x$1 = (new $Int64(0, r.s.length)), new $Int64(x$1.$high + offset.$high, x$1.$low + offset.$low));
		} else {
			return [new $Int64(0, 0), errors.New("strings.Reader.Seek: invalid whence")];
		}
		if ((abs.$high < 0 || (abs.$high === 0 && abs.$low < 0))) {
			return [new $Int64(0, 0), errors.New("strings.Reader.Seek: negative position")];
		}
		r.i = abs;
		return [abs, $ifaceNil];
	};
	Reader.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var _r, _tmp, _tmp$1, _tuple, err, m, n, r, s, w, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; m = $f.m; n = $f.n; r = $f.r; s = $f.s; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		s = $substring(r.s, $flatten64(r.i));
		_r = io.WriteString(w, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = _tuple[0];
		err = _tuple[1];
		if (m > s.length) {
			$panic(new $String("strings.Reader.WriteTo: invalid WriteString count"));
		}
		r.i = (x$2 = r.i, x$3 = (new $Int64(0, m)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		n = (new $Int64(0, m));
		if (!((m === s.length)) && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.m = m; $f.n = n; $f.r = r; $f.s = s; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.Reset = function(s) {
		var r, s;
		r = this;
		Reader.copy(r, new Reader.ptr(s, new $Int64(0, 0), -1));
	};
	Reader.prototype.Reset = function(s) { return this.$val.Reset(s); };
	NewReader = function(s) {
		var s;
		return new Reader.ptr(s, new $Int64(0, 0), -1);
	};
	$pkg.NewReader = NewReader;
	explode = function(s, n) {
		var _tuple, a, ch, i, l, n, s, size, x;
		l = utf8.RuneCountInString(s);
		if (n < 0 || n > l) {
			n = l;
		}
		a = $makeSlice(sliceType$3, n);
		i = 0;
		while (true) {
			if (!(i < (n - 1 >> 0))) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			ch = _tuple[0];
			size = _tuple[1];
			((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = $substring(s, 0, size));
			s = $substring(s, size);
			if (ch === 65533) {
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = "\xEF\xBF\xBD");
			}
			i = i + (1) >> 0;
		}
		if (n > 0) {
			(x = n - 1 >> 0, ((x < 0 || x >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x] = s));
		}
		return a;
	};
	Contains = function(s, substr) {
		var s, substr;
		return Index(s, substr) >= 0;
	};
	$pkg.Contains = Contains;
	ContainsRune = function(s, r) {
		var r, s;
		return IndexRune(s, r) >= 0;
	};
	$pkg.ContainsRune = ContainsRune;
	IndexRune = function(s, r) {
		var _i, _ref, _rune, i, r, r$1, s;
		if (0 <= r && r < 128) {
			return IndexByte(s, ((r << 24 >>> 24)));
		} else if ((r === 65533)) {
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				r$1 = _rune[0];
				if (r$1 === 65533) {
					return i;
				}
				_i += _rune[1];
			}
			return -1;
		} else if (!utf8.ValidRune(r)) {
			return -1;
		} else {
			return Index(s, ($encodeRune(r)));
		}
	};
	$pkg.IndexRune = IndexRune;
	LastIndexAny = function(s, chars) {
		var _i, _ref, _rune, _tuple, _tuple$1, as, c, chars, i, i$1, isASCII, r, s, size;
		if (chars === "") {
			return -1;
		}
		if (s.length > 8) {
			_tuple = makeASCIISet(chars);
			as = $clone(_tuple[0], asciiSet);
			isASCII = _tuple[1];
			if (isASCII) {
				i = s.length - 1 >> 0;
				while (true) {
					if (!(i >= 0)) { break; }
					if (new ptrType$6(as).contains(s.charCodeAt(i))) {
						return i;
					}
					i = i - (1) >> 0;
				}
				return -1;
			}
		}
		i$1 = s.length;
		while (true) {
			if (!(i$1 > 0)) { break; }
			_tuple$1 = utf8.DecodeLastRuneInString($substring(s, 0, i$1));
			r = _tuple$1[0];
			size = _tuple$1[1];
			i$1 = i$1 - (size) >> 0;
			_ref = chars;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				c = _rune[0];
				if (r === c) {
					return i$1;
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	$pkg.LastIndexAny = LastIndexAny;
	genSplit = function(s, sep, sepSave, n) {
		var a, i, m, n, s, sep, sepSave;
		if (n === 0) {
			return sliceType$3.nil;
		}
		if (sep === "") {
			return explode(s, n);
		}
		if (n < 0) {
			n = Count(s, sep) + 1 >> 0;
		}
		a = $makeSlice(sliceType$3, n);
		n = n - (1) >> 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			m = Index(s, sep);
			if (m < 0) {
				break;
			}
			((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = $substring(s, 0, (m + sepSave >> 0)));
			s = $substring(s, (m + sep.length >> 0));
			i = i + (1) >> 0;
		}
		((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = s);
		return $subslice(a, 0, (i + 1 >> 0));
	};
	Split = function(s, sep) {
		var s, sep;
		return genSplit(s, sep, 0, -1);
	};
	$pkg.Split = Split;
	Join = function(a, sep) {
		var _1, _i, _ref, a, b, bp, i, n, s, sep;
		_1 = a.$length;
		if (_1 === (0)) {
			return "";
		} else if (_1 === (1)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]);
		} else if (_1 === (2)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) + sep + (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]);
		} else if (_1 === (3)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) + sep + (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]) + sep + (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]);
		}
		n = $imul(sep.length, ((a.$length - 1 >> 0)));
		i = 0;
		while (true) {
			if (!(i < a.$length)) { break; }
			n = n + (((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]).length) >> 0;
			i = i + (1) >> 0;
		}
		b = $makeSlice(sliceType, n);
		bp = $copyString(b, (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]));
		_ref = $subslice(a, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			bp = bp + ($copyString($subslice(b, bp), sep)) >> 0;
			bp = bp + ($copyString($subslice(b, bp), s)) >> 0;
			_i++;
		}
		return ($bytesToString(b));
	};
	$pkg.Join = Join;
	HasPrefix = function(s, prefix) {
		var prefix, s;
		return s.length >= prefix.length && $substring(s, 0, prefix.length) === prefix;
	};
	$pkg.HasPrefix = HasPrefix;
	Repeat = function(s, count) {
		var _q, b, bp, count, s;
		if (count < 0) {
			$panic(new $String("strings: negative Repeat count"));
		} else if (count > 0 && !(((_q = ($imul(s.length, count)) / count, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) === s.length))) {
			$panic(new $String("strings: Repeat count causes overflow"));
		}
		b = $makeSlice(sliceType, ($imul(s.length, count)));
		bp = $copyString(b, s);
		while (true) {
			if (!(bp < b.$length)) { break; }
			$copySlice($subslice(b, bp), $subslice(b, 0, bp));
			bp = $imul(bp, (2));
		}
		return ($bytesToString(b));
	};
	$pkg.Repeat = Repeat;
	makeASCIISet = function(chars) {
		var _index, _tmp, _tmp$1, _tmp$2, _tmp$3, as, c, chars, i, ok, y;
		as = arrayType$3.zero();
		ok = false;
		i = 0;
		while (true) {
			if (!(i < chars.length)) { break; }
			c = chars.charCodeAt(i);
			if (c >= 128) {
				_tmp = $clone(as, asciiSet);
				_tmp$1 = false;
				asciiSet.copy(as, _tmp);
				ok = _tmp$1;
				return [as, ok];
			}
			_index = c >>> 5 << 24 >>> 24;
			((_index < 0 || _index >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[_index] = ((((_index < 0 || _index >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[_index]) | (((y = ((((c & 31) >>> 0) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0));
			i = i + (1) >> 0;
		}
		_tmp$2 = $clone(as, asciiSet);
		_tmp$3 = true;
		asciiSet.copy(as, _tmp$2);
		ok = _tmp$3;
		return [as, ok];
	};
	asciiSet.prototype.contains = function(c) {
		var as, c, x, y;
		as = this.$val;
		return !((((((x = c >>> 5 << 24 >>> 24, (as.nilCheck, ((x < 0 || x >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[x]))) & (((y = ((((c & 31) >>> 0) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0)) === 0));
	};
	$ptrType(asciiSet).prototype.contains = function(c) { return (new asciiSet(this.$get())).contains(c); };
	Replace = function(s, old, new$1, n) {
		var _tuple, i, j, m, n, new$1, old, s, start, t, w, wid;
		if (old === new$1 || (n === 0)) {
			return s;
		}
		m = Count(s, old);
		if (m === 0) {
			return s;
		} else if (n < 0 || m < n) {
			n = m;
		}
		t = $makeSlice(sliceType, (s.length + ($imul(n, ((new$1.length - old.length >> 0)))) >> 0));
		w = 0;
		start = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			j = start;
			if (old.length === 0) {
				if (i > 0) {
					_tuple = utf8.DecodeRuneInString($substring(s, start));
					wid = _tuple[1];
					j = j + (wid) >> 0;
				}
			} else {
				j = j + (Index($substring(s, start), old)) >> 0;
			}
			w = w + ($copyString($subslice(t, w), $substring(s, start, j))) >> 0;
			w = w + ($copyString($subslice(t, w), new$1)) >> 0;
			start = j + old.length >> 0;
			i = i + (1) >> 0;
		}
		w = w + ($copyString($subslice(t, w), $substring(s, start))) >> 0;
		return ($bytesToString($subslice(t, 0, w)));
	};
	$pkg.Replace = Replace;
	ptrType$7.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType, $Int64], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([$String], [], false)}];
	ptrType$6.methods = [{prop: "contains", name: "contains", pkg: "strings", typ: $funcType([$Uint8], [$Bool], false)}];
	Reader.init("strings", [{prop: "s", name: "s", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "i", name: "i", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "prevRune", name: "prevRune", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	asciiSet.init($Uint32, 8);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["path/filepath"] = (function() {
	var $pkg = {}, $init, errors, os, runtime, sort, strings, utf8, lazybuf, sliceType$1, ptrType$1, Clean, FromSlash, Split, Join, VolumeName, IsAbs, volumeNameLen, join;
	errors = $packages["errors"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	utf8 = $packages["unicode/utf8"];
	lazybuf = $pkg.lazybuf = $newType(0, $kindStruct, "filepath.lazybuf", true, "path/filepath", false, function(path_, buf_, w_, volAndPath_, volLen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.path = "";
			this.buf = sliceType$1.nil;
			this.w = 0;
			this.volAndPath = "";
			this.volLen = 0;
			return;
		}
		this.path = path_;
		this.buf = buf_;
		this.w = w_;
		this.volAndPath = volAndPath_;
		this.volLen = volLen_;
	});
	sliceType$1 = $sliceType($Uint8);
	ptrType$1 = $ptrType(lazybuf);
	lazybuf.ptr.prototype.index = function(i) {
		var b, i, x;
		b = this;
		if (!(b.buf === sliceType$1.nil)) {
			return (x = b.buf, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		}
		return b.path.charCodeAt(i);
	};
	lazybuf.prototype.index = function(i) { return this.$val.index(i); };
	lazybuf.ptr.prototype.append = function(c) {
		var b, c, x, x$1;
		b = this;
		if (b.buf === sliceType$1.nil) {
			if (b.w < b.path.length && (b.path.charCodeAt(b.w) === c)) {
				b.w = b.w + (1) >> 0;
				return;
			}
			b.buf = $makeSlice(sliceType$1, b.path.length);
			$copyString(b.buf, $substring(b.path, 0, b.w));
		}
		(x = b.buf, x$1 = b.w, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = c));
		b.w = b.w + (1) >> 0;
	};
	lazybuf.prototype.append = function(c) { return this.$val.append(c); };
	lazybuf.ptr.prototype.string = function() {
		var b;
		b = this;
		if (b.buf === sliceType$1.nil) {
			return $substring(b.volAndPath, 0, (b.volLen + b.w >> 0));
		}
		return $substring(b.volAndPath, 0, b.volLen) + ($bytesToString($subslice(b.buf, 0, b.w)));
	};
	lazybuf.prototype.string = function() { return this.$val.string(); };
	Clean = function(path) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, dotdot, n, originalPath, out, path, r, rooted, volLen;
		originalPath = path;
		volLen = volumeNameLen(path);
		path = $substring(path, volLen);
		if (path === "") {
			if (volLen > 1 && !((originalPath.charCodeAt(1) === 58))) {
				return FromSlash(originalPath);
			}
			return originalPath + ".";
		}
		rooted = os.IsPathSeparator(path.charCodeAt(0));
		n = path.length;
		out = new lazybuf.ptr(path, sliceType$1.nil, 0, originalPath, volLen);
		_tmp = 0;
		_tmp$1 = 0;
		r = _tmp;
		dotdot = _tmp$1;
		if (rooted) {
			out.append(47);
			_tmp$2 = 1;
			_tmp$3 = 1;
			r = _tmp$2;
			dotdot = _tmp$3;
		}
		while (true) {
			if (!(r < n)) { break; }
			if (os.IsPathSeparator(path.charCodeAt(r))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (((r + 1 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 1 >> 0))))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (path.charCodeAt((r + 1 >> 0)) === 46) && (((r + 2 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 2 >> 0))))) {
				r = r + (2) >> 0;
				if (out.w > dotdot) {
					out.w = out.w - (1) >> 0;
					while (true) {
						if (!(out.w > dotdot && !os.IsPathSeparator(out.index(out.w)))) { break; }
						out.w = out.w - (1) >> 0;
					}
				} else if (!rooted) {
					if (out.w > 0) {
						out.append(47);
					}
					out.append(46);
					out.append(46);
					dotdot = out.w;
				}
			} else {
				if (rooted && !((out.w === 1)) || !rooted && !((out.w === 0))) {
					out.append(47);
				}
				while (true) {
					if (!(r < n && !os.IsPathSeparator(path.charCodeAt(r)))) { break; }
					out.append(path.charCodeAt(r));
					r = r + (1) >> 0;
				}
			}
		}
		if (out.w === 0) {
			out.append(46);
		}
		return FromSlash(out.string());
	};
	$pkg.Clean = Clean;
	FromSlash = function(path) {
		var path;
		if (true) {
			return path;
		}
		return strings.Replace(path, "/", "/", -1);
	};
	$pkg.FromSlash = FromSlash;
	Split = function(path) {
		var _tmp, _tmp$1, dir, file, i, path, vol;
		dir = "";
		file = "";
		vol = VolumeName(path);
		i = path.length - 1 >> 0;
		while (true) {
			if (!(i >= vol.length && !os.IsPathSeparator(path.charCodeAt(i)))) { break; }
			i = i - (1) >> 0;
		}
		_tmp = $substring(path, 0, (i + 1 >> 0));
		_tmp$1 = $substring(path, (i + 1 >> 0));
		dir = _tmp;
		file = _tmp$1;
		return [dir, file];
	};
	$pkg.Split = Split;
	Join = function(elem) {
		var elem;
		return join(elem);
	};
	$pkg.Join = Join;
	VolumeName = function(path) {
		var path;
		return $substring(path, 0, volumeNameLen(path));
	};
	$pkg.VolumeName = VolumeName;
	IsAbs = function(path) {
		var path;
		return strings.HasPrefix(path, "/");
	};
	$pkg.IsAbs = IsAbs;
	volumeNameLen = function(path) {
		var path;
		return 0;
	};
	join = function(elem) {
		var _i, _ref, e, elem, i;
		_ref = elem;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			e = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!(e === "")) {
				return Clean(strings.Join($subslice(elem, i), "/"));
			}
			_i++;
		}
		return "";
	};
	ptrType$1.methods = [{prop: "index", name: "index", pkg: "path/filepath", typ: $funcType([$Int], [$Uint8], false)}, {prop: "append", name: "append", pkg: "path/filepath", typ: $funcType([$Uint8], [], false)}, {prop: "string", name: "string", pkg: "path/filepath", typ: $funcType([], [$String], false)}];
	lazybuf.init("path/filepath", [{prop: "path", name: "path", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "buf", name: "buf", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "w", name: "w", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "volAndPath", name: "volAndPath", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "volLen", name: "volLen", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrBadPattern = errors.New("syntax error in pattern");
		$pkg.SkipDir = errors.New("skip this directory");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["example.com/transpiler/xgtest/scanner"] = (function() {
	var $pkg = {}, $init, bytes, fmt, token, io, filepath, sort, strconv, unicode, utf8, Error, ErrorList, ErrorHandler, Scanner, Mode, sliceType, sliceType$1, sliceType$2, ptrType, ptrType$1, ptrType$2, ptrType$3, prefix, isLetter, isDigit, digitVal, stripCR;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	token = $packages["go/token"];
	io = $packages["io"];
	filepath = $packages["path/filepath"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Error = $pkg.Error = $newType(0, $kindStruct, "scanner.Error", true, "example.com/transpiler/xgtest/scanner", true, function(Pos_, Msg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pos = new token.Position.ptr("", 0, 0, 0);
			this.Msg = "";
			return;
		}
		this.Pos = Pos_;
		this.Msg = Msg_;
	});
	ErrorList = $pkg.ErrorList = $newType(12, $kindSlice, "scanner.ErrorList", true, "example.com/transpiler/xgtest/scanner", true, null);
	ErrorHandler = $pkg.ErrorHandler = $newType(4, $kindFunc, "scanner.ErrorHandler", true, "example.com/transpiler/xgtest/scanner", true, null);
	Scanner = $pkg.Scanner = $newType(0, $kindStruct, "scanner.Scanner", true, "example.com/transpiler/xgtest/scanner", true, function(file_, dir_, src_, err_, mode_, ch_, offset_, rdOffset_, lineOffset_, insertSemi_, ErrorCount_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$2.nil;
			this.dir = "";
			this.src = sliceType.nil;
			this.err = $throwNilPointerError;
			this.mode = 0;
			this.ch = 0;
			this.offset = 0;
			this.rdOffset = 0;
			this.lineOffset = 0;
			this.insertSemi = false;
			this.ErrorCount = 0;
			return;
		}
		this.file = file_;
		this.dir = dir_;
		this.src = src_;
		this.err = err_;
		this.mode = mode_;
		this.ch = ch_;
		this.offset = offset_;
		this.rdOffset = rdOffset_;
		this.lineOffset = lineOffset_;
		this.insertSemi = insertSemi_;
		this.ErrorCount = ErrorCount_;
	});
	Mode = $pkg.Mode = $newType(4, $kindUint, "scanner.Mode", true, "example.com/transpiler/xgtest/scanner", true, null);
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($emptyInterface);
	sliceType$2 = $sliceType($String);
	ptrType = $ptrType(ErrorList);
	ptrType$1 = $ptrType(Error);
	ptrType$2 = $ptrType(token.File);
	ptrType$3 = $ptrType(Scanner);
	Error.ptr.prototype.Error = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		/* */ if (!(e.Pos.Filename === "") || e.Pos.IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(e.Pos.Filename === "") || e.Pos.IsValid()) { */ case 1:
			_r = $clone(e.Pos, token.Position).String(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r + ": " + e.Msg;
		/* } */ case 2:
		$s = -1; return e.Msg;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Error.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	$ptrType(ErrorList).prototype.Add = function(pos, msg) {
		var msg, p, pos;
		p = this;
		p.$set($append(p.$get(), new Error.ptr($clone(pos, token.Position), msg)));
	};
	$ptrType(ErrorList).prototype.Reset = function() {
		var p;
		p = this;
		p.$set($subslice((p.$get()), 0, 0));
	};
	ErrorList.prototype.Len = function() {
		var p;
		p = this;
		return p.$length;
	};
	$ptrType(ErrorList).prototype.Len = function() { return this.$get().Len(); };
	ErrorList.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, p;
		p = this;
		_tmp = ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]);
		_tmp$1 = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
		((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i] = _tmp);
		((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j] = _tmp$1);
	};
	$ptrType(ErrorList).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	ErrorList.prototype.Less = function(i, j) {
		var e, f, i, j, p;
		p = this;
		e = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]).Pos;
		f = ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]).Pos;
		if (!(e.Filename === f.Filename)) {
			return e.Filename < f.Filename;
		}
		if (!((e.Line === f.Line))) {
			return e.Line < f.Line;
		}
		if (!((e.Column === f.Column))) {
			return e.Column < f.Column;
		}
		return ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]).Msg < ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]).Msg;
	};
	$ptrType(ErrorList).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	ErrorList.prototype.Sort = function() {
		var p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = sort.Sort(p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ErrorList.prototype.Sort }; } $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(ErrorList).prototype.Sort = function() { return this.$get().Sort(); };
	$ptrType(ErrorList).prototype.RemoveMultiples = function() {
		var _i, _ref, e, i, last, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; e = $f.e; i = $f.i; last = $f.last; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = sort.Sort(p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		last = new token.Position.ptr("", 0, 0, 0);
		i = 0;
		_ref = p.$get();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			e = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!(e.Pos.Filename === last.Filename) || !((e.Pos.Line === last.Line))) {
				token.Position.copy(last, e.Pos);
				(x = p.$get(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = e));
				i = i + (1) >> 0;
			}
			_i++;
		}
		p.$set($subslice((p.$get()), 0, i));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(ErrorList).prototype.RemoveMultiples }; } $f._i = _i; $f._ref = _ref; $f.e = e; $f.i = i; $f.last = last; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ErrorList.prototype.Error = function() {
		var _1, _r, _r$1, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = p.$length;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (0)) { */ case 2:
				$s = -1; return "no errors";
			/* } else if (_1 === (1)) { */ case 3:
				_r = $clone((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]), Error).Error(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 4:
		case 1:
		_r$1 = fmt.Sprintf("%s (and %d more errors)", new sliceType$1([(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]), new $Int((p.$length - 1 >> 0))])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ErrorList.prototype.Error }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(ErrorList).prototype.Error = function() { return this.$get().Error(); };
	ErrorList.prototype.Err = function() {
		var p;
		p = this;
		if (p.$length === 0) {
			return $ifaceNil;
		}
		return p;
	};
	$ptrType(ErrorList).prototype.Err = function() { return this.$get().Err(); };
	Scanner.ptr.prototype.next = function() {
		var _tmp, _tmp$1, _tuple, r, s, w, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; r = $f.r; s = $f.s; w = $f.w; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (s.rdOffset < s.src.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.rdOffset < s.src.$length) { */ case 1:
			s.offset = s.rdOffset;
			if (s.ch === 10) {
				s.lineOffset = s.offset;
				s.file.AddLine(s.offset);
			}
			_tmp = (((x = s.src, x$1 = s.rdOffset, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) >> 0));
			_tmp$1 = 1;
			r = _tmp;
			w = _tmp$1;
				/* */ if ((r === 0)) { $s = 5; continue; }
				/* */ if (r >= 128) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ((r === 0)) { */ case 5:
					$r = s.error(s.offset, "illegal character NUL"); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 7; continue;
				/* } else if (r >= 128) { */ case 6:
					_tuple = utf8.DecodeRune($subslice(s.src, s.rdOffset));
					r = _tuple[0];
					w = _tuple[1];
					/* */ if ((r === 65533) && (w === 1)) { $s = 9; continue; }
					/* */ if ((r === 65279) && s.offset > 0) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if ((r === 65533) && (w === 1)) { */ case 9:
						$r = s.error(s.offset, "illegal UTF-8 encoding"); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 11; continue;
					/* } else if ((r === 65279) && s.offset > 0) { */ case 10:
						$r = s.error(s.offset, "illegal byte order mark"); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 11:
				/* } */ case 7:
			case 4:
			s.rdOffset = s.rdOffset + (w) >> 0;
			s.ch = r;
			$s = 3; continue;
		/* } else { */ case 2:
			s.offset = s.src.$length;
			if (s.ch === 10) {
				s.lineOffset = s.offset;
				s.file.AddLine(s.offset);
			}
			s.ch = -1;
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.next }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.r = r; $f.s = s; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.next = function() { return this.$val.next(); };
	Scanner.ptr.prototype.Init = function(file, src, err, mode) {
		var _r, _tuple, err, file, mode, s, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; file = $f.file; mode = $f.mode; s = $f.s; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (!((file.Size() === src.$length))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((file.Size() === src.$length))) { */ case 1:
			_r = fmt.Sprintf("file size (%d) does not match src len (%d)", new sliceType$1([new $Int(file.Size()), new $Int(src.$length)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$panic(new $String(_r));
		/* } */ case 2:
		s.file = file;
		_tuple = filepath.Split(file.Name());
		s.dir = _tuple[0];
		s.src = src;
		s.err = err;
		s.mode = mode;
		s.ch = 32;
		s.offset = 0;
		s.rdOffset = 0;
		s.lineOffset = 0;
		s.insertSemi = false;
		s.ErrorCount = 0;
		$r = s.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (s.ch === 65279) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (s.ch === 65279) { */ case 5:
			$r = s.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.Init }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.file = file; $f.mode = mode; $f.s = s; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.Init = function(file, src, err, mode) { return this.$val.Init(file, src, err, mode); };
	Scanner.ptr.prototype.error = function(offs, msg) {
		var _r, msg, offs, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; msg = $f.msg; offs = $f.offs; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (!(s.err === $throwNilPointerError)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(s.err === $throwNilPointerError)) { */ case 1:
			_r = s.file.Position(s.file.Pos(offs)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = s.err($clone(_r, token.Position), msg); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		s.ErrorCount = s.ErrorCount + (1) >> 0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.error }; } $f._r = _r; $f.msg = msg; $f.offs = offs; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.error = function(offs, msg) { return this.$val.error(offs, msg); };
	Scanner.ptr.prototype.interpretLineComment = function(text) {
		var _r, _tuple, err, filename, i, line, s, text, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; filename = $f.filename; i = $f.i; line = $f.line; s = $f.s; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (bytes.HasPrefix(text, prefix)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (bytes.HasPrefix(text, prefix)) { */ case 1:
			i = bytes.LastIndex(text, new sliceType([58]));
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				_tuple = strconv.Atoi(($bytesToString($subslice(text, (i + 1 >> 0)))));
				line = _tuple[0];
				err = _tuple[1];
				/* */ if ($interfaceIsEqual(err, $ifaceNil) && line > 0) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ($interfaceIsEqual(err, $ifaceNil) && line > 0) { */ case 5:
					_r = bytes.TrimSpace($subslice(text, prefix.$length, i)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					filename = ($bytesToString(_r));
					if (!(filename === "")) {
						filename = filepath.Clean(filename);
						if (!filepath.IsAbs(filename)) {
							filename = filepath.Join(new sliceType$2([s.dir, filename]));
						}
					}
					s.file.AddLineInfo((s.lineOffset + text.$length >> 0) + 1 >> 0, filename, line);
				/* } */ case 6:
			/* } */ case 4:
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.interpretLineComment }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.filename = filename; $f.i = i; $f.line = line; $f.s = s; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.interpretLineComment = function(text) { return this.$val.interpretLineComment(text); };
	Scanner.ptr.prototype.scanComment = function() {
		var ch, hasCR, lit, offs, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ch = $f.ch; hasCR = $f.hasCR; lit = $f.lit; offs = $f.offs; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		offs = s.offset - 1 >> 0;
		hasCR = false;
		/* */ if (s.ch === 47) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.ch === 47) { */ case 1:
			$r = s.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* while (true) { */ case 4:
				/* if (!(!((s.ch === 10)) && s.ch >= 0)) { break; } */ if(!(!((s.ch === 10)) && s.ch >= 0)) { $s = 5; continue; }
				if (s.ch === 13) {
					hasCR = true;
				}
				$r = s.next(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ $s = 4; continue; case 5:
			/* */ if (offs === s.lineOffset) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (offs === s.lineOffset) { */ case 7:
				$r = s.interpretLineComment($subslice(s.src, offs, s.offset)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
			/* goto exit */ $s = 10; continue;
		/* } */ case 2:
		$r = s.next(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* while (true) { */ case 12:
			/* if (!(s.ch >= 0)) { break; } */ if(!(s.ch >= 0)) { $s = 13; continue; }
			ch = s.ch;
			if (ch === 13) {
				hasCR = true;
			}
			$r = s.next(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if ((ch === 42) && (s.ch === 47)) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if ((ch === 42) && (s.ch === 47)) { */ case 15:
				$r = s.next(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* goto exit */ $s = 10; continue;
			/* } */ case 16:
		/* } */ $s = 12; continue; case 13:
		$r = s.error(offs, "comment not terminated"); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* exit: */ case 10:
		lit = $subslice(s.src, offs, s.offset);
		if (hasCR) {
			lit = stripCR(lit);
		}
		$s = -1; return ($bytesToString(lit));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.scanComment }; } $f.ch = ch; $f.hasCR = hasCR; $f.lit = lit; $f.offs = offs; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.scanComment = function() { return this.$val.scanComment(); };
	Scanner.ptr.prototype.findLineEnd = function() {
		var ch, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ch = $f.ch; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		s = [s];
		s[0] = this;
		$deferred.push([(function(s) { return function $b(offs) {
			var offs, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; offs = $f.offs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			s[0].ch = 47;
			s[0].offset = offs;
			s[0].rdOffset = offs + 1 >> 0;
			$r = s[0].next(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.offs = offs; $f.$s = $s; $f.$r = $r; return $f;
		}; })(s), [s[0].offset - 1 >> 0]]);
		/* while (true) { */ case 1:
			/* if (!((s[0].ch === 47) || (s[0].ch === 42))) { break; } */ if(!((s[0].ch === 47) || (s[0].ch === 42))) { $s = 2; continue; }
			if (s[0].ch === 47) {
				$s = -1; return true;
			}
			$r = s[0].next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* while (true) { */ case 4:
				/* if (!(s[0].ch >= 0)) { break; } */ if(!(s[0].ch >= 0)) { $s = 5; continue; }
				ch = s[0].ch;
				if (ch === 10) {
					$s = -1; return true;
				}
				$r = s[0].next(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if ((ch === 42) && (s[0].ch === 47)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if ((ch === 42) && (s[0].ch === 47)) { */ case 7:
					$r = s[0].next(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 5; continue;
				/* } */ case 8:
			/* } */ $s = 4; continue; case 5:
			$r = s[0].skipWhitespace(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (s[0].ch < 0 || (s[0].ch === 10)) {
				$s = -1; return true;
			}
			if (!((s[0].ch === 47))) {
				$s = -1; return false;
			}
			$r = s[0].next(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		$s = -1; return false;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return false; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.findLineEnd }; } $f.ch = ch; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Scanner.prototype.findLineEnd = function() { return this.$val.findLineEnd(); };
	isLetter = function(ch) {
		var ch;
		return 97 <= ch && ch <= 122 || 65 <= ch && ch <= 90 || (ch === 95) || ch >= 128 && unicode.IsLetter(ch);
	};
	isDigit = function(ch) {
		var ch;
		return 48 <= ch && ch <= 57 || ch >= 128 && unicode.IsDigit(ch);
	};
	Scanner.ptr.prototype.scanIdentifier = function() {
		var offs, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; offs = $f.offs; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		offs = s.offset;
		/* while (true) { */ case 1:
			/* if (!(isLetter(s.ch) || isDigit(s.ch))) { break; } */ if(!(isLetter(s.ch) || isDigit(s.ch))) { $s = 2; continue; }
			$r = s.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		$s = -1; return ($bytesToString($subslice(s.src, offs, s.offset)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.scanIdentifier }; } $f.offs = offs; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.scanIdentifier = function() { return this.$val.scanIdentifier(); };
	digitVal = function(ch) {
		var ch;
		if (48 <= ch && ch <= 57) {
			return (((ch - 48 >> 0) >> 0));
		} else if (97 <= ch && ch <= 102) {
			return ((((ch - 97 >> 0) + 10 >> 0) >> 0));
		} else if (65 <= ch && ch <= 70) {
			return ((((ch - 65 >> 0) + 10 >> 0) >> 0));
		}
		return 16;
	};
	Scanner.ptr.prototype.scanMantissa = function(base) {
		var base, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; base = $f.base; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			/* if (!(digitVal(s.ch) < base)) { break; } */ if(!(digitVal(s.ch) < base)) { $s = 2; continue; }
			$r = s.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.scanMantissa }; } $f.base = base; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.scanMantissa = function(base) { return this.$val.scanMantissa(base); };
	Scanner.ptr.prototype.scanNumber = function(seenDecimalPoint) {
		var offs, offs$1, s, seenDecimalDigit, seenDecimalPoint, tok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; offs = $f.offs; offs$1 = $f.offs$1; s = $f.s; seenDecimalDigit = $f.seenDecimalDigit; seenDecimalPoint = $f.seenDecimalPoint; tok = $f.tok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		offs = s.offset;
		tok = 5;
		/* */ if (seenDecimalPoint) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (seenDecimalPoint) { */ case 1:
			offs = offs - (1) >> 0;
			tok = 6;
			$r = s.scanMantissa(10); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* goto exponent */ $s = 4; continue;
		/* } */ case 2:
		/* */ if (s.ch === 48) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (s.ch === 48) { */ case 5:
			offs$1 = s.offset;
			$r = s.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if ((s.ch === 120) || (s.ch === 88)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((s.ch === 120) || (s.ch === 88)) { */ case 8:
				$r = s.next(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = s.scanMantissa(16); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if ((s.offset - offs$1 >> 0) <= 2) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ((s.offset - offs$1 >> 0) <= 2) { */ case 13:
					$r = s.error(offs$1, "illegal hexadecimal number"); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 14:
				$s = 10; continue;
			/* } else { */ case 9:
				seenDecimalDigit = false;
				$r = s.scanMantissa(8); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if ((s.ch === 56) || (s.ch === 57)) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if ((s.ch === 56) || (s.ch === 57)) { */ case 17:
					seenDecimalDigit = true;
					$r = s.scanMantissa(10); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 18:
				/* */ if ((s.ch === 46) || (s.ch === 101) || (s.ch === 69) || (s.ch === 105)) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if ((s.ch === 46) || (s.ch === 101) || (s.ch === 69) || (s.ch === 105)) { */ case 20:
					/* goto fraction */ $s = 22; continue;
				/* } */ case 21:
				/* */ if (seenDecimalDigit) { $s = 23; continue; }
				/* */ $s = 24; continue;
				/* if (seenDecimalDigit) { */ case 23:
					$r = s.error(offs$1, "illegal octal number"); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 24:
			/* } */ case 10:
			/* goto exit */ $s = 26; continue;
		/* } */ case 6:
		$r = s.scanMantissa(10); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* fraction: */ case 22:
		/* */ if (s.ch === 46) { $s = 28; continue; }
		/* */ $s = 29; continue;
		/* if (s.ch === 46) { */ case 28:
			tok = 6;
			$r = s.next(); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = s.scanMantissa(10); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 29:
		/* exponent: */ case 4:
		/* */ if ((s.ch === 101) || (s.ch === 69)) { $s = 32; continue; }
		/* */ $s = 33; continue;
		/* if ((s.ch === 101) || (s.ch === 69)) { */ case 32:
			tok = 6;
			$r = s.next(); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if ((s.ch === 45) || (s.ch === 43)) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if ((s.ch === 45) || (s.ch === 43)) { */ case 35:
				$r = s.next(); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 36:
			/* */ if (digitVal(s.ch) < 10) { $s = 38; continue; }
			/* */ $s = 39; continue;
			/* if (digitVal(s.ch) < 10) { */ case 38:
				$r = s.scanMantissa(10); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 40; continue;
			/* } else { */ case 39:
				$r = s.error(offs, "illegal floating-point exponent"); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 40:
		/* } */ case 33:
		/* */ if (s.ch === 105) { $s = 43; continue; }
		/* */ $s = 44; continue;
		/* if (s.ch === 105) { */ case 43:
			tok = 7;
			$r = s.next(); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 44:
		/* exit: */ case 26:
		$s = -1; return [tok, ($bytesToString($subslice(s.src, offs, s.offset)))];
		$s = -1; return [0, ""];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.scanNumber }; } $f.offs = offs; $f.offs$1 = offs$1; $f.s = s; $f.seenDecimalDigit = seenDecimalDigit; $f.seenDecimalPoint = seenDecimalPoint; $f.tok = tok; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.scanNumber = function(seenDecimalPoint) { return this.$val.scanNumber(seenDecimalPoint); };
	Scanner.ptr.prototype.scanEscape = function(quote) {
		var _1, _r, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, base, d, max, msg, msg$1, n, offs, quote, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; base = $f.base; d = $f.d; max = $f.max; msg = $f.msg; msg$1 = $f.msg$1; n = $f.n; offs = $f.offs; quote = $f.quote; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		offs = s.offset;
		n = 0;
		_tmp = 0;
		_tmp$1 = 0;
		base = _tmp;
		max = _tmp$1;
			_1 = s.ch;
			/* */ if ((_1 === (97)) || (_1 === (98)) || (_1 === (102)) || (_1 === (110)) || (_1 === (114)) || (_1 === (116)) || (_1 === (118)) || (_1 === (92)) || (_1 === (quote))) { $s = 2; continue; }
			/* */ if ((_1 === (48)) || (_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55))) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (117)) { $s = 5; continue; }
			/* */ if (_1 === (85)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_1 === (97)) || (_1 === (98)) || (_1 === (102)) || (_1 === (110)) || (_1 === (114)) || (_1 === (116)) || (_1 === (118)) || (_1 === (92)) || (_1 === (quote))) { */ case 2:
				$r = s.next(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return true;
			/* } else if ((_1 === (48)) || (_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55))) { */ case 3:
				_tmp$2 = 3;
				_tmp$3 = 8;
				_tmp$4 = 255;
				n = _tmp$2;
				base = _tmp$3;
				max = _tmp$4;
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				$r = s.next(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_tmp$5 = 2;
				_tmp$6 = 16;
				_tmp$7 = 255;
				n = _tmp$5;
				base = _tmp$6;
				max = _tmp$7;
				$s = 8; continue;
			/* } else if (_1 === (117)) { */ case 5:
				$r = s.next(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_tmp$8 = 4;
				_tmp$9 = 16;
				_tmp$10 = 1114111;
				n = _tmp$8;
				base = _tmp$9;
				max = _tmp$10;
				$s = 8; continue;
			/* } else if (_1 === (85)) { */ case 6:
				$r = s.next(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_tmp$11 = 8;
				_tmp$12 = 16;
				_tmp$13 = 1114111;
				n = _tmp$11;
				base = _tmp$12;
				max = _tmp$13;
				$s = 8; continue;
			/* } else { */ case 7:
				msg = "unknown escape sequence";
				if (s.ch < 0) {
					msg = "escape sequence not terminated";
				}
				$r = s.error(offs, msg); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return false;
			/* } */ case 8:
		case 1:
		x = 0;
		/* while (true) { */ case 14:
			/* if (!(n > 0)) { break; } */ if(!(n > 0)) { $s = 15; continue; }
			d = ((digitVal(s.ch) >>> 0));
			/* */ if (d >= base) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (d >= base) { */ case 16:
				_r = fmt.Sprintf("illegal character %#U in escape sequence", new sliceType$1([new $Int32(s.ch)])); /* */ $s = 18; case 18: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				msg$1 = _r;
				if (s.ch < 0) {
					msg$1 = "escape sequence not terminated";
				}
				$r = s.error(s.offset, msg$1); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return false;
			/* } */ case 17:
			x = ($imul(x, base) >>> 0) + d >>> 0;
			$r = s.next(); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			n = n - (1) >> 0;
		/* } */ $s = 14; continue; case 15:
		/* */ if (x > max || 55296 <= x && x < 57344) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (x > max || 55296 <= x && x < 57344) { */ case 21:
			$r = s.error(offs, "escape sequence is invalid Unicode code point"); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return false;
		/* } */ case 22:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.scanEscape }; } $f._1 = _1; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f.base = base; $f.d = d; $f.max = max; $f.msg = msg; $f.msg$1 = msg$1; $f.n = n; $f.offs = offs; $f.quote = quote; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.scanEscape = function(quote) { return this.$val.scanEscape(quote); };
	Scanner.ptr.prototype.scanRune = function() {
		var _r, ch, n, offs, s, valid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; ch = $f.ch; n = $f.n; offs = $f.offs; s = $f.s; valid = $f.valid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		offs = s.offset - 1 >> 0;
		valid = true;
		n = 0;
		/* while (true) { */ case 1:
			ch = s.ch;
			/* */ if ((ch === 10) || ch < 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((ch === 10) || ch < 0) { */ case 3:
				/* */ if (valid) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (valid) { */ case 5:
					$r = s.error(offs, "rune literal not terminated"); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					valid = false;
				/* } */ case 6:
				/* break; */ $s = 2; continue;
			/* } */ case 4:
			$r = s.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (ch === 39) {
				/* break; */ $s = 2; continue;
			}
			n = n + (1) >> 0;
			/* */ if (ch === 92) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (ch === 92) { */ case 9:
				_r = s.scanEscape(39); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (!_r) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!_r) { */ case 11:
					valid = false;
				/* } */ case 12:
			/* } */ case 10:
		/* } */ $s = 1; continue; case 2:
		/* */ if (valid && !((n === 1))) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (valid && !((n === 1))) { */ case 14:
			$r = s.error(offs, "illegal rune literal"); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 15:
		$s = -1; return ($bytesToString($subslice(s.src, offs, s.offset)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.scanRune }; } $f._r = _r; $f.ch = ch; $f.n = n; $f.offs = offs; $f.s = s; $f.valid = valid; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.scanRune = function() { return this.$val.scanRune(); };
	Scanner.ptr.prototype.scanString = function() {
		var _r, ch, offs, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; ch = $f.ch; offs = $f.offs; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		offs = s.offset - 1 >> 0;
		/* while (true) { */ case 1:
			ch = s.ch;
			/* */ if ((ch === 10) || ch < 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((ch === 10) || ch < 0) { */ case 3:
				$r = s.error(offs, "string literal not terminated"); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* break; */ $s = 2; continue;
			/* } */ case 4:
			$r = s.next(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (ch === 34) {
				/* break; */ $s = 2; continue;
			}
			/* */ if (ch === 92) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (ch === 92) { */ case 7:
				_r = s.scanEscape(34); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
			/* } */ case 8:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return ($bytesToString($subslice(s.src, offs, s.offset)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.scanString }; } $f._r = _r; $f.ch = ch; $f.offs = offs; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.scanString = function() { return this.$val.scanString(); };
	stripCR = function(b) {
		var _i, _ref, b, c, ch, i;
		c = $makeSlice(sliceType, b.$length);
		i = 0;
		_ref = b;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			ch = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((ch === 13))) {
				((i < 0 || i >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + i] = ch);
				i = i + (1) >> 0;
			}
			_i++;
		}
		return $subslice(c, 0, i);
	};
	Scanner.ptr.prototype.scanRawString = function() {
		var ch, hasCR, lit, offs, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ch = $f.ch; hasCR = $f.hasCR; lit = $f.lit; offs = $f.offs; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		offs = s.offset - 1 >> 0;
		hasCR = false;
		/* while (true) { */ case 1:
			ch = s.ch;
			/* */ if (ch < 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (ch < 0) { */ case 3:
				$r = s.error(offs, "raw string literal not terminated"); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* break; */ $s = 2; continue;
			/* } */ case 4:
			$r = s.next(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (ch === 96) {
				/* break; */ $s = 2; continue;
			}
			if (ch === 13) {
				hasCR = true;
			}
		/* } */ $s = 1; continue; case 2:
		lit = $subslice(s.src, offs, s.offset);
		if (hasCR) {
			lit = stripCR(lit);
		}
		$s = -1; return ($bytesToString(lit));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.scanRawString }; } $f.ch = ch; $f.hasCR = hasCR; $f.lit = lit; $f.offs = offs; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.scanRawString = function() { return this.$val.scanRawString(); };
	Scanner.ptr.prototype.skipWhitespace = function() {
		var s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			/* if (!((s.ch === 32) || (s.ch === 9) || (s.ch === 10) && !s.insertSemi || (s.ch === 13))) { break; } */ if(!((s.ch === 32) || (s.ch === 9) || (s.ch === 10) && !s.insertSemi || (s.ch === 13))) { $s = 2; continue; }
			$r = s.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.skipWhitespace }; } $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.skipWhitespace = function() { return this.$val.skipWhitespace(); };
	Scanner.ptr.prototype.switch2 = function(tok0, tok1) {
		var s, tok0, tok1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; s = $f.s; tok0 = $f.tok0; tok1 = $f.tok1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (s.ch === 61) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.ch === 61) { */ case 1:
			$r = s.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return tok1;
		/* } */ case 2:
		$s = -1; return tok0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.switch2 }; } $f.s = s; $f.tok0 = tok0; $f.tok1 = tok1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.switch2 = function(tok0, tok1) { return this.$val.switch2(tok0, tok1); };
	Scanner.ptr.prototype.switch3 = function(tok0, tok1, ch2, tok2) {
		var ch2, s, tok0, tok1, tok2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ch2 = $f.ch2; s = $f.s; tok0 = $f.tok0; tok1 = $f.tok1; tok2 = $f.tok2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (s.ch === 61) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.ch === 61) { */ case 1:
			$r = s.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return tok1;
		/* } */ case 2:
		/* */ if (s.ch === ch2) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (s.ch === ch2) { */ case 4:
			$r = s.next(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return tok2;
		/* } */ case 5:
		$s = -1; return tok0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.switch3 }; } $f.ch2 = ch2; $f.s = s; $f.tok0 = tok0; $f.tok1 = tok1; $f.tok2 = tok2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.switch3 = function(tok0, tok1, ch2, tok2) { return this.$val.switch3(tok0, tok1, ch2, tok2); };
	Scanner.ptr.prototype.switch4 = function(tok0, tok1, ch2, tok2, tok3) {
		var ch2, s, tok0, tok1, tok2, tok3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ch2 = $f.ch2; s = $f.s; tok0 = $f.tok0; tok1 = $f.tok1; tok2 = $f.tok2; tok3 = $f.tok3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (s.ch === 61) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.ch === 61) { */ case 1:
			$r = s.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return tok1;
		/* } */ case 2:
		/* */ if (s.ch === ch2) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (s.ch === ch2) { */ case 4:
			$r = s.next(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (s.ch === 61) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (s.ch === 61) { */ case 7:
				$r = s.next(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return tok3;
			/* } */ case 8:
			$s = -1; return tok2;
		/* } */ case 5:
		$s = -1; return tok0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.switch4 }; } $f.ch2 = ch2; $f.s = s; $f.tok0 = tok0; $f.tok1 = tok1; $f.tok2 = tok2; $f.tok3 = tok3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.switch4 = function(tok0, tok1, ch2, tok2, tok3) { return this.$val.switch4(tok0, tok1, ch2, tok2, tok3); };
	Scanner.ptr.prototype.Scan = function() {
		var _1, _2, _arg, _arg$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, _tuple$1, _v, ch, comment, insertSemi, lit, pos, s, tok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; ch = $f.ch; comment = $f.comment; insertSemi = $f.insertSemi; lit = $f.lit; pos = $f.pos; s = $f.s; tok = $f.tok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = 0;
		tok = 0;
		lit = "";
		s = this;
		/* scanAgain: */ case 1:
		$r = s.skipWhitespace(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pos = s.file.Pos(s.offset);
		insertSemi = false;
			ch = s.ch;
			/* */ if (isLetter(ch)) { $s = 4; continue; }
			/* */ if (48 <= ch && ch <= 57) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (isLetter(ch)) { */ case 4:
				_r = s.scanIdentifier(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				lit = _r;
				if (lit.length > 1) {
					tok = token.Lookup(lit);
					_1 = tok;
					if ((_1 === (4)) || (_1 === (61)) || (_1 === (65)) || (_1 === (69)) || (_1 === (80))) {
						insertSemi = true;
					}
				} else {
					insertSemi = true;
					tok = 4;
				}
				$s = 7; continue;
			/* } else if (48 <= ch && ch <= 57) { */ case 5:
				insertSemi = true;
				_r$1 = s.scanNumber(false); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				tok = _tuple[0];
				lit = _tuple[1];
				$s = 7; continue;
			/* } else { */ case 6:
				$r = s.next(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_2 = ch;
					/* */ if (_2 === (-1)) { $s = 12; continue; }
					/* */ if (_2 === (10)) { $s = 13; continue; }
					/* */ if (_2 === (34)) { $s = 14; continue; }
					/* */ if (_2 === (39)) { $s = 15; continue; }
					/* */ if (_2 === (96)) { $s = 16; continue; }
					/* */ if (_2 === (58)) { $s = 17; continue; }
					/* */ if (_2 === (46)) { $s = 18; continue; }
					/* */ if (_2 === (44)) { $s = 19; continue; }
					/* */ if (_2 === (59)) { $s = 20; continue; }
					/* */ if (_2 === (40)) { $s = 21; continue; }
					/* */ if (_2 === (41)) { $s = 22; continue; }
					/* */ if (_2 === (91)) { $s = 23; continue; }
					/* */ if (_2 === (93)) { $s = 24; continue; }
					/* */ if (_2 === (123)) { $s = 25; continue; }
					/* */ if (_2 === (125)) { $s = 26; continue; }
					/* */ if (_2 === (43)) { $s = 27; continue; }
					/* */ if (_2 === (45)) { $s = 28; continue; }
					/* */ if (_2 === (42)) { $s = 29; continue; }
					/* */ if (_2 === (47)) { $s = 30; continue; }
					/* */ if (_2 === (37)) { $s = 31; continue; }
					/* */ if (_2 === (94)) { $s = 32; continue; }
					/* */ if (_2 === (60)) { $s = 33; continue; }
					/* */ if (_2 === (62)) { $s = 34; continue; }
					/* */ if (_2 === (61)) { $s = 35; continue; }
					/* */ if (_2 === (33)) { $s = 36; continue; }
					/* */ if (_2 === (38)) { $s = 37; continue; }
					/* */ if (_2 === (124)) { $s = 38; continue; }
					/* */ $s = 39; continue;
					/* if (_2 === (-1)) { */ case 12:
						if (s.insertSemi) {
							s.insertSemi = false;
							_tmp = pos;
							_tmp$1 = 57;
							_tmp$2 = "\n";
							pos = _tmp;
							tok = _tmp$1;
							lit = _tmp$2;
							$s = -1; return [pos, tok, lit];
						}
						tok = 1;
						$s = 40; continue;
					/* } else if (_2 === (10)) { */ case 13:
						s.insertSemi = false;
						_tmp$3 = pos;
						_tmp$4 = 57;
						_tmp$5 = "\n";
						pos = _tmp$3;
						tok = _tmp$4;
						lit = _tmp$5;
						$s = -1; return [pos, tok, lit];
					/* } else if (_2 === (34)) { */ case 14:
						insertSemi = true;
						tok = 9;
						_r$2 = s.scanString(); /* */ $s = 41; case 41: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						lit = _r$2;
						$s = 40; continue;
					/* } else if (_2 === (39)) { */ case 15:
						insertSemi = true;
						tok = 8;
						_r$3 = s.scanRune(); /* */ $s = 42; case 42: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						lit = _r$3;
						$s = 40; continue;
					/* } else if (_2 === (96)) { */ case 16:
						insertSemi = true;
						tok = 9;
						_r$4 = s.scanRawString(); /* */ $s = 43; case 43: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						lit = _r$4;
						$s = 40; continue;
					/* } else if (_2 === (58)) { */ case 17:
						_r$5 = s.switch2(58, 47); /* */ $s = 44; case 44: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						tok = _r$5;
						$s = 40; continue;
					/* } else if (_2 === (46)) { */ case 18:
						/* */ if (48 <= s.ch && s.ch <= 57) { $s = 45; continue; }
						/* */ if (s.ch === 46) { $s = 46; continue; }
						/* */ $s = 47; continue;
						/* if (48 <= s.ch && s.ch <= 57) { */ case 45:
							insertSemi = true;
							_r$6 = s.scanNumber(true); /* */ $s = 49; case 49: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
							_tuple$1 = _r$6;
							tok = _tuple$1[0];
							lit = _tuple$1[1];
							$s = 48; continue;
						/* } else if (s.ch === 46) { */ case 46:
							$r = s.next(); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* */ if (s.ch === 46) { $s = 51; continue; }
							/* */ $s = 52; continue;
							/* if (s.ch === 46) { */ case 51:
								$r = s.next(); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								tok = 48;
							/* } */ case 52:
							$s = 48; continue;
						/* } else { */ case 47:
							tok = 53;
						/* } */ case 48:
						$s = 40; continue;
					/* } else if (_2 === (44)) { */ case 19:
						tok = 52;
						$s = 40; continue;
					/* } else if (_2 === (59)) { */ case 20:
						tok = 57;
						lit = ";";
						$s = 40; continue;
					/* } else if (_2 === (40)) { */ case 21:
						tok = 49;
						$s = 40; continue;
					/* } else if (_2 === (41)) { */ case 22:
						insertSemi = true;
						tok = 54;
						$s = 40; continue;
					/* } else if (_2 === (91)) { */ case 23:
						tok = 50;
						$s = 40; continue;
					/* } else if (_2 === (93)) { */ case 24:
						insertSemi = true;
						tok = 55;
						$s = 40; continue;
					/* } else if (_2 === (123)) { */ case 25:
						tok = 51;
						$s = 40; continue;
					/* } else if (_2 === (125)) { */ case 26:
						insertSemi = true;
						tok = 56;
						$s = 40; continue;
					/* } else if (_2 === (43)) { */ case 27:
						_r$7 = s.switch3(12, 23, 43, 37); /* */ $s = 54; case 54: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						tok = _r$7;
						if (tok === 37) {
							insertSemi = true;
						}
						$s = 40; continue;
					/* } else if (_2 === (45)) { */ case 28:
						_r$8 = s.switch3(13, 24, 45, 38); /* */ $s = 55; case 55: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						tok = _r$8;
						if (tok === 38) {
							insertSemi = true;
						}
						$s = 40; continue;
					/* } else if (_2 === (42)) { */ case 29:
						_r$9 = s.switch2(14, 25); /* */ $s = 56; case 56: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						tok = _r$9;
						if (tok === 14) {
							insertSemi = true;
						}
						$s = 40; continue;
					/* } else if (_2 === (47)) { */ case 30:
						/* */ if ((s.ch === 47) || (s.ch === 42)) { $s = 57; continue; }
						/* */ $s = 58; continue;
						/* if ((s.ch === 47) || (s.ch === 42)) { */ case 57:
							if (!(s.insertSemi)) { _v = false; $s = 62; continue s; }
							_r$10 = s.findLineEnd(); /* */ $s = 63; case 63: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
							_v = _r$10; case 62:
							/* */ if (_v) { $s = 60; continue; }
							/* */ $s = 61; continue;
							/* if (_v) { */ case 60:
								s.ch = 47;
								s.offset = s.file.Offset(pos);
								s.rdOffset = s.offset + 1 >> 0;
								s.insertSemi = false;
								_tmp$6 = pos;
								_tmp$7 = 57;
								_tmp$8 = "\n";
								pos = _tmp$6;
								tok = _tmp$7;
								lit = _tmp$8;
								$s = -1; return [pos, tok, lit];
							/* } */ case 61:
							_r$11 = s.scanComment(); /* */ $s = 64; case 64: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
							comment = _r$11;
							/* */ if (((s.mode & 1) >>> 0) === 0) { $s = 65; continue; }
							/* */ $s = 66; continue;
							/* if (((s.mode & 1) >>> 0) === 0) { */ case 65:
								s.insertSemi = false;
								/* goto scanAgain */ $s = 1; continue;
							/* } */ case 66:
							tok = 2;
							lit = comment;
							$s = 59; continue;
						/* } else { */ case 58:
							_r$12 = s.switch2(15, 26); /* */ $s = 67; case 67: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
							tok = _r$12;
						/* } */ case 59:
						$s = 40; continue;
					/* } else if (_2 === (37)) { */ case 31:
						_r$13 = s.switch2(16, 27); /* */ $s = 68; case 68: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						tok = _r$13;
						$s = 40; continue;
					/* } else if (_2 === (94)) { */ case 32:
						_r$14 = s.switch2(19, 30); /* */ $s = 69; case 69: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						tok = _r$14;
						$s = 40; continue;
					/* } else if (_2 === (60)) { */ case 33:
						/* */ if (s.ch === 45) { $s = 70; continue; }
						/* */ $s = 71; continue;
						/* if (s.ch === 45) { */ case 70:
							$r = s.next(); /* */ $s = 73; case 73: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							tok = 36;
							$s = 72; continue;
						/* } else { */ case 71:
							_r$15 = s.switch4(40, 45, 60, 20, 31); /* */ $s = 74; case 74: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
							tok = _r$15;
						/* } */ case 72:
						$s = 40; continue;
					/* } else if (_2 === (62)) { */ case 34:
						_r$16 = s.switch4(41, 46, 62, 21, 32); /* */ $s = 75; case 75: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						tok = _r$16;
						$s = 40; continue;
					/* } else if (_2 === (61)) { */ case 35:
						_r$17 = s.switch2(42, 39); /* */ $s = 76; case 76: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						tok = _r$17;
						$s = 40; continue;
					/* } else if (_2 === (33)) { */ case 36:
						_r$18 = s.switch2(43, 44); /* */ $s = 77; case 77: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
						tok = _r$18;
						$s = 40; continue;
					/* } else if (_2 === (38)) { */ case 37:
						/* */ if (s.ch === 94) { $s = 78; continue; }
						/* */ $s = 79; continue;
						/* if (s.ch === 94) { */ case 78:
							$r = s.next(); /* */ $s = 81; case 81: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							_r$19 = s.switch2(22, 33); /* */ $s = 82; case 82: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
							tok = _r$19;
							$s = 80; continue;
						/* } else { */ case 79:
							_r$20 = s.switch3(17, 28, 38, 34); /* */ $s = 83; case 83: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
							tok = _r$20;
						/* } */ case 80:
						$s = 40; continue;
					/* } else if (_2 === (124)) { */ case 38:
						_r$21 = s.switch3(18, 29, 124, 35); /* */ $s = 84; case 84: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
						tok = _r$21;
						$s = 40; continue;
					/* } else { */ case 39:
						/* */ if (!((ch === 65279))) { $s = 85; continue; }
						/* */ $s = 86; continue;
						/* if (!((ch === 65279))) { */ case 85:
							_arg = s.file.Offset(pos);
							_r$22 = fmt.Sprintf("illegal character %#U", new sliceType$1([new $Int32(ch)])); /* */ $s = 87; case 87: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
							_arg$1 = _r$22;
							$r = s.error(_arg, _arg$1); /* */ $s = 88; case 88: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 86:
						insertSemi = s.insertSemi;
						tok = 0;
						lit = ($encodeRune(ch));
					/* } */ case 40:
				case 11:
			/* } */ case 7:
		case 3:
		if (((s.mode & 2) >>> 0) === 0) {
			s.insertSemi = insertSemi;
		}
		$s = -1; return [pos, tok, lit];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.Scan }; } $f._1 = _1; $f._2 = _2; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f.ch = ch; $f.comment = comment; $f.insertSemi = insertSemi; $f.lit = lit; $f.pos = pos; $f.s = s; $f.tok = tok; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.Scan = function() { return this.$val.Scan(); };
	Error.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ErrorList.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Sort", name: "Sort", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Err", name: "Err", pkg: "", typ: $funcType([], [$error], false)}];
	ptrType.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([token.Position, $String], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "RemoveMultiples", name: "RemoveMultiples", pkg: "", typ: $funcType([], [], false)}];
	ptrType$3.methods = [{prop: "next", name: "next", pkg: "example.com/transpiler/xgtest/scanner", typ: $funcType([], [], false)}, {prop: "Init", name: "Init", pkg: "", typ: $funcType([ptrType$2, sliceType, ErrorHandler, Mode], [], false)}, {prop: "error", name: "error", pkg: "example.com/transpiler/xgtest/scanner", typ: $funcType([$Int, $String], [], false)}, {prop: "interpretLineComment", name: "interpretLineComment", pkg: "example.com/transpiler/xgtest/scanner", typ: $funcType([sliceType], [], false)}, {prop: "scanComment", name: "scanComment", pkg: "example.com/transpiler/xgtest/scanner", typ: $funcType([], [$String], false)}, {prop: "findLineEnd", name: "findLineEnd", pkg: "example.com/transpiler/xgtest/scanner", typ: $funcType([], [$Bool], false)}, {prop: "scanIdentifier", name: "scanIdentifier", pkg: "example.com/transpiler/xgtest/scanner", typ: $funcType([], [$String], false)}, {prop: "scanMantissa", name: "scanMantissa", pkg: "example.com/transpiler/xgtest/scanner", typ: $funcType([$Int], [], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "example.com/transpiler/xgtest/scanner", typ: $funcType([$Bool], [token.Token, $String], false)}, {prop: "scanEscape", name: "scanEscape", pkg: "example.com/transpiler/xgtest/scanner", typ: $funcType([$Int32], [$Bool], false)}, {prop: "scanRune", name: "scanRune", pkg: "example.com/transpiler/xgtest/scanner", typ: $funcType([], [$String], false)}, {prop: "scanString", name: "scanString", pkg: "example.com/transpiler/xgtest/scanner", typ: $funcType([], [$String], false)}, {prop: "scanRawString", name: "scanRawString", pkg: "example.com/transpiler/xgtest/scanner", typ: $funcType([], [$String], false)}, {prop: "skipWhitespace", name: "skipWhitespace", pkg: "example.com/transpiler/xgtest/scanner", typ: $funcType([], [], false)}, {prop: "switch2", name: "switch2", pkg: "example.com/transpiler/xgtest/scanner", typ: $funcType([token.Token, token.Token], [token.Token], false)}, {prop: "switch3", name: "switch3", pkg: "example.com/transpiler/xgtest/scanner", typ: $funcType([token.Token, token.Token, $Int32, token.Token], [token.Token], false)}, {prop: "switch4", name: "switch4", pkg: "example.com/transpiler/xgtest/scanner", typ: $funcType([token.Token, token.Token, $Int32, token.Token, token.Token], [token.Token], false)}, {prop: "Scan", name: "Scan", pkg: "", typ: $funcType([], [token.Pos, token.Token, $String], false)}];
	Error.init("", [{prop: "Pos", name: "Pos", anonymous: false, exported: true, typ: token.Position, tag: ""}, {prop: "Msg", name: "Msg", anonymous: false, exported: true, typ: $String, tag: ""}]);
	ErrorList.init(ptrType$1);
	ErrorHandler.init([token.Position, $String], [], false);
	Scanner.init("example.com/transpiler/xgtest/scanner", [{prop: "file", name: "file", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "dir", name: "dir", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "src", name: "src", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: ErrorHandler, tag: ""}, {prop: "mode", name: "mode", anonymous: false, exported: false, typ: Mode, tag: ""}, {prop: "ch", name: "ch", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "offset", name: "offset", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "rdOffset", name: "rdOffset", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "lineOffset", name: "lineOffset", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "insertSemi", name: "insertSemi", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "ErrorCount", name: "ErrorCount", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = token.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		prefix = (new sliceType($stringToBytes("//line ")));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["example.com/transpiler/xgtest/ast"] = (function() {
	var $pkg = {}, $init, bytes, scanner, fmt, token, io, os, reflect, sort, strconv, strings, unicode, utf8, Node, Expr, Stmt, Decl, Comment, CommentGroup, Field, FieldList, BadExpr, Ident, Ellipsis, BasicLit, FuncLit, CompositeLit, ParenExpr, SelectorExpr, IndexExpr, SliceExpr, TypeAssertExpr, CallExpr, StarExpr, UnaryExpr, BinaryExpr, KeyValueExpr, ChanDir, ArrayType, StructType, FuncType, InterfaceType, MapType, ChanType, VoidType, BadStmt, DeclStmt, EmptyStmt, LabeledStmt, ExprStmt, SendStmt, IncDecStmt, AssignStmt, GoStmt, DeferStmt, ReturnStmt, BranchStmt, BlockStmt, IfStmt, CaseClause, SwitchStmt, TypeSwitchStmt, CommClause, SelectStmt, ForStmt, RangeStmt, Spec, ImportSpec, ValueSpec, TypeSpec, BadDecl, GenDecl, FuncDecl, File, Package, Scope, Object, ObjKind, Visitor, inspector, sliceType, ptrType, sliceType$1, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, sliceType$2, ptrType$6, ptrType$9, ptrType$10, arrayType, sliceType$4, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, ptrType$23, sliceType$5, sliceType$6, ptrType$24, sliceType$7, sliceType$8, ptrType$26, ptrType$27, ptrType$28, ptrType$29, ptrType$30, ptrType$31, ptrType$32, ptrType$33, ptrType$34, ptrType$35, ptrType$36, ptrType$37, ptrType$38, ptrType$39, ptrType$40, ptrType$41, ptrType$42, ptrType$43, ptrType$44, ptrType$45, ptrType$46, ptrType$47, ptrType$48, ptrType$49, ptrType$50, ptrType$51, ptrType$52, ptrType$53, ptrType$54, ptrType$55, ptrType$56, ptrType$57, ptrType$58, ptrType$59, ptrType$60, sliceType$10, sliceType$11, sliceType$12, sliceType$13, mapType, mapType$1, objKindStrings, isWhitespace, stripTrailingWhitespace, IsExported, NewScope, NewObj, walkIdentList, walkExprList, walkStmtList, walkDeclList, Walk, Inspect;
	bytes = $packages["bytes"];
	scanner = $packages["example.com/transpiler/xgtest/scanner"];
	fmt = $packages["fmt"];
	token = $packages["go/token"];
	io = $packages["io"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Node = $pkg.Node = $newType(8, $kindInterface, "ast.Node", true, "example.com/transpiler/xgtest/ast", true, null);
	Expr = $pkg.Expr = $newType(8, $kindInterface, "ast.Expr", true, "example.com/transpiler/xgtest/ast", true, null);
	Stmt = $pkg.Stmt = $newType(8, $kindInterface, "ast.Stmt", true, "example.com/transpiler/xgtest/ast", true, null);
	Decl = $pkg.Decl = $newType(8, $kindInterface, "ast.Decl", true, "example.com/transpiler/xgtest/ast", true, null);
	Comment = $pkg.Comment = $newType(0, $kindStruct, "ast.Comment", true, "example.com/transpiler/xgtest/ast", true, function(Slash_, Text_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Slash = 0;
			this.Text = "";
			return;
		}
		this.Slash = Slash_;
		this.Text = Text_;
	});
	CommentGroup = $pkg.CommentGroup = $newType(0, $kindStruct, "ast.CommentGroup", true, "example.com/transpiler/xgtest/ast", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = sliceType$5.nil;
			return;
		}
		this.List = List_;
	});
	Field = $pkg.Field = $newType(0, $kindStruct, "ast.Field", true, "example.com/transpiler/xgtest/ast", true, function(Doc_, Names_, Type_, Tag_, Comment_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Doc = ptrType.nil;
			this.Names = sliceType$8.nil;
			this.Type = $ifaceNil;
			this.Tag = ptrType$1.nil;
			this.Comment = ptrType.nil;
			return;
		}
		this.Doc = Doc_;
		this.Names = Names_;
		this.Type = Type_;
		this.Tag = Tag_;
		this.Comment = Comment_;
	});
	FieldList = $pkg.FieldList = $newType(0, $kindStruct, "ast.FieldList", true, "example.com/transpiler/xgtest/ast", true, function(Opening_, List_, Closing_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Opening = 0;
			this.List = sliceType$10.nil;
			this.Closing = 0;
			return;
		}
		this.Opening = Opening_;
		this.List = List_;
		this.Closing = Closing_;
	});
	BadExpr = $pkg.BadExpr = $newType(0, $kindStruct, "ast.BadExpr", true, "example.com/transpiler/xgtest/ast", true, function(From_, To_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.From = 0;
			this.To = 0;
			return;
		}
		this.From = From_;
		this.To = To_;
	});
	Ident = $pkg.Ident = $newType(0, $kindStruct, "ast.Ident", true, "example.com/transpiler/xgtest/ast", true, function(NamePos_, Name_, Obj_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NamePos = 0;
			this.Name = "";
			this.Obj = ptrType$3.nil;
			return;
		}
		this.NamePos = NamePos_;
		this.Name = Name_;
		this.Obj = Obj_;
	});
	Ellipsis = $pkg.Ellipsis = $newType(0, $kindStruct, "ast.Ellipsis", true, "example.com/transpiler/xgtest/ast", true, function(Ellipsis_, Elt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Ellipsis = 0;
			this.Elt = $ifaceNil;
			return;
		}
		this.Ellipsis = Ellipsis_;
		this.Elt = Elt_;
	});
	BasicLit = $pkg.BasicLit = $newType(0, $kindStruct, "ast.BasicLit", true, "example.com/transpiler/xgtest/ast", true, function(ValuePos_, Kind_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ValuePos = 0;
			this.Kind = 0;
			this.Value = "";
			return;
		}
		this.ValuePos = ValuePos_;
		this.Kind = Kind_;
		this.Value = Value_;
	});
	FuncLit = $pkg.FuncLit = $newType(0, $kindStruct, "ast.FuncLit", true, "example.com/transpiler/xgtest/ast", true, function(Type_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = ptrType$16.nil;
			this.Body = ptrType$5.nil;
			return;
		}
		this.Type = Type_;
		this.Body = Body_;
	});
	CompositeLit = $pkg.CompositeLit = $newType(0, $kindStruct, "ast.CompositeLit", true, "example.com/transpiler/xgtest/ast", true, function(Type_, Lbrace_, Elts_, Rbrace_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = $ifaceNil;
			this.Lbrace = 0;
			this.Elts = sliceType$11.nil;
			this.Rbrace = 0;
			return;
		}
		this.Type = Type_;
		this.Lbrace = Lbrace_;
		this.Elts = Elts_;
		this.Rbrace = Rbrace_;
	});
	ParenExpr = $pkg.ParenExpr = $newType(0, $kindStruct, "ast.ParenExpr", true, "example.com/transpiler/xgtest/ast", true, function(Lparen_, X_, Rparen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lparen = 0;
			this.X = $ifaceNil;
			this.Rparen = 0;
			return;
		}
		this.Lparen = Lparen_;
		this.X = X_;
		this.Rparen = Rparen_;
	});
	SelectorExpr = $pkg.SelectorExpr = $newType(0, $kindStruct, "ast.SelectorExpr", true, "example.com/transpiler/xgtest/ast", true, function(X_, Sel_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = $ifaceNil;
			this.Sel = ptrType$4.nil;
			return;
		}
		this.X = X_;
		this.Sel = Sel_;
	});
	IndexExpr = $pkg.IndexExpr = $newType(0, $kindStruct, "ast.IndexExpr", true, "example.com/transpiler/xgtest/ast", true, function(X_, Lbrack_, Index_, Rbrack_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = $ifaceNil;
			this.Lbrack = 0;
			this.Index = $ifaceNil;
			this.Rbrack = 0;
			return;
		}
		this.X = X_;
		this.Lbrack = Lbrack_;
		this.Index = Index_;
		this.Rbrack = Rbrack_;
	});
	SliceExpr = $pkg.SliceExpr = $newType(0, $kindStruct, "ast.SliceExpr", true, "example.com/transpiler/xgtest/ast", true, function(X_, Lbrack_, Low_, High_, Max_, Slice3_, Rbrack_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = $ifaceNil;
			this.Lbrack = 0;
			this.Low = $ifaceNil;
			this.High = $ifaceNil;
			this.Max = $ifaceNil;
			this.Slice3 = false;
			this.Rbrack = 0;
			return;
		}
		this.X = X_;
		this.Lbrack = Lbrack_;
		this.Low = Low_;
		this.High = High_;
		this.Max = Max_;
		this.Slice3 = Slice3_;
		this.Rbrack = Rbrack_;
	});
	TypeAssertExpr = $pkg.TypeAssertExpr = $newType(0, $kindStruct, "ast.TypeAssertExpr", true, "example.com/transpiler/xgtest/ast", true, function(X_, Lparen_, Type_, Rparen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = $ifaceNil;
			this.Lparen = 0;
			this.Type = $ifaceNil;
			this.Rparen = 0;
			return;
		}
		this.X = X_;
		this.Lparen = Lparen_;
		this.Type = Type_;
		this.Rparen = Rparen_;
	});
	CallExpr = $pkg.CallExpr = $newType(0, $kindStruct, "ast.CallExpr", true, "example.com/transpiler/xgtest/ast", true, function(Fun_, Lparen_, Args_, Ellipsis_, Rparen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Fun = $ifaceNil;
			this.Lparen = 0;
			this.Args = sliceType$11.nil;
			this.Ellipsis = 0;
			this.Rparen = 0;
			return;
		}
		this.Fun = Fun_;
		this.Lparen = Lparen_;
		this.Args = Args_;
		this.Ellipsis = Ellipsis_;
		this.Rparen = Rparen_;
	});
	StarExpr = $pkg.StarExpr = $newType(0, $kindStruct, "ast.StarExpr", true, "example.com/transpiler/xgtest/ast", true, function(Star_, X_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Star = 0;
			this.X = $ifaceNil;
			return;
		}
		this.Star = Star_;
		this.X = X_;
	});
	UnaryExpr = $pkg.UnaryExpr = $newType(0, $kindStruct, "ast.UnaryExpr", true, "example.com/transpiler/xgtest/ast", true, function(OpPos_, Op_, X_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.OpPos = 0;
			this.Op = 0;
			this.X = $ifaceNil;
			return;
		}
		this.OpPos = OpPos_;
		this.Op = Op_;
		this.X = X_;
	});
	BinaryExpr = $pkg.BinaryExpr = $newType(0, $kindStruct, "ast.BinaryExpr", true, "example.com/transpiler/xgtest/ast", true, function(X_, OpPos_, Op_, Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = $ifaceNil;
			this.OpPos = 0;
			this.Op = 0;
			this.Y = $ifaceNil;
			return;
		}
		this.X = X_;
		this.OpPos = OpPos_;
		this.Op = Op_;
		this.Y = Y_;
	});
	KeyValueExpr = $pkg.KeyValueExpr = $newType(0, $kindStruct, "ast.KeyValueExpr", true, "example.com/transpiler/xgtest/ast", true, function(Key_, Colon_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Key = $ifaceNil;
			this.Colon = 0;
			this.Value = $ifaceNil;
			return;
		}
		this.Key = Key_;
		this.Colon = Colon_;
		this.Value = Value_;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "ast.ChanDir", true, "example.com/transpiler/xgtest/ast", true, null);
	ArrayType = $pkg.ArrayType = $newType(0, $kindStruct, "ast.ArrayType", true, "example.com/transpiler/xgtest/ast", true, function(Lbrack_, Len_, Elt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lbrack = 0;
			this.Len = $ifaceNil;
			this.Elt = $ifaceNil;
			return;
		}
		this.Lbrack = Lbrack_;
		this.Len = Len_;
		this.Elt = Elt_;
	});
	StructType = $pkg.StructType = $newType(0, $kindStruct, "ast.StructType", true, "example.com/transpiler/xgtest/ast", true, function(Struct_, Fields_, Incomplete_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = 0;
			this.Fields = ptrType$2.nil;
			this.Incomplete = false;
			return;
		}
		this.Struct = Struct_;
		this.Fields = Fields_;
		this.Incomplete = Incomplete_;
	});
	FuncType = $pkg.FuncType = $newType(0, $kindStruct, "ast.FuncType", true, "example.com/transpiler/xgtest/ast", true, function(Func_, Params_, Results_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Func = 0;
			this.Params = ptrType$2.nil;
			this.Results = ptrType$2.nil;
			return;
		}
		this.Func = Func_;
		this.Params = Params_;
		this.Results = Results_;
	});
	InterfaceType = $pkg.InterfaceType = $newType(0, $kindStruct, "ast.InterfaceType", true, "example.com/transpiler/xgtest/ast", true, function(Interface_, Methods_, Incomplete_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Interface = 0;
			this.Methods = ptrType$2.nil;
			this.Incomplete = false;
			return;
		}
		this.Interface = Interface_;
		this.Methods = Methods_;
		this.Incomplete = Incomplete_;
	});
	MapType = $pkg.MapType = $newType(0, $kindStruct, "ast.MapType", true, "example.com/transpiler/xgtest/ast", true, function(Map_, Key_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Map = 0;
			this.Key = $ifaceNil;
			this.Value = $ifaceNil;
			return;
		}
		this.Map = Map_;
		this.Key = Key_;
		this.Value = Value_;
	});
	ChanType = $pkg.ChanType = $newType(0, $kindStruct, "ast.ChanType", true, "example.com/transpiler/xgtest/ast", true, function(Begin_, Arrow_, Dir_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Begin = 0;
			this.Arrow = 0;
			this.Dir = 0;
			this.Value = $ifaceNil;
			return;
		}
		this.Begin = Begin_;
		this.Arrow = Arrow_;
		this.Dir = Dir_;
		this.Value = Value_;
	});
	VoidType = $pkg.VoidType = $newType(0, $kindStruct, "ast.VoidType", true, "example.com/transpiler/xgtest/ast", true, function(Begin_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Begin = 0;
			return;
		}
		this.Begin = Begin_;
	});
	BadStmt = $pkg.BadStmt = $newType(0, $kindStruct, "ast.BadStmt", true, "example.com/transpiler/xgtest/ast", true, function(From_, To_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.From = 0;
			this.To = 0;
			return;
		}
		this.From = From_;
		this.To = To_;
	});
	DeclStmt = $pkg.DeclStmt = $newType(0, $kindStruct, "ast.DeclStmt", true, "example.com/transpiler/xgtest/ast", true, function(Decl_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Decl = $ifaceNil;
			return;
		}
		this.Decl = Decl_;
	});
	EmptyStmt = $pkg.EmptyStmt = $newType(0, $kindStruct, "ast.EmptyStmt", true, "example.com/transpiler/xgtest/ast", true, function(Semicolon_, Implicit_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Semicolon = 0;
			this.Implicit = false;
			return;
		}
		this.Semicolon = Semicolon_;
		this.Implicit = Implicit_;
	});
	LabeledStmt = $pkg.LabeledStmt = $newType(0, $kindStruct, "ast.LabeledStmt", true, "example.com/transpiler/xgtest/ast", true, function(Label_, Colon_, Stmt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Label = ptrType$4.nil;
			this.Colon = 0;
			this.Stmt = $ifaceNil;
			return;
		}
		this.Label = Label_;
		this.Colon = Colon_;
		this.Stmt = Stmt_;
	});
	ExprStmt = $pkg.ExprStmt = $newType(0, $kindStruct, "ast.ExprStmt", true, "example.com/transpiler/xgtest/ast", true, function(X_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = $ifaceNil;
			return;
		}
		this.X = X_;
	});
	SendStmt = $pkg.SendStmt = $newType(0, $kindStruct, "ast.SendStmt", true, "example.com/transpiler/xgtest/ast", true, function(Chan_, Arrow_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Chan = $ifaceNil;
			this.Arrow = 0;
			this.Value = $ifaceNil;
			return;
		}
		this.Chan = Chan_;
		this.Arrow = Arrow_;
		this.Value = Value_;
	});
	IncDecStmt = $pkg.IncDecStmt = $newType(0, $kindStruct, "ast.IncDecStmt", true, "example.com/transpiler/xgtest/ast", true, function(X_, TokPos_, Tok_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = $ifaceNil;
			this.TokPos = 0;
			this.Tok = 0;
			return;
		}
		this.X = X_;
		this.TokPos = TokPos_;
		this.Tok = Tok_;
	});
	AssignStmt = $pkg.AssignStmt = $newType(0, $kindStruct, "ast.AssignStmt", true, "example.com/transpiler/xgtest/ast", true, function(Lhs_, TokPos_, Tok_, Rhs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lhs = sliceType$11.nil;
			this.TokPos = 0;
			this.Tok = 0;
			this.Rhs = sliceType$11.nil;
			return;
		}
		this.Lhs = Lhs_;
		this.TokPos = TokPos_;
		this.Tok = Tok_;
		this.Rhs = Rhs_;
	});
	GoStmt = $pkg.GoStmt = $newType(0, $kindStruct, "ast.GoStmt", true, "example.com/transpiler/xgtest/ast", true, function(Go_, Call_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Go = 0;
			this.Call = ptrType$36.nil;
			return;
		}
		this.Go = Go_;
		this.Call = Call_;
	});
	DeferStmt = $pkg.DeferStmt = $newType(0, $kindStruct, "ast.DeferStmt", true, "example.com/transpiler/xgtest/ast", true, function(Defer_, Call_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Defer = 0;
			this.Call = ptrType$36.nil;
			return;
		}
		this.Defer = Defer_;
		this.Call = Call_;
	});
	ReturnStmt = $pkg.ReturnStmt = $newType(0, $kindStruct, "ast.ReturnStmt", true, "example.com/transpiler/xgtest/ast", true, function(Return_, Results_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Return = 0;
			this.Results = sliceType$11.nil;
			return;
		}
		this.Return = Return_;
		this.Results = Results_;
	});
	BranchStmt = $pkg.BranchStmt = $newType(0, $kindStruct, "ast.BranchStmt", true, "example.com/transpiler/xgtest/ast", true, function(TokPos_, Tok_, Label_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.TokPos = 0;
			this.Tok = 0;
			this.Label = ptrType$4.nil;
			return;
		}
		this.TokPos = TokPos_;
		this.Tok = Tok_;
		this.Label = Label_;
	});
	BlockStmt = $pkg.BlockStmt = $newType(0, $kindStruct, "ast.BlockStmt", true, "example.com/transpiler/xgtest/ast", true, function(Lbrace_, List_, Rbrace_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lbrace = 0;
			this.List = sliceType$12.nil;
			this.Rbrace = 0;
			return;
		}
		this.Lbrace = Lbrace_;
		this.List = List_;
		this.Rbrace = Rbrace_;
	});
	IfStmt = $pkg.IfStmt = $newType(0, $kindStruct, "ast.IfStmt", true, "example.com/transpiler/xgtest/ast", true, function(If_, Init_, Cond_, Body_, Else_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.If = 0;
			this.Init = $ifaceNil;
			this.Cond = $ifaceNil;
			this.Body = ptrType$5.nil;
			this.Else = $ifaceNil;
			return;
		}
		this.If = If_;
		this.Init = Init_;
		this.Cond = Cond_;
		this.Body = Body_;
		this.Else = Else_;
	});
	CaseClause = $pkg.CaseClause = $newType(0, $kindStruct, "ast.CaseClause", true, "example.com/transpiler/xgtest/ast", true, function(Case_, List_, Colon_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Case = 0;
			this.List = sliceType$11.nil;
			this.Colon = 0;
			this.Body = sliceType$12.nil;
			return;
		}
		this.Case = Case_;
		this.List = List_;
		this.Colon = Colon_;
		this.Body = Body_;
	});
	SwitchStmt = $pkg.SwitchStmt = $newType(0, $kindStruct, "ast.SwitchStmt", true, "example.com/transpiler/xgtest/ast", true, function(Switch_, Init_, Tag_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Switch = 0;
			this.Init = $ifaceNil;
			this.Tag = $ifaceNil;
			this.Body = ptrType$5.nil;
			return;
		}
		this.Switch = Switch_;
		this.Init = Init_;
		this.Tag = Tag_;
		this.Body = Body_;
	});
	TypeSwitchStmt = $pkg.TypeSwitchStmt = $newType(0, $kindStruct, "ast.TypeSwitchStmt", true, "example.com/transpiler/xgtest/ast", true, function(Switch_, Init_, Assign_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Switch = 0;
			this.Init = $ifaceNil;
			this.Assign = $ifaceNil;
			this.Body = ptrType$5.nil;
			return;
		}
		this.Switch = Switch_;
		this.Init = Init_;
		this.Assign = Assign_;
		this.Body = Body_;
	});
	CommClause = $pkg.CommClause = $newType(0, $kindStruct, "ast.CommClause", true, "example.com/transpiler/xgtest/ast", true, function(Case_, Comm_, Colon_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Case = 0;
			this.Comm = $ifaceNil;
			this.Colon = 0;
			this.Body = sliceType$12.nil;
			return;
		}
		this.Case = Case_;
		this.Comm = Comm_;
		this.Colon = Colon_;
		this.Body = Body_;
	});
	SelectStmt = $pkg.SelectStmt = $newType(0, $kindStruct, "ast.SelectStmt", true, "example.com/transpiler/xgtest/ast", true, function(Select_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Select = 0;
			this.Body = ptrType$5.nil;
			return;
		}
		this.Select = Select_;
		this.Body = Body_;
	});
	ForStmt = $pkg.ForStmt = $newType(0, $kindStruct, "ast.ForStmt", true, "example.com/transpiler/xgtest/ast", true, function(For_, Init_, Cond_, Post_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.For = 0;
			this.Init = $ifaceNil;
			this.Cond = $ifaceNil;
			this.Post = $ifaceNil;
			this.Body = ptrType$5.nil;
			return;
		}
		this.For = For_;
		this.Init = Init_;
		this.Cond = Cond_;
		this.Post = Post_;
		this.Body = Body_;
	});
	RangeStmt = $pkg.RangeStmt = $newType(0, $kindStruct, "ast.RangeStmt", true, "example.com/transpiler/xgtest/ast", true, function(For_, Key_, Value_, TokPos_, Tok_, X_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.For = 0;
			this.Key = $ifaceNil;
			this.Value = $ifaceNil;
			this.TokPos = 0;
			this.Tok = 0;
			this.X = $ifaceNil;
			this.Body = ptrType$5.nil;
			return;
		}
		this.For = For_;
		this.Key = Key_;
		this.Value = Value_;
		this.TokPos = TokPos_;
		this.Tok = Tok_;
		this.X = X_;
		this.Body = Body_;
	});
	Spec = $pkg.Spec = $newType(8, $kindInterface, "ast.Spec", true, "example.com/transpiler/xgtest/ast", true, null);
	ImportSpec = $pkg.ImportSpec = $newType(0, $kindStruct, "ast.ImportSpec", true, "example.com/transpiler/xgtest/ast", true, function(Doc_, Name_, Path_, Comment_, EndPos_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Doc = ptrType.nil;
			this.Name = ptrType$4.nil;
			this.Path = ptrType$1.nil;
			this.Comment = ptrType.nil;
			this.EndPos = 0;
			return;
		}
		this.Doc = Doc_;
		this.Name = Name_;
		this.Path = Path_;
		this.Comment = Comment_;
		this.EndPos = EndPos_;
	});
	ValueSpec = $pkg.ValueSpec = $newType(0, $kindStruct, "ast.ValueSpec", true, "example.com/transpiler/xgtest/ast", true, function(Doc_, Names_, Type_, Values_, Comment_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Doc = ptrType.nil;
			this.Names = sliceType$8.nil;
			this.Type = $ifaceNil;
			this.Values = sliceType$11.nil;
			this.Comment = ptrType.nil;
			return;
		}
		this.Doc = Doc_;
		this.Names = Names_;
		this.Type = Type_;
		this.Values = Values_;
		this.Comment = Comment_;
	});
	TypeSpec = $pkg.TypeSpec = $newType(0, $kindStruct, "ast.TypeSpec", true, "example.com/transpiler/xgtest/ast", true, function(Doc_, Name_, Assign_, Type_, Comment_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Doc = ptrType.nil;
			this.Name = ptrType$4.nil;
			this.Assign = 0;
			this.Type = $ifaceNil;
			this.Comment = ptrType.nil;
			return;
		}
		this.Doc = Doc_;
		this.Name = Name_;
		this.Assign = Assign_;
		this.Type = Type_;
		this.Comment = Comment_;
	});
	BadDecl = $pkg.BadDecl = $newType(0, $kindStruct, "ast.BadDecl", true, "example.com/transpiler/xgtest/ast", true, function(From_, To_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.From = 0;
			this.To = 0;
			return;
		}
		this.From = From_;
		this.To = To_;
	});
	GenDecl = $pkg.GenDecl = $newType(0, $kindStruct, "ast.GenDecl", true, "example.com/transpiler/xgtest/ast", true, function(Doc_, TokPos_, Tok_, Lparen_, Specs_, Rparen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Doc = ptrType.nil;
			this.TokPos = 0;
			this.Tok = 0;
			this.Lparen = 0;
			this.Specs = sliceType$13.nil;
			this.Rparen = 0;
			return;
		}
		this.Doc = Doc_;
		this.TokPos = TokPos_;
		this.Tok = Tok_;
		this.Lparen = Lparen_;
		this.Specs = Specs_;
		this.Rparen = Rparen_;
	});
	FuncDecl = $pkg.FuncDecl = $newType(0, $kindStruct, "ast.FuncDecl", true, "example.com/transpiler/xgtest/ast", true, function(Doc_, Recv_, Name_, Type_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Doc = ptrType.nil;
			this.Recv = ptrType$2.nil;
			this.Name = ptrType$4.nil;
			this.Type = ptrType$16.nil;
			this.Body = ptrType$5.nil;
			return;
		}
		this.Doc = Doc_;
		this.Recv = Recv_;
		this.Name = Name_;
		this.Type = Type_;
		this.Body = Body_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "ast.File", true, "example.com/transpiler/xgtest/ast", true, function(Doc_, Package_, Name_, Decls_, Scope_, Imports_, Unresolved_, Comments_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Doc = ptrType.nil;
			this.Package = 0;
			this.Name = ptrType$4.nil;
			this.Decls = sliceType$6.nil;
			this.Scope = ptrType$26.nil;
			this.Imports = sliceType$7.nil;
			this.Unresolved = sliceType$8.nil;
			this.Comments = sliceType$2.nil;
			return;
		}
		this.Doc = Doc_;
		this.Package = Package_;
		this.Name = Name_;
		this.Decls = Decls_;
		this.Scope = Scope_;
		this.Imports = Imports_;
		this.Unresolved = Unresolved_;
		this.Comments = Comments_;
	});
	Package = $pkg.Package = $newType(0, $kindStruct, "ast.Package", true, "example.com/transpiler/xgtest/ast", true, function(Name_, Scope_, Imports_, Files_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Scope = ptrType$26.nil;
			this.Imports = false;
			this.Files = false;
			return;
		}
		this.Name = Name_;
		this.Scope = Scope_;
		this.Imports = Imports_;
		this.Files = Files_;
	});
	Scope = $pkg.Scope = $newType(0, $kindStruct, "ast.Scope", true, "example.com/transpiler/xgtest/ast", true, function(Outer_, Objects_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Outer = ptrType$26.nil;
			this.Objects = false;
			return;
		}
		this.Outer = Outer_;
		this.Objects = Objects_;
	});
	Object = $pkg.Object = $newType(0, $kindStruct, "ast.Object", true, "example.com/transpiler/xgtest/ast", true, function(Kind_, Name_, Decl_, Data_, Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Kind = 0;
			this.Name = "";
			this.Decl = $ifaceNil;
			this.Data = $ifaceNil;
			this.Type = $ifaceNil;
			return;
		}
		this.Kind = Kind_;
		this.Name = Name_;
		this.Decl = Decl_;
		this.Data = Data_;
		this.Type = Type_;
	});
	ObjKind = $pkg.ObjKind = $newType(4, $kindInt, "ast.ObjKind", true, "example.com/transpiler/xgtest/ast", true, null);
	Visitor = $pkg.Visitor = $newType(8, $kindInterface, "ast.Visitor", true, "example.com/transpiler/xgtest/ast", true, null);
	inspector = $pkg.inspector = $newType(4, $kindFunc, "ast.inspector", true, "example.com/transpiler/xgtest/ast", false, null);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(CommentGroup);
	sliceType$1 = $sliceType($String);
	ptrType$1 = $ptrType(BasicLit);
	ptrType$2 = $ptrType(FieldList);
	ptrType$3 = $ptrType(Object);
	ptrType$4 = $ptrType(Ident);
	ptrType$5 = $ptrType(BlockStmt);
	sliceType$2 = $sliceType(ptrType);
	ptrType$6 = $ptrType(Comment);
	ptrType$9 = $ptrType(File);
	ptrType$10 = $ptrType(Field);
	arrayType = $arrayType($Uint8, 64);
	sliceType$4 = $sliceType($emptyInterface);
	ptrType$11 = $ptrType(SelectorExpr);
	ptrType$12 = $ptrType(StarExpr);
	ptrType$13 = $ptrType(ParenExpr);
	ptrType$14 = $ptrType(ArrayType);
	ptrType$15 = $ptrType(StructType);
	ptrType$16 = $ptrType(FuncType);
	ptrType$17 = $ptrType(InterfaceType);
	ptrType$18 = $ptrType(MapType);
	ptrType$19 = $ptrType(ChanType);
	ptrType$20 = $ptrType(ValueSpec);
	ptrType$21 = $ptrType(TypeSpec);
	ptrType$22 = $ptrType(GenDecl);
	ptrType$23 = $ptrType(FuncDecl);
	sliceType$5 = $sliceType(ptrType$6);
	sliceType$6 = $sliceType(Decl);
	ptrType$24 = $ptrType(ImportSpec);
	sliceType$7 = $sliceType(ptrType$24);
	sliceType$8 = $sliceType(ptrType$4);
	ptrType$26 = $ptrType(Scope);
	ptrType$27 = $ptrType(LabeledStmt);
	ptrType$28 = $ptrType(AssignStmt);
	ptrType$29 = $ptrType(BadExpr);
	ptrType$30 = $ptrType(Ellipsis);
	ptrType$31 = $ptrType(FuncLit);
	ptrType$32 = $ptrType(CompositeLit);
	ptrType$33 = $ptrType(IndexExpr);
	ptrType$34 = $ptrType(SliceExpr);
	ptrType$35 = $ptrType(TypeAssertExpr);
	ptrType$36 = $ptrType(CallExpr);
	ptrType$37 = $ptrType(UnaryExpr);
	ptrType$38 = $ptrType(BinaryExpr);
	ptrType$39 = $ptrType(KeyValueExpr);
	ptrType$40 = $ptrType(VoidType);
	ptrType$41 = $ptrType(BadStmt);
	ptrType$42 = $ptrType(DeclStmt);
	ptrType$43 = $ptrType(EmptyStmt);
	ptrType$44 = $ptrType(ExprStmt);
	ptrType$45 = $ptrType(SendStmt);
	ptrType$46 = $ptrType(IncDecStmt);
	ptrType$47 = $ptrType(GoStmt);
	ptrType$48 = $ptrType(DeferStmt);
	ptrType$49 = $ptrType(ReturnStmt);
	ptrType$50 = $ptrType(BranchStmt);
	ptrType$51 = $ptrType(IfStmt);
	ptrType$52 = $ptrType(CaseClause);
	ptrType$53 = $ptrType(SwitchStmt);
	ptrType$54 = $ptrType(TypeSwitchStmt);
	ptrType$55 = $ptrType(CommClause);
	ptrType$56 = $ptrType(SelectStmt);
	ptrType$57 = $ptrType(ForStmt);
	ptrType$58 = $ptrType(RangeStmt);
	ptrType$59 = $ptrType(BadDecl);
	ptrType$60 = $ptrType(Package);
	sliceType$10 = $sliceType(ptrType$10);
	sliceType$11 = $sliceType(Expr);
	sliceType$12 = $sliceType(Stmt);
	sliceType$13 = $sliceType(Spec);
	mapType = $mapType($String, ptrType$3);
	mapType$1 = $mapType($String, ptrType$9);
	Comment.ptr.prototype.Pos = function() {
		var c;
		c = this;
		return c.Slash;
	};
	Comment.prototype.Pos = function() { return this.$val.Pos(); };
	Comment.ptr.prototype.End = function() {
		var c;
		c = this;
		return (((((c.Slash >> 0)) + c.Text.length >> 0) >> 0));
	};
	Comment.prototype.End = function() { return this.$val.End(); };
	CommentGroup.ptr.prototype.Pos = function() {
		var g, x;
		g = this;
		return (x = g.List, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).Pos();
	};
	CommentGroup.prototype.Pos = function() { return this.$val.Pos(); };
	CommentGroup.ptr.prototype.End = function() {
		var g, x, x$1;
		g = this;
		return (x = g.List, x$1 = g.List.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).End();
	};
	CommentGroup.prototype.End = function() { return this.$val.End(); };
	isWhitespace = function(ch) {
		var ch;
		return (ch === 32) || (ch === 9) || (ch === 10) || (ch === 13);
	};
	stripTrailingWhitespace = function(s) {
		var i, s;
		i = s.length;
		while (true) {
			if (!(i > 0 && isWhitespace(s.charCodeAt((i - 1 >> 0))))) { break; }
			i = i - (1) >> 0;
		}
		return $substring(s, 0, i);
	};
	CommentGroup.ptr.prototype.Text = function() {
		var _1, _i, _i$1, _i$2, _i$3, _ref, _ref$1, _ref$2, _ref$3, c, c$1, cl, comments, g, i, l, line, lines, n, x, x$1;
		g = this;
		if (g === ptrType.nil) {
			return "";
		}
		comments = $makeSlice(sliceType$1, g.List.$length);
		_ref = g.List;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= comments.$length) ? ($throwRuntimeError("index out of range"), undefined) : comments.$array[comments.$offset + i] = c.Text);
			_i++;
		}
		lines = $makeSlice(sliceType$1, 0, 10);
		_ref$1 = comments;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			_1 = c$1.charCodeAt(1);
			if (_1 === (47)) {
				c$1 = $substring(c$1, 2);
				if (c$1.length > 0 && (c$1.charCodeAt(0) === 32)) {
					c$1 = $substring(c$1, 1);
				}
			} else if (_1 === (42)) {
				c$1 = $substring(c$1, 2, (c$1.length - 2 >> 0));
			}
			cl = strings.Split(c$1, "\n");
			_ref$2 = cl;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				l = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
				lines = $append(lines, stripTrailingWhitespace(l));
				_i$2++;
			}
			_i$1++;
		}
		n = 0;
		_ref$3 = lines;
		_i$3 = 0;
		while (true) {
			if (!(_i$3 < _ref$3.$length)) { break; }
			line = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$3]);
			if (!(line === "") || n > 0 && !((x = n - 1 >> 0, ((x < 0 || x >= lines.$length) ? ($throwRuntimeError("index out of range"), undefined) : lines.$array[lines.$offset + x])) === "")) {
				((n < 0 || n >= lines.$length) ? ($throwRuntimeError("index out of range"), undefined) : lines.$array[lines.$offset + n] = line);
				n = n + (1) >> 0;
			}
			_i$3++;
		}
		lines = $subslice(lines, 0, n);
		if (n > 0 && !((x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= lines.$length) ? ($throwRuntimeError("index out of range"), undefined) : lines.$array[lines.$offset + x$1])) === "")) {
			lines = $append(lines, "");
		}
		return strings.Join(lines, "\n");
	};
	CommentGroup.prototype.Text = function() { return this.$val.Text(); };
	Field.ptr.prototype.Pos = function() {
		var _r, f, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f.Names.$length > 0) {
			$s = -1; return (x = f.Names, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).Pos();
		}
		_r = f.Type.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field.ptr.prototype.Pos }; } $f._r = _r; $f.f = f; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field.prototype.Pos = function() { return this.$val.Pos(); };
	Field.ptr.prototype.End = function() {
		var _r, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (!(f.Tag === ptrType$1.nil)) {
			$s = -1; return f.Tag.End();
		}
		_r = f.Type.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field.ptr.prototype.End }; } $f._r = _r; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field.prototype.End = function() { return this.$val.End(); };
	FieldList.ptr.prototype.Pos = function() {
		var _r, f, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (new token.Pos(f.Opening).IsValid()) {
			$s = -1; return f.Opening;
		}
		/* */ if (f.List.$length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (f.List.$length > 0) { */ case 1:
			_r = (x = f.List, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).Pos(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FieldList.ptr.prototype.Pos }; } $f._r = _r; $f.f = f; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	FieldList.prototype.Pos = function() { return this.$val.Pos(); };
	FieldList.ptr.prototype.End = function() {
		var _r, f, n, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; n = $f.n; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (new token.Pos(f.Closing).IsValid()) {
			$s = -1; return f.Closing + 1 >> 0;
		}
		n = f.List.$length;
		/* */ if (n > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n > 0) { */ case 1:
			_r = (x = f.List, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).End(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FieldList.ptr.prototype.End }; } $f._r = _r; $f.f = f; $f.n = n; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	FieldList.prototype.End = function() { return this.$val.End(); };
	FieldList.ptr.prototype.NumFields = function() {
		var _i, _ref, f, g, m, n;
		f = this;
		n = 0;
		if (!(f === ptrType$2.nil)) {
			_ref = f.List;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				g = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				m = g.Names.$length;
				if (m === 0) {
					m = 1;
				}
				n = n + (m) >> 0;
				_i++;
			}
		}
		return n;
	};
	FieldList.prototype.NumFields = function() { return this.$val.NumFields(); };
	BadExpr.ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.From;
	};
	BadExpr.prototype.Pos = function() { return this.$val.Pos(); };
	Ident.ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.NamePos;
	};
	Ident.prototype.Pos = function() { return this.$val.Pos(); };
	Ellipsis.ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.Ellipsis;
	};
	Ellipsis.prototype.Pos = function() { return this.$val.Pos(); };
	BasicLit.ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.ValuePos;
	};
	BasicLit.prototype.Pos = function() { return this.$val.Pos(); };
	FuncLit.ptr.prototype.Pos = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Type.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncLit.ptr.prototype.Pos }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	FuncLit.prototype.Pos = function() { return this.$val.Pos(); };
	CompositeLit.ptr.prototype.Pos = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (!($interfaceIsEqual(x.Type, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(x.Type, $ifaceNil))) { */ case 1:
			_r = x.Type.Pos(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		$s = -1; return x.Lbrace;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CompositeLit.ptr.prototype.Pos }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	CompositeLit.prototype.Pos = function() { return this.$val.Pos(); };
	ParenExpr.ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.Lparen;
	};
	ParenExpr.prototype.Pos = function() { return this.$val.Pos(); };
	SelectorExpr.ptr.prototype.Pos = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.X.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SelectorExpr.ptr.prototype.Pos }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	SelectorExpr.prototype.Pos = function() { return this.$val.Pos(); };
	IndexExpr.ptr.prototype.Pos = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.X.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IndexExpr.ptr.prototype.Pos }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	IndexExpr.prototype.Pos = function() { return this.$val.Pos(); };
	SliceExpr.ptr.prototype.Pos = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.X.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SliceExpr.ptr.prototype.Pos }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	SliceExpr.prototype.Pos = function() { return this.$val.Pos(); };
	TypeAssertExpr.ptr.prototype.Pos = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.X.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TypeAssertExpr.ptr.prototype.Pos }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	TypeAssertExpr.prototype.Pos = function() { return this.$val.Pos(); };
	CallExpr.ptr.prototype.Pos = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Fun.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CallExpr.ptr.prototype.Pos }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	CallExpr.prototype.Pos = function() { return this.$val.Pos(); };
	StarExpr.ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.Star;
	};
	StarExpr.prototype.Pos = function() { return this.$val.Pos(); };
	UnaryExpr.ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.OpPos;
	};
	UnaryExpr.prototype.Pos = function() { return this.$val.Pos(); };
	BinaryExpr.ptr.prototype.Pos = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.X.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BinaryExpr.ptr.prototype.Pos }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	BinaryExpr.prototype.Pos = function() { return this.$val.Pos(); };
	KeyValueExpr.ptr.prototype.Pos = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Key.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: KeyValueExpr.ptr.prototype.Pos }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	KeyValueExpr.prototype.Pos = function() { return this.$val.Pos(); };
	ArrayType.ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.Lbrack;
	};
	ArrayType.prototype.Pos = function() { return this.$val.Pos(); };
	StructType.ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.Struct;
	};
	StructType.prototype.Pos = function() { return this.$val.Pos(); };
	FuncType.ptr.prototype.Pos = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if (new token.Pos(x.Func).IsValid() || x.Params === ptrType$2.nil) {
			$s = -1; return x.Func;
		}
		_r = x.Params.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncType.ptr.prototype.Pos }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	FuncType.prototype.Pos = function() { return this.$val.Pos(); };
	InterfaceType.ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.Interface;
	};
	InterfaceType.prototype.Pos = function() { return this.$val.Pos(); };
	MapType.ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.Map;
	};
	MapType.prototype.Pos = function() { return this.$val.Pos(); };
	ChanType.ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.Begin;
	};
	ChanType.prototype.Pos = function() { return this.$val.Pos(); };
	VoidType.ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.Begin;
	};
	VoidType.prototype.Pos = function() { return this.$val.Pos(); };
	BadExpr.ptr.prototype.End = function() {
		var x;
		x = this;
		return x.To;
	};
	BadExpr.prototype.End = function() { return this.$val.End(); };
	Ident.ptr.prototype.End = function() {
		var x;
		x = this;
		return (((((x.NamePos >> 0)) + x.Name.length >> 0) >> 0));
	};
	Ident.prototype.End = function() { return this.$val.End(); };
	Ellipsis.ptr.prototype.End = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (!($interfaceIsEqual(x.Elt, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(x.Elt, $ifaceNil))) { */ case 1:
			_r = x.Elt.End(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		$s = -1; return x.Ellipsis + 3 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Ellipsis.ptr.prototype.End }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Ellipsis.prototype.End = function() { return this.$val.End(); };
	BasicLit.ptr.prototype.End = function() {
		var x;
		x = this;
		return (((((x.ValuePos >> 0)) + x.Value.length >> 0) >> 0));
	};
	BasicLit.prototype.End = function() { return this.$val.End(); };
	FuncLit.ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Body.End();
	};
	FuncLit.prototype.End = function() { return this.$val.End(); };
	CompositeLit.ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Rbrace + 1 >> 0;
	};
	CompositeLit.prototype.End = function() { return this.$val.End(); };
	ParenExpr.ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Rparen + 1 >> 0;
	};
	ParenExpr.prototype.End = function() { return this.$val.End(); };
	SelectorExpr.ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Sel.End();
	};
	SelectorExpr.prototype.End = function() { return this.$val.End(); };
	IndexExpr.ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Rbrack + 1 >> 0;
	};
	IndexExpr.prototype.End = function() { return this.$val.End(); };
	SliceExpr.ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Rbrack + 1 >> 0;
	};
	SliceExpr.prototype.End = function() { return this.$val.End(); };
	TypeAssertExpr.ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Rparen + 1 >> 0;
	};
	TypeAssertExpr.prototype.End = function() { return this.$val.End(); };
	CallExpr.ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Rparen + 1 >> 0;
	};
	CallExpr.prototype.End = function() { return this.$val.End(); };
	StarExpr.ptr.prototype.End = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.X.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StarExpr.ptr.prototype.End }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	StarExpr.prototype.End = function() { return this.$val.End(); };
	UnaryExpr.ptr.prototype.End = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.X.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: UnaryExpr.ptr.prototype.End }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	UnaryExpr.prototype.End = function() { return this.$val.End(); };
	BinaryExpr.ptr.prototype.End = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Y.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BinaryExpr.ptr.prototype.End }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	BinaryExpr.prototype.End = function() { return this.$val.End(); };
	KeyValueExpr.ptr.prototype.End = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Value.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: KeyValueExpr.ptr.prototype.End }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	KeyValueExpr.prototype.End = function() { return this.$val.End(); };
	ArrayType.ptr.prototype.End = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Elt.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ArrayType.ptr.prototype.End }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ArrayType.prototype.End = function() { return this.$val.End(); };
	StructType.ptr.prototype.End = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Fields.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StructType.ptr.prototype.End }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	StructType.prototype.End = function() { return this.$val.End(); };
	FuncType.ptr.prototype.End = function() {
		var _r, _r$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (!(x.Results === ptrType$2.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(x.Results === ptrType$2.nil)) { */ case 1:
			_r = x.Results.End(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = x.Params.End(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncType.ptr.prototype.End }; } $f._r = _r; $f._r$1 = _r$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	FuncType.prototype.End = function() { return this.$val.End(); };
	InterfaceType.ptr.prototype.End = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Methods.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: InterfaceType.ptr.prototype.End }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	InterfaceType.prototype.End = function() { return this.$val.End(); };
	MapType.ptr.prototype.End = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Value.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MapType.ptr.prototype.End }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	MapType.prototype.End = function() { return this.$val.End(); };
	ChanType.ptr.prototype.End = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Value.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ChanType.ptr.prototype.End }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ChanType.prototype.End = function() { return this.$val.End(); };
	VoidType.ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Begin;
	};
	VoidType.prototype.End = function() { return this.$val.End(); };
	IsExported = function(name) {
		var _tuple, ch, name;
		_tuple = utf8.DecodeRuneInString(name);
		ch = _tuple[0];
		return unicode.IsUpper(ch);
	};
	$pkg.IsExported = IsExported;
	Ident.ptr.prototype.IsExported = function() {
		var id;
		id = this;
		return IsExported(id.Name);
	};
	Ident.prototype.IsExported = function() { return this.$val.IsExported(); };
	Ident.ptr.prototype.String = function() {
		var id;
		id = this;
		if (!(id === ptrType$4.nil)) {
			return id.Name;
		}
		return "<nil>";
	};
	Ident.prototype.String = function() { return this.$val.String(); };
	BadStmt.ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.From;
	};
	BadStmt.prototype.Pos = function() { return this.$val.Pos(); };
	DeclStmt.ptr.prototype.Pos = function() {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.Decl.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DeclStmt.ptr.prototype.Pos }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	DeclStmt.prototype.Pos = function() { return this.$val.Pos(); };
	EmptyStmt.ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Semicolon;
	};
	EmptyStmt.prototype.Pos = function() { return this.$val.Pos(); };
	LabeledStmt.ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Label.Pos();
	};
	LabeledStmt.prototype.Pos = function() { return this.$val.Pos(); };
	ExprStmt.ptr.prototype.Pos = function() {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.X.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ExprStmt.ptr.prototype.Pos }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ExprStmt.prototype.Pos = function() { return this.$val.Pos(); };
	SendStmt.ptr.prototype.Pos = function() {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.Chan.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SendStmt.ptr.prototype.Pos }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	SendStmt.prototype.Pos = function() { return this.$val.Pos(); };
	IncDecStmt.ptr.prototype.Pos = function() {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.X.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IncDecStmt.ptr.prototype.Pos }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	IncDecStmt.prototype.Pos = function() { return this.$val.Pos(); };
	AssignStmt.ptr.prototype.Pos = function() {
		var _r, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = (x = s.Lhs, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: AssignStmt.ptr.prototype.Pos }; } $f._r = _r; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	AssignStmt.prototype.Pos = function() { return this.$val.Pos(); };
	GoStmt.ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Go;
	};
	GoStmt.prototype.Pos = function() { return this.$val.Pos(); };
	DeferStmt.ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Defer;
	};
	DeferStmt.prototype.Pos = function() { return this.$val.Pos(); };
	ReturnStmt.ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Return;
	};
	ReturnStmt.prototype.Pos = function() { return this.$val.Pos(); };
	BranchStmt.ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.TokPos;
	};
	BranchStmt.prototype.Pos = function() { return this.$val.Pos(); };
	BlockStmt.ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Lbrace;
	};
	BlockStmt.prototype.Pos = function() { return this.$val.Pos(); };
	IfStmt.ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.If;
	};
	IfStmt.prototype.Pos = function() { return this.$val.Pos(); };
	CaseClause.ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Case;
	};
	CaseClause.prototype.Pos = function() { return this.$val.Pos(); };
	SwitchStmt.ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Switch;
	};
	SwitchStmt.prototype.Pos = function() { return this.$val.Pos(); };
	TypeSwitchStmt.ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Switch;
	};
	TypeSwitchStmt.prototype.Pos = function() { return this.$val.Pos(); };
	CommClause.ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Case;
	};
	CommClause.prototype.Pos = function() { return this.$val.Pos(); };
	SelectStmt.ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Select;
	};
	SelectStmt.prototype.Pos = function() { return this.$val.Pos(); };
	ForStmt.ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.For;
	};
	ForStmt.prototype.Pos = function() { return this.$val.Pos(); };
	RangeStmt.ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.For;
	};
	RangeStmt.prototype.Pos = function() { return this.$val.Pos(); };
	BadStmt.ptr.prototype.End = function() {
		var s;
		s = this;
		return s.To;
	};
	BadStmt.prototype.End = function() { return this.$val.End(); };
	DeclStmt.ptr.prototype.End = function() {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.Decl.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DeclStmt.ptr.prototype.End }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	DeclStmt.prototype.End = function() { return this.$val.End(); };
	EmptyStmt.ptr.prototype.End = function() {
		var s;
		s = this;
		if (s.Implicit) {
			return s.Semicolon;
		}
		return s.Semicolon + 1 >> 0;
	};
	EmptyStmt.prototype.End = function() { return this.$val.End(); };
	LabeledStmt.ptr.prototype.End = function() {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.Stmt.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LabeledStmt.ptr.prototype.End }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	LabeledStmt.prototype.End = function() { return this.$val.End(); };
	ExprStmt.ptr.prototype.End = function() {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.X.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ExprStmt.ptr.prototype.End }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ExprStmt.prototype.End = function() { return this.$val.End(); };
	SendStmt.ptr.prototype.End = function() {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.Value.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SendStmt.ptr.prototype.End }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	SendStmt.prototype.End = function() { return this.$val.End(); };
	IncDecStmt.ptr.prototype.End = function() {
		var s;
		s = this;
		return s.TokPos + 2 >> 0;
	};
	IncDecStmt.prototype.End = function() { return this.$val.End(); };
	AssignStmt.ptr.prototype.End = function() {
		var _r, s, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = (x = s.Rhs, x$1 = s.Rhs.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: AssignStmt.ptr.prototype.End }; } $f._r = _r; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	AssignStmt.prototype.End = function() { return this.$val.End(); };
	GoStmt.ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Call.End();
	};
	GoStmt.prototype.End = function() { return this.$val.End(); };
	DeferStmt.ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Call.End();
	};
	DeferStmt.prototype.End = function() { return this.$val.End(); };
	ReturnStmt.ptr.prototype.End = function() {
		var _r, n, s, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; n = $f.n; s = $f.s; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		n = s.Results.$length;
		/* */ if (n > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n > 0) { */ case 1:
			_r = (x = s.Results, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).End(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		$s = -1; return s.Return + 6 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReturnStmt.ptr.prototype.End }; } $f._r = _r; $f.n = n; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	ReturnStmt.prototype.End = function() { return this.$val.End(); };
	BranchStmt.ptr.prototype.End = function() {
		var s;
		s = this;
		if (!(s.Label === ptrType$4.nil)) {
			return s.Label.End();
		}
		return (((((s.TokPos >> 0)) + new token.Token(s.Tok).String().length >> 0) >> 0));
	};
	BranchStmt.prototype.End = function() { return this.$val.End(); };
	BlockStmt.ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Rbrace + 1 >> 0;
	};
	BlockStmt.prototype.End = function() { return this.$val.End(); };
	IfStmt.ptr.prototype.End = function() {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (!($interfaceIsEqual(s.Else, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(s.Else, $ifaceNil))) { */ case 1:
			_r = s.Else.End(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		$s = -1; return s.Body.End();
		/* */ } return; } if ($f === undefined) { $f = { $blk: IfStmt.ptr.prototype.End }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	IfStmt.prototype.End = function() { return this.$val.End(); };
	CaseClause.ptr.prototype.End = function() {
		var _r, n, s, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; n = $f.n; s = $f.s; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		n = s.Body.$length;
		/* */ if (n > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n > 0) { */ case 1:
			_r = (x = s.Body, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).End(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		$s = -1; return s.Colon + 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CaseClause.ptr.prototype.End }; } $f._r = _r; $f.n = n; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	CaseClause.prototype.End = function() { return this.$val.End(); };
	SwitchStmt.ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Body.End();
	};
	SwitchStmt.prototype.End = function() { return this.$val.End(); };
	TypeSwitchStmt.ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Body.End();
	};
	TypeSwitchStmt.prototype.End = function() { return this.$val.End(); };
	CommClause.ptr.prototype.End = function() {
		var _r, n, s, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; n = $f.n; s = $f.s; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		n = s.Body.$length;
		/* */ if (n > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n > 0) { */ case 1:
			_r = (x = s.Body, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).End(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		$s = -1; return s.Colon + 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommClause.ptr.prototype.End }; } $f._r = _r; $f.n = n; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommClause.prototype.End = function() { return this.$val.End(); };
	SelectStmt.ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Body.End();
	};
	SelectStmt.prototype.End = function() { return this.$val.End(); };
	ForStmt.ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Body.End();
	};
	ForStmt.prototype.End = function() { return this.$val.End(); };
	RangeStmt.ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Body.End();
	};
	RangeStmt.prototype.End = function() { return this.$val.End(); };
	ImportSpec.ptr.prototype.Pos = function() {
		var s;
		s = this;
		if (!(s.Name === ptrType$4.nil)) {
			return s.Name.Pos();
		}
		return s.Path.Pos();
	};
	ImportSpec.prototype.Pos = function() { return this.$val.Pos(); };
	ValueSpec.ptr.prototype.Pos = function() {
		var s, x;
		s = this;
		return (x = s.Names, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).Pos();
	};
	ValueSpec.prototype.Pos = function() { return this.$val.Pos(); };
	TypeSpec.ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Name.Pos();
	};
	TypeSpec.prototype.Pos = function() { return this.$val.Pos(); };
	ImportSpec.ptr.prototype.End = function() {
		var s;
		s = this;
		if (!((s.EndPos === 0))) {
			return s.EndPos;
		}
		return s.Path.End();
	};
	ImportSpec.prototype.End = function() { return this.$val.End(); };
	ValueSpec.ptr.prototype.End = function() {
		var _r, _r$1, n, s, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; n = $f.n; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		n = s.Values.$length;
		/* */ if (n > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n > 0) { */ case 1:
			_r = (x = s.Values, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).End(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		/* */ if (!($interfaceIsEqual(s.Type, $ifaceNil))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!($interfaceIsEqual(s.Type, $ifaceNil))) { */ case 4:
			_r$1 = s.Type.End(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 5:
		$s = -1; return (x$2 = s.Names, x$3 = s.Names.$length - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])).End();
		/* */ } return; } if ($f === undefined) { $f = { $blk: ValueSpec.ptr.prototype.End }; } $f._r = _r; $f._r$1 = _r$1; $f.n = n; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	ValueSpec.prototype.End = function() { return this.$val.End(); };
	TypeSpec.ptr.prototype.End = function() {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.Type.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TypeSpec.ptr.prototype.End }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	TypeSpec.prototype.End = function() { return this.$val.End(); };
	BadDecl.ptr.prototype.Pos = function() {
		var d;
		d = this;
		return d.From;
	};
	BadDecl.prototype.Pos = function() { return this.$val.Pos(); };
	GenDecl.ptr.prototype.Pos = function() {
		var d;
		d = this;
		return d.TokPos;
	};
	GenDecl.prototype.Pos = function() { return this.$val.Pos(); };
	FuncDecl.ptr.prototype.Pos = function() {
		var _r, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = d.Type.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncDecl.ptr.prototype.Pos }; } $f._r = _r; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	FuncDecl.prototype.Pos = function() { return this.$val.Pos(); };
	BadDecl.ptr.prototype.End = function() {
		var d;
		d = this;
		return d.To;
	};
	BadDecl.prototype.End = function() { return this.$val.End(); };
	GenDecl.ptr.prototype.End = function() {
		var _r, d, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (new token.Pos(d.Rparen).IsValid()) {
			$s = -1; return d.Rparen + 1 >> 0;
		}
		_r = (x = d.Specs, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: GenDecl.ptr.prototype.End }; } $f._r = _r; $f.d = d; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	GenDecl.prototype.End = function() { return this.$val.End(); };
	FuncDecl.ptr.prototype.End = function() {
		var _r, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (!(d.Body === ptrType$5.nil)) {
			$s = -1; return d.Body.End();
		}
		_r = d.Type.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncDecl.ptr.prototype.End }; } $f._r = _r; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	FuncDecl.prototype.End = function() { return this.$val.End(); };
	File.ptr.prototype.Pos = function() {
		var f;
		f = this;
		return f.Package;
	};
	File.prototype.Pos = function() { return this.$val.Pos(); };
	File.ptr.prototype.End = function() {
		var _r, f, n, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; n = $f.n; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		n = f.Decls.$length;
		/* */ if (n > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n > 0) { */ case 1:
			_r = (x = f.Decls, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).End(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		$s = -1; return f.Name.End();
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.End }; } $f._r = _r; $f.f = f; $f.n = n; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.End = function() { return this.$val.End(); };
	Package.ptr.prototype.Pos = function() {
		var p;
		p = this;
		return 0;
	};
	Package.prototype.Pos = function() { return this.$val.Pos(); };
	Package.ptr.prototype.End = function() {
		var p;
		p = this;
		return 0;
	};
	Package.prototype.End = function() { return this.$val.End(); };
	NewScope = function(outer) {
		var outer;
		return new Scope.ptr(outer, {});
	};
	$pkg.NewScope = NewScope;
	Scope.ptr.prototype.Lookup = function(name) {
		var _entry, name, s;
		s = this;
		return (_entry = s.Objects[$String.keyFor(name)], _entry !== undefined ? _entry.v : ptrType$3.nil);
	};
	Scope.prototype.Lookup = function(name) { return this.$val.Lookup(name); };
	Scope.ptr.prototype.Insert = function(obj) {
		var _entry, _key, alt, obj, s;
		alt = ptrType$3.nil;
		s = this;
		alt = (_entry = s.Objects[$String.keyFor(obj.Name)], _entry !== undefined ? _entry.v : ptrType$3.nil);
		if (alt === ptrType$3.nil) {
			_key = obj.Name; (s.Objects || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: obj };
		}
		return alt;
	};
	Scope.prototype.Insert = function(obj) { return this.$val.Insert(obj); };
	Scope.ptr.prototype.String = function() {
		var _entry, _i, _keys, _r, _r$1, _r$2, _r$3, _ref, buf, obj, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; buf = $f.buf; obj = $f.obj; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		s = this;
		buf[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), 0);
		_r = fmt.Fprintf(buf[0], "scope %p {", new sliceType$4([s])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		/* */ if (!(s === ptrType$26.nil) && $keys(s.Objects).length > 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(s === ptrType$26.nil) && $keys(s.Objects).length > 0) { */ case 2:
			_r$1 = fmt.Fprintln(buf[0], new sliceType$4([])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			_ref = s.Objects;
			_i = 0;
			_keys = $keys(_ref);
			/* while (true) { */ case 5:
				/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 6; continue; }
				_entry = _ref[_keys[_i]];
				if (_entry === undefined) {
					_i++;
					/* continue; */ $s = 5; continue;
				}
				obj = _entry.v;
				_r$2 = fmt.Fprintf(buf[0], "\t%s %s\n", new sliceType$4([new ObjKind(obj.Kind), new $String(obj.Name)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				_i++;
			/* } */ $s = 5; continue; case 6:
		/* } */ case 3:
		_r$3 = fmt.Fprintf(buf[0], "}\n", new sliceType$4([])); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		$s = -1; return buf[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scope.ptr.prototype.String }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.buf = buf; $f.obj = obj; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scope.prototype.String = function() { return this.$val.String(); };
	NewObj = function(kind, name) {
		var kind, name;
		return new Object.ptr(kind, name, $ifaceNil, $ifaceNil, $ifaceNil);
	};
	$pkg.NewObj = NewObj;
	Object.ptr.prototype.Pos = function() {
		var _i, _i$1, _i$2, _ref, _ref$1, _ref$2, _ref$3, _tuple, d, d$1, d$2, d$3, d$4, d$5, d$6, d$7, ident, isIdent, n, n$1, name, obj, x;
		obj = this;
		name = obj.Name;
		_ref = obj.Decl;
		if ($assertType(_ref, ptrType$10, true)[1]) {
			d = _ref.$val;
			_ref$1 = d.Names;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				n = ((_i < 0 || _i >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i]);
				if (n.Name === name) {
					return n.Pos();
				}
				_i++;
			}
		} else if ($assertType(_ref, ptrType$24, true)[1]) {
			d$1 = _ref.$val;
			if (!(d$1.Name === ptrType$4.nil) && d$1.Name.Name === name) {
				return d$1.Name.Pos();
			}
			return d$1.Path.Pos();
		} else if ($assertType(_ref, ptrType$20, true)[1]) {
			d$2 = _ref.$val;
			_ref$2 = d$2.Names;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$2.$length)) { break; }
				n$1 = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$1]);
				if (n$1.Name === name) {
					return n$1.Pos();
				}
				_i$1++;
			}
		} else if ($assertType(_ref, ptrType$21, true)[1]) {
			d$3 = _ref.$val;
			if (d$3.Name.Name === name) {
				return d$3.Name.Pos();
			}
		} else if ($assertType(_ref, ptrType$23, true)[1]) {
			d$4 = _ref.$val;
			if (d$4.Name.Name === name) {
				return d$4.Name.Pos();
			}
		} else if ($assertType(_ref, ptrType$27, true)[1]) {
			d$5 = _ref.$val;
			if (d$5.Label.Name === name) {
				return d$5.Label.Pos();
			}
		} else if ($assertType(_ref, ptrType$28, true)[1]) {
			d$6 = _ref.$val;
			_ref$3 = d$6.Lhs;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$3.$length)) { break; }
				x = ((_i$2 < 0 || _i$2 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$2]);
				_tuple = $assertType(x, ptrType$4, true);
				ident = _tuple[0];
				isIdent = _tuple[1];
				if (isIdent && ident.Name === name) {
					return ident.Pos();
				}
				_i$2++;
			}
		} else if ($assertType(_ref, ptrType$26, true)[1]) {
			d$7 = _ref.$val;
		}
		return 0;
	};
	Object.prototype.Pos = function() { return this.$val.Pos(); };
	ObjKind.prototype.String = function() {
		var kind;
		kind = this.$val;
		return ((kind < 0 || kind >= objKindStrings.length) ? ($throwRuntimeError("index out of range"), undefined) : objKindStrings[kind]);
	};
	$ptrType(ObjKind).prototype.String = function() { return new ObjKind(this.$get()).String(); };
	walkIdentList = function(v, list) {
		var _i, _ref, list, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; list = $f.list; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = Walk(v, x); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: walkIdentList }; } $f._i = _i; $f._ref = _ref; $f.list = list; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	walkExprList = function(v, list) {
		var _i, _ref, list, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; list = $f.list; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = Walk(v, x); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: walkExprList }; } $f._i = _i; $f._ref = _ref; $f.list = list; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	walkStmtList = function(v, list) {
		var _i, _ref, list, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; list = $f.list; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = Walk(v, x); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: walkStmtList }; } $f._i = _i; $f._ref = _ref; $f.list = list; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	walkDeclList = function(v, list) {
		var _i, _ref, list, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; list = $f.list; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = Walk(v, x); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: walkDeclList }; } $f._i = _i; $f._ref = _ref; $f.list = list; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Walk = function(v, node) {
		var _entry, _i, _i$1, _i$2, _i$3, _keys, _r, _r$1, _r$2, _ref, _ref$1, _ref$2, _ref$3, _ref$4, c, f, f$1, n, n$1, n$10, n$11, n$12, n$13, n$14, n$15, n$16, n$17, n$18, n$19, n$2, n$20, n$21, n$22, n$23, n$24, n$25, n$26, n$27, n$28, n$29, n$3, n$30, n$31, n$32, n$33, n$34, n$35, n$36, n$37, n$38, n$39, n$4, n$40, n$41, n$42, n$43, n$44, n$45, n$46, n$47, n$48, n$49, n$5, n$50, n$51, n$52, n$53, n$54, n$6, n$7, n$8, n$9, node, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; c = $f.c; f = $f.f; f$1 = $f.f$1; n = $f.n; n$1 = $f.n$1; n$10 = $f.n$10; n$11 = $f.n$11; n$12 = $f.n$12; n$13 = $f.n$13; n$14 = $f.n$14; n$15 = $f.n$15; n$16 = $f.n$16; n$17 = $f.n$17; n$18 = $f.n$18; n$19 = $f.n$19; n$2 = $f.n$2; n$20 = $f.n$20; n$21 = $f.n$21; n$22 = $f.n$22; n$23 = $f.n$23; n$24 = $f.n$24; n$25 = $f.n$25; n$26 = $f.n$26; n$27 = $f.n$27; n$28 = $f.n$28; n$29 = $f.n$29; n$3 = $f.n$3; n$30 = $f.n$30; n$31 = $f.n$31; n$32 = $f.n$32; n$33 = $f.n$33; n$34 = $f.n$34; n$35 = $f.n$35; n$36 = $f.n$36; n$37 = $f.n$37; n$38 = $f.n$38; n$39 = $f.n$39; n$4 = $f.n$4; n$40 = $f.n$40; n$41 = $f.n$41; n$42 = $f.n$42; n$43 = $f.n$43; n$44 = $f.n$44; n$45 = $f.n$45; n$46 = $f.n$46; n$47 = $f.n$47; n$48 = $f.n$48; n$49 = $f.n$49; n$5 = $f.n$5; n$50 = $f.n$50; n$51 = $f.n$51; n$52 = $f.n$52; n$53 = $f.n$53; n$54 = $f.n$54; n$6 = $f.n$6; n$7 = $f.n$7; n$8 = $f.n$8; n$9 = $f.n$9; node = $f.node; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = v.Visit(node); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		v = _r;
		if ($interfaceIsEqual(v, $ifaceNil)) {
			$s = -1; return;
		}
		_ref = node;
		/* */ if ($assertType(_ref, ptrType$6, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$2, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$29, true)[1] || $assertType(_ref, ptrType$4, true)[1] || $assertType(_ref, ptrType$1, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$30, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$31, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$32, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref, ptrType$13, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref, ptrType$11, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref, ptrType$33, true)[1]) { $s = 12; continue; }
		/* */ if ($assertType(_ref, ptrType$34, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref, ptrType$35, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref, ptrType$36, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref, ptrType$12, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, ptrType$37, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, ptrType$38, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, ptrType$39, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, ptrType$14, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, ptrType$15, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref, ptrType$16, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref, ptrType$17, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref, ptrType$18, true)[1]) { $s = 24; continue; }
		/* */ if ($assertType(_ref, ptrType$19, true)[1]) { $s = 25; continue; }
		/* */ if ($assertType(_ref, ptrType$40, true)[1]) { $s = 26; continue; }
		/* */ if ($assertType(_ref, ptrType$41, true)[1]) { $s = 27; continue; }
		/* */ if ($assertType(_ref, ptrType$42, true)[1]) { $s = 28; continue; }
		/* */ if ($assertType(_ref, ptrType$43, true)[1]) { $s = 29; continue; }
		/* */ if ($assertType(_ref, ptrType$27, true)[1]) { $s = 30; continue; }
		/* */ if ($assertType(_ref, ptrType$44, true)[1]) { $s = 31; continue; }
		/* */ if ($assertType(_ref, ptrType$45, true)[1]) { $s = 32; continue; }
		/* */ if ($assertType(_ref, ptrType$46, true)[1]) { $s = 33; continue; }
		/* */ if ($assertType(_ref, ptrType$28, true)[1]) { $s = 34; continue; }
		/* */ if ($assertType(_ref, ptrType$47, true)[1]) { $s = 35; continue; }
		/* */ if ($assertType(_ref, ptrType$48, true)[1]) { $s = 36; continue; }
		/* */ if ($assertType(_ref, ptrType$49, true)[1]) { $s = 37; continue; }
		/* */ if ($assertType(_ref, ptrType$50, true)[1]) { $s = 38; continue; }
		/* */ if ($assertType(_ref, ptrType$5, true)[1]) { $s = 39; continue; }
		/* */ if ($assertType(_ref, ptrType$51, true)[1]) { $s = 40; continue; }
		/* */ if ($assertType(_ref, ptrType$52, true)[1]) { $s = 41; continue; }
		/* */ if ($assertType(_ref, ptrType$53, true)[1]) { $s = 42; continue; }
		/* */ if ($assertType(_ref, ptrType$54, true)[1]) { $s = 43; continue; }
		/* */ if ($assertType(_ref, ptrType$55, true)[1]) { $s = 44; continue; }
		/* */ if ($assertType(_ref, ptrType$56, true)[1]) { $s = 45; continue; }
		/* */ if ($assertType(_ref, ptrType$57, true)[1]) { $s = 46; continue; }
		/* */ if ($assertType(_ref, ptrType$58, true)[1]) { $s = 47; continue; }
		/* */ if ($assertType(_ref, ptrType$24, true)[1]) { $s = 48; continue; }
		/* */ if ($assertType(_ref, ptrType$20, true)[1]) { $s = 49; continue; }
		/* */ if ($assertType(_ref, ptrType$21, true)[1]) { $s = 50; continue; }
		/* */ if ($assertType(_ref, ptrType$59, true)[1]) { $s = 51; continue; }
		/* */ if ($assertType(_ref, ptrType$22, true)[1]) { $s = 52; continue; }
		/* */ if ($assertType(_ref, ptrType$23, true)[1]) { $s = 53; continue; }
		/* */ if ($assertType(_ref, ptrType$9, true)[1]) { $s = 54; continue; }
		/* */ if ($assertType(_ref, ptrType$60, true)[1]) { $s = 55; continue; }
		/* */ $s = 56; continue;
		/* if ($assertType(_ref, ptrType$6, true)[1]) { */ case 2:
			n = _ref.$val;
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType, true)[1]) { */ case 3:
			n$1 = _ref.$val;
			_ref$1 = n$1.List;
			_i = 0;
			/* while (true) { */ case 58:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 59; continue; }
				c = ((_i < 0 || _i >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i]);
				$r = Walk(v, c); /* */ $s = 60; case 60: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
			/* } */ $s = 58; continue; case 59:
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 4:
			n$2 = _ref.$val;
			/* */ if (!(n$2.Doc === ptrType.nil)) { $s = 61; continue; }
			/* */ $s = 62; continue;
			/* if (!(n$2.Doc === ptrType.nil)) { */ case 61:
				$r = Walk(v, n$2.Doc); /* */ $s = 63; case 63: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 62:
			$r = walkIdentList(v, n$2.Names); /* */ $s = 64; case 64: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$2.Type); /* */ $s = 65; case 65: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!(n$2.Tag === ptrType$1.nil)) { $s = 66; continue; }
			/* */ $s = 67; continue;
			/* if (!(n$2.Tag === ptrType$1.nil)) { */ case 66:
				$r = Walk(v, n$2.Tag); /* */ $s = 68; case 68: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 67:
			/* */ if (!(n$2.Comment === ptrType.nil)) { $s = 69; continue; }
			/* */ $s = 70; continue;
			/* if (!(n$2.Comment === ptrType.nil)) { */ case 69:
				$r = Walk(v, n$2.Comment); /* */ $s = 71; case 71: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 70:
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$2, true)[1]) { */ case 5:
			n$3 = _ref.$val;
			_ref$2 = n$3.List;
			_i$1 = 0;
			/* while (true) { */ case 72:
				/* if (!(_i$1 < _ref$2.$length)) { break; } */ if(!(_i$1 < _ref$2.$length)) { $s = 73; continue; }
				f = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$1]);
				$r = Walk(v, f); /* */ $s = 74; case 74: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i$1++;
			/* } */ $s = 72; continue; case 73:
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$29, true)[1] || $assertType(_ref, ptrType$4, true)[1] || $assertType(_ref, ptrType$1, true)[1]) { */ case 6:
			n$4 = _ref;
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$30, true)[1]) { */ case 7:
			n$5 = _ref.$val;
			/* */ if (!($interfaceIsEqual(n$5.Elt, $ifaceNil))) { $s = 75; continue; }
			/* */ $s = 76; continue;
			/* if (!($interfaceIsEqual(n$5.Elt, $ifaceNil))) { */ case 75:
				$r = Walk(v, n$5.Elt); /* */ $s = 77; case 77: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 76:
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$31, true)[1]) { */ case 8:
			n$6 = _ref.$val;
			$r = Walk(v, n$6.Type); /* */ $s = 78; case 78: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$6.Body); /* */ $s = 79; case 79: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$32, true)[1]) { */ case 9:
			n$7 = _ref.$val;
			/* */ if (!($interfaceIsEqual(n$7.Type, $ifaceNil))) { $s = 80; continue; }
			/* */ $s = 81; continue;
			/* if (!($interfaceIsEqual(n$7.Type, $ifaceNil))) { */ case 80:
				$r = Walk(v, n$7.Type); /* */ $s = 82; case 82: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 81:
			$r = walkExprList(v, n$7.Elts); /* */ $s = 83; case 83: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$13, true)[1]) { */ case 10:
			n$8 = _ref.$val;
			$r = Walk(v, n$8.X); /* */ $s = 84; case 84: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$11, true)[1]) { */ case 11:
			n$9 = _ref.$val;
			$r = Walk(v, n$9.X); /* */ $s = 85; case 85: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$9.Sel); /* */ $s = 86; case 86: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$33, true)[1]) { */ case 12:
			n$10 = _ref.$val;
			$r = Walk(v, n$10.X); /* */ $s = 87; case 87: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$10.Index); /* */ $s = 88; case 88: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$34, true)[1]) { */ case 13:
			n$11 = _ref.$val;
			$r = Walk(v, n$11.X); /* */ $s = 89; case 89: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(n$11.Low, $ifaceNil))) { $s = 90; continue; }
			/* */ $s = 91; continue;
			/* if (!($interfaceIsEqual(n$11.Low, $ifaceNil))) { */ case 90:
				$r = Walk(v, n$11.Low); /* */ $s = 92; case 92: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 91:
			/* */ if (!($interfaceIsEqual(n$11.High, $ifaceNil))) { $s = 93; continue; }
			/* */ $s = 94; continue;
			/* if (!($interfaceIsEqual(n$11.High, $ifaceNil))) { */ case 93:
				$r = Walk(v, n$11.High); /* */ $s = 95; case 95: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 94:
			/* */ if (!($interfaceIsEqual(n$11.Max, $ifaceNil))) { $s = 96; continue; }
			/* */ $s = 97; continue;
			/* if (!($interfaceIsEqual(n$11.Max, $ifaceNil))) { */ case 96:
				$r = Walk(v, n$11.Max); /* */ $s = 98; case 98: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 97:
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$35, true)[1]) { */ case 14:
			n$12 = _ref.$val;
			$r = Walk(v, n$12.X); /* */ $s = 99; case 99: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(n$12.Type, $ifaceNil))) { $s = 100; continue; }
			/* */ $s = 101; continue;
			/* if (!($interfaceIsEqual(n$12.Type, $ifaceNil))) { */ case 100:
				$r = Walk(v, n$12.Type); /* */ $s = 102; case 102: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 101:
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$36, true)[1]) { */ case 15:
			n$13 = _ref.$val;
			$r = Walk(v, n$13.Fun); /* */ $s = 103; case 103: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = walkExprList(v, n$13.Args); /* */ $s = 104; case 104: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$12, true)[1]) { */ case 16:
			n$14 = _ref.$val;
			$r = Walk(v, n$14.X); /* */ $s = 105; case 105: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$37, true)[1]) { */ case 17:
			n$15 = _ref.$val;
			$r = Walk(v, n$15.X); /* */ $s = 106; case 106: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$38, true)[1]) { */ case 18:
			n$16 = _ref.$val;
			$r = Walk(v, n$16.X); /* */ $s = 107; case 107: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$16.Y); /* */ $s = 108; case 108: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$39, true)[1]) { */ case 19:
			n$17 = _ref.$val;
			$r = Walk(v, n$17.Key); /* */ $s = 109; case 109: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$17.Value); /* */ $s = 110; case 110: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$14, true)[1]) { */ case 20:
			n$18 = _ref.$val;
			/* */ if (!($interfaceIsEqual(n$18.Len, $ifaceNil))) { $s = 111; continue; }
			/* */ $s = 112; continue;
			/* if (!($interfaceIsEqual(n$18.Len, $ifaceNil))) { */ case 111:
				$r = Walk(v, n$18.Len); /* */ $s = 113; case 113: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 112:
			$r = Walk(v, n$18.Elt); /* */ $s = 114; case 114: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$15, true)[1]) { */ case 21:
			n$19 = _ref.$val;
			$r = Walk(v, n$19.Fields); /* */ $s = 115; case 115: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$16, true)[1]) { */ case 22:
			n$20 = _ref.$val;
			/* */ if (!(n$20.Params === ptrType$2.nil)) { $s = 116; continue; }
			/* */ $s = 117; continue;
			/* if (!(n$20.Params === ptrType$2.nil)) { */ case 116:
				$r = Walk(v, n$20.Params); /* */ $s = 118; case 118: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 117:
			/* */ if (!(n$20.Results === ptrType$2.nil)) { $s = 119; continue; }
			/* */ $s = 120; continue;
			/* if (!(n$20.Results === ptrType$2.nil)) { */ case 119:
				$r = Walk(v, n$20.Results); /* */ $s = 121; case 121: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 120:
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$17, true)[1]) { */ case 23:
			n$21 = _ref.$val;
			$r = Walk(v, n$21.Methods); /* */ $s = 122; case 122: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$18, true)[1]) { */ case 24:
			n$22 = _ref.$val;
			$r = Walk(v, n$22.Key); /* */ $s = 123; case 123: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$22.Value); /* */ $s = 124; case 124: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$19, true)[1]) { */ case 25:
			n$23 = _ref.$val;
			$r = Walk(v, n$23.Value); /* */ $s = 125; case 125: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$40, true)[1]) { */ case 26:
			n$24 = _ref.$val;
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$41, true)[1]) { */ case 27:
			n$25 = _ref.$val;
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$42, true)[1]) { */ case 28:
			n$26 = _ref.$val;
			$r = Walk(v, n$26.Decl); /* */ $s = 126; case 126: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$43, true)[1]) { */ case 29:
			n$27 = _ref.$val;
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$27, true)[1]) { */ case 30:
			n$28 = _ref.$val;
			$r = Walk(v, n$28.Label); /* */ $s = 127; case 127: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$28.Stmt); /* */ $s = 128; case 128: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$44, true)[1]) { */ case 31:
			n$29 = _ref.$val;
			$r = Walk(v, n$29.X); /* */ $s = 129; case 129: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$45, true)[1]) { */ case 32:
			n$30 = _ref.$val;
			$r = Walk(v, n$30.Chan); /* */ $s = 130; case 130: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$30.Value); /* */ $s = 131; case 131: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$46, true)[1]) { */ case 33:
			n$31 = _ref.$val;
			$r = Walk(v, n$31.X); /* */ $s = 132; case 132: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$28, true)[1]) { */ case 34:
			n$32 = _ref.$val;
			$r = walkExprList(v, n$32.Lhs); /* */ $s = 133; case 133: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = walkExprList(v, n$32.Rhs); /* */ $s = 134; case 134: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$47, true)[1]) { */ case 35:
			n$33 = _ref.$val;
			$r = Walk(v, n$33.Call); /* */ $s = 135; case 135: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$48, true)[1]) { */ case 36:
			n$34 = _ref.$val;
			$r = Walk(v, n$34.Call); /* */ $s = 136; case 136: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$49, true)[1]) { */ case 37:
			n$35 = _ref.$val;
			$r = walkExprList(v, n$35.Results); /* */ $s = 137; case 137: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$50, true)[1]) { */ case 38:
			n$36 = _ref.$val;
			/* */ if (!(n$36.Label === ptrType$4.nil)) { $s = 138; continue; }
			/* */ $s = 139; continue;
			/* if (!(n$36.Label === ptrType$4.nil)) { */ case 138:
				$r = Walk(v, n$36.Label); /* */ $s = 140; case 140: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 139:
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$5, true)[1]) { */ case 39:
			n$37 = _ref.$val;
			$r = walkStmtList(v, n$37.List); /* */ $s = 141; case 141: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$51, true)[1]) { */ case 40:
			n$38 = _ref.$val;
			/* */ if (!($interfaceIsEqual(n$38.Init, $ifaceNil))) { $s = 142; continue; }
			/* */ $s = 143; continue;
			/* if (!($interfaceIsEqual(n$38.Init, $ifaceNil))) { */ case 142:
				$r = Walk(v, n$38.Init); /* */ $s = 144; case 144: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 143:
			$r = Walk(v, n$38.Cond); /* */ $s = 145; case 145: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$38.Body); /* */ $s = 146; case 146: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(n$38.Else, $ifaceNil))) { $s = 147; continue; }
			/* */ $s = 148; continue;
			/* if (!($interfaceIsEqual(n$38.Else, $ifaceNil))) { */ case 147:
				$r = Walk(v, n$38.Else); /* */ $s = 149; case 149: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 148:
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$52, true)[1]) { */ case 41:
			n$39 = _ref.$val;
			$r = walkExprList(v, n$39.List); /* */ $s = 150; case 150: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = walkStmtList(v, n$39.Body); /* */ $s = 151; case 151: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$53, true)[1]) { */ case 42:
			n$40 = _ref.$val;
			/* */ if (!($interfaceIsEqual(n$40.Init, $ifaceNil))) { $s = 152; continue; }
			/* */ $s = 153; continue;
			/* if (!($interfaceIsEqual(n$40.Init, $ifaceNil))) { */ case 152:
				$r = Walk(v, n$40.Init); /* */ $s = 154; case 154: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 153:
			/* */ if (!($interfaceIsEqual(n$40.Tag, $ifaceNil))) { $s = 155; continue; }
			/* */ $s = 156; continue;
			/* if (!($interfaceIsEqual(n$40.Tag, $ifaceNil))) { */ case 155:
				$r = Walk(v, n$40.Tag); /* */ $s = 157; case 157: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 156:
			$r = Walk(v, n$40.Body); /* */ $s = 158; case 158: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$54, true)[1]) { */ case 43:
			n$41 = _ref.$val;
			/* */ if (!($interfaceIsEqual(n$41.Init, $ifaceNil))) { $s = 159; continue; }
			/* */ $s = 160; continue;
			/* if (!($interfaceIsEqual(n$41.Init, $ifaceNil))) { */ case 159:
				$r = Walk(v, n$41.Init); /* */ $s = 161; case 161: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 160:
			$r = Walk(v, n$41.Assign); /* */ $s = 162; case 162: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$41.Body); /* */ $s = 163; case 163: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$55, true)[1]) { */ case 44:
			n$42 = _ref.$val;
			/* */ if (!($interfaceIsEqual(n$42.Comm, $ifaceNil))) { $s = 164; continue; }
			/* */ $s = 165; continue;
			/* if (!($interfaceIsEqual(n$42.Comm, $ifaceNil))) { */ case 164:
				$r = Walk(v, n$42.Comm); /* */ $s = 166; case 166: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 165:
			$r = walkStmtList(v, n$42.Body); /* */ $s = 167; case 167: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$56, true)[1]) { */ case 45:
			n$43 = _ref.$val;
			$r = Walk(v, n$43.Body); /* */ $s = 168; case 168: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$57, true)[1]) { */ case 46:
			n$44 = _ref.$val;
			/* */ if (!($interfaceIsEqual(n$44.Init, $ifaceNil))) { $s = 169; continue; }
			/* */ $s = 170; continue;
			/* if (!($interfaceIsEqual(n$44.Init, $ifaceNil))) { */ case 169:
				$r = Walk(v, n$44.Init); /* */ $s = 171; case 171: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 170:
			/* */ if (!($interfaceIsEqual(n$44.Cond, $ifaceNil))) { $s = 172; continue; }
			/* */ $s = 173; continue;
			/* if (!($interfaceIsEqual(n$44.Cond, $ifaceNil))) { */ case 172:
				$r = Walk(v, n$44.Cond); /* */ $s = 174; case 174: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 173:
			/* */ if (!($interfaceIsEqual(n$44.Post, $ifaceNil))) { $s = 175; continue; }
			/* */ $s = 176; continue;
			/* if (!($interfaceIsEqual(n$44.Post, $ifaceNil))) { */ case 175:
				$r = Walk(v, n$44.Post); /* */ $s = 177; case 177: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 176:
			$r = Walk(v, n$44.Body); /* */ $s = 178; case 178: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$58, true)[1]) { */ case 47:
			n$45 = _ref.$val;
			/* */ if (!($interfaceIsEqual(n$45.Key, $ifaceNil))) { $s = 179; continue; }
			/* */ $s = 180; continue;
			/* if (!($interfaceIsEqual(n$45.Key, $ifaceNil))) { */ case 179:
				$r = Walk(v, n$45.Key); /* */ $s = 181; case 181: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 180:
			/* */ if (!($interfaceIsEqual(n$45.Value, $ifaceNil))) { $s = 182; continue; }
			/* */ $s = 183; continue;
			/* if (!($interfaceIsEqual(n$45.Value, $ifaceNil))) { */ case 182:
				$r = Walk(v, n$45.Value); /* */ $s = 184; case 184: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 183:
			$r = Walk(v, n$45.X); /* */ $s = 185; case 185: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$45.Body); /* */ $s = 186; case 186: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$24, true)[1]) { */ case 48:
			n$46 = _ref.$val;
			/* */ if (!(n$46.Doc === ptrType.nil)) { $s = 187; continue; }
			/* */ $s = 188; continue;
			/* if (!(n$46.Doc === ptrType.nil)) { */ case 187:
				$r = Walk(v, n$46.Doc); /* */ $s = 189; case 189: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 188:
			/* */ if (!(n$46.Name === ptrType$4.nil)) { $s = 190; continue; }
			/* */ $s = 191; continue;
			/* if (!(n$46.Name === ptrType$4.nil)) { */ case 190:
				$r = Walk(v, n$46.Name); /* */ $s = 192; case 192: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 191:
			$r = Walk(v, n$46.Path); /* */ $s = 193; case 193: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!(n$46.Comment === ptrType.nil)) { $s = 194; continue; }
			/* */ $s = 195; continue;
			/* if (!(n$46.Comment === ptrType.nil)) { */ case 194:
				$r = Walk(v, n$46.Comment); /* */ $s = 196; case 196: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 195:
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$20, true)[1]) { */ case 49:
			n$47 = _ref.$val;
			/* */ if (!(n$47.Doc === ptrType.nil)) { $s = 197; continue; }
			/* */ $s = 198; continue;
			/* if (!(n$47.Doc === ptrType.nil)) { */ case 197:
				$r = Walk(v, n$47.Doc); /* */ $s = 199; case 199: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 198:
			$r = walkIdentList(v, n$47.Names); /* */ $s = 200; case 200: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(n$47.Type, $ifaceNil))) { $s = 201; continue; }
			/* */ $s = 202; continue;
			/* if (!($interfaceIsEqual(n$47.Type, $ifaceNil))) { */ case 201:
				$r = Walk(v, n$47.Type); /* */ $s = 203; case 203: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 202:
			$r = walkExprList(v, n$47.Values); /* */ $s = 204; case 204: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!(n$47.Comment === ptrType.nil)) { $s = 205; continue; }
			/* */ $s = 206; continue;
			/* if (!(n$47.Comment === ptrType.nil)) { */ case 205:
				$r = Walk(v, n$47.Comment); /* */ $s = 207; case 207: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 206:
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$21, true)[1]) { */ case 50:
			n$48 = _ref.$val;
			/* */ if (!(n$48.Doc === ptrType.nil)) { $s = 208; continue; }
			/* */ $s = 209; continue;
			/* if (!(n$48.Doc === ptrType.nil)) { */ case 208:
				$r = Walk(v, n$48.Doc); /* */ $s = 210; case 210: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 209:
			$r = Walk(v, n$48.Name); /* */ $s = 211; case 211: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$48.Type); /* */ $s = 212; case 212: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!(n$48.Comment === ptrType.nil)) { $s = 213; continue; }
			/* */ $s = 214; continue;
			/* if (!(n$48.Comment === ptrType.nil)) { */ case 213:
				$r = Walk(v, n$48.Comment); /* */ $s = 215; case 215: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 214:
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$59, true)[1]) { */ case 51:
			n$49 = _ref.$val;
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$22, true)[1]) { */ case 52:
			n$50 = _ref.$val;
			/* */ if (!(n$50.Doc === ptrType.nil)) { $s = 216; continue; }
			/* */ $s = 217; continue;
			/* if (!(n$50.Doc === ptrType.nil)) { */ case 216:
				$r = Walk(v, n$50.Doc); /* */ $s = 218; case 218: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 217:
			_ref$3 = n$50.Specs;
			_i$2 = 0;
			/* while (true) { */ case 219:
				/* if (!(_i$2 < _ref$3.$length)) { break; } */ if(!(_i$2 < _ref$3.$length)) { $s = 220; continue; }
				s = ((_i$2 < 0 || _i$2 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$2]);
				$r = Walk(v, s); /* */ $s = 221; case 221: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i$2++;
			/* } */ $s = 219; continue; case 220:
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$23, true)[1]) { */ case 53:
			n$51 = _ref.$val;
			/* */ if (!(n$51.Doc === ptrType.nil)) { $s = 222; continue; }
			/* */ $s = 223; continue;
			/* if (!(n$51.Doc === ptrType.nil)) { */ case 222:
				$r = Walk(v, n$51.Doc); /* */ $s = 224; case 224: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 223:
			/* */ if (!(n$51.Recv === ptrType$2.nil)) { $s = 225; continue; }
			/* */ $s = 226; continue;
			/* if (!(n$51.Recv === ptrType$2.nil)) { */ case 225:
				$r = Walk(v, n$51.Recv); /* */ $s = 227; case 227: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 226:
			$r = Walk(v, n$51.Name); /* */ $s = 228; case 228: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$51.Type); /* */ $s = 229; case 229: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!(n$51.Body === ptrType$5.nil)) { $s = 230; continue; }
			/* */ $s = 231; continue;
			/* if (!(n$51.Body === ptrType$5.nil)) { */ case 230:
				$r = Walk(v, n$51.Body); /* */ $s = 232; case 232: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 231:
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$9, true)[1]) { */ case 54:
			n$52 = _ref.$val;
			/* */ if (!(n$52.Doc === ptrType.nil)) { $s = 233; continue; }
			/* */ $s = 234; continue;
			/* if (!(n$52.Doc === ptrType.nil)) { */ case 233:
				$r = Walk(v, n$52.Doc); /* */ $s = 235; case 235: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 234:
			$r = Walk(v, n$52.Name); /* */ $s = 236; case 236: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = walkDeclList(v, n$52.Decls); /* */ $s = 237; case 237: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 57; continue;
		/* } else if ($assertType(_ref, ptrType$60, true)[1]) { */ case 55:
			n$53 = _ref.$val;
			_ref$4 = n$53.Files;
			_i$3 = 0;
			_keys = $keys(_ref$4);
			/* while (true) { */ case 238:
				/* if (!(_i$3 < _keys.length)) { break; } */ if(!(_i$3 < _keys.length)) { $s = 239; continue; }
				_entry = _ref$4[_keys[_i$3]];
				if (_entry === undefined) {
					_i$3++;
					/* continue; */ $s = 238; continue;
				}
				f$1 = _entry.v;
				$r = Walk(v, f$1); /* */ $s = 240; case 240: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i$3++;
			/* } */ $s = 238; continue; case 239:
			$s = 57; continue;
		/* } else { */ case 56:
			n$54 = _ref;
			_r$1 = fmt.Sprintf("ast.Walk: unexpected node type %T", new sliceType$4([n$54])); /* */ $s = 241; case 241: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(_r$1));
		/* } */ case 57:
		_r$2 = v.Visit($ifaceNil); /* */ $s = 242; case 242: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Walk }; } $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f.c = c; $f.f = f; $f.f$1 = f$1; $f.n = n; $f.n$1 = n$1; $f.n$10 = n$10; $f.n$11 = n$11; $f.n$12 = n$12; $f.n$13 = n$13; $f.n$14 = n$14; $f.n$15 = n$15; $f.n$16 = n$16; $f.n$17 = n$17; $f.n$18 = n$18; $f.n$19 = n$19; $f.n$2 = n$2; $f.n$20 = n$20; $f.n$21 = n$21; $f.n$22 = n$22; $f.n$23 = n$23; $f.n$24 = n$24; $f.n$25 = n$25; $f.n$26 = n$26; $f.n$27 = n$27; $f.n$28 = n$28; $f.n$29 = n$29; $f.n$3 = n$3; $f.n$30 = n$30; $f.n$31 = n$31; $f.n$32 = n$32; $f.n$33 = n$33; $f.n$34 = n$34; $f.n$35 = n$35; $f.n$36 = n$36; $f.n$37 = n$37; $f.n$38 = n$38; $f.n$39 = n$39; $f.n$4 = n$4; $f.n$40 = n$40; $f.n$41 = n$41; $f.n$42 = n$42; $f.n$43 = n$43; $f.n$44 = n$44; $f.n$45 = n$45; $f.n$46 = n$46; $f.n$47 = n$47; $f.n$48 = n$48; $f.n$49 = n$49; $f.n$5 = n$5; $f.n$50 = n$50; $f.n$51 = n$51; $f.n$52 = n$52; $f.n$53 = n$53; $f.n$54 = n$54; $f.n$6 = n$6; $f.n$7 = n$7; $f.n$8 = n$8; $f.n$9 = n$9; $f.node = node; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Walk = Walk;
	inspector.prototype.Visit = function(node) {
		var _r, f, node, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; node = $f.node; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this.$val;
		_r = f(node); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$s = -1; return new inspector(f);
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: inspector.prototype.Visit }; } $f._r = _r; $f.f = f; $f.node = node; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(inspector).prototype.Visit = function(node) { return new inspector(this.$get()).Visit(node); };
	Inspect = function(node, f) {
		var f, node, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; f = $f.f; node = $f.node; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = Walk(new inspector((f)), node); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Inspect }; } $f.f = f; $f.node = node; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Inspect = Inspect;
	ptrType$6.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}];
	ptrType.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "Text", name: "Text", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$10.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}];
	ptrType$2.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "NumFields", name: "NumFields", pkg: "", typ: $funcType([], [$Int], false)}];
	ptrType$29.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$4.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}, {prop: "IsExported", name: "IsExported", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$30.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$1.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$31.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$32.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$13.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$11.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$33.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$34.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$35.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$36.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$12.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$37.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$38.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$39.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$14.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$15.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$16.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$17.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$18.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$19.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$40.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$41.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$42.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$43.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$27.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$44.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$45.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$46.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$28.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$47.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$48.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$49.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$50.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$5.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$51.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$52.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$53.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$54.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$55.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$56.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$57.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$58.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$24.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "specNode", name: "specNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$20.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "specNode", name: "specNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$21.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "specNode", name: "specNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$59.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "declNode", name: "declNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$22.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "declNode", name: "declNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$23.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "declNode", name: "declNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}];
	ptrType$9.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}];
	ptrType$60.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}];
	ptrType$26.methods = [{prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [ptrType$3], false)}, {prop: "Insert", name: "Insert", pkg: "", typ: $funcType([ptrType$3], [ptrType$3], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}];
	ObjKind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	inspector.methods = [{prop: "Visit", name: "Visit", pkg: "", typ: $funcType([Node], [Visitor], false)}];
	Node.init([{prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}]);
	Expr.init([{prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}]);
	Stmt.init([{prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}]);
	Decl.init([{prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "declNode", name: "declNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}]);
	Comment.init("", [{prop: "Slash", name: "Slash", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Text", name: "Text", anonymous: false, exported: true, typ: $String, tag: ""}]);
	CommentGroup.init("", [{prop: "List", name: "List", anonymous: false, exported: true, typ: sliceType$5, tag: ""}]);
	Field.init("", [{prop: "Doc", name: "Doc", anonymous: false, exported: true, typ: ptrType, tag: ""}, {prop: "Names", name: "Names", anonymous: false, exported: true, typ: sliceType$8, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Tag", name: "Tag", anonymous: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "Comment", name: "Comment", anonymous: false, exported: true, typ: ptrType, tag: ""}]);
	FieldList.init("", [{prop: "Opening", name: "Opening", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "List", name: "List", anonymous: false, exported: true, typ: sliceType$10, tag: ""}, {prop: "Closing", name: "Closing", anonymous: false, exported: true, typ: token.Pos, tag: ""}]);
	BadExpr.init("", [{prop: "From", name: "From", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "To", name: "To", anonymous: false, exported: true, typ: token.Pos, tag: ""}]);
	Ident.init("", [{prop: "NamePos", name: "NamePos", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Obj", name: "Obj", anonymous: false, exported: true, typ: ptrType$3, tag: ""}]);
	Ellipsis.init("", [{prop: "Ellipsis", name: "Ellipsis", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Elt", name: "Elt", anonymous: false, exported: true, typ: Expr, tag: ""}]);
	BasicLit.init("", [{prop: "ValuePos", name: "ValuePos", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Kind", name: "Kind", anonymous: false, exported: true, typ: token.Token, tag: ""}, {prop: "Value", name: "Value", anonymous: false, exported: true, typ: $String, tag: ""}]);
	FuncLit.init("", [{prop: "Type", name: "Type", anonymous: false, exported: true, typ: ptrType$16, tag: ""}, {prop: "Body", name: "Body", anonymous: false, exported: true, typ: ptrType$5, tag: ""}]);
	CompositeLit.init("", [{prop: "Type", name: "Type", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Lbrace", name: "Lbrace", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Elts", name: "Elts", anonymous: false, exported: true, typ: sliceType$11, tag: ""}, {prop: "Rbrace", name: "Rbrace", anonymous: false, exported: true, typ: token.Pos, tag: ""}]);
	ParenExpr.init("", [{prop: "Lparen", name: "Lparen", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "X", name: "X", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Rparen", name: "Rparen", anonymous: false, exported: true, typ: token.Pos, tag: ""}]);
	SelectorExpr.init("", [{prop: "X", name: "X", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Sel", name: "Sel", anonymous: false, exported: true, typ: ptrType$4, tag: ""}]);
	IndexExpr.init("", [{prop: "X", name: "X", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Lbrack", name: "Lbrack", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Rbrack", name: "Rbrack", anonymous: false, exported: true, typ: token.Pos, tag: ""}]);
	SliceExpr.init("", [{prop: "X", name: "X", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Lbrack", name: "Lbrack", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Low", name: "Low", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "High", name: "High", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Max", name: "Max", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Slice3", name: "Slice3", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "Rbrack", name: "Rbrack", anonymous: false, exported: true, typ: token.Pos, tag: ""}]);
	TypeAssertExpr.init("", [{prop: "X", name: "X", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Lparen", name: "Lparen", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Rparen", name: "Rparen", anonymous: false, exported: true, typ: token.Pos, tag: ""}]);
	CallExpr.init("", [{prop: "Fun", name: "Fun", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Lparen", name: "Lparen", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Args", name: "Args", anonymous: false, exported: true, typ: sliceType$11, tag: ""}, {prop: "Ellipsis", name: "Ellipsis", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Rparen", name: "Rparen", anonymous: false, exported: true, typ: token.Pos, tag: ""}]);
	StarExpr.init("", [{prop: "Star", name: "Star", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "X", name: "X", anonymous: false, exported: true, typ: Expr, tag: ""}]);
	UnaryExpr.init("", [{prop: "OpPos", name: "OpPos", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Op", name: "Op", anonymous: false, exported: true, typ: token.Token, tag: ""}, {prop: "X", name: "X", anonymous: false, exported: true, typ: Expr, tag: ""}]);
	BinaryExpr.init("", [{prop: "X", name: "X", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "OpPos", name: "OpPos", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Op", name: "Op", anonymous: false, exported: true, typ: token.Token, tag: ""}, {prop: "Y", name: "Y", anonymous: false, exported: true, typ: Expr, tag: ""}]);
	KeyValueExpr.init("", [{prop: "Key", name: "Key", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Colon", name: "Colon", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Value", name: "Value", anonymous: false, exported: true, typ: Expr, tag: ""}]);
	ArrayType.init("", [{prop: "Lbrack", name: "Lbrack", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Len", name: "Len", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Elt", name: "Elt", anonymous: false, exported: true, typ: Expr, tag: ""}]);
	StructType.init("", [{prop: "Struct", name: "Struct", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Fields", name: "Fields", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Incomplete", name: "Incomplete", anonymous: false, exported: true, typ: $Bool, tag: ""}]);
	FuncType.init("", [{prop: "Func", name: "Func", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Params", name: "Params", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Results", name: "Results", anonymous: false, exported: true, typ: ptrType$2, tag: ""}]);
	InterfaceType.init("", [{prop: "Interface", name: "Interface", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Methods", name: "Methods", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Incomplete", name: "Incomplete", anonymous: false, exported: true, typ: $Bool, tag: ""}]);
	MapType.init("", [{prop: "Map", name: "Map", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Key", name: "Key", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Value", name: "Value", anonymous: false, exported: true, typ: Expr, tag: ""}]);
	ChanType.init("", [{prop: "Begin", name: "Begin", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Arrow", name: "Arrow", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Dir", name: "Dir", anonymous: false, exported: true, typ: ChanDir, tag: ""}, {prop: "Value", name: "Value", anonymous: false, exported: true, typ: Expr, tag: ""}]);
	VoidType.init("", [{prop: "Begin", name: "Begin", anonymous: false, exported: true, typ: token.Pos, tag: ""}]);
	BadStmt.init("", [{prop: "From", name: "From", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "To", name: "To", anonymous: false, exported: true, typ: token.Pos, tag: ""}]);
	DeclStmt.init("", [{prop: "Decl", name: "Decl", anonymous: false, exported: true, typ: Decl, tag: ""}]);
	EmptyStmt.init("", [{prop: "Semicolon", name: "Semicolon", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Implicit", name: "Implicit", anonymous: false, exported: true, typ: $Bool, tag: ""}]);
	LabeledStmt.init("", [{prop: "Label", name: "Label", anonymous: false, exported: true, typ: ptrType$4, tag: ""}, {prop: "Colon", name: "Colon", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Stmt", name: "Stmt", anonymous: false, exported: true, typ: Stmt, tag: ""}]);
	ExprStmt.init("", [{prop: "X", name: "X", anonymous: false, exported: true, typ: Expr, tag: ""}]);
	SendStmt.init("", [{prop: "Chan", name: "Chan", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Arrow", name: "Arrow", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Value", name: "Value", anonymous: false, exported: true, typ: Expr, tag: ""}]);
	IncDecStmt.init("", [{prop: "X", name: "X", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "TokPos", name: "TokPos", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Tok", name: "Tok", anonymous: false, exported: true, typ: token.Token, tag: ""}]);
	AssignStmt.init("", [{prop: "Lhs", name: "Lhs", anonymous: false, exported: true, typ: sliceType$11, tag: ""}, {prop: "TokPos", name: "TokPos", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Tok", name: "Tok", anonymous: false, exported: true, typ: token.Token, tag: ""}, {prop: "Rhs", name: "Rhs", anonymous: false, exported: true, typ: sliceType$11, tag: ""}]);
	GoStmt.init("", [{prop: "Go", name: "Go", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Call", name: "Call", anonymous: false, exported: true, typ: ptrType$36, tag: ""}]);
	DeferStmt.init("", [{prop: "Defer", name: "Defer", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Call", name: "Call", anonymous: false, exported: true, typ: ptrType$36, tag: ""}]);
	ReturnStmt.init("", [{prop: "Return", name: "Return", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Results", name: "Results", anonymous: false, exported: true, typ: sliceType$11, tag: ""}]);
	BranchStmt.init("", [{prop: "TokPos", name: "TokPos", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Tok", name: "Tok", anonymous: false, exported: true, typ: token.Token, tag: ""}, {prop: "Label", name: "Label", anonymous: false, exported: true, typ: ptrType$4, tag: ""}]);
	BlockStmt.init("", [{prop: "Lbrace", name: "Lbrace", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "List", name: "List", anonymous: false, exported: true, typ: sliceType$12, tag: ""}, {prop: "Rbrace", name: "Rbrace", anonymous: false, exported: true, typ: token.Pos, tag: ""}]);
	IfStmt.init("", [{prop: "If", name: "If", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Init", name: "Init", anonymous: false, exported: true, typ: Stmt, tag: ""}, {prop: "Cond", name: "Cond", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Body", name: "Body", anonymous: false, exported: true, typ: ptrType$5, tag: ""}, {prop: "Else", name: "Else", anonymous: false, exported: true, typ: Stmt, tag: ""}]);
	CaseClause.init("", [{prop: "Case", name: "Case", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "List", name: "List", anonymous: false, exported: true, typ: sliceType$11, tag: ""}, {prop: "Colon", name: "Colon", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Body", name: "Body", anonymous: false, exported: true, typ: sliceType$12, tag: ""}]);
	SwitchStmt.init("", [{prop: "Switch", name: "Switch", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Init", name: "Init", anonymous: false, exported: true, typ: Stmt, tag: ""}, {prop: "Tag", name: "Tag", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Body", name: "Body", anonymous: false, exported: true, typ: ptrType$5, tag: ""}]);
	TypeSwitchStmt.init("", [{prop: "Switch", name: "Switch", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Init", name: "Init", anonymous: false, exported: true, typ: Stmt, tag: ""}, {prop: "Assign", name: "Assign", anonymous: false, exported: true, typ: Stmt, tag: ""}, {prop: "Body", name: "Body", anonymous: false, exported: true, typ: ptrType$5, tag: ""}]);
	CommClause.init("", [{prop: "Case", name: "Case", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Comm", name: "Comm", anonymous: false, exported: true, typ: Stmt, tag: ""}, {prop: "Colon", name: "Colon", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Body", name: "Body", anonymous: false, exported: true, typ: sliceType$12, tag: ""}]);
	SelectStmt.init("", [{prop: "Select", name: "Select", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Body", name: "Body", anonymous: false, exported: true, typ: ptrType$5, tag: ""}]);
	ForStmt.init("", [{prop: "For", name: "For", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Init", name: "Init", anonymous: false, exported: true, typ: Stmt, tag: ""}, {prop: "Cond", name: "Cond", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Post", name: "Post", anonymous: false, exported: true, typ: Stmt, tag: ""}, {prop: "Body", name: "Body", anonymous: false, exported: true, typ: ptrType$5, tag: ""}]);
	RangeStmt.init("", [{prop: "For", name: "For", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Key", name: "Key", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Value", name: "Value", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "TokPos", name: "TokPos", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Tok", name: "Tok", anonymous: false, exported: true, typ: token.Token, tag: ""}, {prop: "X", name: "X", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Body", name: "Body", anonymous: false, exported: true, typ: ptrType$5, tag: ""}]);
	Spec.init([{prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "specNode", name: "specNode", pkg: "example.com/transpiler/xgtest/ast", typ: $funcType([], [], false)}]);
	ImportSpec.init("", [{prop: "Doc", name: "Doc", anonymous: false, exported: true, typ: ptrType, tag: ""}, {prop: "Name", name: "Name", anonymous: false, exported: true, typ: ptrType$4, tag: ""}, {prop: "Path", name: "Path", anonymous: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "Comment", name: "Comment", anonymous: false, exported: true, typ: ptrType, tag: ""}, {prop: "EndPos", name: "EndPos", anonymous: false, exported: true, typ: token.Pos, tag: ""}]);
	ValueSpec.init("", [{prop: "Doc", name: "Doc", anonymous: false, exported: true, typ: ptrType, tag: ""}, {prop: "Names", name: "Names", anonymous: false, exported: true, typ: sliceType$8, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Values", name: "Values", anonymous: false, exported: true, typ: sliceType$11, tag: ""}, {prop: "Comment", name: "Comment", anonymous: false, exported: true, typ: ptrType, tag: ""}]);
	TypeSpec.init("", [{prop: "Doc", name: "Doc", anonymous: false, exported: true, typ: ptrType, tag: ""}, {prop: "Name", name: "Name", anonymous: false, exported: true, typ: ptrType$4, tag: ""}, {prop: "Assign", name: "Assign", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: Expr, tag: ""}, {prop: "Comment", name: "Comment", anonymous: false, exported: true, typ: ptrType, tag: ""}]);
	BadDecl.init("", [{prop: "From", name: "From", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "To", name: "To", anonymous: false, exported: true, typ: token.Pos, tag: ""}]);
	GenDecl.init("", [{prop: "Doc", name: "Doc", anonymous: false, exported: true, typ: ptrType, tag: ""}, {prop: "TokPos", name: "TokPos", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Tok", name: "Tok", anonymous: false, exported: true, typ: token.Token, tag: ""}, {prop: "Lparen", name: "Lparen", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Specs", name: "Specs", anonymous: false, exported: true, typ: sliceType$13, tag: ""}, {prop: "Rparen", name: "Rparen", anonymous: false, exported: true, typ: token.Pos, tag: ""}]);
	FuncDecl.init("", [{prop: "Doc", name: "Doc", anonymous: false, exported: true, typ: ptrType, tag: ""}, {prop: "Recv", name: "Recv", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Name", name: "Name", anonymous: false, exported: true, typ: ptrType$4, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: ptrType$16, tag: ""}, {prop: "Body", name: "Body", anonymous: false, exported: true, typ: ptrType$5, tag: ""}]);
	File.init("", [{prop: "Doc", name: "Doc", anonymous: false, exported: true, typ: ptrType, tag: ""}, {prop: "Package", name: "Package", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Name", name: "Name", anonymous: false, exported: true, typ: ptrType$4, tag: ""}, {prop: "Decls", name: "Decls", anonymous: false, exported: true, typ: sliceType$6, tag: ""}, {prop: "Scope", name: "Scope", anonymous: false, exported: true, typ: ptrType$26, tag: ""}, {prop: "Imports", name: "Imports", anonymous: false, exported: true, typ: sliceType$7, tag: ""}, {prop: "Unresolved", name: "Unresolved", anonymous: false, exported: true, typ: sliceType$8, tag: ""}, {prop: "Comments", name: "Comments", anonymous: false, exported: true, typ: sliceType$2, tag: ""}]);
	Package.init("", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Scope", name: "Scope", anonymous: false, exported: true, typ: ptrType$26, tag: ""}, {prop: "Imports", name: "Imports", anonymous: false, exported: true, typ: mapType, tag: ""}, {prop: "Files", name: "Files", anonymous: false, exported: true, typ: mapType$1, tag: ""}]);
	Scope.init("", [{prop: "Outer", name: "Outer", anonymous: false, exported: true, typ: ptrType$26, tag: ""}, {prop: "Objects", name: "Objects", anonymous: false, exported: true, typ: mapType, tag: ""}]);
	Object.init("", [{prop: "Kind", name: "Kind", anonymous: false, exported: true, typ: ObjKind, tag: ""}, {prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Decl", name: "Decl", anonymous: false, exported: true, typ: $emptyInterface, tag: ""}, {prop: "Data", name: "Data", anonymous: false, exported: true, typ: $emptyInterface, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: $emptyInterface, tag: ""}]);
	Visitor.init([{prop: "Visit", name: "Visit", pkg: "", typ: $funcType([Node], [Visitor], false)}]);
	inspector.init([Node], [$Bool], false);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = scanner.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = token.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		objKindStrings = $toNativeArray($kindString, ["bad", "package", "const", "type", "var", "func", "label"]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["container/heap"] = (function() {
	var $pkg = {}, $init, sort, Init, Pop, Fix, up, down;
	sort = $packages["sort"];
	Init = function(h) {
		var _q, _r, _r$1, h, i, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; h = $f.h; i = $f.i; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = h.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		i = (_q = n / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) - 1 >> 0;
		/* while (true) { */ case 2:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 3; continue; }
			_r$1 = down(h, i, n); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i - (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Init }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f.h = h; $f.i = i; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Init = Init;
	Pop = function(h) {
		var _r, _r$1, _r$2, h, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; h = $f.h; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = h.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r - 1 >> 0;
		$r = h.Swap(0, n); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = down(h, 0, n); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = h.Pop(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pop }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.h = h; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Pop = Pop;
	Fix = function(h, i) {
		var _arg, _arg$1, _arg$2, _r, _r$1, h, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; h = $f.h; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = h;
		_arg$1 = i;
		_r = h.Len(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$2 = _r;
		_r$1 = down(_arg, _arg$1, _arg$2); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (!_r$1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r$1) { */ case 1:
			$r = up(h, i); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fix }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.h = h; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fix = Fix;
	up = function(h, j) {
		var _q, _r, _v, h, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _v = $f._v; h = $f.h; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			i = (_q = ((j - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (i === j) { _v = true; $s = 5; continue s; }
			_r = h.Less(j, i); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = !_r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				/* break; */ $s = 2; continue;
			/* } */ case 4:
			$r = h.Swap(i, j); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			j = i;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: up }; } $f._q = _q; $f._r = _r; $f._v = _v; $f.h = h; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	down = function(h, i0, n) {
		var _r, _r$1, _v, h, i, i0, j, j1, j2, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; h = $f.h; i = $f.i; i0 = $f.i0; j = $f.j; j1 = $f.j1; j2 = $f.j2; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = i0;
		/* while (true) { */ case 1:
			j1 = ($imul(2, i)) + 1 >> 0;
			if (j1 >= n || j1 < 0) {
				/* break; */ $s = 2; continue;
			}
			j = j1;
			j2 = j1 + 1 >> 0;
			if (!(j2 < n)) { _v = false; $s = 5; continue s; }
			_r = h.Less(j2, j1); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				j = j2;
			/* } */ case 4:
			_r$1 = h.Less(j, i); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				/* break; */ $s = 2; continue;
			/* } */ case 8:
			$r = h.Swap(i, j); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = j;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return i > i0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: down }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.h = h; $f.i = i; $f.i0 = i0; $f.j = j; $f.j1 = j1; $f.j2 = j2; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = sort.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io/ioutil"] = (function() {
	var $pkg = {}, $init, bytes, io, os, filepath, sort, strconv, sync, time, sliceType, sliceType$1, ptrType, arrayType, blackHolePool, readAll, ReadFile;
	bytes = $packages["bytes"];
	io = $packages["io"];
	os = $packages["os"];
	filepath = $packages["path/filepath"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	time = $packages["time"];
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Uint8);
	ptrType = $ptrType(sliceType$1);
	arrayType = $arrayType($Uint8, 64);
	readAll = function(r, capacity) {
		var _r, _tmp, _tmp$1, _tuple, b, buf, capacity, err, r, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; buf = $f.buf; capacity = $f.capacity; err = $f.err; r = $f.r; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		b = sliceType$1.nil;
		err[0] = $ifaceNil;
		buf = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), 0);
		$deferred.push([(function(err) { return function() {
			var _tuple, e, ok, panicErr;
			e = $recover();
			if ($interfaceIsEqual(e, $ifaceNil)) {
				return;
			}
			_tuple = $assertType(e, $error, true);
			panicErr = _tuple[0];
			ok = _tuple[1];
			if (ok && $interfaceIsEqual(panicErr, bytes.ErrTooLarge)) {
				err[0] = panicErr;
			} else {
				$panic(e);
			}
		}; })(err), []]);
		if ((x = (new $Int64(0, (((capacity.$low + ((capacity.$high >> 31) * 4294967296)) >> 0)))), (x.$high === capacity.$high && x.$low === capacity.$low))) {
			buf.Grow((((capacity.$low + ((capacity.$high >> 31) * 4294967296)) >> 0)));
		}
		_r = buf.ReadFrom(r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err[0] = _tuple[1];
		_tmp = buf.Bytes();
		_tmp$1 = err[0];
		b = _tmp;
		err[0] = _tmp$1;
		$s = -1; return [b, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [b, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: readAll }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.capacity = capacity; $f.err = err; $f.r = r; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ReadFile = function(filename) {
		var _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, err, err$1, f, fi, filename, n, size, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; err$1 = $f.err$1; f = $f.f; fi = $f.fi; filename = $f.filename; n = $f.n; size = $f.size; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		_r = os.Open(filename); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType$1.nil, err];
		}
		$deferred.push([$methodVal(f, "Close"), []]);
		n = new $Int64(0, 512);
		_r$1 = f.Stat(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		fi = _tuple$1[0];
		err$1 = _tuple$1[1];
		/* */ if ($interfaceIsEqual(err$1, $ifaceNil)) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($interfaceIsEqual(err$1, $ifaceNil)) { */ case 3:
			_r$2 = fi.Size(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			size = (x = _r$2, new $Int64(x.$high + 0, x.$low + 512));
			if ((size.$high > n.$high || (size.$high === n.$high && size.$low > n.$low))) {
				n = size;
			}
		/* } */ case 4:
		_r$3 = readAll(f, n); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [sliceType$1.nil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ReadFile }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.fi = fi; $f.filename = filename; $f.n = n; $f.size = size; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.ReadFile = ReadFile;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		blackHolePool = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			var b, b$24ptr;
			b = $makeSlice(sliceType$1, 8192);
			return (b$24ptr || (b$24ptr = new ptrType(function() { return b; }, function($v) { b = $subslice(new sliceType$1($v.$array), $v.$offset, $v.$offset + $v.$length); })));
		}));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["example.com/transpiler/xgtest/parser"] = (function() {
	var $pkg = {}, $init, bytes, errors, ast, scanner, fmt, token, io, ioutil, os, filepath, strconv, strings, unicode, Mode, parser, bailout, parseSpecFunction, sliceType, ptrType, arrayType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, sliceType$1, ptrType$5, ptrType$6, sliceType$2, ptrType$7, sliceType$3, sliceType$4, sliceType$5, ptrType$8, ptrType$10, sliceType$7, ptrType$11, sliceType$8, sliceType$9, ptrType$12, ptrType$13, ptrType$14, sliceType$10, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, sliceType$11, ptrType$22, arrayType$1, arrayType$2, ptrType$23, ptrType$24, ptrType$25, ptrType$26, ptrType$27, ptrType$28, ptrType$29, ptrType$30, ptrType$31, ptrType$32, ptrType$33, ptrType$34, ptrType$35, ptrType$36, ptrType$37, ptrType$38, ptrType$39, ptrType$40, ptrType$41, ptrType$42, ptrType$43, sliceType$12, ptrType$44, ptrType$45, ptrType$46, funcType, unresolved, readSource, ParseFile, trace, un, assert, syncStmt, syncDecl, isTypeName, isLiteralType, deref, unparen, isTypeSwitchAssert, isValidImport;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	ast = $packages["example.com/transpiler/xgtest/ast"];
	scanner = $packages["example.com/transpiler/xgtest/scanner"];
	fmt = $packages["fmt"];
	token = $packages["go/token"];
	io = $packages["io"];
	ioutil = $packages["io/ioutil"];
	os = $packages["os"];
	filepath = $packages["path/filepath"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	unicode = $packages["unicode"];
	Mode = $pkg.Mode = $newType(4, $kindUint, "parser.Mode", true, "example.com/transpiler/xgtest/parser", true, null);
	parser = $pkg.parser = $newType(0, $kindStruct, "parser.parser", true, "example.com/transpiler/xgtest/parser", false, function(file_, errors_, scanner_, mode_, trace_, indent_, comments_, leadComment_, lineComment_, pos_, tok_, lit_, syncPos_, syncCnt_, exprLev_, inRhs_, pkgScope_, topScope_, unresolved_, imports_, labelScope_, targetStack_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$3.nil;
			this.errors = scanner.ErrorList.nil;
			this.scanner = new scanner.Scanner.ptr(ptrType$3.nil, "", sliceType.nil, $throwNilPointerError, 0, 0, 0, 0, 0, false, 0);
			this.mode = 0;
			this.trace = false;
			this.indent = 0;
			this.comments = sliceType$1.nil;
			this.leadComment = ptrType$4.nil;
			this.lineComment = ptrType$4.nil;
			this.pos = 0;
			this.tok = 0;
			this.lit = "";
			this.syncPos = 0;
			this.syncCnt = 0;
			this.exprLev = 0;
			this.inRhs = false;
			this.pkgScope = ptrType$5.nil;
			this.topScope = ptrType$5.nil;
			this.unresolved = sliceType$2.nil;
			this.imports = sliceType$3.nil;
			this.labelScope = ptrType$5.nil;
			this.targetStack = sliceType$4.nil;
			return;
		}
		this.file = file_;
		this.errors = errors_;
		this.scanner = scanner_;
		this.mode = mode_;
		this.trace = trace_;
		this.indent = indent_;
		this.comments = comments_;
		this.leadComment = leadComment_;
		this.lineComment = lineComment_;
		this.pos = pos_;
		this.tok = tok_;
		this.lit = lit_;
		this.syncPos = syncPos_;
		this.syncCnt = syncCnt_;
		this.exprLev = exprLev_;
		this.inRhs = inRhs_;
		this.pkgScope = pkgScope_;
		this.topScope = topScope_;
		this.unresolved = unresolved_;
		this.imports = imports_;
		this.labelScope = labelScope_;
		this.targetStack = targetStack_;
	});
	bailout = $pkg.bailout = $newType(0, $kindStruct, "parser.bailout", true, "example.com/transpiler/xgtest/parser", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	parseSpecFunction = $pkg.parseSpecFunction = $newType(4, $kindFunc, "parser.parseSpecFunction", true, "example.com/transpiler/xgtest/parser", false, null);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(bytes.Buffer);
	arrayType = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(ast.File);
	ptrType$2 = $ptrType(token.FileSet);
	ptrType$3 = $ptrType(token.File);
	ptrType$4 = $ptrType(ast.CommentGroup);
	sliceType$1 = $sliceType(ptrType$4);
	ptrType$5 = $ptrType(ast.Scope);
	ptrType$6 = $ptrType(ast.Ident);
	sliceType$2 = $sliceType(ptrType$6);
	ptrType$7 = $ptrType(ast.ImportSpec);
	sliceType$3 = $sliceType(ptrType$7);
	sliceType$4 = $sliceType(sliceType$2);
	sliceType$5 = $sliceType(ast.Decl);
	ptrType$8 = $ptrType(ast.Object);
	ptrType$10 = $ptrType(scanner.ErrorList);
	sliceType$7 = $sliceType($emptyInterface);
	ptrType$11 = $ptrType(ast.Comment);
	sliceType$8 = $sliceType(ptrType$11);
	sliceType$9 = $sliceType(ast.Expr);
	ptrType$12 = $ptrType(ast.BadExpr);
	ptrType$13 = $ptrType(ast.BasicLit);
	ptrType$14 = $ptrType(ast.Field);
	sliceType$10 = $sliceType(ptrType$14);
	ptrType$15 = $ptrType(ast.FieldList);
	ptrType$16 = $ptrType(ast.StructType);
	ptrType$17 = $ptrType(ast.StarExpr);
	ptrType$18 = $ptrType(ast.FuncType);
	ptrType$19 = $ptrType(ast.InterfaceType);
	ptrType$20 = $ptrType(ast.MapType);
	ptrType$21 = $ptrType(ast.ChanType);
	sliceType$11 = $sliceType(ast.Stmt);
	ptrType$22 = $ptrType(ast.BlockStmt);
	arrayType$1 = $arrayType(ast.Expr, 3);
	arrayType$2 = $arrayType(token.Pos, 2);
	ptrType$23 = $ptrType(ast.CallExpr);
	ptrType$24 = $ptrType(ast.FuncLit);
	ptrType$25 = $ptrType(ast.CompositeLit);
	ptrType$26 = $ptrType(ast.ParenExpr);
	ptrType$27 = $ptrType(ast.SelectorExpr);
	ptrType$28 = $ptrType(ast.IndexExpr);
	ptrType$29 = $ptrType(ast.SliceExpr);
	ptrType$30 = $ptrType(ast.TypeAssertExpr);
	ptrType$31 = $ptrType(ast.UnaryExpr);
	ptrType$32 = $ptrType(ast.BinaryExpr);
	ptrType$33 = $ptrType(ast.ArrayType);
	ptrType$34 = $ptrType(ast.Ellipsis);
	ptrType$35 = $ptrType(ast.ReturnStmt);
	ptrType$36 = $ptrType(ast.BranchStmt);
	ptrType$37 = $ptrType(ast.ExprStmt);
	ptrType$38 = $ptrType(ast.IfStmt);
	ptrType$39 = $ptrType(ast.CaseClause);
	ptrType$40 = $ptrType(ast.AssignStmt);
	ptrType$41 = $ptrType(ast.CommClause);
	ptrType$42 = $ptrType(ast.SelectStmt);
	ptrType$43 = $ptrType(ast.LabeledStmt);
	sliceType$12 = $sliceType(ast.Spec);
	ptrType$44 = $ptrType(ast.GenDecl);
	ptrType$45 = $ptrType(ast.FuncDecl);
	ptrType$46 = $ptrType(parser);
	funcType = $funcType([ptrType$46], [], false);
	readSource = function(filename, src) {
		var _r, _r$1, _ref, _tuple, buf, err, filename, s, s$1, s$2, s$3, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; buf = $f.buf; err = $f.err; filename = $f.filename; s = $f.s; s$1 = $f.s$1; s$2 = $f.s$2; s$3 = $f.s$3; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		/* */ if (!($interfaceIsEqual(src, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(src, $ifaceNil))) { */ case 1:
			_ref = src;
			/* */ if ($assertType(_ref, $String, true)[1]) { $s = 3; continue; }
			/* */ if ($assertType(_ref, sliceType, true)[1]) { $s = 4; continue; }
			/* */ if ($assertType(_ref, ptrType, true)[1]) { $s = 5; continue; }
			/* */ if ($assertType(_ref, io.Reader, true)[1]) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ($assertType(_ref, $String, true)[1]) { */ case 3:
				s = _ref.$val;
				$s = -1; return [(new sliceType($stringToBytes(s))), $ifaceNil];
			/* } else if ($assertType(_ref, sliceType, true)[1]) { */ case 4:
				s$1 = _ref.$val;
				$s = -1; return [s$1, $ifaceNil];
			/* } else if ($assertType(_ref, ptrType, true)[1]) { */ case 5:
				s$2 = _ref.$val;
				if (!(s$2 === ptrType.nil)) {
					$s = -1; return [s$2.Bytes(), $ifaceNil];
				}
				$s = 7; continue;
			/* } else if ($assertType(_ref, io.Reader, true)[1]) { */ case 6:
				s$3 = _ref;
				buf[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), 0);
				_r = io.Copy(buf[0], s$3); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [sliceType.nil, err];
				}
				$s = -1; return [buf[0].Bytes(), $ifaceNil];
			/* } */ case 7:
			$s = -1; return [sliceType.nil, errors.New("invalid source")];
		/* } */ case 2:
		_r$1 = ioutil.ReadFile(filename); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: readSource }; } $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.filename = filename; $f.s = s; $f.s$1 = s$1; $f.s$2 = s$2; $f.s$3 = s$3; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParseFile = function(fset, filename, src, mode) {
		var _r, _r$1, _tmp, _tmp$1, _tuple, err, f, filename, fset, mode, p, src, text, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; filename = $f.filename; fset = $f.fset; mode = $f.mode; p = $f.p; src = $f.src; text = $f.text; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		f = [f];
		p = [p];
		f[0] = ptrType$1.nil;
		err[0] = $ifaceNil;
		if (fset === ptrType$2.nil) {
			$panic(new $String("parser.ParseFile: no token.FileSet provided (fset == nil)"));
		}
		_r = readSource(filename, src); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		text = _tuple[0];
		err[0] = _tuple[1];
		if (!($interfaceIsEqual(err[0], $ifaceNil))) {
			_tmp = ptrType$1.nil;
			_tmp$1 = err[0];
			f[0] = _tmp;
			err[0] = _tmp$1;
			$s = -1; return [f[0], err[0]];
		}
		p[0] = new parser.ptr(ptrType$3.nil, scanner.ErrorList.nil, new scanner.Scanner.ptr(ptrType$3.nil, "", sliceType.nil, $throwNilPointerError, 0, 0, 0, 0, 0, false, 0), 0, false, 0, sliceType$1.nil, ptrType$4.nil, ptrType$4.nil, 0, 0, "", 0, 0, 0, false, ptrType$5.nil, ptrType$5.nil, sliceType$2.nil, sliceType$3.nil, ptrType$5.nil, sliceType$4.nil);
		$deferred.push([(function(err, f, p) { return function $b() {
			var _tuple$1, e, ok, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple$1 = $f._tuple$1; e = $f.e; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple$1 = $assertType(e, bailout, true);
				ok = _tuple$1[1];
				if (!ok) {
					$panic(e);
				}
			}
			if (f[0] === ptrType$1.nil) {
				f[0] = new ast.File.ptr(ptrType$4.nil, 0, new ast.Ident.ptr(0, "", ptrType$8.nil), sliceType$5.nil, ast.NewScope(ptrType$5.nil), sliceType$3.nil, sliceType$2.nil, sliceType$1.nil);
			}
			$r = p[0].errors.Sort(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			err[0] = p[0].errors.Err();
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._tuple$1 = _tuple$1; $f.e = e; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
		}; })(err, f, p), []]);
		$r = p[0].init(fset, filename, text, mode); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = p[0].parseFile(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		f[0] = _r$1;
		$s = -1; return [f[0], err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [f[0], err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ParseFile }; } $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.filename = filename; $f.fset = fset; $f.mode = mode; $f.p = p; $f.src = src; $f.text = text; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.ParseFile = ParseFile;
	parser.ptr.prototype.init = function(fset, filename, src, mode) {
		var eh, filename, fset, m, mode, p, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; eh = $f.eh; filename = $f.filename; fset = $f.fset; m = $f.m; mode = $f.mode; p = $f.p; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = [p];
		p[0] = this;
		p[0].file = fset.AddFile(filename, -1, src.$length);
		m = 0;
		if (!((((mode & 4) >>> 0) === 0))) {
			m = 1;
		}
		eh = (function(p) { return function(pos, msg) {
			var msg, pos;
			(p[0].$ptr_errors || (p[0].$ptr_errors = new ptrType$10(function() { return this.$target.errors; }, function($v) { this.$target.errors = $v; }, p[0]))).Add($clone(pos, token.Position), msg);
		}; })(p);
		$r = p[0].scanner.Init(p[0].file, src, eh, m); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p[0].mode = mode;
		p[0].trace = !((((mode & 8) >>> 0) === 0));
		$r = p[0].next(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.init }; } $f.eh = eh; $f.filename = filename; $f.fset = fset; $f.m = m; $f.mode = mode; $f.p = p; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.init = function(fset, filename, src, mode) { return this.$val.init(fset, filename, src, mode); };
	parser.ptr.prototype.openScope = function() {
		var p;
		p = this;
		p.topScope = ast.NewScope(p.topScope);
	};
	parser.prototype.openScope = function() { return this.$val.openScope(); };
	parser.ptr.prototype.closeScope = function() {
		var p;
		p = this;
		p.topScope = p.topScope.Outer;
	};
	parser.prototype.closeScope = function() { return this.$val.closeScope(); };
	parser.ptr.prototype.openLabelScope = function() {
		var p;
		p = this;
		p.labelScope = ast.NewScope(p.labelScope);
		p.targetStack = $append(p.targetStack, sliceType$2.nil);
	};
	parser.prototype.openLabelScope = function() { return this.$val.openLabelScope(); };
	parser.ptr.prototype.closeLabelScope = function() {
		var _arg, _arg$1, _i, _r, _ref, ident, n, p, scope, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _r = $f._r; _ref = $f._ref; ident = $f.ident; n = $f.n; p = $f.p; scope = $f.scope; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		n = p.targetStack.$length - 1 >> 0;
		scope = p.labelScope;
		_ref = (x = p.targetStack, ((n < 0 || n >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + n]));
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			ident = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			ident.Obj = scope.Lookup(ident.Name);
			/* */ if (ident.Obj === ptrType$8.nil && !((((p.mode & 16) >>> 0) === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (ident.Obj === ptrType$8.nil && !((((p.mode & 16) >>> 0) === 0))) { */ case 3:
				_arg = ident.Pos();
				_r = fmt.Sprintf("label %s undefined", new sliceType$7([new $String(ident.Name)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_arg$1 = _r;
				$r = p.error(_arg, _arg$1); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		p.targetStack = $subslice(p.targetStack, 0, n);
		p.labelScope = p.labelScope.Outer;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.closeLabelScope }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.ident = ident; $f.n = n; $f.p = p; $f.scope = scope; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.closeLabelScope = function() { return this.$val.closeLabelScope(); };
	parser.ptr.prototype.declare = function(decl, data, scope, kind, idents) {
		var _arg, _arg$1, _arg$2, _i, _r, _r$1, _r$2, _ref, alt, data, decl, ident, idents, kind, obj, p, pos, prevDecl, scope, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; alt = $f.alt; data = $f.data; decl = $f.decl; ident = $f.ident; idents = $f.idents; kind = $f.kind; obj = $f.obj; p = $f.p; pos = $f.pos; prevDecl = $f.prevDecl; scope = $f.scope; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = idents;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			ident = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			assert(ident.Obj === ptrType$8.nil, "identifier already declared or resolved");
			obj = ast.NewObj(kind, ident.Name);
			obj.Decl = decl;
			obj.Data = data;
			ident.Obj = obj;
			/* */ if (!(ident.Name === "_")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(ident.Name === "_")) { */ case 3:
				alt = scope.Insert(obj);
				/* */ if (!(alt === ptrType$8.nil) && !((((p.mode & 16) >>> 0) === 0))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!(alt === ptrType$8.nil) && !((((p.mode & 16) >>> 0) === 0))) { */ case 5:
					prevDecl = "";
					pos = alt.Pos();
					/* */ if (new token.Pos(pos).IsValid()) { $s = 7; continue; }
					/* */ $s = 8; continue;
					/* if (new token.Pos(pos).IsValid()) { */ case 7:
						_r = p.file.Position(pos); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						_arg = (x = _r, new x.constructor.elem(x));
						_r$1 = fmt.Sprintf("\n\tprevious declaration at %s", new sliceType$7([_arg])); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						prevDecl = _r$1;
					/* } */ case 8:
					_arg$1 = ident.Pos();
					_r$2 = fmt.Sprintf("%s redeclared in this block%s", new sliceType$7([new $String(ident.Name), new $String(prevDecl)])); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_arg$2 = _r$2;
					$r = p.error(_arg$1, _arg$2); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.declare }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.alt = alt; $f.data = data; $f.decl = decl; $f.ident = ident; $f.idents = idents; $f.kind = kind; $f.obj = obj; $f.p = p; $f.pos = pos; $f.prevDecl = prevDecl; $f.scope = scope; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.declare = function(decl, data, scope, kind, idents) { return this.$val.declare(decl, data, scope, kind, idents); };
	parser.ptr.prototype.shortVarDecl = function(decl, list) {
		var _i, _r, _r$1, _ref, _tuple, alt, decl, ident, isIdent, list, n, obj, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; alt = $f.alt; decl = $f.decl; ident = $f.ident; isIdent = $f.isIdent; list = $f.list; n = $f.n; obj = $f.obj; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		n = 0;
		_ref = list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_tuple = $assertType(x, ptrType$6, true);
			ident = _tuple[0];
			isIdent = _tuple[1];
			/* */ if (isIdent) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (isIdent) { */ case 3:
				assert(ident.Obj === ptrType$8.nil, "identifier already declared or resolved");
				obj = ast.NewObj(4, ident.Name);
				obj.Decl = decl;
				ident.Obj = obj;
				if (!(ident.Name === "_")) {
					alt = p.topScope.Insert(obj);
					if (!(alt === ptrType$8.nil)) {
						ident.Obj = alt;
					} else {
						n = n + (1) >> 0;
					}
				}
				$s = 5; continue;
			/* } else { */ case 4:
				_r = x.Pos(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.errorExpected(_r, "identifier on left side of :="); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ if ((n === 0) && !((((p.mode & 16) >>> 0) === 0))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ((n === 0) && !((((p.mode & 16) >>> 0) === 0))) { */ case 8:
			_r$1 = (0 >= list.$length ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + 0]).Pos(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$r = p.error(_r$1, "no new variables on left side of :="); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.shortVarDecl }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f.alt = alt; $f.decl = decl; $f.ident = ident; $f.isIdent = isIdent; $f.list = list; $f.n = n; $f.obj = obj; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.shortVarDecl = function(decl, list) { return this.$val.shortVarDecl(decl, list); };
	parser.ptr.prototype.tryResolve = function(x, collectUnresolved) {
		var _tuple, collectUnresolved, ident, obj, p, s, x;
		p = this;
		_tuple = $assertType(x, ptrType$6, true);
		ident = _tuple[0];
		if (ident === ptrType$6.nil) {
			return;
		}
		assert(ident.Obj === ptrType$8.nil, "identifier already declared or resolved");
		if (ident.Name === "_") {
			return;
		}
		s = p.topScope;
		while (true) {
			if (!(!(s === ptrType$5.nil))) { break; }
			obj = s.Lookup(ident.Name);
			if (!(obj === ptrType$8.nil)) {
				ident.Obj = obj;
				return;
			}
			s = s.Outer;
		}
		if (collectUnresolved) {
			ident.Obj = unresolved;
			p.unresolved = $append(p.unresolved, ident);
		}
	};
	parser.prototype.tryResolve = function(x, collectUnresolved) { return this.$val.tryResolve(x, collectUnresolved); };
	parser.ptr.prototype.resolve = function(x) {
		var p, x;
		p = this;
		p.tryResolve(x, true);
	};
	parser.prototype.resolve = function(x) { return this.$val.resolve(x); };
	parser.ptr.prototype.printTrace = function(a) {
		var _r, _r$1, _r$2, _r$3, _r$4, a, i, p, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; a = $f.a; i = $f.i; p = $f.p; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.file.Position(p.pos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		pos = $clone(_r, token.Position);
		_r$1 = fmt.Printf("%5d:%3d: ", new sliceType$7([new $Int(pos.Line), new $Int(pos.Column)])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		i = $imul(2, p.indent);
		/* while (true) { */ case 3:
			/* if (!(i > 64)) { break; } */ if(!(i > 64)) { $s = 4; continue; }
			_r$2 = fmt.Print(new sliceType$7([new $String(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ")])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			i = i - (64) >> 0;
		/* } */ $s = 3; continue; case 4:
		_r$3 = fmt.Print(new sliceType$7([new $String($substring(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ", 0, i))])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = fmt.Println(a); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.printTrace }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.a = a; $f.i = i; $f.p = p; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.printTrace = function(a) { return this.$val.printTrace(a); };
	trace = function(p, msg) {
		var msg, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; msg = $f.msg; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = p.printTrace(new sliceType$7([new $String(msg), new $String("(")])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p.indent = p.indent + (1) >> 0;
		$s = -1; return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: trace }; } $f.msg = msg; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	un = function(p) {
		var p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p.indent = p.indent - (1) >> 0;
		$r = p.printTrace(new sliceType$7([new $String(")")])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: un }; } $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.ptr.prototype.next0 = function() {
		var _r, _tuple, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.trace && new token.Pos(p.pos).IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace && new token.Pos(p.pos).IsValid()) { */ case 1:
			s = new token.Token(p.tok).String();
				/* */ if (new token.Token(p.tok).IsLiteral()) { $s = 4; continue; }
				/* */ if ((new token.Token(p.tok).IsOperator()) || (new token.Token(p.tok).IsKeyword())) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (new token.Token(p.tok).IsLiteral()) { */ case 4:
					$r = p.printTrace(new sliceType$7([new $String(s), new $String(p.lit)])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 7; continue;
				/* } else if ((new token.Token(p.tok).IsOperator()) || (new token.Token(p.tok).IsKeyword())) { */ case 5:
					$r = p.printTrace(new sliceType$7([new $String("\"" + s + "\"")])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 7; continue;
				/* } else { */ case 6:
					$r = p.printTrace(new sliceType$7([new $String(s)])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 7:
			case 3:
		/* } */ case 2:
		_r = p.scanner.Scan(); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p.pos = _tuple[0];
		p.tok = _tuple[1];
		p.lit = _tuple[2];
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.next0 }; } $f._r = _r; $f._tuple = _tuple; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.next0 = function() { return this.$val.next0(); };
	parser.ptr.prototype.consumeComment = function() {
		var _r, comment, endline, i, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; comment = $f.comment; endline = $f.endline; i = $f.i; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		comment = ptrType$11.nil;
		endline = 0;
		p = this;
		_r = p.file.Line(p.pos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		endline = _r;
		if (p.lit.charCodeAt(1) === 42) {
			i = 0;
			while (true) {
				if (!(i < p.lit.length)) { break; }
				if (p.lit.charCodeAt(i) === 10) {
					endline = endline + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
		}
		comment = new ast.Comment.ptr(p.pos, p.lit);
		$r = p.next0(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return [comment, endline];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.consumeComment }; } $f._r = _r; $f.comment = comment; $f.endline = endline; $f.i = i; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.consumeComment = function() { return this.$val.consumeComment(); };
	parser.ptr.prototype.consumeCommentGroup = function(n) {
		var _r, _r$1, _r$2, _tuple, _v, comment, comments, endline, list, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _v = $f._v; comment = $f.comment; comments = $f.comments; endline = $f.endline; list = $f.list; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		comments = ptrType$4.nil;
		endline = 0;
		p = this;
		list = sliceType$8.nil;
		_r = p.file.Line(p.pos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		endline = _r;
		/* while (true) { */ case 2:
			if (!(p.tok === 2)) { _v = false; $s = 4; continue s; }
			_r$1 = p.file.Line(p.pos); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1 <= (endline + n >> 0); case 4:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 3; continue; }
			comment = ptrType$11.nil;
			_r$2 = p.consumeComment(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = _r$2;
			comment = _tuple[0];
			endline = _tuple[1];
			list = $append(list, comment);
		/* } */ $s = 2; continue; case 3:
		comments = new ast.CommentGroup.ptr(list);
		p.comments = $append(p.comments, comments);
		$s = -1; return [comments, endline];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.consumeCommentGroup }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._v = _v; $f.comment = comment; $f.comments = comments; $f.endline = endline; $f.list = list; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.consumeCommentGroup = function(n) { return this.$val.consumeCommentGroup(n); };
	parser.ptr.prototype.next = function() {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, comment, endline, p, prev, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; comment = $f.comment; endline = $f.endline; p = $f.p; prev = $f.prev; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.leadComment = ptrType$4.nil;
		p.lineComment = ptrType$4.nil;
		prev = p.pos;
		$r = p.next0(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (p.tok === 2) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (p.tok === 2) { */ case 2:
			comment = ptrType$4.nil;
			endline = 0;
			_r = p.file.Line(p.pos); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = p.file.Line(prev); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r === _r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r === _r$1) { */ case 4:
				_r$2 = p.consumeCommentGroup(0); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				comment = _tuple[0];
				endline = _tuple[1];
				_r$3 = p.file.Line(p.pos); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (!((_r$3 === endline)) || (p.tok === 1)) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (!((_r$3 === endline)) || (p.tok === 1)) { */ case 9:
					p.lineComment = comment;
				/* } */ case 10:
			/* } */ case 5:
			endline = -1;
			/* while (true) { */ case 12:
				/* if (!(p.tok === 2)) { break; } */ if(!(p.tok === 2)) { $s = 13; continue; }
				_r$4 = p.consumeCommentGroup(1); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$1 = _r$4;
				comment = _tuple$1[0];
				endline = _tuple$1[1];
			/* } */ $s = 12; continue; case 13:
			_r$5 = p.file.Line(p.pos); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if ((endline + 1 >> 0) === _r$5) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if ((endline + 1 >> 0) === _r$5) { */ case 15:
				p.leadComment = comment;
			/* } */ case 16:
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.next }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.comment = comment; $f.endline = endline; $f.p = p; $f.prev = prev; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.next = function() { return this.$val.next(); };
	parser.ptr.prototype.error = function(pos, msg) {
		var _r, epos, msg, n, p, pos, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; epos = $f.epos; msg = $f.msg; n = $f.n; p = $f.p; pos = $f.pos; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.file.Position(pos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		epos = $clone(_r, token.Position);
		if (((p.mode & 32) >>> 0) === 0) {
			n = p.errors.$length;
			if (n > 0 && ((x = p.errors, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).Pos.Line === epos.Line)) {
				$s = -1; return;
			}
			if (n > 10) {
				$panic((x$2 = new bailout.ptr(), new x$2.constructor.elem(x$2)));
			}
		}
		(p.$ptr_errors || (p.$ptr_errors = new ptrType$10(function() { return this.$target.errors; }, function($v) { this.$target.errors = $v; }, p))).Add($clone(epos, token.Position), msg);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.error }; } $f._r = _r; $f.epos = epos; $f.msg = msg; $f.n = n; $f.p = p; $f.pos = pos; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.error = function(pos, msg) { return this.$val.error(pos, msg); };
	parser.ptr.prototype.errorExpected = function(pos, msg) {
		var msg, p, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; msg = $f.msg; p = $f.p; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		msg = "expected " + msg;
		if (pos === p.pos) {
			if ((p.tok === 57) && p.lit === "\n") {
				msg = msg + (", found newline");
			} else {
				msg = msg + (", found '" + new token.Token(p.tok).String() + "'");
				if (new token.Token(p.tok).IsLiteral()) {
					msg = msg + (" " + p.lit);
				}
			}
		}
		$r = p.error(pos, msg); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.errorExpected }; } $f.msg = msg; $f.p = p; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.errorExpected = function(pos, msg) { return this.$val.errorExpected(pos, msg); };
	parser.ptr.prototype.expect = function(tok) {
		var p, pos, tok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; p = $f.p; pos = $f.pos; tok = $f.tok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		pos = p.pos;
		/* */ if (!((p.tok === tok))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((p.tok === tok))) { */ case 1:
			$r = p.errorExpected(pos, "'" + new token.Token(tok).String() + "'"); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = p.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return pos;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.expect }; } $f.p = p; $f.pos = pos; $f.tok = tok; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.expect = function(tok) { return this.$val.expect(tok); };
	parser.ptr.prototype.expectClosing = function(tok, context) {
		var _r, context, p, tok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; context = $f.context; p = $f.p; tok = $f.tok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (!((p.tok === tok)) && (p.tok === 57) && p.lit === "\n") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((p.tok === tok)) && (p.tok === 57) && p.lit === "\n") { */ case 1:
			$r = p.error(p.pos, "missing ',' before newline in " + context); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r = p.expect(tok); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.expectClosing }; } $f._r = _r; $f.context = context; $f.p = p; $f.tok = tok; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.expectClosing = function(tok, context) { return this.$val.expectClosing(tok, context); };
	parser.ptr.prototype.expectSemi = function() {
		var _1, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (!((p.tok === 54)) && !((p.tok === 56))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((p.tok === 54)) && !((p.tok === 56))) { */ case 1:
				_1 = p.tok;
				/* */ if (_1 === (52)) { $s = 4; continue; }
				/* */ if (_1 === (57)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_1 === (52)) { */ case 4:
					$r = p.errorExpected(p.pos, "';'"); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p.next(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 7; continue;
				/* } else if (_1 === (57)) { */ case 5:
					$r = p.next(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 7; continue;
				/* } else { */ case 6:
					$r = p.errorExpected(p.pos, "';'"); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = syncStmt(p); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 7:
			case 3:
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.expectSemi }; } $f._1 = _1; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.expectSemi = function() { return this.$val.expectSemi(); };
	parser.ptr.prototype.atComma = function(context, follow) {
		var context, follow, msg, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; context = $f.context; follow = $f.follow; msg = $f.msg; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (p.tok === 52) {
			$s = -1; return true;
		}
		/* */ if (!((p.tok === follow))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((p.tok === follow))) { */ case 1:
			msg = "missing ','";
			if ((p.tok === 57) && p.lit === "\n") {
				msg = msg + (" before newline");
			}
			$r = p.error(p.pos, msg + " in " + context); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return true;
		/* } */ case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.atComma }; } $f.context = context; $f.follow = follow; $f.msg = msg; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.atComma = function(context, follow) { return this.$val.atComma(context, follow); };
	assert = function(cond, msg) {
		var cond, msg;
		if (!cond) {
			$panic(new $String("go/parser internal error: " + msg));
		}
	};
	syncStmt = function(p) {
		var _1, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			_1 = p.tok;
			if ((_1 === (61)) || (_1 === (64)) || (_1 === (65)) || (_1 === (67)) || (_1 === (69)) || (_1 === (70)) || (_1 === (72)) || (_1 === (73)) || (_1 === (74)) || (_1 === (80)) || (_1 === (81)) || (_1 === (83)) || (_1 === (84)) || (_1 === (85))) {
				if ((p.pos === p.syncPos) && p.syncCnt < 10) {
					p.syncCnt = p.syncCnt + (1) >> 0;
					$s = -1; return;
				}
				if (p.pos > p.syncPos) {
					p.syncPos = p.pos;
					p.syncCnt = 0;
					$s = -1; return;
				}
			} else if (_1 === (1)) {
				$s = -1; return;
			}
			$r = p.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: syncStmt }; } $f._1 = _1; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	syncDecl = function(p) {
		var _1, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			_1 = p.tok;
			if ((_1 === (64)) || (_1 === (84)) || (_1 === (85))) {
				if ((p.pos === p.syncPos) && p.syncCnt < 10) {
					p.syncCnt = p.syncCnt + (1) >> 0;
					$s = -1; return;
				}
				if (p.pos > p.syncPos) {
					p.syncPos = p.pos;
					p.syncCnt = 0;
					$s = -1; return;
				}
			} else if (_1 === (1)) {
				$s = -1; return;
			}
			$r = p.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: syncDecl }; } $f._1 = _1; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.ptr.prototype.safePos = function(pos) {
		var p, pos, res, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		res = 0;
		p = this;
		$deferred.push([(function() {
			if (!($interfaceIsEqual($recover(), $ifaceNil))) {
				res = (((p.file.Base() + p.file.Size() >> 0) >> 0));
			}
		}), []]);
		$unused(p.file.Offset(pos));
		res = pos;
		return res;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  res; } }
	};
	parser.prototype.safePos = function(pos) { return this.$val.safePos(pos); };
	parser.ptr.prototype.parseIdent = function() {
		var _r, name, p, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; name = $f.name; p = $f.p; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		pos = p.pos;
		name = "_";
		/* */ if (p.tok === 4) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.tok === 4) { */ case 1:
			name = p.lit;
			$r = p.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			_r = p.expect(4); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ case 3:
		$s = -1; return new ast.Ident.ptr(pos, name, ptrType$8.nil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseIdent }; } $f._r = _r; $f.name = name; $f.p = p; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseIdent = function() { return this.$val.parseIdent(); };
	parser.ptr.prototype.parseIdentList = function() {
		var _r, _r$1, _r$2, list, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; list = $f.list; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		list = sliceType$2.nil;
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "IdentList"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseIdent(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		list = $append(list, _r$1);
		/* while (true) { */ case 5:
			/* if (!(p.tok === 52)) { break; } */ if(!(p.tok === 52)) { $s = 6; continue; }
			$r = p.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = p.parseIdent(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			list = $append(list, _r$2);
		/* } */ $s = 5; continue; case 6:
		$s = -1; return list;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  list; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseIdentList }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.list = list; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseIdentList = function() { return this.$val.parseIdentList(); };
	parser.ptr.prototype.parseExprList = function(lhs) {
		var _r, _r$1, _r$2, _r$3, _r$4, lhs, list, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; lhs = $f.lhs; list = $f.list; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		list = sliceType$9.nil;
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "ExpressionList"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseExpr(lhs); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = p.checkExpr(_r$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		list = $append(list, _r$2);
		/* while (true) { */ case 6:
			/* if (!(p.tok === 52)) { break; } */ if(!(p.tok === 52)) { $s = 7; continue; }
			$r = p.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = p.parseExpr(lhs); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = p.checkExpr(_r$3); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			list = $append(list, _r$4);
		/* } */ $s = 6; continue; case 7:
		$s = -1; return list;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  list; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseExprList }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.lhs = lhs; $f.list = list; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseExprList = function(lhs) { return this.$val.parseExprList(lhs); };
	parser.ptr.prototype.parseLhsList = function() {
		var _1, _i, _r, _ref, list, old, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _r = $f._r; _ref = $f._ref; list = $f.list; old = $f.old; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		old = p.inRhs;
		p.inRhs = false;
		_r = p.parseExprList(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		list = _r;
		_1 = p.tok;
		if (_1 === (47)) {
		} else if (_1 === (58)) {
		} else {
			_ref = list;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				p.resolve(x);
				_i++;
			}
		}
		p.inRhs = old;
		$s = -1; return list;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseLhsList }; } $f._1 = _1; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.list = list; $f.old = old; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseLhsList = function() { return this.$val.parseLhsList(); };
	parser.ptr.prototype.parseRhsList = function() {
		var _r, list, old, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; list = $f.list; old = $f.old; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		old = p.inRhs;
		p.inRhs = true;
		_r = p.parseExprList(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		list = _r;
		p.inRhs = old;
		$s = -1; return list;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseRhsList }; } $f._r = _r; $f.list = list; $f.old = old; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseRhsList = function() { return this.$val.parseRhsList(); };
	parser.ptr.prototype.parseVoidableType = function() {
		var _r, _r$1, p, pos, typ, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; p = $f.p; pos = $f.pos; typ = $f.typ; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "VoidableType"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.tryType(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		typ = _r$1;
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			pos = p.pos;
			$s = -1; return new ast.VoidType.ptr(pos);
		}
		$s = -1; return typ;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseVoidableType }; } $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.pos = pos; $f.typ = typ; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseVoidableType = function() { return this.$val.parseVoidableType(); };
	parser.ptr.prototype.parseType = function() {
		var _r, _r$1, p, pos, typ, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; p = $f.p; pos = $f.pos; typ = $f.typ; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Type"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.tryType(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		typ = _r$1;
		/* */ if ($interfaceIsEqual(typ, $ifaceNil)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ($interfaceIsEqual(typ, $ifaceNil)) { */ case 5:
			pos = p.pos;
			$r = p.errorExpected(pos, "type"); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return new ast.BadExpr.ptr(pos, p.pos);
		/* } */ case 6:
		$s = -1; return typ;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseType }; } $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.pos = pos; $f.typ = typ; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseType = function() { return this.$val.parseType(); };
	parser.ptr.prototype.parseTypeName = function() {
		var _r, _r$1, _r$2, ident, p, sel, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ident = $f.ident; p = $f.p; sel = $f.sel; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "TypeName"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseIdent(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ident = _r$1;
		/* */ if (p.tok === 53) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (p.tok === 53) { */ case 5:
			$r = p.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p.resolve(ident);
			_r$2 = p.parseIdent(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			sel = _r$2;
			$s = -1; return new ast.SelectorExpr.ptr(ident, sel);
		/* } */ case 6:
		$s = -1; return ident;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseTypeName }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ident = ident; $f.p = p; $f.sel = sel; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseTypeName = function() { return this.$val.parseTypeName(); };
	parser.ptr.prototype.parseArrayType = function() {
		var _r, _r$1, _r$2, _r$3, _r$4, elt, lbrack, len, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; elt = $f.elt; lbrack = $f.lbrack; len = $f.len; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "ArrayType"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(50); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		lbrack = _r$1;
		p.exprLev = p.exprLev + (1) >> 0;
		len = $ifaceNil;
		/* */ if (p.tok === 48) { $s = 5; continue; }
		/* */ if (!((p.tok === 55))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (p.tok === 48) { */ case 5:
			len = new ast.Ellipsis.ptr(p.pos, $ifaceNil);
			$r = p.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 7; continue;
		/* } else if (!((p.tok === 55))) { */ case 6:
			_r$2 = p.parseRhs(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			len = _r$2;
		/* } */ case 7:
		p.exprLev = p.exprLev - (1) >> 0;
		_r$3 = p.expect(55); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = p.parseVoidableType(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		elt = _r$4;
		$s = -1; return new ast.ArrayType.ptr(lbrack, len, elt);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseArrayType }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.elt = elt; $f.lbrack = lbrack; $f.len = len; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseArrayType = function() { return this.$val.parseArrayType(); };
	parser.ptr.prototype.makeIdentList = function(list) {
		var _i, _r, _r$1, _ref, _tuple, _tuple$1, i, ident, idents, isBad, isIdent, list, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; i = $f.i; ident = $f.ident; idents = $f.idents; isBad = $f.isBad; isIdent = $f.isIdent; list = $f.list; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		idents = $makeSlice(sliceType$2, list.$length);
		_ref = list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_tuple = $assertType(x, ptrType$6, true);
			ident = _tuple[0];
			isIdent = _tuple[1];
			/* */ if (!isIdent) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!isIdent) { */ case 3:
				_tuple$1 = $assertType(x, ptrType$12, true);
				isBad = _tuple$1[1];
				/* */ if (!isBad) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!isBad) { */ case 5:
					_r = x.Pos(); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$r = p.errorExpected(_r, "identifier"); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
				_r$1 = x.Pos(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				ident = new ast.Ident.ptr(_r$1, "_", ptrType$8.nil);
			/* } */ case 4:
			((i < 0 || i >= idents.$length) ? ($throwRuntimeError("index out of range"), undefined) : idents.$array[idents.$offset + i] = ident);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return idents;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.makeIdentList }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.i = i; $f.ident = ident; $f.idents = idents; $f.isBad = isBad; $f.isIdent = isIdent; $f.list = list; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.makeIdentList = function(list) { return this.$val.makeIdentList(list); };
	parser.ptr.prototype.parseFieldDecl = function(scope) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, doc, field, idents, list, n, p, scope, tag, typ, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; doc = $f.doc; field = $f.field; idents = $f.idents; list = $f.list; n = $f.n; p = $f.p; scope = $f.scope; tag = $f.tag; typ = $f.typ; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "FieldDecl"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		doc = p.leadComment;
		list = sliceType$9.nil;
		/* while (true) { */ case 4:
			_r$1 = p.parseVarType(false); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			list = $append(list, _r$1);
			if (!((p.tok === 52))) {
				/* break; */ $s = 5; continue;
			}
			$r = p.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 4; continue; case 5:
		_r$2 = p.tryVarType(false); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		typ = _r$2;
		idents = sliceType$2.nil;
		/* */ if (!($interfaceIsEqual(typ, $ifaceNil))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!($interfaceIsEqual(typ, $ifaceNil))) { */ case 9:
			_r$3 = p.makeIdentList(list); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			idents = _r$3;
			$s = 11; continue;
		/* } else { */ case 10:
			typ = (0 >= list.$length ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + 0]);
			n = list.$length;
			/* */ if (n > 1) { $s = 13; continue; }
			/* */ if (!isTypeName(deref(typ))) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (n > 1) { */ case 13:
				$r = p.errorExpected(p.pos, "type"); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				typ = new ast.BadExpr.ptr(p.pos, p.pos);
				$s = 15; continue;
			/* } else if (!isTypeName(deref(typ))) { */ case 14:
				_r$4 = typ.Pos(); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$r = p.errorExpected(_r$4, "anonymous field"); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$5 = typ.Pos(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = typ.End(); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$7 = p.safePos(_r$6); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				typ = new ast.BadExpr.ptr(_r$5, _r$7);
			/* } */ case 15:
		/* } */ case 11:
		tag = ptrType$13.nil;
		/* */ if (p.tok === 9) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (p.tok === 9) { */ case 22:
			tag = new ast.BasicLit.ptr(p.pos, p.tok, p.lit);
			$r = p.next(); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 23:
		$r = p.expectSemi(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		field = new ast.Field.ptr(doc, idents, typ, tag, p.lineComment);
		$r = p.declare(field, $ifaceNil, scope, 4, idents); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p.resolve(typ);
		$s = -1; return field;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$14.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseFieldDecl }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.doc = doc; $f.field = field; $f.idents = idents; $f.list = list; $f.n = n; $f.p = p; $f.scope = scope; $f.tag = tag; $f.typ = typ; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseFieldDecl = function(scope) { return this.$val.parseFieldDecl(scope); };
	parser.ptr.prototype.parseStructType = function() {
		var _r, _r$1, _r$2, _r$3, _r$4, lbrace, list, p, pos, rbrace, scope, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; lbrace = $f.lbrace; list = $f.list; p = $f.p; pos = $f.pos; rbrace = $f.rbrace; scope = $f.scope; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "StructType"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(82); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		_r$2 = p.expect(51); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		lbrace = _r$2;
		scope = ast.NewScope(ptrType$5.nil);
		list = sliceType$10.nil;
		/* while (true) { */ case 6:
			/* if (!((p.tok === 4) || (p.tok === 14) || (p.tok === 49))) { break; } */ if(!((p.tok === 4) || (p.tok === 14) || (p.tok === 49))) { $s = 7; continue; }
			_r$3 = p.parseFieldDecl(scope); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			list = $append(list, _r$3);
		/* } */ $s = 6; continue; case 7:
		_r$4 = p.expect(56); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		rbrace = _r$4;
		$s = -1; return new ast.StructType.ptr(pos, new ast.FieldList.ptr(lbrace, list, rbrace), false);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$16.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseStructType }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.lbrace = lbrace; $f.list = list; $f.p = p; $f.pos = pos; $f.rbrace = rbrace; $f.scope = scope; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseStructType = function() { return this.$val.parseStructType(); };
	parser.ptr.prototype.parsePointerType = function() {
		var _r, _r$1, _r$2, base, p, star, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; base = $f.base; p = $f.p; star = $f.star; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "PointerType"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(14); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		star = _r$1;
		_r$2 = p.parseVoidableType(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		base = _r$2;
		$s = -1; return new ast.StarExpr.ptr(star, base);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$17.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parsePointerType }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.base = base; $f.p = p; $f.star = star; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parsePointerType = function() { return this.$val.parsePointerType(); };
	parser.ptr.prototype.tryVarType = function(isParam) {
		var _r, _r$1, isParam, p, pos, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; isParam = $f.isParam; p = $f.p; pos = $f.pos; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (isParam && (p.tok === 48)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (isParam && (p.tok === 48)) { */ case 1:
			pos = p.pos;
			$r = p.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r = p.tryIdentOrType(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			typ = _r;
			/* */ if (!($interfaceIsEqual(typ, $ifaceNil))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!($interfaceIsEqual(typ, $ifaceNil))) { */ case 5:
				p.resolve(typ);
				$s = 7; continue;
			/* } else { */ case 6:
				$r = p.error(pos, "'...' parameter is missing type"); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				typ = new ast.BadExpr.ptr(pos, p.pos);
			/* } */ case 7:
			$s = -1; return new ast.Ellipsis.ptr(pos, typ);
		/* } */ case 2:
		_r$1 = p.tryIdentOrType(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.tryVarType }; } $f._r = _r; $f._r$1 = _r$1; $f.isParam = isParam; $f.p = p; $f.pos = pos; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.tryVarType = function(isParam) { return this.$val.tryVarType(isParam); };
	parser.ptr.prototype.parseVarType = function(isParam) {
		var _r, isParam, p, pos, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; isParam = $f.isParam; p = $f.p; pos = $f.pos; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.tryVarType(isParam); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		/* */ if ($interfaceIsEqual(typ, $ifaceNil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($interfaceIsEqual(typ, $ifaceNil)) { */ case 2:
			pos = p.pos;
			$r = p.errorExpected(pos, "type"); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.next(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			typ = new ast.BadExpr.ptr(pos, p.pos);
		/* } */ case 3:
		$s = -1; return typ;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseVarType }; } $f._r = _r; $f.isParam = isParam; $f.p = p; $f.pos = pos; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseVarType = function(isParam) { return this.$val.parseVarType(isParam); };
	parser.ptr.prototype.parseParameterList = function(scope, ellipsisOk) {
		var _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, ellipsisOk, field, field$1, i, idents, idents$1, list, p, params, scope, typ, typ$1, typ$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; ellipsisOk = $f.ellipsisOk; field = $f.field; field$1 = $f.field$1; i = $f.i; idents = $f.idents; idents$1 = $f.idents$1; list = $f.list; p = $f.p; params = $f.params; scope = $f.scope; typ = $f.typ; typ$1 = $f.typ$1; typ$2 = $f.typ$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		params = sliceType$10.nil;
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "ParameterList"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		list = sliceType$9.nil;
		/* while (true) { */ case 4:
			_r$1 = p.parseVarType(ellipsisOk); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			list = $append(list, _r$1);
			if (!((p.tok === 52))) {
				/* break; */ $s = 5; continue;
			}
			$r = p.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (p.tok === 54) {
				/* break; */ $s = 5; continue;
			}
		/* } */ $s = 4; continue; case 5:
		_r$2 = p.tryVarType(ellipsisOk); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		typ = _r$2;
		/* */ if (!($interfaceIsEqual(typ, $ifaceNil))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!($interfaceIsEqual(typ, $ifaceNil))) { */ case 9:
			_r$3 = p.makeIdentList(list); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			idents = _r$3;
			field = new ast.Field.ptr(ptrType$4.nil, idents, typ, ptrType$13.nil, ptrType$4.nil);
			params = $append(params, field);
			$r = p.declare(field, $ifaceNil, scope, 4, idents); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p.resolve(typ);
			_r$4 = p.atComma("parameter list", 54); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (!_r$4) { */ case 13:
				$s = -1; return params;
			/* } */ case 14:
			$r = p.next(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* while (true) { */ case 17:
				/* if (!(!((p.tok === 54)) && !((p.tok === 1)))) { break; } */ if(!(!((p.tok === 54)) && !((p.tok === 1)))) { $s = 18; continue; }
				_r$5 = p.parseIdentList(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				idents$1 = _r$5;
				_r$6 = p.parseVarType(ellipsisOk); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				typ$1 = _r$6;
				field$1 = new ast.Field.ptr(ptrType$4.nil, idents$1, typ$1, ptrType$13.nil, ptrType$4.nil);
				params = $append(params, field$1);
				$r = p.declare(field$1, $ifaceNil, scope, 4, idents$1); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p.resolve(typ$1);
				_r$7 = p.atComma("parameter list", 54); /* */ $s = 24; case 24: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				/* */ if (!_r$7) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (!_r$7) { */ case 22:
					/* break; */ $s = 18; continue;
				/* } */ case 23:
				$r = p.next(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ $s = 17; continue; case 18:
			$s = -1; return params;
		/* } */ case 10:
		params = $makeSlice(sliceType$10, list.$length);
		_ref = list;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			typ$2 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			p.resolve(typ$2);
			((i < 0 || i >= params.$length) ? ($throwRuntimeError("index out of range"), undefined) : params.$array[params.$offset + i] = new ast.Field.ptr(ptrType$4.nil, sliceType$2.nil, typ$2, ptrType$13.nil, ptrType$4.nil));
			_i++;
		}
		$s = -1; return params;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  params; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseParameterList }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f.ellipsisOk = ellipsisOk; $f.field = field; $f.field$1 = field$1; $f.i = i; $f.idents = idents; $f.idents$1 = idents$1; $f.list = list; $f.p = p; $f.params = params; $f.scope = scope; $f.typ = typ; $f.typ$1 = typ$1; $f.typ$2 = typ$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseParameterList = function(scope, ellipsisOk) { return this.$val.parseParameterList(scope, ellipsisOk); };
	parser.ptr.prototype.parseParameters = function(scope, ellipsisOk) {
		var _r, _r$1, _r$2, _r$3, ellipsisOk, lparen, p, params, rparen, scope, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; ellipsisOk = $f.ellipsisOk; lparen = $f.lparen; p = $f.p; params = $f.params; rparen = $f.rparen; scope = $f.scope; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Parameters"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		params = sliceType$10.nil;
		_r$1 = p.expect(49); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		lparen = _r$1;
		/* */ if (!((p.tok === 54))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((p.tok === 54))) { */ case 5:
			_r$2 = p.parseParameterList(scope, ellipsisOk); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			params = _r$2;
		/* } */ case 6:
		_r$3 = p.expect(54); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		rparen = _r$3;
		$s = -1; return new ast.FieldList.ptr(lparen, params, rparen);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$15.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseParameters }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.ellipsisOk = ellipsisOk; $f.lparen = lparen; $f.p = p; $f.params = params; $f.rparen = rparen; $f.scope = scope; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseParameters = function(scope, ellipsisOk) { return this.$val.parseParameters(scope, ellipsisOk); };
	parser.ptr.prototype.parseResult = function(scope) {
		var _r, _r$1, _r$2, list, p, scope, typ, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; list = $f.list; p = $f.p; scope = $f.scope; typ = $f.typ; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Result"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		/* */ if (p.tok === 49) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.tok === 49) { */ case 4:
			_r$1 = p.parseParameters(scope, false); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 5:
		_r$2 = p.tryType(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		typ = _r$2;
		if (!($interfaceIsEqual(typ, $ifaceNil))) {
			list = $makeSlice(sliceType$10, 1);
			(0 >= list.$length ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + 0] = new ast.Field.ptr(ptrType$4.nil, sliceType$2.nil, typ, ptrType$13.nil, ptrType$4.nil));
			$s = -1; return new ast.FieldList.ptr(0, list, 0);
		}
		$s = -1; return ptrType$15.nil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$15.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseResult }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.list = list; $f.p = p; $f.scope = scope; $f.typ = typ; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseResult = function(scope) { return this.$val.parseResult(scope); };
	parser.ptr.prototype.parseSignature = function(scope) {
		var _r, _r$1, _r$2, p, params, results, scope, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; p = $f.p; params = $f.params; results = $f.results; scope = $f.scope; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		params = ptrType$15.nil;
		results = ptrType$15.nil;
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Signature"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseParameters(scope, true); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		params = _r$1;
		_r$2 = p.parseResult(scope); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		results = _r$2;
		$s = -1; return [params, results];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [params, results]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseSignature }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.p = p; $f.params = params; $f.results = results; $f.scope = scope; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseSignature = function(scope) { return this.$val.parseSignature(scope); };
	parser.ptr.prototype.parseFuncType = function() {
		var _r, _r$1, _r$2, _tuple, p, params, pos, results, scope, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; p = $f.p; params = $f.params; pos = $f.pos; results = $f.results; scope = $f.scope; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "FuncType"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(71); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		scope = ast.NewScope(p.topScope);
		_r$2 = p.parseSignature(scope); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		params = _tuple[0];
		results = _tuple[1];
		$s = -1; return [new ast.FuncType.ptr(pos, params, results), scope];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [ptrType$18.nil, ptrType$5.nil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseFuncType }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.p = p; $f.params = params; $f.pos = pos; $f.results = results; $f.scope = scope; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseFuncType = function() { return this.$val.parseFuncType(); };
	parser.ptr.prototype.parseMethodSpec = function(scope) {
		var _r, _r$1, _r$2, _tuple, _tuple$1, doc, ident, idents, isIdent, p, params, results, scope, scope$1, spec, typ, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; doc = $f.doc; ident = $f.ident; idents = $f.idents; isIdent = $f.isIdent; p = $f.p; params = $f.params; results = $f.results; scope = $f.scope; scope$1 = $f.scope$1; spec = $f.spec; typ = $f.typ; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "MethodSpec"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		doc = p.leadComment;
		idents = sliceType$2.nil;
		typ = $ifaceNil;
		_r$1 = p.parseTypeName(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		x = _r$1;
		_tuple = $assertType(x, ptrType$6, true);
		ident = _tuple[0];
		isIdent = _tuple[1];
		/* */ if (isIdent && (p.tok === 49)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (isIdent && (p.tok === 49)) { */ case 5:
			idents = new sliceType$2([ident]);
			scope$1 = ast.NewScope(ptrType$5.nil);
			_r$2 = p.parseSignature(scope$1); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			params = _tuple$1[0];
			results = _tuple$1[1];
			typ = new ast.FuncType.ptr(0, params, results);
			$s = 7; continue;
		/* } else { */ case 6:
			typ = x;
			p.resolve(typ);
		/* } */ case 7:
		$r = p.expectSemi(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		spec = new ast.Field.ptr(doc, idents, typ, ptrType$13.nil, p.lineComment);
		$r = p.declare(spec, $ifaceNil, scope, 5, idents); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return spec;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$14.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseMethodSpec }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.doc = doc; $f.ident = ident; $f.idents = idents; $f.isIdent = isIdent; $f.p = p; $f.params = params; $f.results = results; $f.scope = scope; $f.scope$1 = scope$1; $f.spec = spec; $f.typ = typ; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseMethodSpec = function(scope) { return this.$val.parseMethodSpec(scope); };
	parser.ptr.prototype.parseInterfaceType = function() {
		var _r, _r$1, _r$2, _r$3, _r$4, lbrace, list, p, pos, rbrace, scope, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; lbrace = $f.lbrace; list = $f.list; p = $f.p; pos = $f.pos; rbrace = $f.rbrace; scope = $f.scope; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "InterfaceType"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(76); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		_r$2 = p.expect(51); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		lbrace = _r$2;
		scope = ast.NewScope(ptrType$5.nil);
		list = sliceType$10.nil;
		/* while (true) { */ case 6:
			/* if (!(p.tok === 4)) { break; } */ if(!(p.tok === 4)) { $s = 7; continue; }
			_r$3 = p.parseMethodSpec(scope); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			list = $append(list, _r$3);
		/* } */ $s = 6; continue; case 7:
		_r$4 = p.expect(56); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		rbrace = _r$4;
		$s = -1; return new ast.InterfaceType.ptr(pos, new ast.FieldList.ptr(lbrace, list, rbrace), false);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$19.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseInterfaceType }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.lbrace = lbrace; $f.list = list; $f.p = p; $f.pos = pos; $f.rbrace = rbrace; $f.scope = scope; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseInterfaceType = function() { return this.$val.parseInterfaceType(); };
	parser.ptr.prototype.parseMapType = function() {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, key, p, pos, value, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; key = $f.key; p = $f.p; pos = $f.pos; value = $f.value; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "MapType"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(77); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		_r$2 = p.expect(50); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = p.parseType(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		key = _r$3;
		_r$4 = p.expect(55); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		_r$5 = p.parseType(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		value = _r$5;
		$s = -1; return new ast.MapType.ptr(pos, key, value);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$20.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseMapType }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.key = key; $f.p = p; $f.pos = pos; $f.value = value; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseMapType = function() { return this.$val.parseMapType(); };
	parser.ptr.prototype.parseChanType = function() {
		var _r, _r$1, _r$2, _r$3, arrow, dir, p, pos, value, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; arrow = $f.arrow; dir = $f.dir; p = $f.p; pos = $f.pos; value = $f.value; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "ChanType"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		pos = p.pos;
		dir = 3;
		arrow = 0;
		/* */ if (p.tok === 63) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.tok === 63) { */ case 4:
			$r = p.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (p.tok === 36) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (p.tok === 36) { */ case 8:
				arrow = p.pos;
				$r = p.next(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				dir = 1;
			/* } */ case 9:
			$s = 6; continue;
		/* } else { */ case 5:
			_r$1 = p.expect(36); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			arrow = _r$1;
			_r$2 = p.expect(63); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			dir = 2;
		/* } */ case 6:
		_r$3 = p.parseType(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		value = _r$3;
		$s = -1; return new ast.ChanType.ptr(pos, arrow, dir, value);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$21.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseChanType }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.arrow = arrow; $f.dir = dir; $f.p = p; $f.pos = pos; $f.value = value; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseChanType = function() { return this.$val.parseChanType(); };
	parser.ptr.prototype.tryIdentOrType = function() {
		var _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, lparen, p, rparen, typ, typ$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; lparen = $f.lparen; p = $f.p; rparen = $f.rparen; typ = $f.typ; typ$1 = $f.typ$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = p.tok;
			/* */ if (_1 === (4)) { $s = 2; continue; }
			/* */ if (_1 === (50)) { $s = 3; continue; }
			/* */ if (_1 === (82)) { $s = 4; continue; }
			/* */ if (_1 === (14)) { $s = 5; continue; }
			/* */ if (_1 === (71)) { $s = 6; continue; }
			/* */ if (_1 === (76)) { $s = 7; continue; }
			/* */ if (_1 === (77)) { $s = 8; continue; }
			/* */ if ((_1 === (63)) || (_1 === (36))) { $s = 9; continue; }
			/* */ if (_1 === (49)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (4)) { */ case 2:
				_r = p.parseTypeName(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (50)) { */ case 3:
				_r$1 = p.parseArrayType(); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } else if (_1 === (82)) { */ case 4:
				_r$2 = p.parseStructType(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return _r$2;
			/* } else if (_1 === (14)) { */ case 5:
				_r$3 = p.parsePointerType(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$s = -1; return _r$3;
			/* } else if (_1 === (71)) { */ case 6:
				_r$4 = p.parseFuncType(); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple = _r$4;
				typ = _tuple[0];
				$s = -1; return typ;
			/* } else if (_1 === (76)) { */ case 7:
				_r$5 = p.parseInterfaceType(); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return _r$5;
			/* } else if (_1 === (77)) { */ case 8:
				_r$6 = p.parseMapType(); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$s = -1; return _r$6;
			/* } else if ((_1 === (63)) || (_1 === (36))) { */ case 9:
				_r$7 = p.parseChanType(); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$s = -1; return _r$7;
			/* } else if (_1 === (49)) { */ case 10:
				lparen = p.pos;
				$r = p.next(); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$8 = p.parseType(); /* */ $s = 21; case 21: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				typ$1 = _r$8;
				_r$9 = p.expect(54); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				rparen = _r$9;
				$s = -1; return new ast.ParenExpr.ptr(lparen, typ$1, rparen);
			/* } */ case 11:
		case 1:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.tryIdentOrType }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.lparen = lparen; $f.p = p; $f.rparen = rparen; $f.typ = typ; $f.typ$1 = typ$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.tryIdentOrType = function() { return this.$val.tryIdentOrType(); };
	parser.ptr.prototype.tryType = function() {
		var _r, p, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.tryIdentOrType(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		if (!($interfaceIsEqual(typ, $ifaceNil))) {
			p.resolve(typ);
		}
		$s = -1; return typ;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.tryType }; } $f._r = _r; $f.p = p; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.tryType = function() { return this.$val.tryType(); };
	parser.ptr.prototype.parseStmtList = function() {
		var _r, _r$1, list, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; list = $f.list; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		list = sliceType$11.nil;
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "StatementList"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		/* while (true) { */ case 4:
			/* if (!(!((p.tok === 62)) && !((p.tok === 66)) && !((p.tok === 56)) && !((p.tok === 1)))) { break; } */ if(!(!((p.tok === 62)) && !((p.tok === 66)) && !((p.tok === 56)) && !((p.tok === 1)))) { $s = 5; continue; }
			_r$1 = p.parseStmt(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			list = $append(list, _r$1);
		/* } */ $s = 4; continue; case 5:
		$s = -1; return list;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  list; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseStmtList }; } $f._r = _r; $f._r$1 = _r$1; $f.list = list; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseStmtList = function() { return this.$val.parseStmtList(); };
	parser.ptr.prototype.parseBody = function(scope) {
		var _r, _r$1, _r$2, _r$3, lbrace, list, p, rbrace, scope, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; lbrace = $f.lbrace; list = $f.list; p = $f.p; rbrace = $f.rbrace; scope = $f.scope; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Body"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(51); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		lbrace = _r$1;
		p.topScope = scope;
		p.openLabelScope();
		_r$2 = p.parseStmtList(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		list = _r$2;
		$r = p.closeLabelScope(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p.closeScope();
		_r$3 = p.expect(56); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		rbrace = _r$3;
		$s = -1; return new ast.BlockStmt.ptr(lbrace, list, rbrace);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$22.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseBody }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.lbrace = lbrace; $f.list = list; $f.p = p; $f.rbrace = rbrace; $f.scope = scope; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseBody = function(scope) { return this.$val.parseBody(scope); };
	parser.ptr.prototype.parseBlockStmt = function() {
		var _r, _r$1, _r$2, _r$3, lbrace, list, p, rbrace, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; lbrace = $f.lbrace; list = $f.list; p = $f.p; rbrace = $f.rbrace; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "BlockStmt"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(51); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		lbrace = _r$1;
		p.openScope();
		_r$2 = p.parseStmtList(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		list = _r$2;
		p.closeScope();
		_r$3 = p.expect(56); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		rbrace = _r$3;
		$s = -1; return new ast.BlockStmt.ptr(lbrace, list, rbrace);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$22.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseBlockStmt }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.lbrace = lbrace; $f.list = list; $f.p = p; $f.rbrace = rbrace; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseBlockStmt = function() { return this.$val.parseBlockStmt(); };
	parser.ptr.prototype.parseFuncTypeOrLit = function() {
		var _r, _r$1, _r$2, _tuple, body, p, scope, typ, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; body = $f.body; p = $f.p; scope = $f.scope; typ = $f.typ; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "FuncTypeOrLit"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseFuncType(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		typ = _tuple[0];
		scope = _tuple[1];
		if (!((p.tok === 51))) {
			$s = -1; return typ;
		}
		p.exprLev = p.exprLev + (1) >> 0;
		_r$2 = p.parseBody(scope); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		body = _r$2;
		p.exprLev = p.exprLev - (1) >> 0;
		$s = -1; return new ast.FuncLit.ptr(typ, body);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseFuncTypeOrLit }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.body = body; $f.p = p; $f.scope = scope; $f.typ = typ; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseFuncTypeOrLit = function() { return this.$val.parseFuncTypeOrLit(); };
	parser.ptr.prototype.parseOperand = function(lhs) {
		var _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, isIdent, lhs, lparen, p, pos, rparen, typ, x, x$1, x$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; isIdent = $f.isIdent; lhs = $f.lhs; lparen = $f.lparen; p = $f.p; pos = $f.pos; rparen = $f.rparen; typ = $f.typ; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Operand"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
			_1 = p.tok;
			/* */ if (_1 === (4)) { $s = 5; continue; }
			/* */ if ((_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9))) { $s = 6; continue; }
			/* */ if (_1 === (49)) { $s = 7; continue; }
			/* */ if (_1 === (71)) { $s = 8; continue; }
			/* */ if (_1 === (57)) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (4)) { */ case 5:
				_r$1 = p.parseIdent(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				x = _r$1;
				if (!lhs) {
					p.resolve(x);
				}
				$s = -1; return x;
			/* } else if ((_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9))) { */ case 6:
				x$1 = new ast.BasicLit.ptr(p.pos, p.tok, p.lit);
				$r = p.next(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return x$1;
			/* } else if (_1 === (49)) { */ case 7:
				lparen = p.pos;
				$r = p.next(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p.exprLev = p.exprLev + (1) >> 0;
				_r$2 = p.parseRhsOrType(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				x$2 = _r$2;
				p.exprLev = p.exprLev - (1) >> 0;
				_r$3 = p.expect(54); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				rparen = _r$3;
				$s = -1; return new ast.ParenExpr.ptr(lparen, x$2, rparen);
			/* } else if (_1 === (71)) { */ case 8:
				_r$4 = p.parseFuncTypeOrLit(); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return _r$4;
			/* } else if (_1 === (57)) { */ case 9:
				$r = p.next(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$5 = p.parseOperand(lhs); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return _r$5;
			/* } */ case 10:
		case 4:
		_r$6 = p.tryIdentOrType(); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		typ = _r$6;
		if (!($interfaceIsEqual(typ, $ifaceNil))) {
			_tuple = $assertType(typ, ptrType$6, true);
			isIdent = _tuple[1];
			assert(!isIdent, "type cannot be identifier");
			$s = -1; return typ;
		}
		pos = p.pos;
		$r = p.errorExpected(pos, "operand"); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syncStmt(p); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return new ast.BadExpr.ptr(pos, p.pos);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseOperand }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.isIdent = isIdent; $f.lhs = lhs; $f.lparen = lparen; $f.p = p; $f.pos = pos; $f.rparen = rparen; $f.typ = typ; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseOperand = function(lhs) { return this.$val.parseOperand(lhs); };
	parser.ptr.prototype.parseSelector = function(x) {
		var _r, _r$1, p, sel, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; p = $f.p; sel = $f.sel; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Selector"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseIdent(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		sel = _r$1;
		$s = -1; return new ast.SelectorExpr.ptr(x, sel);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseSelector }; } $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.sel = sel; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseSelector = function(x) { return this.$val.parseSelector(x); };
	parser.ptr.prototype.parseTypeAssertion = function(x) {
		var _r, _r$1, _r$2, _r$3, lparen, p, rparen, typ, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; lparen = $f.lparen; p = $f.p; rparen = $f.rparen; typ = $f.typ; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "TypeAssertion"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(49); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		lparen = _r$1;
		typ = $ifaceNil;
		/* */ if (p.tok === 84) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (p.tok === 84) { */ case 5:
			$r = p.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 7; continue;
		/* } else { */ case 6:
			_r$2 = p.parseType(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			typ = _r$2;
		/* } */ case 7:
		_r$3 = p.expect(54); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		rparen = _r$3;
		$s = -1; return new ast.TypeAssertExpr.ptr(x, lparen, typ, rparen);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseTypeAssertion }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.lparen = lparen; $f.p = p; $f.rparen = rparen; $f.typ = typ; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseTypeAssertion = function(x) { return this.$val.parseTypeAssertion(x); };
	parser.ptr.prototype.parseIndexOrSlice = function(x) {
		var _r, _r$1, _r$2, _r$3, _r$4, colons, index, lbrack, ncolons, p, rbrack, slice3, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; colons = $f.colons; index = $f.index; lbrack = $f.lbrack; ncolons = $f.ncolons; p = $f.p; rbrack = $f.rbrack; slice3 = $f.slice3; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "IndexOrSlice"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(50); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		lbrack = _r$1;
		p.exprLev = p.exprLev + (1) >> 0;
		index = arrayType$1.zero();
		colons = arrayType$2.zero();
		/* */ if (!((p.tok === 58))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((p.tok === 58))) { */ case 5:
			_r$2 = p.parseRhs(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			index[0] = _r$2;
		/* } */ case 6:
		ncolons = 0;
		/* while (true) { */ case 8:
			/* if (!((p.tok === 58) && ncolons < 2)) { break; } */ if(!((p.tok === 58) && ncolons < 2)) { $s = 9; continue; }
			((ncolons < 0 || ncolons >= colons.length) ? ($throwRuntimeError("index out of range"), undefined) : colons[ncolons] = p.pos);
			ncolons = ncolons + (1) >> 0;
			$r = p.next(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!((p.tok === 58)) && !((p.tok === 55)) && !((p.tok === 1))) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (!((p.tok === 58)) && !((p.tok === 55)) && !((p.tok === 1))) { */ case 11:
				_r$3 = p.parseRhs(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				((ncolons < 0 || ncolons >= index.length) ? ($throwRuntimeError("index out of range"), undefined) : index[ncolons] = _r$3);
			/* } */ case 12:
		/* } */ $s = 8; continue; case 9:
		p.exprLev = p.exprLev - (1) >> 0;
		_r$4 = p.expect(55); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		rbrack = _r$4;
		/* */ if (ncolons > 0) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (ncolons > 0) { */ case 15:
			slice3 = false;
			/* */ if (ncolons === 2) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (ncolons === 2) { */ case 17:
				slice3 = true;
				/* */ if ($interfaceIsEqual(index[1], $ifaceNil)) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if ($interfaceIsEqual(index[1], $ifaceNil)) { */ case 19:
					$r = p.error(colons[0], "2nd index required in 3-index slice"); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					index[1] = new ast.BadExpr.ptr(colons[0] + 1 >> 0, colons[1]);
				/* } */ case 20:
				/* */ if ($interfaceIsEqual(index[2], $ifaceNil)) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if ($interfaceIsEqual(index[2], $ifaceNil)) { */ case 22:
					$r = p.error(colons[1], "3rd index required in 3-index slice"); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					index[2] = new ast.BadExpr.ptr(colons[1] + 1 >> 0, rbrack);
				/* } */ case 23:
			/* } */ case 18:
			$s = -1; return new ast.SliceExpr.ptr(x, lbrack, index[0], index[1], index[2], slice3, rbrack);
		/* } */ case 16:
		$s = -1; return new ast.IndexExpr.ptr(x, lbrack, index[0], rbrack);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseIndexOrSlice }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.colons = colons; $f.index = index; $f.lbrack = lbrack; $f.ncolons = ncolons; $f.p = p; $f.rbrack = rbrack; $f.slice3 = slice3; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseIndexOrSlice = function(x) { return this.$val.parseIndexOrSlice(x); };
	parser.ptr.prototype.parseCallOrConversion = function(fun) {
		var _r, _r$1, _r$2, _r$3, _r$4, ellipsis, fun, list, lparen, p, rparen, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; ellipsis = $f.ellipsis; fun = $f.fun; list = $f.list; lparen = $f.lparen; p = $f.p; rparen = $f.rparen; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "CallOrConversion"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(49); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		lparen = _r$1;
		p.exprLev = p.exprLev + (1) >> 0;
		list = sliceType$9.nil;
		ellipsis = 0;
		/* while (true) { */ case 5:
			/* if (!(!((p.tok === 54)) && !((p.tok === 1)) && !new token.Pos(ellipsis).IsValid())) { break; } */ if(!(!((p.tok === 54)) && !((p.tok === 1)) && !new token.Pos(ellipsis).IsValid())) { $s = 6; continue; }
			_r$2 = p.parseRhsOrType(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			list = $append(list, _r$2);
			/* */ if (p.tok === 48) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (p.tok === 48) { */ case 8:
				ellipsis = p.pos;
				$r = p.next(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 9:
			_r$3 = p.atComma("argument list", 54); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (!_r$3) { */ case 11:
				/* break; */ $s = 6; continue;
			/* } */ case 12:
			$r = p.next(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 5; continue; case 6:
		p.exprLev = p.exprLev - (1) >> 0;
		_r$4 = p.expectClosing(54, "argument list"); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		rparen = _r$4;
		$s = -1; return new ast.CallExpr.ptr(fun, lparen, list, ellipsis, rparen);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$23.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseCallOrConversion }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.ellipsis = ellipsis; $f.fun = fun; $f.list = list; $f.lparen = lparen; $f.p = p; $f.rparen = rparen; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseCallOrConversion = function(fun) { return this.$val.parseCallOrConversion(fun); };
	parser.ptr.prototype.parseValue = function(keyOk) {
		var _r, _r$1, _r$2, _r$3, keyOk, p, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; keyOk = $f.keyOk; p = $f.p; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Element"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		/* */ if (p.tok === 51) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.tok === 51) { */ case 4:
			_r$1 = p.parseLiteralValue($ifaceNil); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 5:
		_r$2 = p.parseExpr(keyOk); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = p.checkExpr(_r$2); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		x = _r$3;
		if (keyOk) {
			if (p.tok === 58) {
				p.tryResolve(x, false);
			} else {
				p.resolve(x);
			}
		}
		$s = -1; return x;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseValue }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.keyOk = keyOk; $f.p = p; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseValue = function(keyOk) { return this.$val.parseValue(keyOk); };
	parser.ptr.prototype.parseElement = function() {
		var _r, _r$1, _r$2, colon, p, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; colon = $f.colon; p = $f.p; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Element"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseValue(true); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		x = _r$1;
		/* */ if (p.tok === 58) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (p.tok === 58) { */ case 5:
			colon = p.pos;
			$r = p.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = p.parseValue(false); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			x = new ast.KeyValueExpr.ptr(x, colon, _r$2);
		/* } */ case 6:
		$s = -1; return x;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseElement }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.colon = colon; $f.p = p; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseElement = function() { return this.$val.parseElement(); };
	parser.ptr.prototype.parseElementList = function() {
		var _r, _r$1, _r$2, list, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; list = $f.list; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		list = sliceType$9.nil;
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "ElementList"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		/* while (true) { */ case 4:
			/* if (!(!((p.tok === 56)) && !((p.tok === 1)))) { break; } */ if(!(!((p.tok === 56)) && !((p.tok === 1)))) { $s = 5; continue; }
			_r$1 = p.parseElement(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			list = $append(list, _r$1);
			_r$2 = p.atComma("composite literal", 56); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (!_r$2) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$2) { */ case 7:
				/* break; */ $s = 5; continue;
			/* } */ case 8:
			$r = p.next(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 4; continue; case 5:
		$s = -1; return list;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  list; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseElementList }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.list = list; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseElementList = function() { return this.$val.parseElementList(); };
	parser.ptr.prototype.parseLiteralValue = function(typ) {
		var _r, _r$1, _r$2, _r$3, elts, lbrace, p, rbrace, typ, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; elts = $f.elts; lbrace = $f.lbrace; p = $f.p; rbrace = $f.rbrace; typ = $f.typ; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "LiteralValue"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(51); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		lbrace = _r$1;
		elts = sliceType$9.nil;
		p.exprLev = p.exprLev + (1) >> 0;
		/* */ if (!((p.tok === 56))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((p.tok === 56))) { */ case 5:
			_r$2 = p.parseElementList(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			elts = _r$2;
		/* } */ case 6:
		p.exprLev = p.exprLev - (1) >> 0;
		_r$3 = p.expectClosing(56, "composite literal"); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		rbrace = _r$3;
		$s = -1; return new ast.CompositeLit.ptr(typ, lbrace, elts, rbrace);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseLiteralValue }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.elts = elts; $f.lbrace = lbrace; $f.p = p; $f.rbrace = rbrace; $f.typ = typ; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseLiteralValue = function(typ) { return this.$val.parseLiteralValue(typ); };
	parser.ptr.prototype.checkExpr = function(x) {
		var _r, _r$1, _r$2, _r$3, _ref, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = unparen(x);
		/* */ if ($assertType(_ref, ptrType$12, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$6, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$13, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$24, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$25, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$26, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$27, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$28, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$29, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref, ptrType$30, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref, ptrType$23, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref, ptrType$17, true)[1]) { $s = 12; continue; }
		/* */ if ($assertType(_ref, ptrType$31, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref, ptrType$32, true)[1]) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if ($assertType(_ref, ptrType$12, true)[1]) { */ case 1:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$6, true)[1]) { */ case 2:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$13, true)[1]) { */ case 3:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$24, true)[1]) { */ case 4:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$25, true)[1]) { */ case 5:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$26, true)[1]) { */ case 6:
			$panic(new $String("unreachable"));
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$27, true)[1]) { */ case 7:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$28, true)[1]) { */ case 8:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$29, true)[1]) { */ case 9:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$30, true)[1]) { */ case 10:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$23, true)[1]) { */ case 11:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$17, true)[1]) { */ case 12:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$31, true)[1]) { */ case 13:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$32, true)[1]) { */ case 14:
			$s = 16; continue;
		/* } else { */ case 15:
			_r = x.Pos(); /* */ $s = 17; case 17: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = p.errorExpected(_r, "expression"); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$1 = x.Pos(); /* */ $s = 19; case 19: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = x.End(); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = p.safePos(_r$2); /* */ $s = 21; case 21: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			x = new ast.BadExpr.ptr(_r$1, _r$3);
		/* } */ case 16:
		$s = -1; return x;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.checkExpr }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.checkExpr = function(x) { return this.$val.checkExpr(x); };
	isTypeName = function(x) {
		var _ref, _tuple, isIdent, t, t$1, t$2, t$3, x;
		_ref = x;
		if ($assertType(_ref, ptrType$12, true)[1]) {
			t = _ref.$val;
		} else if ($assertType(_ref, ptrType$6, true)[1]) {
			t$1 = _ref.$val;
		} else if ($assertType(_ref, ptrType$27, true)[1]) {
			t$2 = _ref.$val;
			_tuple = $assertType(t$2.X, ptrType$6, true);
			isIdent = _tuple[1];
			return isIdent;
		} else {
			t$3 = _ref;
			return false;
		}
		return true;
	};
	isLiteralType = function(x) {
		var _ref, _tuple, isIdent, t, t$1, t$2, t$3, t$4, t$5, t$6, x;
		_ref = x;
		if ($assertType(_ref, ptrType$12, true)[1]) {
			t = _ref.$val;
		} else if ($assertType(_ref, ptrType$6, true)[1]) {
			t$1 = _ref.$val;
		} else if ($assertType(_ref, ptrType$27, true)[1]) {
			t$2 = _ref.$val;
			_tuple = $assertType(t$2.X, ptrType$6, true);
			isIdent = _tuple[1];
			return isIdent;
		} else if ($assertType(_ref, ptrType$33, true)[1]) {
			t$3 = _ref.$val;
		} else if ($assertType(_ref, ptrType$16, true)[1]) {
			t$4 = _ref.$val;
		} else if ($assertType(_ref, ptrType$20, true)[1]) {
			t$5 = _ref.$val;
		} else {
			t$6 = _ref;
			return false;
		}
		return true;
	};
	deref = function(x) {
		var _tuple, isPtr, p, x;
		_tuple = $assertType(x, ptrType$17, true);
		p = _tuple[0];
		isPtr = _tuple[1];
		if (isPtr) {
			x = p.X;
		}
		return x;
	};
	unparen = function(x) {
		var _tuple, isParen, p, x;
		_tuple = $assertType(x, ptrType$26, true);
		p = _tuple[0];
		isParen = _tuple[1];
		if (isParen) {
			x = unparen(p.X);
		}
		return x;
	};
	parser.ptr.prototype.checkExprOrType = function(x) {
		var _r, _r$1, _r$2, _ref, _tuple, isEllipsis, len, p, t, t$1, t$2, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; isEllipsis = $f.isEllipsis; len = $f.len; p = $f.p; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = unparen(x);
		/* */ if ($assertType(_ref, ptrType$26, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$31, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$33, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, ptrType$26, true)[1]) { */ case 1:
			t = _ref.$val;
			$panic(new $String("unreachable"));
			$s = 4; continue;
		/* } else if ($assertType(_ref, ptrType$31, true)[1]) { */ case 2:
			t$1 = _ref.$val;
			$s = 4; continue;
		/* } else if ($assertType(_ref, ptrType$33, true)[1]) { */ case 3:
			t$2 = _ref.$val;
			_tuple = $assertType(t$2.Len, ptrType$34, true);
			len = _tuple[0];
			isEllipsis = _tuple[1];
			/* */ if (isEllipsis) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (isEllipsis) { */ case 5:
				$r = p.error(len.Pos(), "expected array length, found '...'"); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r = x.Pos(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r$1 = x.End(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = p.safePos(_r$1); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				x = new ast.BadExpr.ptr(_r, _r$2);
			/* } */ case 6:
		/* } */ case 4:
		$s = -1; return x;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.checkExprOrType }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f.isEllipsis = isEllipsis; $f.len = len; $f.p = p; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.checkExprOrType = function(x) { return this.$val.checkExprOrType(x); };
	parser.ptr.prototype.parsePrimaryExpr = function(lhs) {
		var _1, _2, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, lhs, p, pos, sel, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; lhs = $f.lhs; p = $f.p; pos = $f.pos; sel = $f.sel; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "PrimaryExpr"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseOperand(lhs); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		x = _r$1;
		/* while (true) { */ case 5:
				_1 = p.tok;
				/* */ if (_1 === (53)) { $s = 8; continue; }
				/* */ if (_1 === (50)) { $s = 9; continue; }
				/* */ if (_1 === (49)) { $s = 10; continue; }
				/* */ if (_1 === (51)) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (_1 === (53)) { */ case 8:
					$r = p.next(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (lhs) {
						p.resolve(x);
					}
						_2 = p.tok;
						/* */ if (_2 === (4)) { $s = 16; continue; }
						/* */ if (_2 === (49)) { $s = 17; continue; }
						/* */ $s = 18; continue;
						/* if (_2 === (4)) { */ case 16:
							_r$2 = p.checkExprOrType(x); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
							_r$3 = p.parseSelector(_r$2); /* */ $s = 21; case 21: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
							x = _r$3;
							$s = 19; continue;
						/* } else if (_2 === (49)) { */ case 17:
							_r$4 = p.checkExpr(x); /* */ $s = 22; case 22: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
							_r$5 = p.parseTypeAssertion(_r$4); /* */ $s = 23; case 23: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
							x = _r$5;
							$s = 19; continue;
						/* } else { */ case 18:
							pos = p.pos;
							$r = p.errorExpected(pos, "selector or type assertion"); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$r = p.next(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							sel = new ast.Ident.ptr(pos, "_", ptrType$8.nil);
							x = new ast.SelectorExpr.ptr(x, sel);
						/* } */ case 19:
					case 15:
					$s = 13; continue;
				/* } else if (_1 === (50)) { */ case 9:
					if (lhs) {
						p.resolve(x);
					}
					_r$6 = p.checkExpr(x); /* */ $s = 26; case 26: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = p.parseIndexOrSlice(_r$6); /* */ $s = 27; case 27: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					x = _r$7;
					$s = 13; continue;
				/* } else if (_1 === (49)) { */ case 10:
					if (lhs) {
						p.resolve(x);
					}
					_r$8 = p.checkExprOrType(x); /* */ $s = 28; case 28: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$9 = p.parseCallOrConversion(_r$8); /* */ $s = 29; case 29: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					x = _r$9;
					$s = 13; continue;
				/* } else if (_1 === (51)) { */ case 11:
					/* */ if (isLiteralType(x) && (p.exprLev >= 0 || !isTypeName(x))) { $s = 30; continue; }
					/* */ $s = 31; continue;
					/* if (isLiteralType(x) && (p.exprLev >= 0 || !isTypeName(x))) { */ case 30:
						if (lhs) {
							p.resolve(x);
						}
						_r$10 = p.parseLiteralValue(x); /* */ $s = 33; case 33: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						x = _r$10;
						$s = 32; continue;
					/* } else { */ case 31:
						/* break L; */ $s = 6; continue s;
					/* } */ case 32:
					$s = 13; continue;
				/* } else { */ case 12:
					/* break L; */ $s = 6; continue s;
				/* } */ case 13:
			case 7:
			lhs = false;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return x;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parsePrimaryExpr }; } $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.lhs = lhs; $f.p = p; $f.pos = pos; $f.sel = sel; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parsePrimaryExpr = function(lhs) { return this.$val.parsePrimaryExpr(lhs); };
	parser.ptr.prototype.parseUnaryExpr = function(lhs) {
		var _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tuple, _tuple$1, arrow, dir, lhs, ok, op, p, pos, pos$1, typ, x, x$1, x$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; arrow = $f.arrow; dir = $f.dir; lhs = $f.lhs; ok = $f.ok; op = $f.op; p = $f.p; pos = $f.pos; pos$1 = $f.pos$1; typ = $f.typ; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "UnaryExpr"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
			_1 = p.tok;
			/* */ if ((_1 === (12)) || (_1 === (13)) || (_1 === (43)) || (_1 === (19)) || (_1 === (17))) { $s = 5; continue; }
			/* */ if (_1 === (36)) { $s = 6; continue; }
			/* */ if (_1 === (14)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((_1 === (12)) || (_1 === (13)) || (_1 === (43)) || (_1 === (19)) || (_1 === (17))) { */ case 5:
				_tmp = p.pos;
				_tmp$1 = p.tok;
				pos = _tmp;
				op = _tmp$1;
				$r = p.next(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$1 = p.parseUnaryExpr(false); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				x = _r$1;
				_r$2 = p.checkExpr(x); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return new ast.UnaryExpr.ptr(pos, op, _r$2);
			/* } else if (_1 === (36)) { */ case 6:
				arrow = p.pos;
				$r = p.next(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$3 = p.parseUnaryExpr(false); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				x$1 = _r$3;
				_tuple = $assertType(x$1, ptrType$21, true);
				typ = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (ok) { */ case 14:
					dir = 1;
					/* while (true) { */ case 16:
						/* if (!(ok && (dir === 1))) { break; } */ if(!(ok && (dir === 1))) { $s = 17; continue; }
						/* */ if (typ.Dir === 2) { $s = 18; continue; }
						/* */ $s = 19; continue;
						/* if (typ.Dir === 2) { */ case 18:
							$r = p.errorExpected(typ.Arrow, "'chan'"); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 19:
						_tmp$2 = typ.Arrow;
						_tmp$3 = arrow;
						_tmp$4 = arrow;
						arrow = _tmp$2;
						typ.Begin = _tmp$3;
						typ.Arrow = _tmp$4;
						_tmp$5 = typ.Dir;
						_tmp$6 = 2;
						dir = _tmp$5;
						typ.Dir = _tmp$6;
						_tuple$1 = $assertType(typ.Value, ptrType$21, true);
						typ = _tuple$1[0];
						ok = _tuple$1[1];
					/* } */ $s = 16; continue; case 17:
					/* */ if (dir === 1) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (dir === 1) { */ case 21:
						$r = p.errorExpected(arrow, "channel type"); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 22:
					$s = -1; return x$1;
				/* } */ case 15:
				_r$4 = p.checkExpr(x$1); /* */ $s = 24; case 24: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return new ast.UnaryExpr.ptr(arrow, 36, _r$4);
			/* } else if (_1 === (14)) { */ case 7:
				pos$1 = p.pos;
				$r = p.next(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$5 = p.parseUnaryExpr(false); /* */ $s = 26; case 26: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				x$2 = _r$5;
				_r$6 = p.checkExprOrType(x$2); /* */ $s = 27; case 27: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$s = -1; return new ast.StarExpr.ptr(pos$1, _r$6);
			/* } */ case 8:
		case 4:
		_r$7 = p.parsePrimaryExpr(lhs); /* */ $s = 28; case 28: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$s = -1; return _r$7;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseUnaryExpr }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.arrow = arrow; $f.dir = dir; $f.lhs = lhs; $f.ok = ok; $f.op = op; $f.p = p; $f.pos = pos; $f.pos$1 = pos$1; $f.typ = typ; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseUnaryExpr = function(lhs) { return this.$val.parseUnaryExpr(lhs); };
	parser.ptr.prototype.tokPrec = function() {
		var p, tok;
		p = this;
		tok = p.tok;
		if (p.inRhs && (tok === 42)) {
			tok = 39;
		}
		return [tok, new token.Token(tok).Precedence()];
	};
	parser.prototype.tokPrec = function() { return this.$val.tokPrec(); };
	parser.ptr.prototype.parseBinaryExpr = function(lhs, prec1) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, lhs, op, oprec, p, pos, prec1, x, y, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; lhs = $f.lhs; op = $f.op; oprec = $f.oprec; p = $f.p; pos = $f.pos; prec1 = $f.prec1; x = $f.x; y = $f.y; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "BinaryExpr"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseUnaryExpr(lhs); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		x = _r$1;
		/* while (true) { */ case 5:
			_tuple = p.tokPrec();
			op = _tuple[0];
			oprec = _tuple[1];
			if (oprec < prec1) {
				$s = -1; return x;
			}
			_r$2 = p.expect(op); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			pos = _r$2;
			if (lhs) {
				p.resolve(x);
				lhs = false;
			}
			_r$3 = p.parseBinaryExpr(false, oprec + 1 >> 0); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			y = _r$3;
			_r$4 = p.checkExpr(x); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = p.checkExpr(y); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			x = new ast.BinaryExpr.ptr(_r$4, pos, op, _r$5);
		/* } */ $s = 5; continue; case 6:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseBinaryExpr }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.lhs = lhs; $f.op = op; $f.oprec = oprec; $f.p = p; $f.pos = pos; $f.prec1 = prec1; $f.x = x; $f.y = y; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseBinaryExpr = function(lhs, prec1) { return this.$val.parseBinaryExpr(lhs, prec1); };
	parser.ptr.prototype.parseExpr = function(lhs) {
		var _r, _r$1, lhs, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; lhs = $f.lhs; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Expression"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseBinaryExpr(lhs, 1); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseExpr }; } $f._r = _r; $f._r$1 = _r$1; $f.lhs = lhs; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseExpr = function(lhs) { return this.$val.parseExpr(lhs); };
	parser.ptr.prototype.parseRhs = function() {
		var _r, _r$1, old, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; old = $f.old; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		old = p.inRhs;
		p.inRhs = true;
		_r = p.parseExpr(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = p.checkExpr(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		x = _r$1;
		p.inRhs = old;
		$s = -1; return x;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseRhs }; } $f._r = _r; $f._r$1 = _r$1; $f.old = old; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseRhs = function() { return this.$val.parseRhs(); };
	parser.ptr.prototype.parseRhsOrType = function() {
		var _r, _r$1, old, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; old = $f.old; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		old = p.inRhs;
		p.inRhs = true;
		_r = p.parseExpr(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = p.checkExprOrType(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		x = _r$1;
		p.inRhs = old;
		$s = -1; return x;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseRhsOrType }; } $f._r = _r; $f._r$1 = _r$1; $f.old = old; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseRhsOrType = function() { return this.$val.parseRhsOrType(); };
	parser.ptr.prototype.parseSimpleStmt = function(mode) {
		var _1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tuple, arrow, as, colon, isIdent, isRange, label, mode, p, pos, pos$1, s, stmt, tok, x, y, y$1, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; arrow = $f.arrow; as = $f.as; colon = $f.colon; isIdent = $f.isIdent; isRange = $f.isRange; label = $f.label; mode = $f.mode; p = $f.p; pos = $f.pos; pos$1 = $f.pos$1; s = $f.s; stmt = $f.stmt; tok = $f.tok; x = $f.x; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "SimpleStmt"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseLhsList(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		x = _r$1;
			_1 = p.tok;
			/* */ if ((_1 === (47)) || (_1 === (42)) || (_1 === (23)) || (_1 === (24)) || (_1 === (25)) || (_1 === (26)) || (_1 === (27)) || (_1 === (28)) || (_1 === (29)) || (_1 === (30)) || (_1 === (31)) || (_1 === (32)) || (_1 === (33))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_1 === (47)) || (_1 === (42)) || (_1 === (23)) || (_1 === (24)) || (_1 === (25)) || (_1 === (26)) || (_1 === (27)) || (_1 === (28)) || (_1 === (29)) || (_1 === (30)) || (_1 === (31)) || (_1 === (32)) || (_1 === (33))) { */ case 6:
				_tmp = p.pos;
				_tmp$1 = p.tok;
				pos = _tmp;
				tok = _tmp$1;
				$r = p.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				y = sliceType$9.nil;
				isRange = false;
				/* */ if ((mode === 2) && (p.tok === 79) && ((tok === 47) || (tok === 42))) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if ((mode === 2) && (p.tok === 79) && ((tok === 47) || (tok === 42))) { */ case 9:
					pos$1 = p.pos;
					$r = p.next(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$2 = p.parseRhs(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					y = new sliceType$9([new ast.UnaryExpr.ptr(pos$1, 79, _r$2)]);
					isRange = true;
					$s = 11; continue;
				/* } else { */ case 10:
					_r$3 = p.parseRhsList(); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					y = _r$3;
				/* } */ case 11:
				as = new ast.AssignStmt.ptr(x, pos, tok, y);
				/* */ if (tok === 47) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (tok === 47) { */ case 15:
					$r = p.shortVarDecl(as, x); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 16:
				$s = -1; return [as, isRange];
			/* } */ case 7:
		case 5:
		/* */ if (x.$length > 1) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (x.$length > 1) { */ case 18:
			_r$4 = (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]).Pos(); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$r = p.errorExpected(_r$4, "1 expression"); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 19:
			_2 = p.tok;
			/* */ if (_2 === (58)) { $s = 23; continue; }
			/* */ if (_2 === (36)) { $s = 24; continue; }
			/* */ if ((_2 === (37)) || (_2 === (38))) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (_2 === (58)) { */ case 23:
				colon = p.pos;
				$r = p.next(); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_tuple = $assertType((0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]), ptrType$6, true);
				label = _tuple[0];
				isIdent = _tuple[1];
				/* */ if ((mode === 1) && isIdent) { $s = 28; continue; }
				/* */ $s = 29; continue;
				/* if ((mode === 1) && isIdent) { */ case 28:
					_r$5 = p.parseStmt(); /* */ $s = 30; case 30: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					stmt = new ast.LabeledStmt.ptr(label, colon, _r$5);
					$r = p.declare(stmt, $ifaceNil, p.labelScope, 6, new sliceType$2([label])); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return [stmt, false];
				/* } */ case 29:
				$r = p.error(colon, "illegal label declaration"); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$6 = (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]).Pos(); /* */ $s = 33; case 33: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$s = -1; return [new ast.BadStmt.ptr(_r$6, colon + 1 >> 0), false];
			/* } else if (_2 === (36)) { */ case 24:
				arrow = p.pos;
				$r = p.next(); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$7 = p.parseRhs(); /* */ $s = 35; case 35: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				y$1 = _r$7;
				$s = -1; return [new ast.SendStmt.ptr((0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]), arrow, y$1), false];
			/* } else if ((_2 === (37)) || (_2 === (38))) { */ case 25:
				s = new ast.IncDecStmt.ptr((0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]), p.pos, p.tok);
				$r = p.next(); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return [s, false];
			/* } */ case 26:
		case 22:
		$s = -1; return [new ast.ExprStmt.ptr((0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])), false];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [$ifaceNil, false]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseSimpleStmt }; } $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.arrow = arrow; $f.as = as; $f.colon = colon; $f.isIdent = isIdent; $f.isRange = isRange; $f.label = label; $f.mode = mode; $f.p = p; $f.pos = pos; $f.pos$1 = pos$1; $f.s = s; $f.stmt = stmt; $f.tok = tok; $f.x = x; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseSimpleStmt = function(mode) { return this.$val.parseSimpleStmt(mode); };
	parser.ptr.prototype.parseCallExpr = function(callType) {
		var _arg, _arg$1, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, call, callType, isBad, isCall, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; call = $f.call; callType = $f.callType; isBad = $f.isBad; isCall = $f.isCall; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.parseRhsOrType(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		_tuple = $assertType(x, ptrType$23, true);
		call = _tuple[0];
		isCall = _tuple[1];
		if (isCall) {
			$s = -1; return call;
		}
		_tuple$1 = $assertType(x, ptrType$12, true);
		isBad = _tuple$1[1];
		/* */ if (!isBad) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!isBad) { */ case 2:
			_r$1 = x.End(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = p.safePos(_r$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg = _r$2;
			_r$3 = fmt.Sprintf("function must be invoked in %s statement", new sliceType$7([new $String(callType)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_arg$1 = _r$3;
			$r = p.error(_arg, _arg$1); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return ptrType$23.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseCallExpr }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.call = call; $f.callType = callType; $f.isBad = isBad; $f.isCall = isCall; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseCallExpr = function(callType) { return this.$val.parseCallExpr(callType); };
	parser.ptr.prototype.parseGoStmt = function() {
		var _r, _r$1, _r$2, call, p, pos, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; call = $f.call; p = $f.p; pos = $f.pos; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "GoStmt"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(72); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		_r$2 = p.parseCallExpr("go"); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		call = _r$2;
		$r = p.expectSemi(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (call === ptrType$23.nil) {
			$s = -1; return new ast.BadStmt.ptr(pos, pos + 2 >> 0);
		}
		$s = -1; return new ast.GoStmt.ptr(pos, call);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseGoStmt }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.call = call; $f.p = p; $f.pos = pos; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseGoStmt = function() { return this.$val.parseGoStmt(); };
	parser.ptr.prototype.parseDeferStmt = function() {
		var _r, _r$1, _r$2, call, p, pos, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; call = $f.call; p = $f.p; pos = $f.pos; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "DeferStmt"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(67); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		_r$2 = p.parseCallExpr("defer"); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		call = _r$2;
		$r = p.expectSemi(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (call === ptrType$23.nil) {
			$s = -1; return new ast.BadStmt.ptr(pos, pos + 5 >> 0);
		}
		$s = -1; return new ast.DeferStmt.ptr(pos, call);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseDeferStmt }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.call = call; $f.p = p; $f.pos = pos; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseDeferStmt = function() { return this.$val.parseDeferStmt(); };
	parser.ptr.prototype.parseReturnStmt = function() {
		var _r, _r$1, _r$2, p, pos, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; p = $f.p; pos = $f.pos; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "ReturnStmt"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		pos = p.pos;
		_r$1 = p.expect(80); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		x = sliceType$9.nil;
		/* */ if (!((p.tok === 57)) && !((p.tok === 56))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((p.tok === 57)) && !((p.tok === 56))) { */ case 5:
			_r$2 = p.parseRhsList(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			x = _r$2;
		/* } */ case 6:
		$r = p.expectSemi(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return new ast.ReturnStmt.ptr(pos, x);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$35.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseReturnStmt }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.p = p; $f.pos = pos; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseReturnStmt = function() { return this.$val.parseReturnStmt(); };
	parser.ptr.prototype.parseBranchStmt = function(tok) {
		var _r, _r$1, _r$2, label, n, p, pos, tok, x, x$1, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; label = $f.label; n = $f.n; p = $f.p; pos = $f.pos; tok = $f.tok; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "BranchStmt"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(tok); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		label = ptrType$6.nil;
		/* */ if (!((tok === 69)) && (p.tok === 4)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((tok === 69)) && (p.tok === 4)) { */ case 5:
			_r$2 = p.parseIdent(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			label = _r$2;
			n = p.targetStack.$length - 1 >> 0;
			(x$1 = p.targetStack, ((n < 0 || n >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + n] = $append((x = p.targetStack, ((n < 0 || n >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + n])), label)));
		/* } */ case 6:
		$r = p.expectSemi(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return new ast.BranchStmt.ptr(pos, tok, label);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$36.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseBranchStmt }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.label = label; $f.n = n; $f.p = p; $f.pos = pos; $f.tok = tok; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseBranchStmt = function(tok) { return this.$val.parseBranchStmt(tok); };
	parser.ptr.prototype.makeExpr = function(s, kind) {
		var _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, es, isExpr, kind, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; es = $f.es; isExpr = $f.isExpr; kind = $f.kind; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if ($interfaceIsEqual(s, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		_tuple = $assertType(s, ptrType$37, true);
		es = _tuple[0];
		isExpr = _tuple[1];
		/* */ if (isExpr) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (isExpr) { */ case 1:
			_r = p.checkExpr(es.X); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = s.Pos(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg = _r$1;
		_r$2 = fmt.Sprintf("expected %s, found simple statement (missing parentheses around composite literal?)", new sliceType$7([new $String(kind)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$1 = _r$2;
		$r = p.error(_arg, _arg$1); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = s.Pos(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = s.End(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = p.safePos(_r$4); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return new ast.BadExpr.ptr(_r$3, _r$5);
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.makeExpr }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.es = es; $f.isExpr = isExpr; $f.kind = kind; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.makeExpr = function(s, kind) { return this.$val.makeExpr(s, kind); };
	parser.ptr.prototype.parseIfStmt = function() {
		var _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tuple, body, else_, p, pos, prevLev, s, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; body = $f.body; else_ = $f.else_; p = $f.p; pos = $f.pos; prevLev = $f.prevLev; s = $f.s; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "IfStmt"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(74); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		p.openScope();
		$deferred.push([$methodVal(p, "closeScope"), []]);
		s = $ifaceNil;
		x = $ifaceNil;
		prevLev = p.exprLev;
		p.exprLev = -1;
		/* */ if (p.tok === 57) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (p.tok === 57) { */ case 5:
			$r = p.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = p.parseRhs(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			x = _r$2;
			$s = 7; continue;
		/* } else { */ case 6:
			_r$3 = p.parseSimpleStmt(0); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			s = _tuple[0];
			/* */ if (p.tok === 57) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (p.tok === 57) { */ case 11:
				$r = p.next(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$4 = p.parseRhs(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				x = _r$4;
				$s = 13; continue;
			/* } else { */ case 12:
				_r$5 = p.makeExpr(s, "boolean expression"); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				x = _r$5;
				s = $ifaceNil;
			/* } */ case 13:
		/* } */ case 7:
		p.exprLev = prevLev;
		_r$6 = p.parseBlockStmt(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		body = _r$6;
		else_ = $ifaceNil;
		/* */ if (p.tok === 68) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (p.tok === 68) { */ case 18:
			$r = p.next(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_1 = p.tok;
				/* */ if (_1 === (74)) { $s = 23; continue; }
				/* */ if (_1 === (51)) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (_1 === (74)) { */ case 23:
					_r$7 = p.parseIfStmt(); /* */ $s = 27; case 27: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					else_ = _r$7;
					$s = 26; continue;
				/* } else if (_1 === (51)) { */ case 24:
					_r$8 = p.parseBlockStmt(); /* */ $s = 28; case 28: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					else_ = _r$8;
					$r = p.expectSemi(); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 26; continue;
				/* } else { */ case 25:
					$r = p.errorExpected(p.pos, "if statement or block"); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					else_ = new ast.BadStmt.ptr(p.pos, p.pos);
				/* } */ case 26:
			case 22:
			$s = 20; continue;
		/* } else { */ case 19:
			$r = p.expectSemi(); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 20:
		$s = -1; return new ast.IfStmt.ptr(pos, s, x, body, else_);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$38.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseIfStmt }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f.body = body; $f.else_ = else_; $f.p = p; $f.pos = pos; $f.prevLev = prevLev; $f.s = s; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseIfStmt = function() { return this.$val.parseIfStmt(); };
	parser.ptr.prototype.parseTypeList = function() {
		var _r, _r$1, _r$2, list, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; list = $f.list; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		list = sliceType$9.nil;
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "TypeList"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseType(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		list = $append(list, _r$1);
		/* while (true) { */ case 5:
			/* if (!(p.tok === 52)) { break; } */ if(!(p.tok === 52)) { $s = 6; continue; }
			$r = p.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = p.parseType(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			list = $append(list, _r$2);
		/* } */ $s = 5; continue; case 6:
		$s = -1; return list;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  list; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseTypeList }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.list = list; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseTypeList = function() { return this.$val.parseTypeList(); };
	parser.ptr.prototype.parseCaseClause = function(typeSwitch) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, body, colon, list, p, pos, typeSwitch, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; body = $f.body; colon = $f.colon; list = $f.list; p = $f.p; pos = $f.pos; typeSwitch = $f.typeSwitch; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "CaseClause"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		pos = p.pos;
		list = sliceType$9.nil;
		/* */ if (p.tok === 62) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.tok === 62) { */ case 4:
			$r = p.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (typeSwitch) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (typeSwitch) { */ case 8:
				_r$1 = p.parseTypeList(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				list = _r$1;
				$s = 10; continue;
			/* } else { */ case 9:
				_r$2 = p.parseRhsList(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				list = _r$2;
			/* } */ case 10:
			$s = 6; continue;
		/* } else { */ case 5:
			_r$3 = p.expect(66); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 6:
		_r$4 = p.expect(58); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		colon = _r$4;
		p.openScope();
		_r$5 = p.parseStmtList(); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		body = _r$5;
		p.closeScope();
		$s = -1; return new ast.CaseClause.ptr(pos, list, colon, body);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$39.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseCaseClause }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.body = body; $f.colon = colon; $f.list = list; $f.p = p; $f.pos = pos; $f.typeSwitch = typeSwitch; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseCaseClause = function(typeSwitch) { return this.$val.parseCaseClause(typeSwitch); };
	isTypeSwitchAssert = function(x) {
		var _tuple, a, ok, x;
		_tuple = $assertType(x, ptrType$30, true);
		a = _tuple[0];
		ok = _tuple[1];
		return ok && $interfaceIsEqual(a.Type, $ifaceNil);
	};
	parser.ptr.prototype.isTypeSwitchGuard = function(s) {
		var _1, _ref, p, s, t, t$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _ref = $f._ref; p = $f.p; s = $f.s; t = $f.t; t$1 = $f.t$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = s;
		/* */ if ($assertType(_ref, ptrType$37, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$40, true)[1]) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($assertType(_ref, ptrType$37, true)[1]) { */ case 1:
			t = _ref.$val;
			$s = -1; return isTypeSwitchAssert(t.X);
		/* } else if ($assertType(_ref, ptrType$40, true)[1]) { */ case 2:
			t$1 = _ref.$val;
			/* */ if ((t$1.Lhs.$length === 1) && (t$1.Rhs.$length === 1) && isTypeSwitchAssert((x = t$1.Rhs, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((t$1.Lhs.$length === 1) && (t$1.Rhs.$length === 1) && isTypeSwitchAssert((x = t$1.Rhs, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])))) { */ case 4:
					_1 = t$1.Tok;
					/* */ if (_1 === (42)) { $s = 7; continue; }
					/* */ if (_1 === (47)) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (_1 === (42)) { */ case 7:
						$r = p.error(t$1.TokPos, "expected ':=', found '='"); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return true;
					/* } else if (_1 === (47)) { */ case 8:
						$s = -1; return true;
					/* } */ case 9:
				case 6:
			/* } */ case 5:
		/* } */ case 3:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.isTypeSwitchGuard }; } $f._1 = _1; $f._ref = _ref; $f.p = p; $f.s = s; $f.t = t; $f.t$1 = t$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.isTypeSwitchGuard = function(s) { return this.$val.isTypeSwitchGuard(s); };
	parser.ptr.prototype.parseSwitchStmt = function() {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tmp, _tmp$1, _tuple, _tuple$1, body, lbrace, list, p, pos, prevLev, rbrace, s1, s2, typeSwitch, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; body = $f.body; lbrace = $f.lbrace; list = $f.list; p = $f.p; pos = $f.pos; prevLev = $f.prevLev; rbrace = $f.rbrace; s1 = $f.s1; s2 = $f.s2; typeSwitch = $f.typeSwitch; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "SwitchStmt"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(83); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		p.openScope();
		$deferred.push([$methodVal(p, "closeScope"), []]);
		_tmp = $ifaceNil;
		_tmp$1 = $ifaceNil;
		s1 = _tmp;
		s2 = _tmp$1;
		/* */ if (!((p.tok === 51))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((p.tok === 51))) { */ case 5:
			prevLev = p.exprLev;
			p.exprLev = -1;
			/* */ if (!((p.tok === 57))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!((p.tok === 57))) { */ case 7:
				_r$2 = p.parseSimpleStmt(0); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				s2 = _tuple[0];
			/* } */ case 8:
			/* */ if (p.tok === 57) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (p.tok === 57) { */ case 10:
				$r = p.next(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				s1 = s2;
				s2 = $ifaceNil;
				/* */ if (!((p.tok === 51))) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (!((p.tok === 51))) { */ case 13:
					p.openScope();
					$deferred.push([$methodVal(p, "closeScope"), []]);
					_r$3 = p.parseSimpleStmt(0); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$1 = _r$3;
					s2 = _tuple$1[0];
				/* } */ case 14:
			/* } */ case 11:
			p.exprLev = prevLev;
		/* } */ case 6:
		_r$4 = p.isTypeSwitchGuard(s2); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		typeSwitch = _r$4;
		_r$5 = p.expect(51); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		lbrace = _r$5;
		list = sliceType$11.nil;
		/* while (true) { */ case 18:
			/* if (!((p.tok === 62) || (p.tok === 66))) { break; } */ if(!((p.tok === 62) || (p.tok === 66))) { $s = 19; continue; }
			_r$6 = p.parseCaseClause(typeSwitch); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			list = $append(list, _r$6);
		/* } */ $s = 18; continue; case 19:
		_r$7 = p.expect(56); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		rbrace = _r$7;
		$r = p.expectSemi(); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		body = new ast.BlockStmt.ptr(lbrace, list, rbrace);
		if (typeSwitch) {
			$s = -1; return new ast.TypeSwitchStmt.ptr(pos, s1, s2, body);
		}
		_r$8 = p.makeExpr(s2, "switch expression"); /* */ $s = 23; case 23: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$s = -1; return new ast.SwitchStmt.ptr(pos, s1, _r$8, body);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseSwitchStmt }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.body = body; $f.lbrace = lbrace; $f.list = list; $f.p = p; $f.pos = pos; $f.prevLev = prevLev; $f.rbrace = rbrace; $f.s1 = s1; $f.s2 = s2; $f.typeSwitch = typeSwitch; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseSwitchStmt = function() { return this.$val.parseSwitchStmt(); };
	parser.ptr.prototype.parseCommClause = function() {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, arrow, as, body, colon, comm, lhs, p, pos, pos$1, rhs, rhs$1, tok, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; arrow = $f.arrow; as = $f.as; body = $f.body; colon = $f.colon; comm = $f.comm; lhs = $f.lhs; p = $f.p; pos = $f.pos; pos$1 = $f.pos$1; rhs = $f.rhs; rhs$1 = $f.rhs$1; tok = $f.tok; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "CommClause"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		p.openScope();
		pos = p.pos;
		comm = $ifaceNil;
		/* */ if (p.tok === 62) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.tok === 62) { */ case 4:
			$r = p.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$1 = p.parseLhsList(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			lhs = _r$1;
			/* */ if (p.tok === 36) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (p.tok === 36) { */ case 9:
				/* */ if (lhs.$length > 1) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (lhs.$length > 1) { */ case 12:
					_r$2 = (0 >= lhs.$length ? ($throwRuntimeError("index out of range"), undefined) : lhs.$array[lhs.$offset + 0]).Pos(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = p.errorExpected(_r$2, "1 expression"); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 13:
				arrow = p.pos;
				$r = p.next(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$3 = p.parseRhs(); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				rhs = _r$3;
				comm = new ast.SendStmt.ptr((0 >= lhs.$length ? ($throwRuntimeError("index out of range"), undefined) : lhs.$array[lhs.$offset + 0]), arrow, rhs);
				$s = 11; continue;
			/* } else { */ case 10:
				tok = p.tok;
				/* */ if ((tok === 42) || (tok === 47)) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if ((tok === 42) || (tok === 47)) { */ case 18:
					/* */ if (lhs.$length > 2) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (lhs.$length > 2) { */ case 21:
						_r$4 = (0 >= lhs.$length ? ($throwRuntimeError("index out of range"), undefined) : lhs.$array[lhs.$offset + 0]).Pos(); /* */ $s = 23; case 23: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						$r = p.errorExpected(_r$4, "1 or 2 expressions"); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						lhs = $subslice(lhs, 0, 2);
					/* } */ case 22:
					pos$1 = p.pos;
					$r = p.next(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$5 = p.parseRhs(); /* */ $s = 26; case 26: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					rhs$1 = _r$5;
					as = new ast.AssignStmt.ptr(lhs, pos$1, tok, new sliceType$9([rhs$1]));
					/* */ if (tok === 47) { $s = 27; continue; }
					/* */ $s = 28; continue;
					/* if (tok === 47) { */ case 27:
						$r = p.shortVarDecl(as, lhs); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 28:
					comm = as;
					$s = 20; continue;
				/* } else { */ case 19:
					/* */ if (lhs.$length > 1) { $s = 30; continue; }
					/* */ $s = 31; continue;
					/* if (lhs.$length > 1) { */ case 30:
						_r$6 = (0 >= lhs.$length ? ($throwRuntimeError("index out of range"), undefined) : lhs.$array[lhs.$offset + 0]).Pos(); /* */ $s = 32; case 32: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						$r = p.errorExpected(_r$6, "1 expression"); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 31:
					comm = new ast.ExprStmt.ptr((0 >= lhs.$length ? ($throwRuntimeError("index out of range"), undefined) : lhs.$array[lhs.$offset + 0]));
				/* } */ case 20:
			/* } */ case 11:
			$s = 6; continue;
		/* } else { */ case 5:
			_r$7 = p.expect(66); /* */ $s = 34; case 34: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7;
		/* } */ case 6:
		_r$8 = p.expect(58); /* */ $s = 35; case 35: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		colon = _r$8;
		_r$9 = p.parseStmtList(); /* */ $s = 36; case 36: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		body = _r$9;
		p.closeScope();
		$s = -1; return new ast.CommClause.ptr(pos, comm, colon, body);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$41.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseCommClause }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.arrow = arrow; $f.as = as; $f.body = body; $f.colon = colon; $f.comm = comm; $f.lhs = lhs; $f.p = p; $f.pos = pos; $f.pos$1 = pos$1; $f.rhs = rhs; $f.rhs$1 = rhs$1; $f.tok = tok; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseCommClause = function() { return this.$val.parseCommClause(); };
	parser.ptr.prototype.parseSelectStmt = function() {
		var _r, _r$1, _r$2, _r$3, _r$4, body, lbrace, list, p, pos, rbrace, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; body = $f.body; lbrace = $f.lbrace; list = $f.list; p = $f.p; pos = $f.pos; rbrace = $f.rbrace; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "SelectStmt"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(81); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		_r$2 = p.expect(51); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		lbrace = _r$2;
		list = sliceType$11.nil;
		/* while (true) { */ case 6:
			/* if (!((p.tok === 62) || (p.tok === 66))) { break; } */ if(!((p.tok === 62) || (p.tok === 66))) { $s = 7; continue; }
			_r$3 = p.parseCommClause(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			list = $append(list, _r$3);
		/* } */ $s = 6; continue; case 7:
		_r$4 = p.expect(56); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		rbrace = _r$4;
		$r = p.expectSemi(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		body = new ast.BlockStmt.ptr(lbrace, list, rbrace);
		$s = -1; return new ast.SelectStmt.ptr(pos, body);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$42.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseSelectStmt }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.body = body; $f.lbrace = lbrace; $f.list = list; $f.p = p; $f.pos = pos; $f.rbrace = rbrace; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseSelectStmt = function() { return this.$val.parseSelectStmt(); };
	parser.ptr.prototype.parseForStmt = function() {
		var _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tuple, _tuple$1, _tuple$2, as, body, isRange, key, p, pos, pos$1, prevLev, s1, s2, s3, value, x, x$1, x$2, x$3, x$4, x$5, x$6, y, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; as = $f.as; body = $f.body; isRange = $f.isRange; key = $f.key; p = $f.p; pos = $f.pos; pos$1 = $f.pos$1; prevLev = $f.prevLev; s1 = $f.s1; s2 = $f.s2; s3 = $f.s3; value = $f.value; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; y = $f.y; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "ForStmt"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(70); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		p.openScope();
		$deferred.push([$methodVal(p, "closeScope"), []]);
		_tmp = $ifaceNil;
		_tmp$1 = $ifaceNil;
		_tmp$2 = $ifaceNil;
		s1 = _tmp;
		s2 = _tmp$1;
		s3 = _tmp$2;
		isRange = false;
		/* */ if (!((p.tok === 51))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((p.tok === 51))) { */ case 5:
			prevLev = p.exprLev;
			p.exprLev = -1;
			/* */ if (!((p.tok === 57))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!((p.tok === 57))) { */ case 7:
				/* */ if (p.tok === 79) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (p.tok === 79) { */ case 9:
					pos$1 = p.pos;
					$r = p.next(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$2 = p.parseRhs(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					y = new sliceType$9([new ast.UnaryExpr.ptr(pos$1, 79, _r$2)]);
					s2 = new ast.AssignStmt.ptr(sliceType$9.nil, 0, 0, y);
					isRange = true;
					$s = 11; continue;
				/* } else { */ case 10:
					_r$3 = p.parseSimpleStmt(2); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple = _r$3;
					s2 = _tuple[0];
					isRange = _tuple[1];
				/* } */ case 11:
			/* } */ case 8:
			/* */ if (!isRange && (p.tok === 57)) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (!isRange && (p.tok === 57)) { */ case 15:
				$r = p.next(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				s1 = s2;
				s2 = $ifaceNil;
				/* */ if (!((p.tok === 57))) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (!((p.tok === 57))) { */ case 18:
					_r$4 = p.parseSimpleStmt(0); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_tuple$1 = _r$4;
					s2 = _tuple$1[0];
				/* } */ case 19:
				$r = p.expectSemi(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (!((p.tok === 51))) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (!((p.tok === 51))) { */ case 22:
					_r$5 = p.parseSimpleStmt(0); /* */ $s = 24; case 24: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$2 = _r$5;
					s3 = _tuple$2[0];
				/* } */ case 23:
			/* } */ case 16:
			p.exprLev = prevLev;
		/* } */ case 6:
		_r$6 = p.parseBlockStmt(); /* */ $s = 25; case 25: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		body = _r$6;
		$r = p.expectSemi(); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (isRange) { $s = 27; continue; }
		/* */ $s = 28; continue;
		/* if (isRange) { */ case 27:
			as = $assertType(s2, ptrType$40);
			_tmp$3 = $ifaceNil;
			_tmp$4 = $ifaceNil;
			key = _tmp$3;
			value = _tmp$4;
				_1 = as.Lhs.$length;
				/* */ if (_1 === (0)) { $s = 30; continue; }
				/* */ if (_1 === (1)) { $s = 31; continue; }
				/* */ if (_1 === (2)) { $s = 32; continue; }
				/* */ $s = 33; continue;
				/* if (_1 === (0)) { */ case 30:
					$s = 34; continue;
				/* } else if (_1 === (1)) { */ case 31:
					key = (x = as.Lhs, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
					$s = 34; continue;
				/* } else if (_1 === (2)) { */ case 32:
					_tmp$5 = (x$1 = as.Lhs, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0]));
					_tmp$6 = (x$2 = as.Lhs, (1 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 1]));
					key = _tmp$5;
					value = _tmp$6;
					$s = 34; continue;
				/* } else { */ case 33:
					_r$7 = (x$3 = as.Lhs, x$4 = as.Lhs.$length - 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4])).Pos(); /* */ $s = 35; case 35: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$r = p.errorExpected(_r$7, "at most 2 expressions"); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return new ast.BadStmt.ptr(pos, p.safePos(body.End()));
				/* } */ case 34:
			case 29:
			x$6 = $assertType((x$5 = as.Rhs, (0 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 0])), ptrType$31).X;
			$s = -1; return new ast.RangeStmt.ptr(pos, key, value, as.TokPos, as.Tok, x$6, body);
		/* } */ case 28:
		_r$8 = p.makeExpr(s2, "boolean or range expression"); /* */ $s = 37; case 37: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$s = -1; return new ast.ForStmt.ptr(pos, s1, _r$8, s3, body);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseForStmt }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.as = as; $f.body = body; $f.isRange = isRange; $f.key = key; $f.p = p; $f.pos = pos; $f.pos$1 = pos$1; $f.prevLev = prevLev; $f.s1 = s1; $f.s2 = s2; $f.s3 = s3; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.y = y; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseForStmt = function() { return this.$val.parseForStmt(); };
	parser.ptr.prototype.parseStmt = function() {
		var _1, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, isLabeledStmt, p, pos, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; isLabeledStmt = $f.isLabeledStmt; p = $f.p; pos = $f.pos; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		s = $ifaceNil;
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Statement"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
			_1 = p.tok;
			/* */ if ((_1 === (64)) || (_1 === (84)) || (_1 === (85))) { $s = 5; continue; }
			/* */ if ((_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (71)) || (_1 === (49)) || (_1 === (50)) || (_1 === (82)) || (_1 === (77)) || (_1 === (63)) || (_1 === (76)) || (_1 === (12)) || (_1 === (13)) || (_1 === (14)) || (_1 === (17)) || (_1 === (19)) || (_1 === (36)) || (_1 === (43))) { $s = 6; continue; }
			/* */ if (_1 === (72)) { $s = 7; continue; }
			/* */ if (_1 === (67)) { $s = 8; continue; }
			/* */ if (_1 === (80)) { $s = 9; continue; }
			/* */ if ((_1 === (61)) || (_1 === (65)) || (_1 === (73)) || (_1 === (69))) { $s = 10; continue; }
			/* */ if (_1 === (51)) { $s = 11; continue; }
			/* */ if (_1 === (74)) { $s = 12; continue; }
			/* */ if (_1 === (83)) { $s = 13; continue; }
			/* */ if (_1 === (81)) { $s = 14; continue; }
			/* */ if (_1 === (70)) { $s = 15; continue; }
			/* */ if (_1 === (57)) { $s = 16; continue; }
			/* */ if (_1 === (56)) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if ((_1 === (64)) || (_1 === (84)) || (_1 === (85))) { */ case 5:
				_r$1 = p.parseDecl(syncStmt); /* */ $s = 20; case 20: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				s = new ast.DeclStmt.ptr(_r$1);
				$s = 19; continue;
			/* } else if ((_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (71)) || (_1 === (49)) || (_1 === (50)) || (_1 === (82)) || (_1 === (77)) || (_1 === (63)) || (_1 === (76)) || (_1 === (12)) || (_1 === (13)) || (_1 === (14)) || (_1 === (17)) || (_1 === (19)) || (_1 === (36)) || (_1 === (43))) { */ case 6:
				_r$2 = p.parseSimpleStmt(1); /* */ $s = 21; case 21: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				s = _tuple[0];
				_tuple$1 = $assertType(s, ptrType$43, true);
				isLabeledStmt = _tuple$1[1];
				/* */ if (!isLabeledStmt) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (!isLabeledStmt) { */ case 22:
					$r = p.expectSemi(); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 23:
				$s = 19; continue;
			/* } else if (_1 === (72)) { */ case 7:
				_r$3 = p.parseGoStmt(); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				s = _r$3;
				$s = 19; continue;
			/* } else if (_1 === (67)) { */ case 8:
				_r$4 = p.parseDeferStmt(); /* */ $s = 26; case 26: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				s = _r$4;
				$s = 19; continue;
			/* } else if (_1 === (80)) { */ case 9:
				_r$5 = p.parseReturnStmt(); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				s = _r$5;
				$s = 19; continue;
			/* } else if ((_1 === (61)) || (_1 === (65)) || (_1 === (73)) || (_1 === (69))) { */ case 10:
				_r$6 = p.parseBranchStmt(p.tok); /* */ $s = 28; case 28: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				s = _r$6;
				$s = 19; continue;
			/* } else if (_1 === (51)) { */ case 11:
				_r$7 = p.parseBlockStmt(); /* */ $s = 29; case 29: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				s = _r$7;
				$r = p.expectSemi(); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 19; continue;
			/* } else if (_1 === (74)) { */ case 12:
				_r$8 = p.parseIfStmt(); /* */ $s = 31; case 31: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				s = _r$8;
				$s = 19; continue;
			/* } else if (_1 === (83)) { */ case 13:
				_r$9 = p.parseSwitchStmt(); /* */ $s = 32; case 32: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				s = _r$9;
				$s = 19; continue;
			/* } else if (_1 === (81)) { */ case 14:
				_r$10 = p.parseSelectStmt(); /* */ $s = 33; case 33: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				s = _r$10;
				$s = 19; continue;
			/* } else if (_1 === (70)) { */ case 15:
				_r$11 = p.parseForStmt(); /* */ $s = 34; case 34: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				s = _r$11;
				$s = 19; continue;
			/* } else if (_1 === (57)) { */ case 16:
				s = new ast.EmptyStmt.ptr(p.pos, p.lit === "\n");
				$r = p.next(); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 19; continue;
			/* } else if (_1 === (56)) { */ case 17:
				s = new ast.EmptyStmt.ptr(p.pos, true);
				$s = 19; continue;
			/* } else { */ case 18:
				pos = p.pos;
				$r = p.errorExpected(pos, "statement"); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = syncStmt(p); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				s = new ast.BadStmt.ptr(pos, p.pos);
			/* } */ case 19:
		case 4:
		$s = -1; return s;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  s; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseStmt }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.isLabeledStmt = isLabeledStmt; $f.p = p; $f.pos = pos; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseStmt = function() { return this.$val.parseStmt(); };
	isValidImport = function(lit) {
		var _i, _ref, _rune, _tuple, lit, r, s;
		_tuple = strconv.Unquote(lit);
		s = _tuple[0];
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			r = _rune[0];
			if (!unicode.IsGraphic(r) || unicode.IsSpace(r) || strings.ContainsRune("!\"#$%&'()*,:;<=>?[\\]^{|}`\xEF\xBF\xBD", r)) {
				return false;
			}
			_i += _rune[1];
		}
		return !(s === "");
	};
	parser.ptr.prototype.parseImportSpec = function(doc, param, param$1) {
		var _1, _r, _r$1, _r$2, doc, ident, p, param, param$1, path, pos, spec, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; doc = $f.doc; ident = $f.ident; p = $f.p; param = $f.param; param$1 = $f.param$1; path = $f.path; pos = $f.pos; spec = $f.spec; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "ImportSpec"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		ident = ptrType$6.nil;
			_1 = p.tok;
			/* */ if (_1 === (53)) { $s = 5; continue; }
			/* */ if (_1 === (4)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (53)) { */ case 5:
				ident = new ast.Ident.ptr(p.pos, ".", ptrType$8.nil);
				$r = p.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 7; continue;
			/* } else if (_1 === (4)) { */ case 6:
				_r$1 = p.parseIdent(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				ident = _r$1;
			/* } */ case 7:
		case 4:
		pos = p.pos;
		path = "";
		/* */ if (p.tok === 9) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (p.tok === 9) { */ case 10:
			path = p.lit;
			/* */ if (!isValidImport(path)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (!isValidImport(path)) { */ case 13:
				$r = p.error(pos, "invalid import path: " + path); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 14:
			$r = p.next(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 12; continue;
		/* } else { */ case 11:
			_r$2 = p.expect(9); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ case 12:
		$r = p.expectSemi(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		spec = new ast.ImportSpec.ptr(doc, ident, new ast.BasicLit.ptr(pos, 9, path), p.lineComment, 0);
		p.imports = $append(p.imports, spec);
		$s = -1; return spec;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseImportSpec }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.doc = doc; $f.ident = ident; $f.p = p; $f.param = param; $f.param$1 = param$1; $f.path = path; $f.pos = pos; $f.spec = spec; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseImportSpec = function(doc, param, param$1) { return this.$val.parseImportSpec(doc, param, param$1); };
	parser.ptr.prototype.parseValueSpec = function(doc, keyword, iota) {
		var _1, _r, _r$1, _r$2, _r$3, doc, idents, iota, keyword, kind, p, pos, spec, typ, values, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; doc = $f.doc; idents = $f.idents; iota = $f.iota; keyword = $f.keyword; kind = $f.kind; p = $f.p; pos = $f.pos; spec = $f.spec; typ = $f.typ; values = $f.values; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, new token.Token(keyword).String() + "Spec"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		pos = p.pos;
		_r$1 = p.parseIdentList(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		idents = _r$1;
		_r$2 = p.tryType(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		typ = _r$2;
		values = sliceType$9.nil;
		/* */ if (p.tok === 42) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (p.tok === 42) { */ case 6:
			$r = p.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = p.parseRhsList(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			values = _r$3;
		/* } */ case 7:
		$r = p.expectSemi(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_1 = keyword;
			/* */ if (_1 === (85)) { $s = 12; continue; }
			/* */ if (_1 === (64)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (_1 === (85)) { */ case 12:
				/* */ if ($interfaceIsEqual(typ, $ifaceNil) && values === sliceType$9.nil) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if ($interfaceIsEqual(typ, $ifaceNil) && values === sliceType$9.nil) { */ case 15:
					$r = p.error(pos, "missing variable type or initialization"); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 16:
				$s = 14; continue;
			/* } else if (_1 === (64)) { */ case 13:
				/* */ if (values === sliceType$9.nil && ((iota === 0) || !($interfaceIsEqual(typ, $ifaceNil)))) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (values === sliceType$9.nil && ((iota === 0) || !($interfaceIsEqual(typ, $ifaceNil)))) { */ case 18:
					$r = p.error(pos, "missing constant value"); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 19:
			/* } */ case 14:
		case 11:
		spec = new ast.ValueSpec.ptr(doc, idents, typ, values, p.lineComment);
		kind = 2;
		if (keyword === 85) {
			kind = 4;
		}
		$r = p.declare(spec, new $Int(iota), p.topScope, kind, idents); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return spec;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseValueSpec }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.doc = doc; $f.idents = idents; $f.iota = iota; $f.keyword = keyword; $f.kind = kind; $f.p = p; $f.pos = pos; $f.spec = spec; $f.typ = typ; $f.values = values; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseValueSpec = function(doc, keyword, iota) { return this.$val.parseValueSpec(doc, keyword, iota); };
	parser.ptr.prototype.parseTypeSpec = function(doc, param, param$1) {
		var _r, _r$1, _r$2, doc, ident, p, param, param$1, spec, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; doc = $f.doc; ident = $f.ident; p = $f.p; param = $f.param; param$1 = $f.param$1; spec = $f.spec; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "TypeSpec"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseIdent(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ident = _r$1;
		spec = new ast.TypeSpec.ptr(doc, ident, 0, $ifaceNil, ptrType$4.nil);
		$r = p.declare(spec, $ifaceNil, p.topScope, 3, new sliceType$2([ident])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (p.tok === 42) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (p.tok === 42) { */ case 6:
			spec.Assign = p.pos;
			$r = p.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		_r$2 = p.parseType(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		spec.Type = _r$2;
		$r = p.expectSemi(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		spec.Comment = p.lineComment;
		$s = -1; return spec;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseTypeSpec }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.doc = doc; $f.ident = ident; $f.p = p; $f.param = param; $f.param$1 = param$1; $f.spec = spec; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseTypeSpec = function(doc, param, param$1) { return this.$val.parseTypeSpec(doc, param, param$1); };
	parser.ptr.prototype.parseGenDecl = function(keyword, f) {
		var _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, doc, f, iota, keyword, list, lparen, p, pos, rparen, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; doc = $f.doc; f = $f.f; iota = $f.iota; keyword = $f.keyword; list = $f.list; lparen = $f.lparen; p = $f.p; pos = $f.pos; rparen = $f.rparen; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "GenDecl(" + new token.Token(keyword).String() + ")"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		doc = p.leadComment;
		_r$1 = p.expect(keyword); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		_tmp = 0;
		_tmp$1 = 0;
		lparen = _tmp;
		rparen = _tmp$1;
		list = sliceType$12.nil;
		/* */ if (p.tok === 49) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (p.tok === 49) { */ case 5:
			lparen = p.pos;
			$r = p.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			iota = 0;
			/* while (true) { */ case 9:
				/* if (!(!((p.tok === 54)) && !((p.tok === 1)))) { break; } */ if(!(!((p.tok === 54)) && !((p.tok === 1)))) { $s = 10; continue; }
				_r$2 = f(p.leadComment, keyword, iota); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				list = $append(list, _r$2);
				iota = iota + (1) >> 0;
			/* } */ $s = 9; continue; case 10:
			_r$3 = p.expect(54); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			rparen = _r$3;
			$r = p.expectSemi(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 7; continue;
		/* } else { */ case 6:
			_r$4 = f(ptrType$4.nil, keyword, 0); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			list = $append(list, _r$4);
		/* } */ case 7:
		$s = -1; return new ast.GenDecl.ptr(doc, pos, keyword, lparen, list, rparen);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$44.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseGenDecl }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.doc = doc; $f.f = f; $f.iota = iota; $f.keyword = keyword; $f.list = list; $f.lparen = lparen; $f.p = p; $f.pos = pos; $f.rparen = rparen; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseGenDecl = function(keyword, f) { return this.$val.parseGenDecl(keyword, f); };
	parser.ptr.prototype.parseFuncDecl = function() {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, body, decl, doc, ident, p, params, pos, recv, results, scope, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; body = $f.body; decl = $f.decl; doc = $f.doc; ident = $f.ident; p = $f.p; params = $f.params; pos = $f.pos; recv = $f.recv; results = $f.results; scope = $f.scope; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "FunctionDecl"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		doc = p.leadComment;
		_r$1 = p.expect(71); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		scope = ast.NewScope(p.topScope);
		recv = ptrType$15.nil;
		/* */ if (p.tok === 49) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (p.tok === 49) { */ case 5:
			_r$2 = p.parseParameters(scope, false); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			recv = _r$2;
		/* } */ case 6:
		_r$3 = p.parseIdent(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		ident = _r$3;
		_r$4 = p.parseSignature(scope); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		params = _tuple[0];
		results = _tuple[1];
		body = ptrType$22.nil;
		/* */ if (p.tok === 51) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (p.tok === 51) { */ case 10:
			_r$5 = p.parseBody(scope); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			body = _r$5;
		/* } */ case 11:
		$r = p.expectSemi(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		decl = new ast.FuncDecl.ptr(doc, recv, ident, new ast.FuncType.ptr(pos, params, results), body);
		/* */ if (recv === ptrType$15.nil) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (recv === ptrType$15.nil) { */ case 14:
			/* */ if (!(ident.Name === "init")) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (!(ident.Name === "init")) { */ case 16:
				$r = p.declare(decl, $ifaceNil, p.pkgScope, 5, new sliceType$2([ident])); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 17:
		/* } */ case 15:
		$s = -1; return decl;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$45.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseFuncDecl }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.body = body; $f.decl = decl; $f.doc = doc; $f.ident = ident; $f.p = p; $f.params = params; $f.pos = pos; $f.recv = recv; $f.results = results; $f.scope = scope; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseFuncDecl = function() { return this.$val.parseFuncDecl(); };
	parser.ptr.prototype.parseDecl = function(sync) {
		var _1, _r, _r$1, _r$2, f, p, pos, sync, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; p = $f.p; pos = $f.pos; sync = $f.sync; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Declaration"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		f = $throwNilPointerError;
			_1 = p.tok;
			/* */ if ((_1 === (64)) || (_1 === (85))) { $s = 5; continue; }
			/* */ if (_1 === (84)) { $s = 6; continue; }
			/* */ if (_1 === (71)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((_1 === (64)) || (_1 === (85))) { */ case 5:
				f = $methodVal(p, "parseValueSpec");
				$s = 9; continue;
			/* } else if (_1 === (84)) { */ case 6:
				f = $methodVal(p, "parseTypeSpec");
				$s = 9; continue;
			/* } else if (_1 === (71)) { */ case 7:
				_r$1 = p.parseFuncDecl(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } else { */ case 8:
				pos = p.pos;
				$r = p.errorExpected(pos, "declaration"); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = sync(p); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return new ast.BadDecl.ptr(pos, p.pos);
			/* } */ case 9:
		case 4:
		_r$2 = p.parseGenDecl(p.tok, f); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseDecl }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.p = p; $f.pos = pos; $f.sync = sync; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseDecl = function(sync) { return this.$val.parseDecl(sync); };
	parser.ptr.prototype.parseFile = function() {
		var _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, decls, doc, i, ident, ident$1, p, pos, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; decls = $f.decls; doc = $f.doc; i = $f.i; ident = $f.ident; ident$1 = $f.ident$1; p = $f.p; pos = $f.pos; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "File"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		if (!((p.errors.Len() === 0))) {
			$s = -1; return ptrType$1.nil;
		}
		doc = p.leadComment;
		_r$1 = p.expect(78); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		_r$2 = p.parseIdent(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		ident = _r$2;
		/* */ if (ident.Name === "_" && !((((p.mode & 16) >>> 0) === 0))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (ident.Name === "_" && !((((p.mode & 16) >>> 0) === 0))) { */ case 6:
			$r = p.error(p.pos, "invalid package name _"); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		$r = p.expectSemi(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!((p.errors.Len() === 0))) {
			$s = -1; return ptrType$1.nil;
		}
		p.openScope();
		p.pkgScope = p.topScope;
		decls = sliceType$5.nil;
		/* */ if (((p.mode & 1) >>> 0) === 0) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (((p.mode & 1) >>> 0) === 0) { */ case 10:
			/* while (true) { */ case 12:
				/* if (!(p.tok === 75)) { break; } */ if(!(p.tok === 75)) { $s = 13; continue; }
				_r$3 = p.parseGenDecl(75, $methodVal(p, "parseImportSpec")); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				decls = $append(decls, _r$3);
			/* } */ $s = 12; continue; case 13:
			/* */ if (((p.mode & 2) >>> 0) === 0) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (((p.mode & 2) >>> 0) === 0) { */ case 15:
				/* while (true) { */ case 17:
					/* if (!(!((p.tok === 1)))) { break; } */ if(!(!((p.tok === 1)))) { $s = 18; continue; }
					_r$4 = p.parseDecl(syncDecl); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					decls = $append(decls, _r$4);
				/* } */ $s = 17; continue; case 18:
			/* } */ case 16:
		/* } */ case 11:
		p.closeScope();
		assert(p.topScope === ptrType$5.nil, "unbalanced scopes");
		assert(p.labelScope === ptrType$5.nil, "unbalanced label scopes");
		i = 0;
		_ref = p.unresolved;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			ident$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			assert(ident$1.Obj === unresolved, "object already resolved");
			ident$1.Obj = p.pkgScope.Lookup(ident$1.Name);
			if (ident$1.Obj === ptrType$8.nil) {
				(x = p.unresolved, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = ident$1));
				i = i + (1) >> 0;
			}
			_i++;
		}
		$s = -1; return new ast.File.ptr(doc, pos, ident, decls, p.pkgScope, p.imports, $subslice(p.unresolved, 0, i), p.comments);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$1.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseFile }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.decls = decls; $f.doc = doc; $f.i = i; $f.ident = ident; $f.ident$1 = ident$1; $f.p = p; $f.pos = pos; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseFile = function() { return this.$val.parseFile(); };
	ptrType$46.methods = [{prop: "init", name: "init", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ptrType$2, $String, sliceType, Mode], [], false)}, {prop: "openScope", name: "openScope", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [], false)}, {prop: "closeScope", name: "closeScope", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [], false)}, {prop: "openLabelScope", name: "openLabelScope", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [], false)}, {prop: "closeLabelScope", name: "closeLabelScope", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [], false)}, {prop: "declare", name: "declare", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([$emptyInterface, $emptyInterface, ptrType$5, ast.ObjKind, sliceType$2], [], true)}, {prop: "shortVarDecl", name: "shortVarDecl", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ptrType$40, sliceType$9], [], false)}, {prop: "tryResolve", name: "tryResolve", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ast.Expr, $Bool], [], false)}, {prop: "resolve", name: "resolve", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ast.Expr], [], false)}, {prop: "printTrace", name: "printTrace", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([sliceType$7], [], true)}, {prop: "next0", name: "next0", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [], false)}, {prop: "consumeComment", name: "consumeComment", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ptrType$11, $Int], false)}, {prop: "consumeCommentGroup", name: "consumeCommentGroup", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([$Int], [ptrType$4, $Int], false)}, {prop: "next", name: "next", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [], false)}, {prop: "error", name: "error", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([token.Pos, $String], [], false)}, {prop: "errorExpected", name: "errorExpected", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([token.Pos, $String], [], false)}, {prop: "expect", name: "expect", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([token.Token], [token.Pos], false)}, {prop: "expectClosing", name: "expectClosing", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([token.Token, $String], [token.Pos], false)}, {prop: "expectSemi", name: "expectSemi", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [], false)}, {prop: "atComma", name: "atComma", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([$String, token.Token], [$Bool], false)}, {prop: "safePos", name: "safePos", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([token.Pos], [token.Pos], false)}, {prop: "parseIdent", name: "parseIdent", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ptrType$6], false)}, {prop: "parseIdentList", name: "parseIdentList", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [sliceType$2], false)}, {prop: "parseExprList", name: "parseExprList", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([$Bool], [sliceType$9], false)}, {prop: "parseLhsList", name: "parseLhsList", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [sliceType$9], false)}, {prop: "parseRhsList", name: "parseRhsList", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [sliceType$9], false)}, {prop: "parseVoidableType", name: "parseVoidableType", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ast.Expr], false)}, {prop: "parseType", name: "parseType", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ast.Expr], false)}, {prop: "parseTypeName", name: "parseTypeName", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ast.Expr], false)}, {prop: "parseArrayType", name: "parseArrayType", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ast.Expr], false)}, {prop: "makeIdentList", name: "makeIdentList", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([sliceType$9], [sliceType$2], false)}, {prop: "parseFieldDecl", name: "parseFieldDecl", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ptrType$5], [ptrType$14], false)}, {prop: "parseStructType", name: "parseStructType", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ptrType$16], false)}, {prop: "parsePointerType", name: "parsePointerType", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ptrType$17], false)}, {prop: "tryVarType", name: "tryVarType", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([$Bool], [ast.Expr], false)}, {prop: "parseVarType", name: "parseVarType", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([$Bool], [ast.Expr], false)}, {prop: "parseParameterList", name: "parseParameterList", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ptrType$5, $Bool], [sliceType$10], false)}, {prop: "parseParameters", name: "parseParameters", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ptrType$5, $Bool], [ptrType$15], false)}, {prop: "parseResult", name: "parseResult", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ptrType$5], [ptrType$15], false)}, {prop: "parseSignature", name: "parseSignature", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ptrType$5], [ptrType$15, ptrType$15], false)}, {prop: "parseFuncType", name: "parseFuncType", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ptrType$18, ptrType$5], false)}, {prop: "parseMethodSpec", name: "parseMethodSpec", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ptrType$5], [ptrType$14], false)}, {prop: "parseInterfaceType", name: "parseInterfaceType", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ptrType$19], false)}, {prop: "parseMapType", name: "parseMapType", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ptrType$20], false)}, {prop: "parseChanType", name: "parseChanType", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ptrType$21], false)}, {prop: "tryIdentOrType", name: "tryIdentOrType", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ast.Expr], false)}, {prop: "tryType", name: "tryType", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ast.Expr], false)}, {prop: "parseStmtList", name: "parseStmtList", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [sliceType$11], false)}, {prop: "parseBody", name: "parseBody", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ptrType$5], [ptrType$22], false)}, {prop: "parseBlockStmt", name: "parseBlockStmt", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ptrType$22], false)}, {prop: "parseFuncTypeOrLit", name: "parseFuncTypeOrLit", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ast.Expr], false)}, {prop: "parseOperand", name: "parseOperand", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([$Bool], [ast.Expr], false)}, {prop: "parseSelector", name: "parseSelector", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ast.Expr], [ast.Expr], false)}, {prop: "parseTypeAssertion", name: "parseTypeAssertion", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ast.Expr], [ast.Expr], false)}, {prop: "parseIndexOrSlice", name: "parseIndexOrSlice", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ast.Expr], [ast.Expr], false)}, {prop: "parseCallOrConversion", name: "parseCallOrConversion", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ast.Expr], [ptrType$23], false)}, {prop: "parseValue", name: "parseValue", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([$Bool], [ast.Expr], false)}, {prop: "parseElement", name: "parseElement", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ast.Expr], false)}, {prop: "parseElementList", name: "parseElementList", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [sliceType$9], false)}, {prop: "parseLiteralValue", name: "parseLiteralValue", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ast.Expr], [ast.Expr], false)}, {prop: "checkExpr", name: "checkExpr", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ast.Expr], [ast.Expr], false)}, {prop: "checkExprOrType", name: "checkExprOrType", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ast.Expr], [ast.Expr], false)}, {prop: "parsePrimaryExpr", name: "parsePrimaryExpr", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([$Bool], [ast.Expr], false)}, {prop: "parseUnaryExpr", name: "parseUnaryExpr", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([$Bool], [ast.Expr], false)}, {prop: "tokPrec", name: "tokPrec", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [token.Token, $Int], false)}, {prop: "parseBinaryExpr", name: "parseBinaryExpr", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([$Bool, $Int], [ast.Expr], false)}, {prop: "parseExpr", name: "parseExpr", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([$Bool], [ast.Expr], false)}, {prop: "parseRhs", name: "parseRhs", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ast.Expr], false)}, {prop: "parseRhsOrType", name: "parseRhsOrType", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ast.Expr], false)}, {prop: "parseSimpleStmt", name: "parseSimpleStmt", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([$Int], [ast.Stmt, $Bool], false)}, {prop: "parseCallExpr", name: "parseCallExpr", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([$String], [ptrType$23], false)}, {prop: "parseGoStmt", name: "parseGoStmt", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ast.Stmt], false)}, {prop: "parseDeferStmt", name: "parseDeferStmt", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ast.Stmt], false)}, {prop: "parseReturnStmt", name: "parseReturnStmt", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ptrType$35], false)}, {prop: "parseBranchStmt", name: "parseBranchStmt", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([token.Token], [ptrType$36], false)}, {prop: "makeExpr", name: "makeExpr", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ast.Stmt, $String], [ast.Expr], false)}, {prop: "parseIfStmt", name: "parseIfStmt", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ptrType$38], false)}, {prop: "parseTypeList", name: "parseTypeList", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [sliceType$9], false)}, {prop: "parseCaseClause", name: "parseCaseClause", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([$Bool], [ptrType$39], false)}, {prop: "isTypeSwitchGuard", name: "isTypeSwitchGuard", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ast.Stmt], [$Bool], false)}, {prop: "parseSwitchStmt", name: "parseSwitchStmt", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ast.Stmt], false)}, {prop: "parseCommClause", name: "parseCommClause", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ptrType$41], false)}, {prop: "parseSelectStmt", name: "parseSelectStmt", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ptrType$42], false)}, {prop: "parseForStmt", name: "parseForStmt", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ast.Stmt], false)}, {prop: "parseStmt", name: "parseStmt", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ast.Stmt], false)}, {prop: "parseImportSpec", name: "parseImportSpec", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ptrType$4, token.Token, $Int], [ast.Spec], false)}, {prop: "parseValueSpec", name: "parseValueSpec", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ptrType$4, token.Token, $Int], [ast.Spec], false)}, {prop: "parseTypeSpec", name: "parseTypeSpec", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([ptrType$4, token.Token, $Int], [ast.Spec], false)}, {prop: "parseGenDecl", name: "parseGenDecl", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([token.Token, parseSpecFunction], [ptrType$44], false)}, {prop: "parseFuncDecl", name: "parseFuncDecl", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ptrType$45], false)}, {prop: "parseDecl", name: "parseDecl", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([funcType], [ast.Decl], false)}, {prop: "parseFile", name: "parseFile", pkg: "example.com/transpiler/xgtest/parser", typ: $funcType([], [ptrType$1], false)}];
	parser.init("example.com/transpiler/xgtest/parser", [{prop: "file", name: "file", anonymous: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "errors", name: "errors", anonymous: false, exported: false, typ: scanner.ErrorList, tag: ""}, {prop: "scanner", name: "scanner", anonymous: false, exported: false, typ: scanner.Scanner, tag: ""}, {prop: "mode", name: "mode", anonymous: false, exported: false, typ: Mode, tag: ""}, {prop: "trace", name: "trace", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "indent", name: "indent", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "comments", name: "comments", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "leadComment", name: "leadComment", anonymous: false, exported: false, typ: ptrType$4, tag: ""}, {prop: "lineComment", name: "lineComment", anonymous: false, exported: false, typ: ptrType$4, tag: ""}, {prop: "pos", name: "pos", anonymous: false, exported: false, typ: token.Pos, tag: ""}, {prop: "tok", name: "tok", anonymous: false, exported: false, typ: token.Token, tag: ""}, {prop: "lit", name: "lit", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "syncPos", name: "syncPos", anonymous: false, exported: false, typ: token.Pos, tag: ""}, {prop: "syncCnt", name: "syncCnt", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "exprLev", name: "exprLev", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "inRhs", name: "inRhs", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "pkgScope", name: "pkgScope", anonymous: false, exported: false, typ: ptrType$5, tag: ""}, {prop: "topScope", name: "topScope", anonymous: false, exported: false, typ: ptrType$5, tag: ""}, {prop: "unresolved", name: "unresolved", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "imports", name: "imports", anonymous: false, exported: false, typ: sliceType$3, tag: ""}, {prop: "labelScope", name: "labelScope", anonymous: false, exported: false, typ: ptrType$5, tag: ""}, {prop: "targetStack", name: "targetStack", anonymous: false, exported: false, typ: sliceType$4, tag: ""}]);
	bailout.init("", []);
	parseSpecFunction.init([ptrType$4, token.Token, $Int], [ast.Spec], false);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ast.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = scanner.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = token.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ioutil.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		unresolved = new ast.Object.ptr(0, "", $ifaceNil, $ifaceNil, $ifaceNil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/binary"] = (function() {
	var $pkg = {}, $init, errors, io, math, reflect, bigEndian, sliceType, overflow;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	reflect = $packages["reflect"];
	bigEndian = $pkg.bigEndian = $newType(0, $kindStruct, "binary.bigEndian", true, "encoding/binary", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	sliceType = $sliceType($Uint8);
	bigEndian.ptr.prototype.Uint16 = function(b) {
		var b;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		return ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) << 16 >>> 16)) | ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) << 16 >>> 16)) << 8 << 16 >>> 16)) >>> 0;
	};
	bigEndian.prototype.Uint16 = function(b) { return this.$val.Uint16(b); };
	bigEndian.ptr.prototype.PutUint16 = function(b, v) {
		var b, v;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (((v >>> 8 << 16 >>> 16) << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = ((v << 24 >>> 24)));
	};
	bigEndian.prototype.PutUint16 = function(b, v) { return this.$val.PutUint16(b, v); };
	bigEndian.ptr.prototype.Uint32 = function(b) {
		var b;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		return ((((((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0)) | ((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0)) << 24 >>> 0)) >>> 0;
	};
	bigEndian.prototype.Uint32 = function(b) { return this.$val.Uint32(b); };
	bigEndian.ptr.prototype.PutUint32 = function(b, v) {
		var b, v;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (((v >>> 24 >>> 0) << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (((v >>> 16 >>> 0) << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (((v >>> 8 >>> 0) << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = ((v << 24 >>> 24)));
	};
	bigEndian.prototype.PutUint32 = function(b, v) { return this.$val.PutUint32(b, v); };
	bigEndian.ptr.prototype.Uint64 = function(b) {
		var b, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		return (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), x$7 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
	};
	bigEndian.prototype.Uint64 = function(b) { return this.$val.Uint64(b); };
	bigEndian.ptr.prototype.PutUint64 = function(b, v) {
		var b, v;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (($shiftRightUint64(v, 56).$low << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (($shiftRightUint64(v, 48).$low << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (($shiftRightUint64(v, 40).$low << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = (($shiftRightUint64(v, 32).$low << 24 >>> 24)));
		(4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4] = (($shiftRightUint64(v, 24).$low << 24 >>> 24)));
		(5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5] = (($shiftRightUint64(v, 16).$low << 24 >>> 24)));
		(6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6] = (($shiftRightUint64(v, 8).$low << 24 >>> 24)));
		(7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7] = ((v.$low << 24 >>> 24)));
	};
	bigEndian.prototype.PutUint64 = function(b, v) { return this.$val.PutUint64(b, v); };
	bigEndian.ptr.prototype.String = function() {
		return "BigEndian";
	};
	bigEndian.prototype.String = function() { return this.$val.String(); };
	bigEndian.ptr.prototype.GoString = function() {
		return "binary.BigEndian";
	};
	bigEndian.prototype.GoString = function() { return this.$val.GoString(); };
	bigEndian.methods = [{prop: "Uint16", name: "Uint16", pkg: "", typ: $funcType([sliceType], [$Uint16], false)}, {prop: "PutUint16", name: "PutUint16", pkg: "", typ: $funcType([sliceType, $Uint16], [], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([sliceType], [$Uint32], false)}, {prop: "PutUint32", name: "PutUint32", pkg: "", typ: $funcType([sliceType, $Uint32], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([sliceType], [$Uint64], false)}, {prop: "PutUint64", name: "PutUint64", pkg: "", typ: $funcType([sliceType, $Uint64], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}];
	bigEndian.init("", []);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.BigEndian = new bigEndian.ptr();
		overflow = errors.New("binary: varint overflows a 64-bit integer");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math/bits"] = (function() {
	var $pkg = {}, $init, deBruijn32tab, deBruijn64tab, len8tab, LeadingZeros, LeadingZeros64, TrailingZeros, TrailingZeros32, TrailingZeros64, Len, Len32, Len64;
	LeadingZeros = function(x) {
		var x;
		return 32 - Len(x) >> 0;
	};
	$pkg.LeadingZeros = LeadingZeros;
	LeadingZeros64 = function(x) {
		var x;
		return 64 - Len64(x) >> 0;
	};
	$pkg.LeadingZeros64 = LeadingZeros64;
	TrailingZeros = function(x) {
		var x;
		if (true) {
			return TrailingZeros32(((x >>> 0)));
		}
		return TrailingZeros64((new $Uint64(0, x)));
	};
	$pkg.TrailingZeros = TrailingZeros;
	TrailingZeros32 = function(x) {
		var x, x$1;
		if (x === 0) {
			return 32;
		}
		return (((x$1 = ($imul((((x & (-x >>> 0)) >>> 0)), 125613361) >>> 0) >>> 27 >>> 0, ((x$1 < 0 || x$1 >= deBruijn32tab.length) ? ($throwRuntimeError("index out of range"), undefined) : deBruijn32tab[x$1])) >> 0));
	};
	$pkg.TrailingZeros32 = TrailingZeros32;
	TrailingZeros64 = function(x) {
		var x, x$1, x$2;
		if ((x.$high === 0 && x.$low === 0)) {
			return 64;
		}
		return (((x$1 = $shiftRightUint64($mul64(((x$2 = new $Uint64(-x.$high, -x.$low), new $Uint64(x.$high & x$2.$high, (x.$low & x$2.$low) >>> 0))), new $Uint64(66559345, 3033172745)), 58), (($flatten64(x$1) < 0 || $flatten64(x$1) >= deBruijn64tab.length) ? ($throwRuntimeError("index out of range"), undefined) : deBruijn64tab[$flatten64(x$1)])) >> 0));
	};
	$pkg.TrailingZeros64 = TrailingZeros64;
	Len = function(x) {
		var x;
		if (true) {
			return Len32(((x >>> 0)));
		}
		return Len64((new $Uint64(0, x)));
	};
	$pkg.Len = Len;
	Len32 = function(x) {
		var n, x, y, y$1;
		n = 0;
		if (x >= 65536) {
			x = (y = (16), y < 32 ? (x >>> y) : 0) >>> 0;
			n = 16;
		}
		if (x >= 256) {
			x = (y$1 = (8), y$1 < 32 ? (x >>> y$1) : 0) >>> 0;
			n = n + (8) >> 0;
		}
		n = n + ((((x < 0 || x >= len8tab.length) ? ($throwRuntimeError("index out of range"), undefined) : len8tab[x]) >> 0)) >> 0;
		return n;
	};
	$pkg.Len32 = Len32;
	Len64 = function(x) {
		var n, x;
		n = 0;
		if ((x.$high > 1 || (x.$high === 1 && x.$low >= 0))) {
			x = $shiftRightUint64(x, (32));
			n = 32;
		}
		if ((x.$high > 0 || (x.$high === 0 && x.$low >= 65536))) {
			x = $shiftRightUint64(x, (16));
			n = n + (16) >> 0;
		}
		if ((x.$high > 0 || (x.$high === 0 && x.$low >= 256))) {
			x = $shiftRightUint64(x, (8));
			n = n + (8) >> 0;
		}
		n = n + (((($flatten64(x) < 0 || $flatten64(x) >= len8tab.length) ? ($throwRuntimeError("index out of range"), undefined) : len8tab[$flatten64(x)]) >> 0)) >> 0;
		return n;
	};
	$pkg.Len64 = Len64;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		deBruijn32tab = $toNativeArray($kindUint8, [0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9]);
		deBruijn64tab = $toNativeArray($kindUint8, [0, 1, 56, 2, 57, 49, 28, 3, 61, 58, 42, 50, 38, 29, 17, 4, 62, 47, 59, 36, 45, 43, 51, 22, 53, 39, 33, 30, 24, 18, 12, 5, 63, 55, 48, 27, 60, 41, 37, 16, 46, 35, 44, 21, 52, 32, 23, 11, 54, 26, 40, 15, 34, 20, 31, 10, 25, 14, 19, 9, 13, 8, 7, 6]);
		len8tab = $toNativeArray($kindUint8, [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math/rand"] = (function() {
	var $pkg = {}, $init, nosync, math, Source, Source64, Rand, lockedSource, rngSource, arrayType, ptrType, ptrType$1, sliceType, ptrType$2, ptrType$3, funcType, sliceType$1, ptrType$5, ke, we, fe, kn, wn, fn, globalRand, rng_cooked, absInt32, NewSource, New, read, seedrand;
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	math = $packages["math"];
	Source = $pkg.Source = $newType(8, $kindInterface, "rand.Source", true, "math/rand", true, null);
	Source64 = $pkg.Source64 = $newType(8, $kindInterface, "rand.Source64", true, "math/rand", true, null);
	Rand = $pkg.Rand = $newType(0, $kindStruct, "rand.Rand", true, "math/rand", true, function(src_, s64_, readVal_, readPos_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.src = $ifaceNil;
			this.s64 = $ifaceNil;
			this.readVal = new $Int64(0, 0);
			this.readPos = 0;
			return;
		}
		this.src = src_;
		this.s64 = s64_;
		this.readVal = readVal_;
		this.readPos = readPos_;
	});
	lockedSource = $pkg.lockedSource = $newType(0, $kindStruct, "rand.lockedSource", true, "math/rand", false, function(lk_, src_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lk = new nosync.Mutex.ptr(false);
			this.src = $ifaceNil;
			return;
		}
		this.lk = lk_;
		this.src = src_;
	});
	rngSource = $pkg.rngSource = $newType(0, $kindStruct, "rand.rngSource", true, "math/rand", false, function(tap_, feed_, vec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.tap = 0;
			this.feed = 0;
			this.vec = arrayType.zero();
			return;
		}
		this.tap = tap_;
		this.feed = feed_;
		this.vec = vec_;
	});
	arrayType = $arrayType($Int64, 607);
	ptrType = $ptrType(lockedSource);
	ptrType$1 = $ptrType($Int8);
	sliceType = $sliceType($Int);
	ptrType$2 = $ptrType($Int64);
	ptrType$3 = $ptrType(Rand);
	funcType = $funcType([$Int, $Int], [], false);
	sliceType$1 = $sliceType($Uint8);
	ptrType$5 = $ptrType(rngSource);
	Rand.ptr.prototype.ExpFloat64 = function() {
		var _r, _r$1, _r$2, _r$3, i, j, r, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; j = $f.j; r = $f.r; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* while (true) { */ case 1:
			_r = r.Uint32(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = _r;
			i = (j & 255) >>> 0;
			x = (j) * (((i < 0 || i >= we.length) ? ($throwRuntimeError("index out of range"), undefined) : we[i]));
			if (j < ((i < 0 || i >= ke.length) ? ($throwRuntimeError("index out of range"), undefined) : ke[i])) {
				$s = -1; return x;
			}
			/* */ if (i === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i === 0) { */ case 4:
				_r$1 = r.Float64(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = math.Log(_r$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return 7.69711747013105 - _r$2;
			/* } */ case 5:
			_r$3 = r.Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if ($fround(((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]) + $fround(($fround(_r$3)) * ($fround((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[x$1])) - ((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]))))) < ($fround(math.Exp(-x)))) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ($fround(((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]) + $fround(($fround(_r$3)) * ($fround((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[x$1])) - ((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]))))) < ($fround(math.Exp(-x)))) { */ case 8:
				$s = -1; return x;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.ExpFloat64 }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.j = j; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.ExpFloat64 = function() { return this.$val.ExpFloat64(); };
	absInt32 = function(i) {
		var i;
		if (i < 0) {
			return ((-i >>> 0));
		}
		return ((i >>> 0));
	};
	Rand.ptr.prototype.NormFloat64 = function() {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, i, j, r, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; i = $f.i; j = $f.j; r = $f.r; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* while (true) { */ case 1:
			_r = r.Uint32(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = ((_r >> 0));
			i = j & 127;
			x = (j) * (((i < 0 || i >= wn.length) ? ($throwRuntimeError("index out of range"), undefined) : wn[i]));
			if (absInt32(j) < ((i < 0 || i >= kn.length) ? ($throwRuntimeError("index out of range"), undefined) : kn[i])) {
				$s = -1; return x;
			}
			/* */ if (i === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i === 0) { */ case 4:
				/* while (true) { */ case 6:
					_r$1 = r.Float64(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = math.Log(_r$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					x = -_r$2 * 0.29047645161474317;
					_r$3 = r.Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = math.Log(_r$3); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					y = -_r$4;
					if (y + y >= x * x) {
						/* break; */ $s = 7; continue;
					}
				/* } */ $s = 6; continue; case 7:
				if (j > 0) {
					$s = -1; return 3.442619855899 + x;
				}
				$s = -1; return -3.442619855899 - x;
			/* } */ case 5:
			_r$5 = r.Float64(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if ($fround(((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]) + $fround(($fround(_r$5)) * ($fround((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[x$1])) - ((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]))))) < ($fround(math.Exp(-0.5 * x * x)))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if ($fround(((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]) + $fround(($fround(_r$5)) * ($fround((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[x$1])) - ((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]))))) < ($fround(math.Exp(-0.5 * x * x)))) { */ case 12:
				$s = -1; return x;
			/* } */ case 13:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.NormFloat64 }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.i = i; $f.j = j; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.NormFloat64 = function() { return this.$val.NormFloat64(); };
	NewSource = function(seed) {
		var rng, seed;
		rng = new rngSource.ptr(0, 0, arrayType.zero());
		rng.Seed(seed);
		return rng;
	};
	$pkg.NewSource = NewSource;
	New = function(src) {
		var _tuple, s64, src;
		_tuple = $assertType(src, Source64, true);
		s64 = _tuple[0];
		return new Rand.ptr(src, s64, new $Int64(0, 0), 0);
	};
	$pkg.New = New;
	Rand.ptr.prototype.Seed = function(seed) {
		var _tuple, lk, ok, r, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; lk = $f.lk; ok = $f.ok; r = $f.r; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_tuple = $assertType(r.src, ptrType, true);
		lk = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			$r = lk.seedPos(seed, (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$1(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		$r = r.src.Seed(seed); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r.readPos = 0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Seed }; } $f._tuple = _tuple; $f.lk = lk; $f.ok = ok; $f.r = r; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	Rand.ptr.prototype.Int63 = function() {
		var _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.src.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int63 }; } $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int63 = function() { return this.$val.Int63(); };
	Rand.ptr.prototype.Uint32 = function() {
		var _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (($shiftRightInt64(_r, 31).$low >>> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Uint32 }; } $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Uint32 = function() { return this.$val.Uint32(); };
	Rand.ptr.prototype.Uint64 = function() {
		var _r, _r$1, _r$2, r, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; r = $f.r; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* */ if (!($interfaceIsEqual(r.s64, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(r.s64, $ifaceNil))) { */ case 1:
			_r = r.s64.Uint64(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = r.Int63(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = r.Int63(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return (x = $shiftRightUint64(((x$1 = _r$1, new $Uint64(x$1.$high, x$1.$low))), 31), x$2 = $shiftLeft64(((x$3 = _r$2, new $Uint64(x$3.$high, x$3.$low))), 32), new $Uint64(x.$high | x$2.$high, (x.$low | x$2.$low) >>> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Uint64 }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Rand.ptr.prototype.Int31 = function() {
		var _r, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (((x = $shiftRightInt64(_r, 32), x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int31 }; } $f._r = _r; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int31 = function() { return this.$val.Int31(); };
	Rand.ptr.prototype.Int = function() {
		var _r, r, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		u = ((_r.$low >>> 0));
		$s = -1; return ((((u << 1 >>> 0) >>> 1 >>> 0) >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int }; } $f._r = _r; $f.r = r; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int = function() { return this.$val.Int(); };
	Rand.ptr.prototype.Int63n = function(n) {
		var _r, _r$1, _r$2, max, n, r, v, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; max = $f.max; n = $f.n; r = $f.r; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if ((n.$high < 0 || (n.$high === 0 && n.$low <= 0))) {
			$panic(new $String("invalid argument to Int63n"));
		}
		/* */ if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) { */ case 1:
			_r = r.Int63(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return (x$2 = _r, x$3 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		/* } */ case 2:
		max = ((x$4 = (x$5 = $div64(new $Uint64(2147483648, 0), (new $Uint64(n.$high, n.$low)), true), new $Uint64(2147483647 - x$5.$high, 4294967295 - x$5.$low)), new $Int64(x$4.$high, x$4.$low)));
		_r$1 = r.Int63(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		v = _r$1;
		/* while (true) { */ case 5:
			/* if (!((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low)))) { break; } */ if(!((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low)))) { $s = 6; continue; }
			_r$2 = r.Int63(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			v = _r$2;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return $div64(v, n, true);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int63n }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.max = max; $f.n = n; $f.r = r; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int63n = function(n) { return this.$val.Int63n(n); };
	Rand.ptr.prototype.Int31n = function(n) {
		var _r, _r$1, _r$2, _r$3, _r$4, max, n, r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; max = $f.max; n = $f.n; r = $f.r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Int31n"));
		}
		/* */ if ((n & ((n - 1 >> 0))) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((n & ((n - 1 >> 0))) === 0) { */ case 1:
			_r = r.Int31(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r & ((n - 1 >> 0));
		/* } */ case 2:
		max = (((2147483647 - (_r$1 = 2147483648 % ((n >>> 0)), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >>> 0) >> 0));
		_r$2 = r.Int31(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		v = _r$2;
		/* while (true) { */ case 5:
			/* if (!(v > max)) { break; } */ if(!(v > max)) { $s = 6; continue; }
			_r$3 = r.Int31(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return (_r$4 = v % n, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int31n }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.max = max; $f.n = n; $f.r = r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int31n = function(n) { return this.$val.Int31n(n); };
	Rand.ptr.prototype.int31n = function(n) {
		var _r, _r$1, _r$2, low, n, prod, r, thresh, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; low = $f.low; n = $f.n; prod = $f.prod; r = $f.r; thresh = $f.thresh; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Uint32(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		v = _r;
		prod = $mul64((new $Uint64(0, v)), (new $Uint64(0, n)));
		low = ((prod.$low >>> 0));
		/* */ if (low < ((n >>> 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (low < ((n >>> 0))) { */ case 2:
			thresh = (_r$1 = ((-n >>> 0)) % ((n >>> 0)), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
			/* while (true) { */ case 4:
				/* if (!(low < thresh)) { break; } */ if(!(low < thresh)) { $s = 5; continue; }
				_r$2 = r.Uint32(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				v = _r$2;
				prod = $mul64((new $Uint64(0, v)), (new $Uint64(0, n)));
				low = ((prod.$low >>> 0));
			/* } */ $s = 4; continue; case 5:
		/* } */ case 3:
		$s = -1; return (($shiftRightUint64(prod, 32).$low >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.int31n }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.low = low; $f.n = n; $f.prod = prod; $f.r = r; $f.thresh = thresh; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.int31n = function(n) { return this.$val.int31n(n); };
	Rand.ptr.prototype.Intn = function(n) {
		var _r, _r$1, n, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; n = $f.n; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Intn"));
		}
		/* */ if (n <= 2147483647) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n <= 2147483647) { */ case 1:
			_r = r.Int31n(((n >> 0))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return ((_r >> 0));
		/* } */ case 2:
		_r$1 = r.Int63n((new $Int64(0, n))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return (((x = _r$1, x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Intn }; } $f._r = _r; $f._r$1 = _r$1; $f.n = n; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Intn = function(n) { return this.$val.Intn(n); };
	Rand.ptr.prototype.Float64 = function() {
		var _r, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* again: */ case 1:
		_r = r.Int63(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = ($flatten64(_r)) / 9.223372036854776e+18;
		/* */ if (f === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (f === 1) { */ case 3:
			/* goto again */ $s = 1; continue;
		/* } */ case 4:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Float64 }; } $f._r = _r; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Float64 = function() { return this.$val.Float64(); };
	Rand.ptr.prototype.Float32 = function() {
		var _r, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* again: */ case 1:
		_r = r.Float64(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = ($fround(_r));
		/* */ if (f === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (f === 1) { */ case 3:
			/* goto again */ $s = 1; continue;
		/* } */ case 4:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Float32 }; } $f._r = _r; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Float32 = function() { return this.$val.Float32(); };
	Rand.ptr.prototype.Perm = function(n) {
		var _r, i, j, m, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; j = $f.j; m = $f.m; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		m = $makeSlice(sliceType, n);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_r = r.Intn(i + 1 >> 0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = _r;
			((i < 0 || i >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + i] = ((j < 0 || j >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + j]));
			((j < 0 || j >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + j] = i);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Perm }; } $f._r = _r; $f.i = i; $f.j = j; $f.m = m; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Perm = function(n) { return this.$val.Perm(n); };
	Rand.ptr.prototype.Shuffle = function(n, swap) {
		var _r, _r$1, i, j, j$1, n, r, swap, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; i = $f.i; j = $f.j; j$1 = $f.j$1; n = $f.n; r = $f.r; swap = $f.swap; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (n < 0) {
			$panic(new $String("invalid argument to Shuffle"));
		}
		i = n - 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i > 2147483646)) { break; } */ if(!(i > 2147483646)) { $s = 2; continue; }
			_r = r.Int63n((new $Int64(0, (i + 1 >> 0)))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = (((x = _r, x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
			$r = swap(i, j); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* while (true) { */ case 5:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 6; continue; }
			_r$1 = r.int31n((((i + 1 >> 0) >> 0))); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			j$1 = ((_r$1 >> 0));
			$r = swap(i, j$1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Shuffle }; } $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.j = j; $f.j$1 = j$1; $f.n = n; $f.r = r; $f.swap = swap; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Shuffle = function(n, swap) { return this.$val.Shuffle(n, swap); };
	Rand.ptr.prototype.Read = function(p) {
		var _r, _r$1, _tuple, _tuple$1, _tuple$2, err, lk, n, ok, p, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; lk = $f.lk; n = $f.n; ok = $f.ok; p = $f.p; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		_tuple = $assertType(r.src, ptrType, true);
		lk = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = lk.read(p, (r.$ptr_readVal || (r.$ptr_readVal = new ptrType$2(function() { return this.$target.readVal; }, function($v) { this.$target.readVal = $v; }, r))), (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$1(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r)))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			n = _tuple$1[0];
			err = _tuple$1[1];
			$s = -1; return [n, err];
		/* } */ case 2:
		_r$1 = read(p, $methodVal(r, "Int63"), (r.$ptr_readVal || (r.$ptr_readVal = new ptrType$2(function() { return this.$target.readVal; }, function($v) { this.$target.readVal = $v; }, r))), (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$1(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r)))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$2 = _r$1;
		n = _tuple$2[0];
		err = _tuple$2[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Read }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.lk = lk; $f.n = n; $f.ok = ok; $f.p = p; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Read = function(p) { return this.$val.Read(p); };
	read = function(p, int63, readVal, readPos) {
		var _r, err, int63, n, p, pos, readPos, readVal, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; int63 = $f.int63; n = $f.n; p = $f.p; pos = $f.pos; readPos = $f.readPos; readVal = $f.readVal; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		pos = readPos.$get();
		val = readVal.$get();
		n = 0;
		/* while (true) { */ case 1:
			/* if (!(n < p.$length)) { break; } */ if(!(n < p.$length)) { $s = 2; continue; }
			/* */ if (pos === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (pos === 0) { */ case 3:
				_r = int63(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				val = _r;
				pos = 7;
			/* } */ case 4:
			((n < 0 || n >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + n] = ((val.$low << 24 >>> 24)));
			val = $shiftRightInt64(val, (8));
			pos = pos - (1) << 24 >> 24;
			n = n + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		readPos.$set(pos);
		readVal.$set(val);
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: read }; } $f._r = _r; $f.err = err; $f.int63 = int63; $f.n = n; $f.p = p; $f.pos = pos; $f.readPos = readPos; $f.readVal = readVal; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.ptr.prototype.Int63 = function() {
		var _r, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		r = this;
		r.lk.Lock();
		_r = r.src.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		r.lk.Unlock();
		$s = -1; return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Int63 }; } $f._r = _r; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Int63 = function() { return this.$val.Int63(); };
	lockedSource.ptr.prototype.Uint64 = function() {
		var _r, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Uint64(0, 0);
		r = this;
		r.lk.Lock();
		_r = r.src.Uint64(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		r.lk.Unlock();
		$s = -1; return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Uint64 }; } $f._r = _r; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Uint64 = function() { return this.$val.Uint64(); };
	lockedSource.ptr.prototype.Seed = function(seed) {
		var r, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		r.lk.Lock();
		$r = r.src.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r.lk.Unlock();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Seed }; } $f.r = r; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	lockedSource.ptr.prototype.seedPos = function(seed, readPos) {
		var r, readPos, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; readPos = $f.readPos; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		r.lk.Lock();
		$r = r.src.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		readPos.$set(0);
		r.lk.Unlock();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.seedPos }; } $f.r = r; $f.readPos = readPos; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.seedPos = function(seed, readPos) { return this.$val.seedPos(seed, readPos); };
	lockedSource.ptr.prototype.read = function(p, readVal, readPos) {
		var _r, _tuple, err, n, p, r, readPos, readVal, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; n = $f.n; p = $f.p; r = $f.r; readPos = $f.readPos; readVal = $f.readVal; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		r.lk.Lock();
		_r = read(p, $methodVal(r.src, "Int63"), readVal, readPos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		r.lk.Unlock();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.read }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.n = n; $f.p = p; $f.r = r; $f.readPos = readPos; $f.readVal = readVal; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.read = function(p, readVal, readPos) { return this.$val.read(p, readVal, readPos); };
	seedrand = function(x) {
		var _q, _r, hi, lo, x;
		hi = (_q = x / 44488, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		lo = (_r = x % 44488, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		x = ($imul(48271, lo)) - ($imul(3399, hi)) >> 0;
		if (x < 0) {
			x = x + (2147483647) >> 0;
		}
		return x;
	};
	rngSource.ptr.prototype.Seed = function(seed) {
		var i, rng, seed, u, x, x$1, x$2, x$3, x$4, x$5;
		rng = this;
		rng.tap = 0;
		rng.feed = 334;
		seed = $div64(seed, new $Int64(0, 2147483647), true);
		if ((seed.$high < 0 || (seed.$high === 0 && seed.$low < 0))) {
			seed = (x = new $Int64(0, 2147483647), new $Int64(seed.$high + x.$high, seed.$low + x.$low));
		}
		if ((seed.$high === 0 && seed.$low === 0)) {
			seed = new $Int64(0, 89482311);
		}
		x$1 = (((seed.$low + ((seed.$high >> 31) * 4294967296)) >> 0));
		i = -20;
		while (true) {
			if (!(i < 607)) { break; }
			x$1 = seedrand(x$1);
			if (i >= 0) {
				u = new $Int64(0, 0);
				u = $shiftLeft64((new $Int64(0, x$1)), 40);
				x$1 = seedrand(x$1);
				u = (x$2 = $shiftLeft64((new $Int64(0, x$1)), 20), new $Int64(u.$high ^ x$2.$high, (u.$low ^ x$2.$low) >>> 0));
				x$1 = seedrand(x$1);
				u = (x$3 = (new $Int64(0, x$1)), new $Int64(u.$high ^ x$3.$high, (u.$low ^ x$3.$low) >>> 0));
				u = (x$4 = ((i < 0 || i >= rng_cooked.length) ? ($throwRuntimeError("index out of range"), undefined) : rng_cooked[i]), new $Int64(u.$high ^ x$4.$high, (u.$low ^ x$4.$low) >>> 0));
				(x$5 = rng.vec, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i] = u));
			}
			i = i + (1) >> 0;
		}
	};
	rngSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	rngSource.ptr.prototype.Int63 = function() {
		var rng, x, x$1;
		rng = this;
		return ((x = (x$1 = rng.Uint64(), new $Uint64(x$1.$high & 2147483647, (x$1.$low & 4294967295) >>> 0)), new $Int64(x.$high, x.$low)));
	};
	rngSource.prototype.Int63 = function() { return this.$val.Int63(); };
	rngSource.ptr.prototype.Uint64 = function() {
		var rng, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		rng = this;
		rng.tap = rng.tap - (1) >> 0;
		if (rng.tap < 0) {
			rng.tap = rng.tap + (607) >> 0;
		}
		rng.feed = rng.feed - (1) >> 0;
		if (rng.feed < 0) {
			rng.feed = rng.feed + (607) >> 0;
		}
		x$6 = (x = (x$1 = rng.vec, x$2 = rng.feed, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])), x$3 = (x$4 = rng.vec, x$5 = rng.tap, ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5])), new $Int64(x.$high + x$3.$high, x.$low + x$3.$low));
		(x$7 = rng.vec, x$8 = rng.feed, ((x$8 < 0 || x$8 >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[x$8] = x$6));
		return (new $Uint64(x$6.$high, x$6.$low));
	};
	rngSource.prototype.Uint64 = function() { return this.$val.Uint64(); };
	ptrType$3.methods = [{prop: "ExpFloat64", name: "ExpFloat64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "NormFloat64", name: "NormFloat64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Int31", name: "Int31", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int63n", name: "Int63n", pkg: "", typ: $funcType([$Int64], [$Int64], false)}, {prop: "Int31n", name: "Int31n", pkg: "", typ: $funcType([$Int32], [$Int32], false)}, {prop: "int31n", name: "int31n", pkg: "math/rand", typ: $funcType([$Int32], [$Int32], false)}, {prop: "Intn", name: "Intn", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Float32", name: "Float32", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "Shuffle", name: "Shuffle", pkg: "", typ: $funcType([$Int, funcType], [], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}];
	ptrType.methods = [{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "seedPos", name: "seedPos", pkg: "math/rand", typ: $funcType([$Int64, ptrType$1], [], false)}, {prop: "read", name: "read", pkg: "math/rand", typ: $funcType([sliceType$1, ptrType$2, ptrType$1], [$Int, $error], false)}];
	ptrType$5.methods = [{prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}];
	Source.init([{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}]);
	Source64.init([{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}]);
	Rand.init("math/rand", [{prop: "src", name: "src", anonymous: false, exported: false, typ: Source, tag: ""}, {prop: "s64", name: "s64", anonymous: false, exported: false, typ: Source64, tag: ""}, {prop: "readVal", name: "readVal", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "readPos", name: "readPos", anonymous: false, exported: false, typ: $Int8, tag: ""}]);
	lockedSource.init("math/rand", [{prop: "lk", name: "lk", anonymous: false, exported: false, typ: nosync.Mutex, tag: ""}, {prop: "src", name: "src", anonymous: false, exported: false, typ: Source64, tag: ""}]);
	rngSource.init("math/rand", [{prop: "tap", name: "tap", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "feed", name: "feed", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "vec", name: "vec", anonymous: false, exported: false, typ: arrayType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = nosync.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ke = $toNativeArray($kindUint32, [3801129273, 0, 2615860924, 3279400049, 3571300752, 3733536696, 3836274812, 3906990442, 3958562475, 3997804264, 4028649213, 4053523342, 4074002619, 4091154507, 4105727352, 4118261130, 4129155133, 4138710916, 4147160435, 4154685009, 4161428406, 4167506077, 4173011791, 4178022498, 4182601930, 4186803325, 4190671498, 4194244443, 4197554582, 4200629752, 4203493986, 4206168142, 4208670408, 4211016720, 4213221098, 4215295924, 4217252177, 4219099625, 4220846988, 4222502074, 4224071896, 4225562770, 4226980400, 4228329951, 4229616109, 4230843138, 4232014925, 4233135020, 4234206673, 4235232866, 4236216336, 4237159604, 4238064994, 4238934652, 4239770563, 4240574564, 4241348362, 4242093539, 4242811568, 4243503822, 4244171579, 4244816032, 4245438297, 4246039419, 4246620374, 4247182079, 4247725394, 4248251127, 4248760037, 4249252839, 4249730206, 4250192773, 4250641138, 4251075867, 4251497493, 4251906522, 4252303431, 4252688672, 4253062674, 4253425844, 4253778565, 4254121205, 4254454110, 4254777611, 4255092022, 4255397640, 4255694750, 4255983622, 4256264513, 4256537670, 4256803325, 4257061702, 4257313014, 4257557464, 4257795244, 4258026541, 4258251531, 4258470383, 4258683258, 4258890309, 4259091685, 4259287526, 4259477966, 4259663135, 4259843154, 4260018142, 4260188212, 4260353470, 4260514019, 4260669958, 4260821380, 4260968374, 4261111028, 4261249421, 4261383632, 4261513736, 4261639802, 4261761900, 4261880092, 4261994441, 4262105003, 4262211835, 4262314988, 4262414513, 4262510454, 4262602857, 4262691764, 4262777212, 4262859239, 4262937878, 4263013162, 4263085118, 4263153776, 4263219158, 4263281289, 4263340187, 4263395872, 4263448358, 4263497660, 4263543789, 4263586755, 4263626565, 4263663224, 4263696735, 4263727099, 4263754314, 4263778377, 4263799282, 4263817020, 4263831582, 4263842955, 4263851124, 4263856071, 4263857776, 4263856218, 4263851370, 4263843206, 4263831695, 4263816804, 4263798497, 4263776735, 4263751476, 4263722676, 4263690284, 4263654251, 4263614520, 4263571032, 4263523724, 4263472530, 4263417377, 4263358192, 4263294892, 4263227394, 4263155608, 4263079437, 4262998781, 4262913534, 4262823581, 4262728804, 4262629075, 4262524261, 4262414220, 4262298801, 4262177846, 4262051187, 4261918645, 4261780032, 4261635148, 4261483780, 4261325704, 4261160681, 4260988457, 4260808763, 4260621313, 4260425802, 4260221905, 4260009277, 4259787550, 4259556329, 4259315195, 4259063697, 4258801357, 4258527656, 4258242044, 4257943926, 4257632664, 4257307571, 4256967906, 4256612870, 4256241598, 4255853155, 4255446525, 4255020608, 4254574202, 4254106002, 4253614578, 4253098370, 4252555662, 4251984571, 4251383021, 4250748722, 4250079132, 4249371435, 4248622490, 4247828790, 4246986404, 4246090910, 4245137315, 4244119963, 4243032411, 4241867296, 4240616155, 4239269214, 4237815118, 4236240596, 4234530035, 4232664930, 4230623176, 4228378137, 4225897409, 4223141146, 4220059768, 4216590757, 4212654085, 4208145538, 4202926710, 4196809522, 4189531420, 4180713890, 4169789475, 4155865042, 4137444620, 4111806704, 4073393724, 4008685917, 3873074895]);
		we = $toNativeArray($kindFloat32, [2.0249555365836613e-09, 1.4866739783681027e-11, 2.4409616689036184e-11, 3.1968806074589295e-11, 3.844677007314168e-11, 4.42282044321729e-11, 4.951644302919611e-11, 5.443358958023836e-11, 5.905943789574764e-11, 6.34494193296753e-11, 6.764381416113352e-11, 7.167294535648239e-11, 7.556032188826833e-11, 7.932458162551725e-11, 8.298078890689453e-11, 8.654132271912474e-11, 9.001651507523079e-11, 9.341507428706208e-11, 9.674443190998971e-11, 1.0001099254308699e-10, 1.0322031424037093e-10, 1.0637725422757427e-10, 1.0948611461891744e-10, 1.1255067711157807e-10, 1.1557434870246297e-10, 1.1856014781042035e-10, 1.2151082917633005e-10, 1.2442885610752796e-10, 1.2731647680563896e-10, 1.3017574518325858e-10, 1.330085347417409e-10, 1.3581656632677408e-10, 1.386014220061682e-10, 1.413645728254309e-10, 1.4410737880776736e-10, 1.4683107507629245e-10, 1.4953686899854546e-10, 1.522258291641876e-10, 1.5489899640730442e-10, 1.575573282952547e-10, 1.6020171300645814e-10, 1.628330109637588e-10, 1.6545202707884954e-10, 1.68059510752272e-10, 1.7065616975120435e-10, 1.73242697965037e-10, 1.758197337720091e-10, 1.783878739169964e-10, 1.8094774290045024e-10, 1.834998542005195e-10, 1.8604476292871652e-10, 1.8858298256319017e-10, 1.9111498494872592e-10, 1.9364125580789704e-10, 1.9616222535212557e-10, 1.9867835154840918e-10, 2.011900368525943e-10, 2.0369768372052732e-10, 2.062016807302669e-10, 2.0870240258208383e-10, 2.1120022397624894e-10, 2.136955057352452e-10, 2.1618855317040442e-10, 2.1867974098199738e-10, 2.2116936060356807e-10, 2.2365774510202385e-10, 2.2614519978869652e-10, 2.2863201609713002e-10, 2.3111849933865614e-10, 2.3360494094681883e-10, 2.3609159072179864e-10, 2.3857874009713953e-10, 2.4106666662859766e-10, 2.4355562011635357e-10, 2.460458781161634e-10, 2.485376904282077e-10, 2.5103127909709144e-10, 2.5352694943414633e-10, 2.560248957284017e-10, 2.585253955356137e-10, 2.610286709003873e-10, 2.6353494386732734e-10, 2.6604446423661443e-10, 2.6855745405285347e-10, 2.71074163116225e-10, 2.7359478571575835e-10, 2.7611959940720965e-10, 2.786487707240326e-10, 2.8118254946640775e-10, 2.8372118543451563e-10, 2.8626484516180994e-10, 2.8881380620404684e-10, 2.9136826285025563e-10, 2.9392840938946563e-10, 2.96494523377433e-10, 2.990667713476114e-10, 3.016454031001814e-10, 3.042306406797479e-10, 3.068226783753403e-10, 3.09421765987139e-10, 3.12028125559749e-10, 3.1464195138219964e-10, 3.17263521010247e-10, 3.1989300097734485e-10, 3.225306410836737e-10, 3.2517669112941405e-10, 3.2783134540359526e-10, 3.3049485370639786e-10, 3.3316743808242677e-10, 3.3584937608743815e-10, 3.385408342548857e-10, 3.4124211789610115e-10, 3.4395342130011386e-10, 3.4667499426710435e-10, 3.494071143528288e-10, 3.521500313574677e-10, 3.54903967325626e-10, 3.576691720574843e-10, 3.6044595086437425e-10, 3.632345535464765e-10, 3.660352021483959e-10, 3.688482297370399e-10, 3.716738583570134e-10, 3.7451239331964814e-10, 3.773641121807003e-10, 3.802292924959261e-10, 3.831082673322328e-10, 3.8600128648980103e-10, 3.8890865527996255e-10, 3.9183070676962473e-10, 3.9476774627011935e-10, 3.977200790927782e-10, 4.006880383045086e-10, 4.0367195697221803e-10, 4.066721681628138e-10, 4.0968900494320337e-10, 4.127228558914453e-10, 4.15774054074447e-10, 4.188429603146915e-10, 4.2192993543466173e-10, 4.25035395767992e-10, 4.2815970213716525e-10, 4.313032986313914e-10, 4.3446651831757777e-10, 4.376498607960855e-10, 4.408536868893975e-10, 4.4407846844229937e-10, 4.4732464954400086e-10, 4.5059267428371186e-10, 4.538830145062178e-10, 4.5719619756745544e-10, 4.605326675566346e-10, 4.638929240741163e-10, 4.672775499869886e-10, 4.706869893844612e-10, 4.74121908400349e-10, 4.775827511238617e-10, 4.810701836888143e-10, 4.845848167178701e-10, 4.881271498113904e-10, 4.916979601254923e-10, 4.952977472605369e-10, 4.989272883726414e-10, 5.025872495956207e-10, 5.062783525744408e-10, 5.100013189540675e-10, 5.13756870379467e-10, 5.175458395179078e-10, 5.21369003525507e-10, 5.252272505806843e-10, 5.29121357839557e-10, 5.330522134805449e-10, 5.3702081670437e-10, 5.41028055689452e-10, 5.450749851476644e-10, 5.491624932574268e-10, 5.532918012640664e-10, 5.574638528571541e-10, 5.616799247931681e-10, 5.659410717839819e-10, 5.702485705860738e-10, 5.746036979559221e-10, 5.790077306500052e-10, 5.83462111958255e-10, 5.879682296594524e-10, 5.925275825546805e-10, 5.971417249561739e-10, 6.01812211176167e-10, 6.065408175714992e-10, 6.113292094767075e-10, 6.16179329782085e-10, 6.21092954844471e-10, 6.260721940876124e-10, 6.311191569352559e-10, 6.362359528111483e-10, 6.414249686947926e-10, 6.466885360545405e-10, 6.520292639144998e-10, 6.574497612987784e-10, 6.629528592760892e-10, 6.685415554485985e-10, 6.742187919073217e-10, 6.799880103436351e-10, 6.858525969377638e-10, 6.918161599145378e-10, 6.978825850545434e-10, 7.040559801829716e-10, 7.103406751696184e-10, 7.167412219288849e-10, 7.232625609532306e-10, 7.2990985477972e-10, 7.366885990123251e-10, 7.436047333442275e-10, 7.506645305355164e-10, 7.57874762946642e-10, 7.652426470272644e-10, 7.727759543385559e-10, 7.804830115532013e-10, 7.883728114777e-10, 7.964550685635174e-10, 8.047402189070851e-10, 8.132396422944055e-10, 8.219657177122031e-10, 8.309318788590758e-10, 8.401527806789488e-10, 8.496445214056791e-10, 8.594246980742071e-10, 8.695127395874636e-10, 8.799300732498239e-10, 8.90700457834015e-10, 9.01850316648023e-10, 9.134091816243028e-10, 9.254100818978372e-10, 9.37890431984556e-10, 9.508922538259412e-10, 9.64463842123564e-10, 9.78660263939446e-10, 9.935448019859905e-10, 1.0091912860943353e-09, 1.0256859805934937e-09, 1.0431305819125214e-09, 1.0616465484503124e-09, 1.0813799855569073e-09, 1.1025096391392708e-09, 1.1252564435793033e-09, 1.149898620766976e-09, 1.176793218427008e-09, 1.2064089727203964e-09, 1.2393785997488749e-09, 1.2765849488616254e-09, 1.319313880365769e-09, 1.36954347862428e-09, 1.4305497897382224e-09, 1.5083649884672923e-09, 1.6160853766322703e-09, 1.7921247819074893e-09]);
		fe = $toNativeArray($kindFloat32, [1, 0.9381436705589294, 0.900469958782196, 0.8717043399810791, 0.847785472869873, 0.8269932866096497, 0.8084216713905334, 0.7915276288986206, 0.7759568691253662, 0.7614634037017822, 0.7478685975074768, 0.7350381016731262, 0.7228676676750183, 0.7112747430801392, 0.7001926302909851, 0.6895664930343628, 0.6793505549430847, 0.669506311416626, 0.6600008606910706, 0.6508058309555054, 0.6418967247009277, 0.633251965045929, 0.62485271692276, 0.6166821718215942, 0.608725368976593, 0.6009689569473267, 0.5934008955955505, 0.5860103368759155, 0.5787873864173889, 0.5717230439186096, 0.5648092031478882, 0.5580382943153381, 0.5514034032821655, 0.5448982119560242, 0.5385168790817261, 0.5322538614273071, 0.526104211807251, 0.5200631618499756, 0.5141264200210571, 0.5082897543907166, 0.5025495290756226, 0.4969019889831543, 0.4913438558578491, 0.4858720004558563, 0.48048335313796997, 0.4751752018928528, 0.4699448347091675, 0.4647897481918335, 0.4597076177597046, 0.4546961486339569, 0.4497532546520233, 0.44487687945365906, 0.4400651156902313, 0.4353161156177521, 0.4306281507015228, 0.42599955201148987, 0.42142874002456665, 0.4169141948223114, 0.4124544560909271, 0.40804818272590637, 0.4036940038204193, 0.39939069747924805, 0.3951369822025299, 0.39093172550201416, 0.38677382469177246, 0.38266217708587646, 0.378595769405365, 0.37457355856895447, 0.37059465050697327, 0.366658091545105, 0.362762987613678, 0.358908474445343, 0.35509374737739563, 0.35131800174713135, 0.3475804924964905, 0.34388044476509094, 0.34021714329719543, 0.33658990263938904, 0.3329980671405792, 0.3294409513473511, 0.32591795921325684, 0.32242849469184875, 0.3189719021320343, 0.3155476748943329, 0.31215524673461914, 0.3087940812110901, 0.30546361207962036, 0.30216339230537415, 0.29889291524887085, 0.29565170407295227, 0.2924392819404602, 0.2892552316188812, 0.28609907627105713, 0.2829704284667969, 0.27986884117126465, 0.2767939269542694, 0.2737452983856201, 0.2707225978374481, 0.26772540807724, 0.26475343108177185, 0.2618062496185303, 0.258883535861969, 0.2559850215911865, 0.25311028957366943, 0.25025907158851624, 0.24743106961250305, 0.2446259707212448, 0.24184346199035645, 0.23908329010009766, 0.23634515702724457, 0.2336287796497345, 0.23093391954898834, 0.22826029360294342, 0.22560766339302063, 0.22297576069831848, 0.22036437690258026, 0.21777324378490448, 0.21520215272903442, 0.212650865316391, 0.21011915802955627, 0.20760682225227356, 0.20511364936828613, 0.20263944566249847, 0.20018397271633148, 0.19774706661701202, 0.1953285187482834, 0.19292815029621124, 0.19054576754570007, 0.18818120658397675, 0.18583425879478455, 0.18350479006767273, 0.18119260668754578, 0.17889754474163055, 0.17661945521831512, 0.17435817420482635, 0.1721135377883911, 0.16988539695739746, 0.16767361760139465, 0.16547803580760956, 0.16329853236675262, 0.16113494336605072, 0.1589871346950531, 0.15685498714447021, 0.15473836660385132, 0.15263713896274567, 0.1505511850118637, 0.1484803706407547, 0.14642459154129028, 0.1443837285041809, 0.14235764741897583, 0.1403462439775467, 0.13834942877292633, 0.136367067694664, 0.13439907133579254, 0.1324453204870224, 0.1305057406425476, 0.12858019769191742, 0.12666863203048706, 0.12477091699838638, 0.12288697808980942, 0.1210167184472084, 0.11916005611419678, 0.11731690168380737, 0.11548716574907303, 0.11367076635360718, 0.11186762899160385, 0.11007767915725708, 0.1083008274435997, 0.10653700679540634, 0.10478614270687103, 0.1030481606721878, 0.10132300108671188, 0.0996105819940567, 0.09791085124015808, 0.09622374176979065, 0.09454918652772903, 0.09288713335990906, 0.09123751521110535, 0.08960027992725372, 0.08797537535429001, 0.08636274188756943, 0.0847623273730278, 0.08317409455776215, 0.08159798383712769, 0.08003395050764084, 0.07848194986581802, 0.07694194465875626, 0.07541389018297195, 0.07389774918556213, 0.07239348441362381, 0.070901058614254, 0.06942043453454971, 0.06795158982276917, 0.06649449467658997, 0.06504911929368973, 0.06361543387174606, 0.06219341605901718, 0.06078304722905159, 0.0593843050301075, 0.05799717456102371, 0.05662164092063904, 0.05525768920779228, 0.05390531197190285, 0.05256449431180954, 0.05123523622751236, 0.04991753399372101, 0.04861138388514519, 0.047316793352365494, 0.04603376239538193, 0.044762298464775085, 0.04350241273641586, 0.04225412383675575, 0.04101744294166565, 0.039792392402887344, 0.03857899457216263, 0.03737728297710419, 0.03618728369474411, 0.03500903770327568, 0.03384258225560188, 0.0326879620552063, 0.031545232981443405, 0.030414443463087082, 0.0292956605553627, 0.028188949450850487, 0.027094384655356407, 0.02601204626262188, 0.024942025542259216, 0.023884421214461327, 0.022839335724711418, 0.021806888282299042, 0.020787203684449196, 0.019780423492193222, 0.018786700442433357, 0.017806200310587883, 0.016839107498526573, 0.015885621309280396, 0.014945968054234982, 0.01402039173990488, 0.013109165243804455, 0.012212592177093029, 0.011331013403832912, 0.010464809834957123, 0.009614413604140282, 0.008780314587056637, 0.007963077165186405, 0.007163353264331818, 0.0063819061033427715, 0.005619642324745655, 0.004877655766904354, 0.004157294984906912, 0.003460264764726162, 0.0027887988835573196, 0.0021459676790982485, 0.001536299823783338, 0.0009672692976891994, 0.0004541343660093844]);
		kn = $toNativeArray($kindUint32, [1991057938, 0, 1611602771, 1826899878, 1918584482, 1969227037, 2001281515, 2023368125, 2039498179, 2051788381, 2061460127, 2069267110, 2075699398, 2081089314, 2085670119, 2089610331, 2093034710, 2096037586, 2098691595, 2101053571, 2103168620, 2105072996, 2106796166, 2108362327, 2109791536, 2111100552, 2112303493, 2113412330, 2114437283, 2115387130, 2116269447, 2117090813, 2117856962, 2118572919, 2119243101, 2119871411, 2120461303, 2121015852, 2121537798, 2122029592, 2122493434, 2122931299, 2123344971, 2123736059, 2124106020, 2124456175, 2124787725, 2125101763, 2125399283, 2125681194, 2125948325, 2126201433, 2126441213, 2126668298, 2126883268, 2127086657, 2127278949, 2127460589, 2127631985, 2127793506, 2127945490, 2128088244, 2128222044, 2128347141, 2128463758, 2128572095, 2128672327, 2128764606, 2128849065, 2128925811, 2128994934, 2129056501, 2129110560, 2129157136, 2129196237, 2129227847, 2129251929, 2129268426, 2129277255, 2129278312, 2129271467, 2129256561, 2129233410, 2129201800, 2129161480, 2129112170, 2129053545, 2128985244, 2128906855, 2128817916, 2128717911, 2128606255, 2128482298, 2128345305, 2128194452, 2128028813, 2127847342, 2127648860, 2127432031, 2127195339, 2126937058, 2126655214, 2126347546, 2126011445, 2125643893, 2125241376, 2124799783, 2124314271, 2123779094, 2123187386, 2122530867, 2121799464, 2120980787, 2120059418, 2119015917, 2117825402, 2116455471, 2114863093, 2112989789, 2110753906, 2108037662, 2104664315, 2100355223, 2094642347, 2086670106, 2074676188, 2054300022, 2010539237]);
		wn = $toNativeArray($kindFloat32, [1.7290404663583558e-09, 1.2680928529462676e-10, 1.689751810696194e-10, 1.9862687883343e-10, 2.223243117382978e-10, 2.4244936613904144e-10, 2.601613091623989e-10, 2.761198769629658e-10, 2.9073962681813725e-10, 3.042996965518796e-10, 3.169979556627567e-10, 3.289802041894774e-10, 3.4035738116777736e-10, 3.5121602848242617e-10, 3.61625090983253e-10, 3.7164057942185025e-10, 3.813085680537398e-10, 3.906675816178762e-10, 3.997501218933053e-10, 4.0858399996679395e-10, 4.1719308563337165e-10, 4.255982233303257e-10, 4.3381759295968436e-10, 4.4186720948857783e-10, 4.497613115272969e-10, 4.57512583373898e-10, 4.6513240481438345e-10, 4.726310454117311e-10, 4.800177477726209e-10, 4.873009773476156e-10, 4.944885056978876e-10, 5.015873272284921e-10, 5.086040477664255e-10, 5.155446070048697e-10, 5.224146670812502e-10, 5.292193350214802e-10, 5.359634958068682e-10, 5.426517013518151e-10, 5.492881705038144e-10, 5.558769555769061e-10, 5.624218868405251e-10, 5.689264614971989e-10, 5.75394121238304e-10, 5.818281967329142e-10, 5.882316855831959e-10, 5.946076964136182e-10, 6.009590047817426e-10, 6.072883862451306e-10, 6.135985053390414e-10, 6.19892026598734e-10, 6.261713370037114e-10, 6.324390455780815e-10, 6.386973727678935e-10, 6.449488165749528e-10, 6.511955974453087e-10, 6.574400468473129e-10, 6.636843297158634e-10, 6.699307220081607e-10, 6.761814441702541e-10, 6.824387166481927e-10, 6.887046488657234e-10, 6.949815167800466e-10, 7.012714853260604e-10, 7.075767749498141e-10, 7.13899661608508e-10, 7.202424212593428e-10, 7.266072743483676e-10, 7.329966078550854e-10, 7.394128087589991e-10, 7.458582640396116e-10, 7.523354716987285e-10, 7.588469852493063e-10, 7.653954137154528e-10, 7.719834771435785e-10, 7.786139510912449e-10, 7.852897221383159e-10, 7.920137878869582e-10, 7.987892014504894e-10, 8.056192379868321e-10, 8.125072836762115e-10, 8.194568912323064e-10, 8.264716688799467e-10, 8.3355555791087e-10, 8.407127216614185e-10, 8.479473234679347e-10, 8.552640262671218e-10, 8.626675485068347e-10, 8.701631637464402e-10, 8.777562010564566e-10, 8.854524335966119e-10, 8.932581896381464e-10, 9.011799639857543e-10, 9.092249730890956e-10, 9.174008219758889e-10, 9.25715837318819e-10, 9.341788453909317e-10, 9.42799727177146e-10, 9.515889187738935e-10, 9.605578554783278e-10, 9.697193048552322e-10, 9.790869226478094e-10, 9.886760299337993e-10, 9.985036131254788e-10, 1.008588212947359e-09, 1.0189509236369076e-09, 1.0296150598776421e-09, 1.040606933955246e-09, 1.0519566329136865e-09, 1.0636980185552147e-09, 1.0758701707302976e-09, 1.0885182755160372e-09, 1.101694735439196e-09, 1.115461056855338e-09, 1.1298901814171813e-09, 1.1450695946990663e-09, 1.1611052119775422e-09, 1.178127595480305e-09, 1.1962995039027646e-09, 1.2158286599728285e-09, 1.2369856250415978e-09, 1.2601323318151003e-09, 1.2857697129220469e-09, 1.3146201904845611e-09, 1.3477839955200466e-09, 1.3870635751089821e-09, 1.43574030442295e-09, 1.5008658760251592e-09, 1.6030947680434338e-09]);
		fn = $toNativeArray($kindFloat32, [1, 0.963599681854248, 0.9362826943397522, 0.9130436182022095, 0.8922816514968872, 0.8732430338859558, 0.8555005788803101, 0.8387836217880249, 0.8229072093963623, 0.8077383041381836, 0.7931770086288452, 0.7791460752487183, 0.7655841708183289, 0.7524415850639343, 0.7396772503852844, 0.7272568941116333, 0.7151514887809753, 0.7033361196517944, 0.6917891502380371, 0.6804918646812439, 0.6694276928901672, 0.6585819721221924, 0.6479418277740479, 0.6374954581260681, 0.6272324919700623, 0.6171433925628662, 0.6072195172309875, 0.5974531769752502, 0.5878370404243469, 0.5783646702766418, 0.5690299868583679, 0.5598273873329163, 0.550751805305481, 0.5417983531951904, 0.5329626798629761, 0.5242405533790588, 0.5156282186508179, 0.5071220397949219, 0.49871864914894104, 0.4904148280620575, 0.48220765590667725, 0.47409430146217346, 0.466072142124176, 0.45813870429992676, 0.45029163360595703, 0.44252872467041016, 0.4348478317260742, 0.42724698781967163, 0.41972434520721436, 0.41227802634239197, 0.40490642189979553, 0.39760786294937134, 0.3903807997703552, 0.3832238018512726, 0.3761354684829712, 0.3691144585609436, 0.36215949058532715, 0.3552693724632263, 0.3484429717063904, 0.3416791558265686, 0.33497685194015503, 0.32833510637283325, 0.3217529058456421, 0.3152293860912323, 0.30876362323760986, 0.3023548424243927, 0.2960021495819092, 0.2897048592567444, 0.28346219658851624, 0.2772735059261322, 0.271138072013855, 0.2650552988052368, 0.25902456045150757, 0.25304529070854187, 0.24711695313453674, 0.24123899638652802, 0.23541094362735748, 0.22963231801986694, 0.22390270233154297, 0.21822164952754974, 0.21258877217769623, 0.20700371265411377, 0.20146611332893372, 0.1959756463766098, 0.19053204357624054, 0.18513499200344086, 0.17978426814079285, 0.1744796335697174, 0.16922089457511902, 0.16400785744190216, 0.1588403731584549, 0.15371830761432648, 0.14864157140254974, 0.14361007511615753, 0.13862377405166626, 0.13368265330791473, 0.12878671288490295, 0.12393598258495331, 0.11913054436445236, 0.11437050998210907, 0.10965602099895477, 0.1049872562289238, 0.10036443918943405, 0.09578784555196762, 0.09125780314207077, 0.08677466958761215, 0.08233889937400818, 0.07795098423957825, 0.07361150532960892, 0.06932111829519272, 0.06508058309555054, 0.06089077144861221, 0.05675266310572624, 0.05266740173101425, 0.048636294901371, 0.044660862535238266, 0.040742866694927216, 0.03688438981771469, 0.03308788686990738, 0.029356317594647408, 0.025693291798233986, 0.02210330404341221, 0.018592102453112602, 0.015167297795414925, 0.011839478276669979, 0.0086244847625494, 0.005548994988203049, 0.0026696291752159595]);
		rng_cooked = $toNativeArray($kindInt64, [new $Int64(-973649357, 3952672746), new $Int64(-1065661887, 3130416987), new $Int64(324977939, 3414273807), new $Int64(1241840476, 2806224363), new $Int64(-1477934308, 1997590414), new $Int64(2103305448, 2402795971), new $Int64(1663160183, 1140819369), new $Int64(1120601685, 1788868961), new $Int64(1848035537, 1089001426), new $Int64(1235702047, 873593504), new $Int64(1911387977, 581324885), new $Int64(-1654874170, 1609182556), new $Int64(1069394745, 1241596776), new $Int64(1895445337, 1771189259), new $Int64(-1374618802, 3467012610), new $Int64(-140526423, 2344407434), new $Int64(-1745367887, 782467244), new $Int64(26335124, 3404933915), new $Int64(1063924276, 618867887), new $Int64(-968700782, 520164395), new $Int64(-1591572833, 1341358184), new $Int64(-1515085039, 665794848), new $Int64(1527227641, 3183648150), new $Int64(1781176124, 696329606), new $Int64(1789146075, 4151988961), new $Int64(-2087444114, 998951326), new $Int64(-612324923, 1364957564), new $Int64(63173359, 4090230633), new $Int64(-1498029007, 4009697548), new $Int64(248009524, 2569622517), new $Int64(778703922, 3742421481), new $Int64(-1109106023, 1506914633), new $Int64(1738099768, 1983412561), new $Int64(236311649, 1436266083), new $Int64(-1111517500, 3922894967), new $Int64(-1336974714, 1792680179), new $Int64(563141142, 1188796351), new $Int64(1349617468, 405968250), new $Int64(1044074554, 433754187), new $Int64(870549669, 4073162024), new $Int64(-1094251604, 433121399), new $Int64(2451824, 4162580594), new $Int64(-137262572, 4132415622), new $Int64(-1536231048, 3033822028), new $Int64(2016407895, 824682382), new $Int64(2366218, 3583765414), new $Int64(-624604839, 535386927), new $Int64(1637219058, 2286693689), new $Int64(1453075389, 2968466525), new $Int64(193683513, 1351410206), new $Int64(-283806096, 1412813499), new $Int64(492736522, 4126267639), new $Int64(512765208, 2105529399), new $Int64(2132966268, 2413882233), new $Int64(947457634, 32226200), new $Int64(1149341356, 2032329073), new $Int64(106485445, 1356518208), new $Int64(-2067810156, 3430061722), new $Int64(-1484435135, 3820169661), new $Int64(-1665985194, 2981816134), new $Int64(1017155588, 4184371017), new $Int64(206574701, 2119206761), new $Int64(-852109057, 2472200560), new $Int64(-560457548, 2853524696), new $Int64(1307803389, 1681119904), new $Int64(-174986835, 95608918), new $Int64(392686347, 3690479145), new $Int64(-1205570926, 1397922290), new $Int64(-1159314025, 1516129515), new $Int64(-320178155, 1547420459), new $Int64(1311333971, 1470949486), new $Int64(-1953469798, 1336785672), new $Int64(-45086614, 4131677129), new $Int64(-1392278100, 4246329084), new $Int64(-1142500187, 3788585631), new $Int64(-66478285, 3080389532), new $Int64(-646438364, 2215402037), new $Int64(391002300, 1171593935), new $Int64(1408774047, 1423855166), new $Int64(-519177718, 2276716302), new $Int64(-368453140, 2068027241), new $Int64(1369359303, 3427553297), new $Int64(189241615, 3289637845), new $Int64(1057480830, 3486407650), new $Int64(-1512910664, 3071877822), new $Int64(1159653919, 3363620705), new $Int64(-934256930, 4159821533), new $Int64(-76621938, 1894661), new $Int64(-674493898, 1156868282), new $Int64(348271067, 776219088), new $Int64(-501428838, 2425634259), new $Int64(1716021749, 680510161), new $Int64(-574263456, 1310101429), new $Int64(1095885995, 2964454134), new $Int64(-325695512, 3467098407), new $Int64(1990672920, 2109628894), new $Int64(-2139648704, 1232604732), new $Int64(-1838070714, 3261916179), new $Int64(1699175360, 434597899), new $Int64(235436061, 1624796439), new $Int64(-1626402839, 3589632480), new $Int64(1198416575, 864579159), new $Int64(-1938748161, 1380889830), new $Int64(619206309, 2654509477), new $Int64(1419738251, 1468209306), new $Int64(-1744284772, 100794388), new $Int64(-1191421458, 2991674471), new $Int64(-208666741, 2224662036), new $Int64(-173659161, 977097250), new $Int64(1351320195, 726419512), new $Int64(-183459897, 1747974366), new $Int64(-753095183, 1556430604), new $Int64(-1049492215, 1080776742), new $Int64(-385846958, 280794874), new $Int64(117767733, 919835643), new $Int64(-967009426, 3434019658), new $Int64(-1951414480, 2461941785), new $Int64(133215641, 3615001066), new $Int64(417204809, 3103414427), new $Int64(790056561, 3380809712), new $Int64(-1267681408, 2724693469), new $Int64(547796833, 598827710), new $Int64(-1846559452, 3452273442), new $Int64(-75778224, 649274915), new $Int64(-801301329, 2585724112), new $Int64(-1510934263, 3165579553), new $Int64(1185578221, 2635894283), new $Int64(-52910178, 2053289721), new $Int64(985976581, 3169337108), new $Int64(1170569632, 144717764), new $Int64(1079216270, 1383666384), new $Int64(-124804942, 681540375), new $Int64(1375448925, 537050586), new $Int64(-1964768344, 315246468), new $Int64(226402871, 849323088), new $Int64(-885062465, 45543944), new $Int64(-946445250, 2319052083), new $Int64(-40708194, 3613090841), new $Int64(560472520, 2992171180), new $Int64(-381863169, 2068244785), new $Int64(917538188, 4239862634), new $Int64(-1369555809, 3892253031), new $Int64(720683925, 958186149), new $Int64(-423297785, 1877702262), new $Int64(1357886971, 837674867), new $Int64(1837048883, 1507589294), new $Int64(1905518400, 873336795), new $Int64(-1879761037, 2764496274), new $Int64(-1806480530, 4196182374), new $Int64(-1066765755, 550964545), new $Int64(818747069, 420611474), new $Int64(-1924830376, 204265180), new $Int64(1549974541, 1787046383), new $Int64(1215581865, 3102292318), new $Int64(418321538, 1552199393), new $Int64(1243493047, 980542004), new $Int64(267284263, 3293718720), new $Int64(1179528763, 3771917473), new $Int64(599484404, 2195808264), new $Int64(252818753, 3894702887), new $Int64(-1367475956, 2099949527), new $Int64(1424094358, 338442522), new $Int64(490737398, 637158004), new $Int64(-1727621530, 281976339), new $Int64(574970164, 3619802330), new $Int64(-431930823, 3084554784), new $Int64(-1264611183, 4129772886), new $Int64(-2104399043, 1680378557), new $Int64(-1621962591, 3339087776), new $Int64(1680500332, 4220317857), new $Int64(-1935828963, 2959322499), new $Int64(1675600481, 1488354890), new $Int64(-834863562, 3958162143), new $Int64(-1226511573, 2773705983), new $Int64(1876039582, 225908689), new $Int64(-1183735113, 908216283), new $Int64(-605696219, 3574646075), new $Int64(-1827723091, 1936937569), new $Int64(1519770881, 75492235), new $Int64(816689472, 1935193178), new $Int64(2142521206, 2018250883), new $Int64(455141620, 3943126022), new $Int64(-601399488, 3066544345), new $Int64(1932392669, 2793082663), new $Int64(-1239009361, 3297036421), new $Int64(1640597065, 2206987825), new $Int64(-553246738, 807894872), new $Int64(-1781325307, 766252117), new $Int64(2060649606, 3833114345), new $Int64(845619743, 1255067973), new $Int64(1201145605, 741697208), new $Int64(-1476242608, 2810093753), new $Int64(1109032642, 4229340371), new $Int64(1462188720, 1361684224), new $Int64(-1159399429, 1906263026), new $Int64(475781207, 3904421704), new $Int64(-623537128, 1769075545), new $Int64(1062308525, 2621599764), new $Int64(1279509432, 3431891480), new $Int64(-1742751146, 1871896503), new $Int64(128756421, 1412808876), new $Int64(1605404688, 952876175), new $Int64(-230443691, 1824438899), new $Int64(1662295856, 1005035476), new $Int64(-156574141, 527508597), new $Int64(1288873303, 3066806859), new $Int64(565995893, 3244940914), new $Int64(-889746188, 209092916), new $Int64(-247669406, 1242699167), new $Int64(-713830396, 456723774), new $Int64(1776978905, 1001252870), new $Int64(1468772157, 2026725874), new $Int64(857254202, 2137562569), new $Int64(765939740, 3183366709), new $Int64(1533887628, 2612072960), new $Int64(56977098, 1727148468), new $Int64(-1197583895, 3803658212), new $Int64(1883670356, 479946959), new $Int64(685713571, 1562982345), new $Int64(-1946242443, 1766109365), new $Int64(700596547, 3257093788), new $Int64(-184714929, 2365720207), new $Int64(93384808, 3742754173), new $Int64(-458385235, 2878193673), new $Int64(1096135042, 2174002182), new $Int64(-834260953, 3573511231), new $Int64(-754572527, 1760299077), new $Int64(-1375627191, 2260779833), new $Int64(-866019274, 1452805722), new $Int64(-1229671918, 2940011802), new $Int64(1890251082, 1886183802), new $Int64(893897673, 2514369088), new $Int64(1644345561, 3924317791), new $Int64(-1974867432, 500935732), new $Int64(1403501753, 676580929), new $Int64(-1565912283, 1184984890), new $Int64(-691968413, 1271474274), new $Int64(-1828754738, 3163791473), new $Int64(2051027584, 2842487377), new $Int64(1511537551, 2170968612), new $Int64(573262976, 3535856740), new $Int64(-2053227187, 1488599718), new $Int64(-1180531831, 3408913763), new $Int64(-2086531912, 2501050084), new $Int64(-875130448, 1639124157), new $Int64(-2009482504, 4088176393), new $Int64(1574896563, 3989947576), new $Int64(-165243708, 3414355209), new $Int64(-792329287, 2275136352), new $Int64(-2057774345, 2151835223), new $Int64(-931144933, 1654534827), new $Int64(-679921451, 377892833), new $Int64(-482716010, 660204544), new $Int64(85706799, 390828249), new $Int64(-1422172693, 3402783878), new $Int64(-1468634160, 3717936603), new $Int64(1113532086, 2211058823), new $Int64(1564224320, 2692150867), new $Int64(1952770442, 1928910388), new $Int64(788716862, 3931011137), new $Int64(1083670504, 1112701047), new $Int64(-68150572, 2452299106), new $Int64(-896164822, 2337204777), new $Int64(1774877857, 273889282), new $Int64(1798719843, 1462008793), new $Int64(2138834788, 1554494002), new $Int64(-1194967131, 182675323), new $Int64(-1598554764, 1882802136), new $Int64(589279648, 3700220025), new $Int64(381039426, 3083431543), new $Int64(-851859191, 3622207527), new $Int64(338126939, 432729309), new $Int64(-1667470126, 2391914317), new $Int64(-1849558151, 235747924), new $Int64(2120733629, 3088823825), new $Int64(-745079795, 2314658321), new $Int64(1165929723, 2957634338), new $Int64(501323675, 4117056981), new $Int64(1564699815, 1482500298), new $Int64(-740826490, 840489337), new $Int64(799522364, 3483178565), new $Int64(532129761, 2074004656), new $Int64(724246478, 3643392642), new $Int64(-665153481, 1583624461), new $Int64(-885822954, 287473085), new $Int64(1667835381, 3136843981), new $Int64(1138806821, 1266970974), new $Int64(135185781, 1998688839), new $Int64(392094735, 1492900209), new $Int64(1031326774, 1538112737), new $Int64(-2070568842, 2207265429), new $Int64(-1886797613, 963263315), new $Int64(1671145500, 2295892134), new $Int64(1068469660, 2002560897), new $Int64(-356250305, 1369254035), new $Int64(33436120, 3353312708), new $Int64(57507843, 947771099), new $Int64(-1945755145, 1747061399), new $Int64(1507240140, 2047354631), new $Int64(720000810, 4165367136), new $Int64(479265078, 3388864963), new $Int64(-952181250, 286492130), new $Int64(2045622690, 2795735007), new $Int64(-715730566, 3703961339), new $Int64(-148436487, 1797825479), new $Int64(1429039600, 1116589674), new $Int64(-1665420098, 2593309206), new $Int64(1329049334, 3404995677), new $Int64(-750579440, 3453462936), new $Int64(1014767077, 3016498634), new $Int64(75698599, 1650371545), new $Int64(1592007860, 212344364), new $Int64(1127766888, 3843932156), new $Int64(-748019856, 3573129983), new $Int64(-890581831, 665897820), new $Int64(1071492673, 1675628772), new $Int64(243225682, 2831752928), new $Int64(2120298836, 1486294219), new $Int64(-1954407413, 268782709), new $Int64(-1002123503, 4186179080), new $Int64(624342951, 1613720397), new $Int64(857179861, 2703686015), new $Int64(-911618704, 2205342611), new $Int64(-672703993, 1411666394), new $Int64(-1528454899, 677744900), new $Int64(-1876628533, 4172867247), new $Int64(135494707, 2163418403), new $Int64(849547544, 2841526879), new $Int64(-1117516959, 1082141470), new $Int64(-1770111792, 4046134367), new $Int64(51415528, 2142943655), new $Int64(-249824333, 3124627521), new $Int64(998228909, 219992939), new $Int64(-1078790951, 1756846531), new $Int64(1283749206, 1225118210), new $Int64(-525858006, 1647770243), new $Int64(-2035959705, 444807907), new $Int64(2036369448, 3952076173), new $Int64(53201823, 1461839639), new $Int64(315761893, 3699250910), new $Int64(702974850, 1373688981), new $Int64(734022261, 147523747), new $Int64(-2047330906, 1211276581), new $Int64(1294440951, 2548832680), new $Int64(1144696256, 1995631888), new $Int64(-1992983070, 2011457303), new $Int64(-1351022674, 3057425772), new $Int64(667839456, 81484597), new $Int64(-1681980888, 3646681560), new $Int64(-1372462725, 635548515), new $Int64(602489502, 2508044581), new $Int64(-1794220117, 1014917157), new $Int64(719992433, 3214891315), new $Int64(-1294799037, 959582252), new $Int64(226415134, 3347040449), new $Int64(-362868096, 4102971975), new $Int64(397887437, 4078022210), new $Int64(-536803826, 2851767182), new $Int64(-1398321012, 1540160644), new $Int64(-1549098876, 1057290595), new $Int64(-112592988, 3907769253), new $Int64(579300318, 4248952684), new $Int64(-1054576049, 132554364), new $Int64(-1085862414, 1029351092), new $Int64(697840928, 2583007416), new $Int64(298619124, 1486185789), new $Int64(55905697, 2871589073), new $Int64(2017643612, 723203291), new $Int64(146250550, 2494333952), new $Int64(-1082993397, 2230939180), new $Int64(-1804568072, 3943232912), new $Int64(1768732449, 2181367922), new $Int64(-729261111, 2889274791), new $Int64(1824032949, 2046728161), new $Int64(1653899792, 1376052477), new $Int64(1022327048, 381236993), new $Int64(-1113097690, 3188942166), new $Int64(-74480109, 350070824), new $Int64(144881592, 61758415), new $Int64(-741824226, 3492950336), new $Int64(-2030042720, 3093818430), new $Int64(-453590535, 2962480613), new $Int64(-1912050708, 3154871160), new $Int64(-1636478569, 3228564679), new $Int64(610731502, 888276216), new $Int64(-946702974, 3574998604), new $Int64(-1277068380, 1967526716), new $Int64(-1556147941, 1554691298), new $Int64(-1573024234, 339944798), new $Int64(1223764147, 1154515356), new $Int64(1825645307, 967516237), new $Int64(1546195135, 596588202), new $Int64(-1867600880, 3764362170), new $Int64(-1655392592, 266611402), new $Int64(-393255880, 2047856075), new $Int64(-1000726433, 21444105), new $Int64(-949424754, 3065563181), new $Int64(-232418803, 1140663212), new $Int64(633187674, 2323741028), new $Int64(2126290159, 3103873707), new $Int64(1008658319, 2766828349), new $Int64(-485587503, 1970872996), new $Int64(1628585413, 3766615585), new $Int64(-595148528, 2036813414), new $Int64(-1994877121, 3105536507), new $Int64(13954645, 3396176938), new $Int64(-721402003, 1377154485), new $Int64(-61839181, 3807014186), new $Int64(543009040, 3710110597), new $Int64(-1751425519, 916420443), new $Int64(734556788, 2103831255), new $Int64(-1766161494, 717331943), new $Int64(-1574598896, 3550505941), new $Int64(45939673, 378749927), new $Int64(-1997615719, 611017331), new $Int64(592130075, 758907650), new $Int64(1012992349, 154266815), new $Int64(-1040454942, 1407468696), new $Int64(-1678191250, 970098704), new $Int64(-285057486, 1971660656), new $Int64(998365243, 3332747885), new $Int64(1947089649, 1935189867), new $Int64(1510248801, 203520055), new $Int64(-1305165746, 3916463034), new $Int64(-388598655, 3474113316), new $Int64(1036101639, 316544223), new $Int64(-1773744891, 1650844677), new $Int64(-907191419, 4267565603), new $Int64(-1070275024, 2501167616), new $Int64(-1520651863, 3929401789), new $Int64(-2091360852, 337170252), new $Int64(-960502090, 2061966842), new $Int64(-304190848, 2508461464), new $Int64(-1941471116, 2791377107), new $Int64(1240791848, 1227227588), new $Int64(1813978778, 1709681848), new $Int64(1153692192, 3768820575), new $Int64(-1002297449, 2887126398), new $Int64(-1447111334, 296561685), new $Int64(700300844, 3729960077), new $Int64(-1572311344, 372833036), new $Int64(2078875613, 2409779288), new $Int64(1829161290, 555274064), new $Int64(-1105595719, 4239804901), new $Int64(1839403216, 3723486978), new $Int64(-1649093095, 2145871984), new $Int64(-1582765715, 3565480803), new $Int64(-1568653827, 2197313814), new $Int64(974785092, 3613674566), new $Int64(438638731, 3042093666), new $Int64(-96556264, 3324034321), new $Int64(869420878, 3708873369), new $Int64(946682149, 1698090092), new $Int64(1618900382, 4213940712), new $Int64(-1843479747, 2087477361), new $Int64(-1766167800, 2407950639), new $Int64(-1296225558, 3942568569), new $Int64(-1223900450, 4088074412), new $Int64(723260036, 2964773675), new $Int64(-673921829, 1539178386), new $Int64(1062961552, 2694849566), new $Int64(460977733, 2120273838), new $Int64(-1604570740, 2484608657), new $Int64(880846449, 2956190677), new $Int64(1970902366, 4223313749), new $Int64(662161910, 3502682327), new $Int64(705634754, 4133891139), new $Int64(-1031359300, 1166449596), new $Int64(1038247601, 3362705993), new $Int64(93734798, 3892921029), new $Int64(1876124043, 786869787), new $Int64(1057490746, 1046342263), new $Int64(242763728, 493777327), new $Int64(-853573201, 3304827646), new $Int64(616460742, 125356352), new $Int64(499300063, 74094113), new $Int64(-795586925, 2500816079), new $Int64(-490248444, 514015239), new $Int64(1377565129, 543520454), new $Int64(-2039776725, 3614531153), new $Int64(2056746300, 2356753985), new $Int64(1390062617, 2018141668), new $Int64(131272971, 2087974891), new $Int64(-1502927041, 3166972343), new $Int64(372256200, 1517638666), new $Int64(-935275664, 173466846), new $Int64(-695774461, 4241513471), new $Int64(-1413550842, 2783126920), new $Int64(1972004134, 4167264826), new $Int64(29260506, 3907395640), new $Int64(-910901561, 1539634186), new $Int64(-595957298, 178241987), new $Int64(-113277636, 182168164), new $Int64(-1102530459, 2386154934), new $Int64(1379126408, 4077374341), new $Int64(-2114679722, 1732699140), new $Int64(-421057745, 1041306002), new $Int64(1860414813, 2068001749), new $Int64(1005320202, 3208962910), new $Int64(844054010, 697710380), new $Int64(-1509359403, 2228431183), new $Int64(-810313977, 3554678728), new $Int64(-750989047, 173470263), new $Int64(-85886265, 3848297795), new $Int64(-926936977, 246236185), new $Int64(-1984190461, 2066374846), new $Int64(1771673660, 312890749), new $Int64(703378057, 3573310289), new $Int64(-598851901, 143166754), new $Int64(613554316, 2081511079), new $Int64(1197802104, 486038032), new $Int64(-1906483789, 2982218564), new $Int64(364901986, 1000939191), new $Int64(1902782651, 2750454885), new $Int64(-671844857, 3375313137), new $Int64(-1643868040, 881302957), new $Int64(-1508784745, 2514186393), new $Int64(-1703622845, 360024739), new $Int64(1399671872, 292500025), new $Int64(1381210821, 2276300752), new $Int64(521803381, 4069087683), new $Int64(-1938982667, 1637778212), new $Int64(720490469, 1676670893), new $Int64(1067262482, 3855174429), new $Int64(2114075974, 2067248671), new $Int64(-89426259, 2884561259), new $Int64(-805741095, 2456511185), new $Int64(983726246, 561175414), new $Int64(-1719489563, 432588903), new $Int64(885133709, 4059399550), new $Int64(-93096266, 1075014784), new $Int64(-1733832628, 2728058415), new $Int64(1839142064, 1299703678), new $Int64(1262333188, 2347583393), new $Int64(1285481956, 2468164145), new $Int64(-1158354011, 1140014346), new $Int64(2033889184, 1936972070), new $Int64(-1737578993, 3870530098), new $Int64(-484494257, 1717789158), new $Int64(-232997156, 1153452491), new $Int64(-990424416, 3948827651), new $Int64(-1357145630, 2101413152), new $Int64(1495744672, 3854091229), new $Int64(83644069, 4215565463), new $Int64(-1385277313, 1202710438), new $Int64(-564909037, 2072216740), new $Int64(705690639, 2066751068), new $Int64(-2113583312, 173902580), new $Int64(-741983806, 142459001), new $Int64(172391592, 1889151926), new $Int64(-498943125, 3034199774), new $Int64(1618587731, 516490102), new $Int64(93114264, 3692577783), new $Int64(-2078821353, 2953948865), new $Int64(-320938673, 4041040923), new $Int64(-1942517976, 592046130), new $Int64(-705643640, 384297211), new $Int64(-2051649464, 265863924), new $Int64(2101717619, 1333136237), new $Int64(1499611781, 1406273556), new $Int64(1074670496, 426305476), new $Int64(125704633, 2750898176), new $Int64(488068495, 1633944332), new $Int64(2037723464, 3236349343), new $Int64(-1703423246, 4013676611), new $Int64(1718532237, 2265047407), new $Int64(1433593806, 875071080), new $Int64(-343047503, 1418843655), new $Int64(2009228711, 451657300), new $Int64(1229446621, 1866374663), new $Int64(1653472867, 1551455622), new $Int64(577191481, 3560962459), new $Int64(1669204077, 3347903778), new $Int64(-298327194, 2675874918), new $Int64(-1831355577, 2762991672), new $Int64(530492383, 3689068477), new $Int64(844089962, 4071997905), new $Int64(1508155730, 1381702441), new $Int64(2089931018, 2373284878), new $Int64(-864267462, 2143983064), new $Int64(308739063, 1938207195), new $Int64(1754949306, 1188152253), new $Int64(1272345009, 615870490), new $Int64(742653194, 2662252621), new $Int64(1477718295, 3839976789), new $Int64(-2091334213, 306752547), new $Int64(-1426688067, 2162363077), new $Int64(-57052633, 2767224719), new $Int64(-1471624099, 2628837712), new $Int64(1678405918, 2967771969), new $Int64(1694285728, 499792248), new $Int64(-1744131281, 4285253508), new $Int64(962357072, 2856511070), new $Int64(679471692, 2526409716), new $Int64(-1793706473, 1240875658), new $Int64(-914893422, 2577342868), new $Int64(-1001298215, 4136853496), new $Int64(-1477114974, 2403540137), new $Int64(1372824515, 1371410668), new $Int64(-176562048, 371758825), new $Int64(-441063112, 1528834084), new $Int64(-71688630, 1504757260), new $Int64(-1461820072, 699052551), new $Int64(-505543539, 3347789870), new $Int64(1951619734, 3430604759), new $Int64(2119672219, 1935601723), new $Int64(966789690, 834676166)]);
		globalRand = New(new lockedSource.ptr(new nosync.Mutex.ptr(false), $assertType(NewSource(new $Int64(0, 1)), Source64)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math/big"] = (function() {
	var $pkg = {}, $init, bytes, binary, errors, fmt, nosync, io, math, bits, rand, strconv, strings, Word, decimal, Float, ErrNaN, form, RoundingMode, Accuracy, Int, byteReader, nat, divisor, Rat, sliceType, arrayType, structType, sliceType$1, ptrType, sliceType$2, ptrType$1, ptrType$2, ptrType$3, ptrType$4, arrayType$1, sliceType$3, ptrType$5, ptrType$6, _Accuracy_index, pow5tab, intOne, natOne, natTwo, natTen, karatsubaThreshold, basicSqrThreshold, karatsubaSqrThreshold, natPool, leafSize, cacheBase10, _RoundingMode_index, half, two, three, _r, _r$1, _r$2, addWW_g, subWW_g, mulWW_g, mulAddWWW_g, nlz, divWW_g, addVV_g, subVV_g, addVW_g, subVW_g, shlVU_g, shrVU_g, mulAddVWW_g, addMulVVW_g, divWVW_g, mulWW, divWW, addVV, subVV, addVW, subVW, shlVU, shrVU, mulAddVWW, addMulVVW, divWVW, shr, appendZeros, shouldRoundUp, trim, NewFloat, makeAcc, fnorm, msb32, msb64, validateBinaryOperands, umax32, roundShortest, fmtE, fmtF, min, NewInt, low32, low64, Jacobi, writeMultiple, scanSign, basicMul, karatsubaAdd, karatsubaSub, karatsuba, alias, addAt, max, karatsubaLen, basicSqr, getNat, putNat, greaterThan, maxPow, pow, divisors, NewRat, quotToFloat32, quotToFloat64, mulDenom, scaleDenom, ratTok, scanExponent;
	bytes = $packages["bytes"];
	binary = $packages["encoding/binary"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	math = $packages["math"];
	bits = $packages["math/bits"];
	rand = $packages["math/rand"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	Word = $pkg.Word = $newType(4, $kindUintptr, "big.Word", true, "math/big", true, null);
	decimal = $pkg.decimal = $newType(0, $kindStruct, "big.decimal", true, "math/big", false, function(mant_, exp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mant = sliceType$1.nil;
			this.exp = 0;
			return;
		}
		this.mant = mant_;
		this.exp = exp_;
	});
	Float = $pkg.Float = $newType(0, $kindStruct, "big.Float", true, "math/big", true, function(prec_, mode_, acc_, form_, neg_, mant_, exp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.prec = 0;
			this.mode = 0;
			this.acc = 0;
			this.form = 0;
			this.neg = false;
			this.mant = nat.nil;
			this.exp = 0;
			return;
		}
		this.prec = prec_;
		this.mode = mode_;
		this.acc = acc_;
		this.form = form_;
		this.neg = neg_;
		this.mant = mant_;
		this.exp = exp_;
	});
	ErrNaN = $pkg.ErrNaN = $newType(0, $kindStruct, "big.ErrNaN", true, "math/big", true, function(msg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.msg = "";
			return;
		}
		this.msg = msg_;
	});
	form = $pkg.form = $newType(1, $kindUint8, "big.form", true, "math/big", false, null);
	RoundingMode = $pkg.RoundingMode = $newType(1, $kindUint8, "big.RoundingMode", true, "math/big", true, null);
	Accuracy = $pkg.Accuracy = $newType(1, $kindInt8, "big.Accuracy", true, "math/big", true, null);
	Int = $pkg.Int = $newType(0, $kindStruct, "big.Int", true, "math/big", true, function(neg_, abs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.neg = false;
			this.abs = nat.nil;
			return;
		}
		this.neg = neg_;
		this.abs = abs_;
	});
	byteReader = $pkg.byteReader = $newType(0, $kindStruct, "big.byteReader", true, "math/big", false, function(ScanState_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ScanState = $ifaceNil;
			return;
		}
		this.ScanState = ScanState_;
	});
	nat = $pkg.nat = $newType(12, $kindSlice, "big.nat", true, "math/big", false, null);
	divisor = $pkg.divisor = $newType(0, $kindStruct, "big.divisor", true, "math/big", false, function(bbb_, nbits_, ndigits_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bbb = nat.nil;
			this.nbits = 0;
			this.ndigits = 0;
			return;
		}
		this.bbb = bbb_;
		this.nbits = nbits_;
		this.ndigits = ndigits_;
	});
	Rat = $pkg.Rat = $newType(0, $kindStruct, "big.Rat", true, "math/big", true, function(a_, b_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.a = new Int.ptr(false, nat.nil);
			this.b = new Int.ptr(false, nat.nil);
			return;
		}
		this.a = a_;
		this.b = b_;
	});
	sliceType = $sliceType($emptyInterface);
	arrayType = $arrayType(divisor, 64);
	structType = $structType("math/big", [{prop: "Mutex", name: "Mutex", anonymous: true, exported: true, typ: nosync.Mutex, tag: ""}, {prop: "table", name: "table", anonymous: false, exported: false, typ: arrayType, tag: ""}]);
	sliceType$1 = $sliceType($Uint8);
	ptrType = $ptrType(Float);
	sliceType$2 = $sliceType(Word);
	ptrType$1 = $ptrType(Int);
	ptrType$2 = $ptrType(Rat);
	ptrType$3 = $ptrType(Word);
	ptrType$4 = $ptrType(nat);
	arrayType$1 = $arrayType(nat, 16);
	sliceType$3 = $sliceType(divisor);
	ptrType$5 = $ptrType(decimal);
	ptrType$6 = $ptrType(rand.Rand);
	Accuracy.prototype.String = function() {
		var _r$3, i, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; i = $f.i; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this.$val;
		i = i - (-1) << 24 >> 24;
		/* */ if (i < 0 || (i + 1 << 24 >> 24) >= 4) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (i < 0 || (i + 1 << 24 >> 24) >= 4) { */ case 1:
			_r$3 = fmt.Sprintf("Accuracy(%d)", new sliceType([new Accuracy((i + -1 << 24 >> 24))])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		$s = -1; return $substring("BelowExactAbove", ((i < 0 || i >= _Accuracy_index.length) ? ($throwRuntimeError("index out of range"), undefined) : _Accuracy_index[i]), (x = i + 1 << 24 >> 24, ((x < 0 || x >= _Accuracy_index.length) ? ($throwRuntimeError("index out of range"), undefined) : _Accuracy_index[x])));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Accuracy.prototype.String }; } $f._r$3 = _r$3; $f.i = i; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Accuracy).prototype.String = function() { return new Accuracy(this.$get()).String(); };
	addWW_g = function(x, y, c) {
		var c, x, y, yc, z0, z1;
		z1 = 0;
		z0 = 0;
		yc = y + c >>> 0;
		z0 = x + yc >>> 0;
		if (z0 < x || yc < y) {
			z1 = 1;
		}
		return [z1, z0];
	};
	subWW_g = function(x, y, c) {
		var c, x, y, yc, z0, z1;
		z1 = 0;
		z0 = 0;
		yc = y + c >>> 0;
		z0 = x - yc >>> 0;
		if (z0 > x || yc < y) {
			z1 = 1;
		}
		return [z1, z0];
	};
	mulWW_g = function(x, y) {
		var t, w0, w1, w2, x, x0, x1, y, y0, y1, z0, z1;
		z1 = 0;
		z0 = 0;
		x0 = (x & 65535) >>> 0;
		x1 = x >>> 16 >>> 0;
		y0 = (y & 65535) >>> 0;
		y1 = y >>> 16 >>> 0;
		w0 = $imul(x0, y0) >>> 0;
		t = ($imul(x1, y0) >>> 0) + (w0 >>> 16 >>> 0) >>> 0;
		w1 = (t & 65535) >>> 0;
		w2 = t >>> 16 >>> 0;
		w1 = w1 + (($imul(x0, y1) >>> 0)) >>> 0;
		z1 = (($imul(x1, y1) >>> 0) + w2 >>> 0) + (w1 >>> 16 >>> 0) >>> 0;
		z0 = $imul(x, y) >>> 0;
		return [z1, z0];
	};
	mulAddWWW_g = function(x, y, c) {
		var _tuple, c, x, y, z0, z1, zz0;
		z1 = 0;
		z0 = 0;
		_tuple = mulWW_g(x, y);
		z1 = _tuple[0];
		zz0 = _tuple[1];
		z0 = zz0 + c >>> 0;
		if (z0 < zz0) {
			z1 = z1 + (1) >>> 0;
		}
		return [z1, z0];
	};
	nlz = function(x) {
		var x;
		return ((bits.LeadingZeros(((x >>> 0))) >>> 0));
	};
	divWW_g = function(u1, u0, v) {
		var _q, _q$1, _tmp, _tmp$1, _tmp$2, _tmp$3, q, q0, q1, r, rhat, s, u0, u1, un0, un1, un10, un21, un32, v, vn0, vn1, y, y$1, y$2, y$3, y$4;
		q = 0;
		r = 0;
		if (u1 >= v) {
			_tmp = 4294967295;
			_tmp$1 = 4294967295;
			q = _tmp;
			r = _tmp$1;
			return [q, r];
		}
		s = nlz(v);
		v = (y = (s), y < 32 ? (v << y) : 0) >>> 0;
		vn1 = v >>> 16 >>> 0;
		vn0 = (v & 65535) >>> 0;
		un32 = (((y$1 = s, y$1 < 32 ? (u1 << y$1) : 0) >>> 0) | ((y$2 = ((32 - s >>> 0)), y$2 < 32 ? (u0 >>> y$2) : 0) >>> 0)) >>> 0;
		un10 = (y$3 = s, y$3 < 32 ? (u0 << y$3) : 0) >>> 0;
		un1 = un10 >>> 16 >>> 0;
		un0 = (un10 & 65535) >>> 0;
		q1 = (_q = un32 / vn1, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		rhat = un32 - ($imul(q1, vn1) >>> 0) >>> 0;
		while (true) {
			if (!(q1 >= 65536 || ($imul(q1, vn0) >>> 0) > (($imul(65536, rhat) >>> 0) + un1 >>> 0))) { break; }
			q1 = q1 - (1) >>> 0;
			rhat = rhat + (vn1) >>> 0;
			if (rhat >= 65536) {
				break;
			}
		}
		un21 = (($imul(un32, 65536) >>> 0) + un1 >>> 0) - ($imul(q1, v) >>> 0) >>> 0;
		q0 = (_q$1 = un21 / vn1, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		rhat = un21 - ($imul(q0, vn1) >>> 0) >>> 0;
		while (true) {
			if (!(q0 >= 65536 || ($imul(q0, vn0) >>> 0) > (($imul(65536, rhat) >>> 0) + un0 >>> 0))) { break; }
			q0 = q0 - (1) >>> 0;
			rhat = rhat + (vn1) >>> 0;
			if (rhat >= 65536) {
				break;
			}
		}
		_tmp$2 = ($imul(q1, 65536) >>> 0) + q0 >>> 0;
		_tmp$3 = (y$4 = s, y$4 < 32 ? ((((($imul(un21, 65536) >>> 0) + un0 >>> 0) - ($imul(q0, v) >>> 0) >>> 0)) >>> y$4) : 0) >>> 0;
		q = _tmp$2;
		r = _tmp$3;
		return [q, r];
	};
	addVV_g = function(z, x, y) {
		var _i, _i$1, _ref, _ref$1, _tuple, c, i, i$1, x, xi, y, yi, z, zi;
		c = 0;
		if (false) {
			_ref = z;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				_tuple = addWW_g(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i]), c);
				c = _tuple[0];
				((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = _tuple[1]);
				_i++;
			}
			return c;
		}
		_ref$1 = $subslice(x, 0, z.$length);
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			xi = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			yi = ((i$1 < 0 || i$1 >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i$1]);
			zi = (xi + yi >>> 0) + c >>> 0;
			((i$1 < 0 || i$1 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i$1] = zi);
			c = (((((xi & yi) >>> 0) | (((((xi | yi) >>> 0)) & ~zi) >>> 0)) >>> 0)) >>> 31 >>> 0;
			_i$1++;
		}
		return c;
	};
	subVV_g = function(z, x, y) {
		var _i, _i$1, _ref, _ref$1, _tuple, c, i, i$1, x, xi, y, yi, z, zi;
		c = 0;
		if (false) {
			_ref = z;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				_tuple = subWW_g(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i]), c);
				c = _tuple[0];
				((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = _tuple[1]);
				_i++;
			}
			return c;
		}
		_ref$1 = $subslice(x, 0, z.$length);
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			xi = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			yi = ((i$1 < 0 || i$1 >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i$1]);
			zi = (xi - yi >>> 0) - c >>> 0;
			((i$1 < 0 || i$1 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i$1] = zi);
			c = (((((yi & ~xi) >>> 0) | (((((yi | (~xi >>> 0)) >>> 0)) & zi) >>> 0)) >>> 0)) >>> 31 >>> 0;
			_i$1++;
		}
		return c;
	};
	addVW_g = function(z, x, y) {
		var _i, _i$1, _ref, _ref$1, _tuple, c, i, i$1, x, xi, y, z, zi;
		c = 0;
		if (false) {
			c = y;
			_ref = z;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				_tuple = addWW_g(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), c, 0);
				c = _tuple[0];
				((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = _tuple[1]);
				_i++;
			}
			return c;
		}
		c = y;
		_ref$1 = $subslice(x, 0, z.$length);
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			xi = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			zi = xi + c >>> 0;
			((i$1 < 0 || i$1 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i$1] = zi);
			c = ((xi & ~zi) >>> 0) >>> 31 >>> 0;
			_i$1++;
		}
		return c;
	};
	subVW_g = function(z, x, y) {
		var _i, _i$1, _ref, _ref$1, _tuple, c, i, i$1, x, xi, y, z, zi;
		c = 0;
		if (false) {
			c = y;
			_ref = z;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				_tuple = subWW_g(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), c, 0);
				c = _tuple[0];
				((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = _tuple[1]);
				_i++;
			}
			return c;
		}
		c = y;
		_ref$1 = $subslice(x, 0, z.$length);
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			xi = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			zi = xi - c >>> 0;
			((i$1 < 0 || i$1 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i$1] = zi);
			c = (((zi & ~xi) >>> 0)) >>> 31 >>> 0;
			_i$1++;
		}
		return c;
	};
	shlVU_g = function(z, x, s) {
		var $C5$9D, c, i, n, s, w, w1, x, x$1, x$2, y, y$1, y$2, y$3, z;
		c = 0;
		n = z.$length;
		if (n > 0) {
			$C5$9D = 32 - s >>> 0;
			w1 = (x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
			c = (y = $C5$9D, y < 32 ? (w1 >>> y) : 0) >>> 0;
			i = n - 1 >> 0;
			while (true) {
				if (!(i > 0)) { break; }
				w = w1;
				w1 = (x$2 = i - 1 >> 0, ((x$2 < 0 || x$2 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$2]));
				((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((((y$1 = s, y$1 < 32 ? (w << y$1) : 0) >>> 0) | ((y$2 = $C5$9D, y$2 < 32 ? (w1 >>> y$2) : 0) >>> 0)) >>> 0));
				i = i - (1) >> 0;
			}
			(0 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 0] = ((y$3 = s, y$3 < 32 ? (w1 << y$3) : 0) >>> 0));
		}
		return c;
	};
	shrVU_g = function(z, x, s) {
		var $C5$9D, c, i, n, s, w, w1, x, x$1, x$2, y, y$1, y$2, y$3, z;
		c = 0;
		n = z.$length;
		if (n > 0) {
			$C5$9D = 32 - s >>> 0;
			w1 = (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]);
			c = (y = $C5$9D, y < 32 ? (w1 << y) : 0) >>> 0;
			i = 0;
			while (true) {
				if (!(i < (n - 1 >> 0))) { break; }
				w = w1;
				w1 = (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
				((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((((y$1 = s, y$1 < 32 ? (w >>> y$1) : 0) >>> 0) | ((y$2 = $C5$9D, y$2 < 32 ? (w1 << y$2) : 0) >>> 0)) >>> 0));
				i = i + (1) >> 0;
			}
			(x$2 = n - 1 >> 0, ((x$2 < 0 || x$2 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x$2] = ((y$3 = s, y$3 < 32 ? (w1 >>> y$3) : 0) >>> 0)));
		}
		return c;
	};
	mulAddVWW_g = function(z, x, y, r) {
		var _i, _ref, _tuple, c, i, r, x, y, z;
		c = 0;
		c = r;
		_ref = z;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			_tuple = mulAddWWW_g(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), y, c);
			c = _tuple[0];
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = _tuple[1]);
			_i++;
		}
		return c;
	};
	addMulVVW_g = function(z, x, y) {
		var _i, _ref, _tuple, _tuple$1, c, i, x, y, z, z0, z1;
		c = 0;
		_ref = z;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			_tuple = mulAddWWW_g(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), y, ((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i]));
			z1 = _tuple[0];
			z0 = _tuple[1];
			_tuple$1 = addWW_g(z0, c, 0);
			c = _tuple$1[0];
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = _tuple$1[1]);
			c = c + (z1) >>> 0;
			_i++;
		}
		return c;
	};
	divWVW_g = function(z, xn, x, y) {
		var _tuple, i, r, x, xn, y, z;
		r = 0;
		r = xn;
		i = z.$length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			_tuple = divWW_g(r, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), y);
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = _tuple[0]);
			r = _tuple[1];
			i = i - (1) >> 0;
		}
		return r;
	};
	mulWW = function(x, y) {
		var _tuple, x, y, z0, z1;
		z1 = 0;
		z0 = 0;
		_tuple = mulWW_g(x, y);
		z1 = _tuple[0];
		z0 = _tuple[1];
		return [z1, z0];
	};
	divWW = function(x1, x0, y) {
		var _tuple, q, r, x0, x1, y;
		q = 0;
		r = 0;
		_tuple = divWW_g(x1, x0, y);
		q = _tuple[0];
		r = _tuple[1];
		return [q, r];
	};
	addVV = function(z, x, y) {
		var c, x, y, z;
		c = 0;
		c = addVV_g(z, x, y);
		return c;
	};
	subVV = function(z, x, y) {
		var c, x, y, z;
		c = 0;
		c = subVV_g(z, x, y);
		return c;
	};
	addVW = function(z, x, y) {
		var c, x, y, z;
		c = 0;
		c = addVW_g(z, x, y);
		return c;
	};
	subVW = function(z, x, y) {
		var c, x, y, z;
		c = 0;
		c = subVW_g(z, x, y);
		return c;
	};
	shlVU = function(z, x, s) {
		var c, s, x, z;
		c = 0;
		c = shlVU_g(z, x, s);
		return c;
	};
	shrVU = function(z, x, s) {
		var c, s, x, z;
		c = 0;
		c = shrVU_g(z, x, s);
		return c;
	};
	mulAddVWW = function(z, x, y, r) {
		var c, r, x, y, z;
		c = 0;
		c = mulAddVWW_g(z, x, y, r);
		return c;
	};
	addMulVVW = function(z, x, y) {
		var c, x, y, z;
		c = 0;
		c = addMulVVW_g(z, x, y);
		return c;
	};
	divWVW = function(z, xn, x, y) {
		var r, x, xn, y, z;
		r = 0;
		r = divWVW_g(z, xn, x, y);
		return r;
	};
	decimal.ptr.prototype.at = function(i) {
		var d, i, x;
		d = this;
		if (0 <= i && i < d.mant.$length) {
			return (x = d.mant, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		}
		return 48;
	};
	decimal.prototype.at = function(i) { return this.$val.at(i); };
	decimal.ptr.prototype.init = function(m, shift) {
		var _r$3, m, n, ntz, s, s$1, shift, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; m = $f.m; n = $f.n; ntz = $f.ntz; s = $f.s; s$1 = $f.s$1; shift = $f.shift; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if (m.$length === 0) {
			x.mant = $subslice(x.mant, 0, 0);
			x.exp = 0;
			$s = -1; return;
		}
		if (shift < 0) {
			ntz = m.trailingZeroBits();
			s = ((-shift >>> 0));
			if (s >= ntz) {
				s = ntz;
			}
			m = (nat.nil).shr(m, s);
			shift = shift + (((s >> 0))) >> 0;
		}
		if (shift > 0) {
			m = (nat.nil).shl(m, ((shift >>> 0)));
			shift = 0;
		}
		_r$3 = m.utoa(10); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		s$1 = _r$3;
		n = s$1.$length;
		x.exp = n;
		while (true) {
			if (!(n > 0 && ((x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= s$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : s$1.$array[s$1.$offset + x$1])) === 48))) { break; }
			n = n - (1) >> 0;
		}
		x.mant = $appendSlice($subslice(x.mant, 0, 0), $subslice(s$1, 0, n));
		if (shift < 0) {
			while (true) {
				if (!(shift < -28)) { break; }
				shr(x, 28);
				shift = shift + (28) >> 0;
			}
			shr(x, ((-shift >>> 0)));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decimal.ptr.prototype.init }; } $f._r$3 = _r$3; $f.m = m; $f.n = n; $f.ntz = ntz; $f.s = s; $f.s$1 = s$1; $f.shift = shift; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decimal.prototype.init = function(m, shift) { return this.$val.init(m, shift); };
	shr = function(x, s) {
		var ch, ch$1, d, d$1, d$2, mask, n, r, s, w, x, x$1, x$2, x$3, x$4, y, y$1, y$2, y$3, y$4, y$5;
		r = 0;
		n = 0;
		while (true) {
			if (!((((y = s, y < 32 ? (n >>> y) : 0) >>> 0) === 0) && r < x.mant.$length)) { break; }
			ch = (((x$1 = x.mant, ((r < 0 || r >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + r])) >>> 0));
			r = r + (1) >> 0;
			n = (($imul(n, 10) >>> 0) + ch >>> 0) - 48 >>> 0;
		}
		if (n === 0) {
			x.mant = $subslice(x.mant, 0, 0);
			return;
		}
		while (true) {
			if (!(((y$1 = s, y$1 < 32 ? (n >>> y$1) : 0) >>> 0) === 0)) { break; }
			r = r + (1) >> 0;
			n = $imul(n, (10)) >>> 0;
		}
		x.exp = x.exp + ((1 - r >> 0)) >> 0;
		w = 0;
		mask = ((y$2 = s, y$2 < 32 ? (1 << y$2) : 0) >>> 0) - 1 >>> 0;
		while (true) {
			if (!(r < x.mant.$length)) { break; }
			ch$1 = (((x$2 = x.mant, ((r < 0 || r >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + r])) >>> 0));
			r = r + (1) >> 0;
			d = (y$3 = s, y$3 < 32 ? (n >>> y$3) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			(x$3 = x.mant, ((w < 0 || w >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + w] = (((d + 48 >>> 0) << 24 >>> 24))));
			w = w + (1) >> 0;
			n = (($imul(n, 10) >>> 0) + ch$1 >>> 0) - 48 >>> 0;
		}
		while (true) {
			if (!(n > 0 && w < x.mant.$length)) { break; }
			d$1 = (y$4 = s, y$4 < 32 ? (n >>> y$4) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			(x$4 = x.mant, ((w < 0 || w >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + w] = (((d$1 + 48 >>> 0) << 24 >>> 24))));
			w = w + (1) >> 0;
			n = $imul(n, 10) >>> 0;
		}
		x.mant = $subslice(x.mant, 0, w);
		while (true) {
			if (!(n > 0)) { break; }
			d$2 = (y$5 = s, y$5 < 32 ? (n >>> y$5) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			x.mant = $append(x.mant, (((d$2 + 48 >>> 0) << 24 >>> 24)));
			n = $imul(n, 10) >>> 0;
		}
		trim(x);
	};
	decimal.ptr.prototype.String = function() {
		var buf, x;
		x = this;
		if (x.mant.$length === 0) {
			return "0";
		}
		buf = sliceType$1.nil;
		if (x.exp <= 0) {
			buf = $appendSlice(buf, "0.");
			buf = appendZeros(buf, -x.exp);
			buf = $appendSlice(buf, x.mant);
		} else if (x.exp < x.mant.$length) {
			buf = $appendSlice(buf, $subslice(x.mant, 0, x.exp));
			buf = $append(buf, 46);
			buf = $appendSlice(buf, $subslice(x.mant, x.exp));
		} else {
			buf = $appendSlice(buf, x.mant);
			buf = appendZeros(buf, x.exp - x.mant.$length >> 0);
		}
		return ($bytesToString(buf));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	appendZeros = function(buf, n) {
		var buf, n;
		while (true) {
			if (!(n > 0)) { break; }
			buf = $append(buf, 48);
			n = n - (1) >> 0;
		}
		return buf;
	};
	shouldRoundUp = function(x, n) {
		var n, x, x$1, x$2, x$3, x$4;
		if (((x$1 = x.mant, ((n < 0 || n >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + n])) === 53) && ((n + 1 >> 0) === x.mant.$length)) {
			return n > 0 && !(((((((x$2 = x.mant, x$3 = n - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])) - 48 << 24 >>> 24)) & 1) >>> 0) === 0));
		}
		return (x$4 = x.mant, ((n < 0 || n >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + n])) >= 53;
	};
	decimal.ptr.prototype.round = function(n) {
		var n, x;
		x = this;
		if (n < 0 || n >= x.mant.$length) {
			return;
		}
		if (shouldRoundUp(x, n)) {
			x.roundUp(n);
		} else {
			x.roundDown(n);
		}
	};
	decimal.prototype.round = function(n) { return this.$val.round(n); };
	decimal.ptr.prototype.roundUp = function(n) {
		var _index, n, x, x$1, x$2, x$3, x$4, x$5;
		x = this;
		if (n < 0 || n >= x.mant.$length) {
			return;
		}
		while (true) {
			if (!(n > 0 && (x$1 = x.mant, x$2 = n - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) >= 57)) { break; }
			n = n - (1) >> 0;
		}
		if (n === 0) {
			(x$3 = x.mant, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0] = 49));
			x.mant = $subslice(x.mant, 0, 1);
			x.exp = x.exp + (1) >> 0;
			return;
		}
		_index = n - 1 >> 0;
		(x$5 = x.mant, ((_index < 0 || _index >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + _index] = ((x$4 = x.mant, ((_index < 0 || _index >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + _index])) + (1) << 24 >>> 24)));
		x.mant = $subslice(x.mant, 0, n);
	};
	decimal.prototype.roundUp = function(n) { return this.$val.roundUp(n); };
	decimal.ptr.prototype.roundDown = function(n) {
		var n, x;
		x = this;
		if (n < 0 || n >= x.mant.$length) {
			return;
		}
		x.mant = $subslice(x.mant, 0, n);
		trim(x);
	};
	decimal.prototype.roundDown = function(n) { return this.$val.roundDown(n); };
	trim = function(x) {
		var i, x, x$1, x$2;
		i = x.mant.$length;
		while (true) {
			if (!(i > 0 && ((x$1 = x.mant, x$2 = i - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) === 48))) { break; }
			i = i - (1) >> 0;
		}
		x.mant = $subslice(x.mant, 0, i);
		if (i === 0) {
			x.exp = 0;
		}
	};
	ErrNaN.ptr.prototype.Error = function() {
		var err;
		err = this;
		return err.msg;
	};
	ErrNaN.prototype.Error = function() { return this.$val.Error(); };
	NewFloat = function(x) {
		var _r$3, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (math.IsNaN(x)) {
			$panic((x$1 = new ErrNaN.ptr("NewFloat(NaN)"), new x$1.constructor.elem(x$1)));
		}
		_r$3 = new Float.ptr(0, 0, 0, 0, false, nat.nil, 0).SetFloat64(x); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewFloat }; } $f._r$3 = _r$3; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewFloat = NewFloat;
	Float.ptr.prototype.SetPrec = function(prec) {
		var old, prec, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; old = $f.old; prec = $f.prec; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		z.acc = 0;
		if (prec === 0) {
			z.prec = 0;
			if (z.form === 1) {
				z.acc = makeAcc(z.neg);
				z.form = 0;
			}
			$s = -1; return z;
		}
		if (prec > 4294967295) {
			prec = 4294967295;
		}
		old = z.prec;
		z.prec = ((prec >>> 0));
		/* */ if (z.prec < old) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (z.prec < old) { */ case 1:
			$r = z.round(0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.SetPrec }; } $f.old = old; $f.prec = prec; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.SetPrec = function(prec) { return this.$val.SetPrec(prec); };
	makeAcc = function(above) {
		var above;
		if (above) {
			return 1;
		}
		return -1;
	};
	Float.ptr.prototype.SetMode = function(mode) {
		var mode, z;
		z = this;
		z.mode = mode;
		z.acc = 0;
		return z;
	};
	Float.prototype.SetMode = function(mode) { return this.$val.SetMode(mode); };
	Float.ptr.prototype.Prec = function() {
		var x;
		x = this;
		return ((x.prec >>> 0));
	};
	Float.prototype.Prec = function() { return this.$val.Prec(); };
	Float.ptr.prototype.MinPrec = function() {
		var x;
		x = this;
		if (!((x.form === 1))) {
			return 0;
		}
		return (((x.mant.$length >>> 0)) * 32 >>> 0) - x.mant.trailingZeroBits() >>> 0;
	};
	Float.prototype.MinPrec = function() { return this.$val.MinPrec(); };
	Float.ptr.prototype.Mode = function() {
		var x;
		x = this;
		return x.mode;
	};
	Float.prototype.Mode = function() { return this.$val.Mode(); };
	Float.ptr.prototype.Acc = function() {
		var x;
		x = this;
		return x.acc;
	};
	Float.prototype.Acc = function() { return this.$val.Acc(); };
	Float.ptr.prototype.Sign = function() {
		var x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (x.form === 0) {
			$s = -1; return 0;
		}
		if (x.neg) {
			$s = -1; return -1;
		}
		$s = -1; return 1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Sign }; } $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Sign = function() { return this.$val.Sign(); };
	Float.ptr.prototype.MantExp = function(mant) {
		var _r$3, exp, mant, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; exp = $f.exp; mant = $f.mant; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		exp = 0;
		x = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (x.form === 1) {
			exp = ((x.exp >> 0));
		}
		/* */ if (!(mant === ptrType.nil)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(mant === ptrType.nil)) { */ case 4:
			_r$3 = mant.Copy(x); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			if (mant.form === 1) {
				mant.exp = 0;
			}
		/* } */ case 5:
		$s = -1; return exp;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.MantExp }; } $f._r$3 = _r$3; $f.exp = exp; $f.mant = mant; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.MantExp = function(mant) { return this.$val.MantExp(mant); };
	Float.ptr.prototype.setExpAndRound = function(exp, sbit) {
		var exp, sbit, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; exp = $f.exp; sbit = $f.sbit; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if ((exp.$high < -1 || (exp.$high === -1 && exp.$low < 2147483648))) {
			z.acc = makeAcc(z.neg);
			z.form = 0;
			$s = -1; return;
		}
		if ((exp.$high > 0 || (exp.$high === 0 && exp.$low > 2147483647))) {
			z.acc = makeAcc(!z.neg);
			z.form = 2;
			$s = -1; return;
		}
		z.form = 1;
		z.exp = (((exp.$low + ((exp.$high >> 31) * 4294967296)) >> 0));
		$r = z.round(sbit); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.setExpAndRound }; } $f.exp = exp; $f.sbit = sbit; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.setExpAndRound = function(exp, sbit) { return this.$val.setExpAndRound(exp, sbit); };
	Float.ptr.prototype.SetMantExp = function(mant, exp) {
		var _r$3, exp, mant, x, x$1, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; exp = $f.exp; mant = $f.mant; x = $f.x; x$1 = $f.x$1; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = z.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = mant.validate(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$3 = z.Copy(mant); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		if (!((z.form === 1))) {
			$s = -1; return z;
		}
		$r = z.setExpAndRound((x = (new $Int64(0, z.exp)), x$1 = (new $Int64(0, exp)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low)), 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.SetMantExp }; } $f._r$3 = _r$3; $f.exp = exp; $f.mant = mant; $f.x = x; $f.x$1 = x$1; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.SetMantExp = function(mant, exp) { return this.$val.SetMantExp(mant, exp); };
	Float.ptr.prototype.Signbit = function() {
		var x;
		x = this;
		return x.neg;
	};
	Float.prototype.Signbit = function() { return this.$val.Signbit(); };
	Float.ptr.prototype.IsInf = function() {
		var x;
		x = this;
		return x.form === 2;
	};
	Float.prototype.IsInf = function() { return this.$val.IsInf(); };
	Float.ptr.prototype.IsInt = function() {
		var x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (!((x.form === 1))) {
			$s = -1; return x.form === 0;
		}
		if (x.exp <= 0) {
			$s = -1; return false;
		}
		$s = -1; return x.prec <= ((x.exp >>> 0)) || x.MinPrec() <= ((x.exp >>> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.IsInt }; } $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.IsInt = function() { return this.$val.IsInt(); };
	Float.ptr.prototype.validate = function() {
		var _arg, _arg$1, _r$3, _r$4, m, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$3 = $f._r$3; _r$4 = $f._r$4; m = $f.m; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if (true) {
			$panic(new $String("validate called but debugFloat is not set"));
		}
		if (!((x.form === 1))) {
			$s = -1; return;
		}
		m = x.mant.$length;
		if (m === 0) {
			$panic(new $String("nonzero finite number with empty mantissa"));
		}
		/* */ if ((((x$1 = x.mant, x$2 = m - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) & 2147483648) >>> 0) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((((x$1 = x.mant, x$2 = m - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) & 2147483648) >>> 0) === 0) { */ case 1:
			_arg = new Word((x$3 = x.mant, x$4 = m - 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4])));
			_r$3 = x.Text(112, 0); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$3);
			_r$4 = fmt.Sprintf("msb not set in last word %#x of %s", new sliceType([_arg, _arg$1])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$panic(new $String(_r$4));
		/* } */ case 2:
		if (x.prec === 0) {
			$panic(new $String("zero precision finite number"));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.validate }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.m = m; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.validate = function() { return this.$val.validate(); };
	Float.ptr.prototype.round = function(sbit) {
		var _1, _index, _q, bits$1, inc, lsb, m, n, ntz, r, rbit, sbit, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _index = $f._index; _q = $f._q; bits$1 = $f.bits$1; inc = $f.inc; lsb = $f.lsb; m = $f.m; n = $f.n; ntz = $f.ntz; r = $f.r; rbit = $f.rbit; sbit = $f.sbit; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = z.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		z.acc = 0;
		if (!((z.form === 1))) {
			$s = -1; return;
		}
		m = ((z.mant.$length >>> 0));
		bits$1 = $imul(m, 32) >>> 0;
		if (bits$1 <= z.prec) {
			$s = -1; return;
		}
		r = ((((bits$1 - z.prec >>> 0) - 1 >>> 0) >>> 0));
		rbit = (z.mant.bit(r) & 1) >>> 0;
		if ((sbit === 0) && ((rbit === 0) || (z.mode === 0))) {
			sbit = z.mant.sticky(r);
		}
		sbit = (sbit & (1)) >>> 0;
		n = (_q = ((z.prec + 31 >>> 0)) / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		if (m > n) {
			$copySlice(z.mant, $subslice(z.mant, (m - n >>> 0)));
			z.mant = $subslice(z.mant, 0, n);
		}
		ntz = ($imul(n, 32) >>> 0) - z.prec >>> 0;
		lsb = (y = ntz, y < 32 ? (1 << y) : 0) >>> 0;
		if (!((((rbit | sbit) >>> 0) === 0))) {
			inc = false;
			_1 = z.mode;
			if (_1 === (4)) {
				inc = z.neg;
			} else if (_1 === (2)) {
			} else if (_1 === (0)) {
				inc = !((rbit === 0)) && (!((sbit === 0)) || !(((((x = z.mant, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) & lsb) >>> 0) === 0)));
			} else if (_1 === (1)) {
				inc = !((rbit === 0));
			} else if (_1 === (3)) {
				inc = true;
			} else if (_1 === (5)) {
				inc = !z.neg;
			} else {
				$panic(new $String("unreachable"));
			}
			z.acc = makeAcc(!(inc === z.neg));
			if (inc) {
				if (!((addVW((x$1 = z.mant, $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), (x$2 = z.mant, $subslice(new sliceType$2(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), lsb) === 0))) {
					if (z.exp >= 2147483647) {
						z.form = 2;
						$s = -1; return;
					}
					z.exp = z.exp + (1) >> 0;
					shrVU((x$3 = z.mant, $subslice(new sliceType$2(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), (x$4 = z.mant, $subslice(new sliceType$2(x$4.$array), x$4.$offset, x$4.$offset + x$4.$length)), 1);
					_index = n - 1 >>> 0;
					(x$6 = z.mant, ((_index < 0 || _index >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + _index] = (((x$5 = z.mant, ((_index < 0 || _index >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + _index])) | (2147483648)) >>> 0)));
				}
			}
		}
		(x$8 = z.mant, (0 >= x$8.$length ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + 0] = (((x$7 = z.mant, (0 >= x$7.$length ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + 0])) & ~((lsb - 1 >>> 0))) >>> 0)));
		/* */ if (false) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (false) { */ case 4:
			$r = z.validate(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.round }; } $f._1 = _1; $f._index = _index; $f._q = _q; $f.bits$1 = bits$1; $f.inc = inc; $f.lsb = lsb; $f.m = m; $f.n = n; $f.ntz = ntz; $f.r = r; $f.rbit = rbit; $f.sbit = sbit; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.round = function(sbit) { return this.$val.round(sbit); };
	Float.ptr.prototype.setBits64 = function(neg, x) {
		var neg, s, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; neg = $f.neg; s = $f.s; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (z.prec === 0) {
			z.prec = 64;
		}
		z.acc = 0;
		z.neg = neg;
		if ((x.$high === 0 && x.$low === 0)) {
			z.form = 0;
			$s = -1; return z;
		}
		z.form = 1;
		s = bits.LeadingZeros64(x);
		z.mant = z.mant.setUint64($shiftLeft64(x, ((s >>> 0))));
		z.exp = (((64 - s >> 0) >> 0));
		/* */ if (z.prec < 64) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (z.prec < 64) { */ case 1:
			$r = z.round(0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.setBits64 }; } $f.neg = neg; $f.s = s; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.setBits64 = function(neg, x) { return this.$val.setBits64(neg, x); };
	Float.ptr.prototype.SetUint64 = function(x) {
		var _r$3, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.setBits64(false, x); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.SetUint64 }; } $f._r$3 = _r$3; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.SetUint64 = function(x) { return this.$val.SetUint64(x); };
	Float.ptr.prototype.SetInt64 = function(x) {
		var _r$3, u, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; u = $f.u; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		u = x;
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 0))) {
			u = new $Int64(-u.$high, -u.$low);
		}
		_r$3 = z.setBits64((x.$high < 0 || (x.$high === 0 && x.$low < 0)), (new $Uint64(u.$high, u.$low))); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.SetInt64 }; } $f._r$3 = _r$3; $f.u = u; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.SetInt64 = function(x) { return this.$val.SetInt64(x); };
	Float.ptr.prototype.SetFloat64 = function(x) {
		var _tuple, exp, fmant, x, x$1, x$2, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; exp = $f.exp; fmant = $f.fmant; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (z.prec === 0) {
			z.prec = 53;
		}
		if (math.IsNaN(x)) {
			$panic((x$1 = new ErrNaN.ptr("Float.SetFloat64(NaN)"), new x$1.constructor.elem(x$1)));
		}
		z.acc = 0;
		z.neg = math.Signbit(x);
		if (x === 0) {
			z.form = 0;
			$s = -1; return z;
		}
		if (math.IsInf(x, 0)) {
			z.form = 2;
			$s = -1; return z;
		}
		z.form = 1;
		_tuple = math.Frexp(x);
		fmant = _tuple[0];
		exp = _tuple[1];
		z.mant = z.mant.setUint64((x$2 = $shiftLeft64(math.Float64bits(fmant), 11), new $Uint64(2147483648 | x$2.$high, (0 | x$2.$low) >>> 0)));
		z.exp = ((exp >> 0));
		/* */ if (z.prec < 53) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (z.prec < 53) { */ case 1:
			$r = z.round(0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.SetFloat64 }; } $f._tuple = _tuple; $f.exp = exp; $f.fmant = fmant; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.SetFloat64 = function(x) { return this.$val.SetFloat64(x); };
	fnorm = function(m) {
		var c, m, s, x, x$1;
		if (false && ((m.$length === 0) || ((x = m.$length - 1 >> 0, ((x < 0 || x >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + x])) === 0))) {
			$panic(new $String("msw of mantissa is 0"));
		}
		s = nlz((x$1 = m.$length - 1 >> 0, ((x$1 < 0 || x$1 >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + x$1])));
		if (s > 0) {
			c = shlVU($subslice(new sliceType$2(m.$array), m.$offset, m.$offset + m.$length), $subslice(new sliceType$2(m.$array), m.$offset, m.$offset + m.$length), s);
			if (false && !((c === 0))) {
				$panic(new $String("nlz or shlVU incorrect"));
			}
		}
		return (new $Int64(0, s));
	};
	Float.ptr.prototype.SetInt = function(x) {
		var bits$1, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; bits$1 = $f.bits$1; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		bits$1 = ((x.BitLen() >>> 0));
		if (z.prec === 0) {
			z.prec = umax32(bits$1, 64);
		}
		z.acc = 0;
		z.neg = x.neg;
		if (x.abs.$length === 0) {
			z.form = 0;
			$s = -1; return z;
		}
		z.mant = z.mant.set(x.abs);
		fnorm(z.mant);
		$r = z.setExpAndRound((new $Int64(0, bits$1)), 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.SetInt }; } $f.bits$1 = bits$1; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Float.ptr.prototype.SetRat = function(x) {
		var _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, a, b, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; a = $f.a; b = $f.b; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		b = [b];
		z = this;
		/* */ if (x.IsInt()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.IsInt()) { */ case 1:
			_r$3 = z.SetInt(x.Num()); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		_tmp = new Float.ptr(0, 0, 0, 0, false, nat.nil, 0);
		_tmp$1 = new Float.ptr(0, 0, 0, 0, false, nat.nil, 0);
		a[0] = $clone(_tmp, Float);
		b[0] = $clone(_tmp$1, Float);
		_r$4 = a[0].SetInt(x.Num()); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		_r$5 = b[0].SetInt(x.Denom()); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		if (z.prec === 0) {
			z.prec = umax32(a[0].prec, b[0].prec);
		}
		_r$6 = z.Quo(a[0], b[0]); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.SetRat }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.a = a; $f.b = b; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.SetRat = function(x) { return this.$val.SetRat(x); };
	Float.ptr.prototype.SetInf = function(signbit) {
		var signbit, z;
		z = this;
		z.acc = 0;
		z.form = 2;
		z.neg = signbit;
		return z;
	};
	Float.prototype.SetInf = function(signbit) { return this.$val.SetInf(signbit); };
	Float.ptr.prototype.Set = function(x) {
		var x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		z.acc = 0;
		/* */ if (!(z === x)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(z === x)) { */ case 4:
			z.form = x.form;
			z.neg = x.neg;
			if (x.form === 1) {
				z.exp = x.exp;
				z.mant = z.mant.set(x.mant);
			}
			/* */ if (z.prec === 0) { $s = 6; continue; }
			/* */ if (z.prec < x.prec) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (z.prec === 0) { */ case 6:
				z.prec = x.prec;
				$s = 8; continue;
			/* } else if (z.prec < x.prec) { */ case 7:
				$r = z.round(0); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		/* } */ case 5:
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Set }; } $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Set = function(x) { return this.$val.Set(x); };
	Float.ptr.prototype.Copy = function(x) {
		var x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (!(z === x)) {
			z.prec = x.prec;
			z.mode = x.mode;
			z.acc = x.acc;
			z.form = x.form;
			z.neg = x.neg;
			if (z.form === 1) {
				z.mant = z.mant.set(x.mant);
				z.exp = x.exp;
			}
		}
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Copy }; } $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Copy = function(x) { return this.$val.Copy(x); };
	msb32 = function(x) {
		var _1, i, x;
		i = x.$length - 1 >> 0;
		if (i < 0) {
			return 0;
		}
		if (false && (((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) & 2147483648) >>> 0) === 0)) {
			$panic(new $String("x not normalized"));
		}
		_1 = 32;
		if (_1 === (32)) {
			return ((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) >>> 0));
		} else if (_1 === (64)) {
			return ((0 >>> 0));
		}
		$panic(new $String("unreachable"));
	};
	msb64 = function(x) {
		var _1, i, v, x, x$1, x$2, x$3, x$4, x$5;
		i = x.$length - 1 >> 0;
		if (i < 0) {
			return new $Uint64(0, 0);
		}
		if (false && (((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) & 2147483648) >>> 0) === 0)) {
			$panic(new $String("x not normalized"));
		}
		_1 = 32;
		if (_1 === (32)) {
			v = $shiftLeft64(((x$1 = ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), new $Uint64(0, x$1.constructor === Number ? x$1 : 1))), 32);
			if (i > 0) {
				v = (x$2 = ((x$3 = (x$4 = i - 1 >> 0, ((x$4 < 0 || x$4 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$4])), new $Uint64(0, x$3.constructor === Number ? x$3 : 1))), new $Uint64(v.$high | x$2.$high, (v.$low | x$2.$low) >>> 0));
			}
			return v;
		} else if (_1 === (64)) {
			return ((x$5 = ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), new $Uint64(0, x$5.constructor === Number ? x$5 : 1)));
		}
		$panic(new $String("unreachable"));
	};
	Float.ptr.prototype.Uint64 = function() {
		var _1, u, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; u = $f.u; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_1 = x.form;
		if (_1 === (1)) {
			if (x.neg) {
				$s = -1; return [new $Uint64(0, 0), 1];
			}
			if (x.exp <= 0) {
				$s = -1; return [new $Uint64(0, 0), -1];
			}
			if (x.exp <= 64) {
				u = $shiftRightUint64(msb64(x.mant), ((64 - ((x.exp >>> 0)) >>> 0)));
				if (x.MinPrec() <= 64) {
					$s = -1; return [u, 0];
				}
				$s = -1; return [u, -1];
			}
			$s = -1; return [new $Uint64(4294967295, 4294967295), -1];
		} else if (_1 === (0)) {
			$s = -1; return [new $Uint64(0, 0), 0];
		} else if (_1 === (2)) {
			if (x.neg) {
				$s = -1; return [new $Uint64(0, 0), 1];
			}
			$s = -1; return [new $Uint64(4294967295, 4294967295), -1];
		}
		$panic(new $String("unreachable"));
		$s = -1; return [new $Uint64(0, 0), 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Uint64 }; } $f._1 = _1; $f.u = u; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Float.ptr.prototype.Int64 = function() {
		var _1, acc, i, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; acc = $f.acc; i = $f.i; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_1 = x.form;
		if (_1 === (1)) {
			acc = makeAcc(x.neg);
			if (x.exp <= 0) {
				$s = -1; return [new $Int64(0, 0), acc];
			}
			if (x.exp <= 63) {
				i = ((x$1 = $shiftRightUint64(msb64(x.mant), ((64 - ((x.exp >>> 0)) >>> 0))), new $Int64(x$1.$high, x$1.$low)));
				if (x.neg) {
					i = new $Int64(-i.$high, -i.$low);
				}
				if (x.MinPrec() <= ((x.exp >>> 0))) {
					$s = -1; return [i, 0];
				}
				$s = -1; return [i, acc];
			}
			if (x.neg) {
				if ((x.exp === 64) && (x.MinPrec() === 1)) {
					acc = 0;
				}
				$s = -1; return [new $Int64(-2147483648, 0), acc];
			}
			$s = -1; return [new $Int64(2147483647, 4294967295), -1];
		} else if (_1 === (0)) {
			$s = -1; return [new $Int64(0, 0), 0];
		} else if (_1 === (2)) {
			if (x.neg) {
				$s = -1; return [new $Int64(-2147483648, 0), 1];
			}
			$s = -1; return [new $Int64(2147483647, 4294967295), -1];
		}
		$panic(new $String("unreachable"));
		$s = -1; return [new $Int64(0, 0), 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Int64 }; } $f._1 = _1; $f.acc = acc; $f.i = i; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Int64 = function() { return this.$val.Int64(); };
	Float.ptr.prototype.Float32 = function() {
		var _1, _r$3, _tmp, _tmp$1, _tmp$2, bexp, e, mant, p, r, sign, x, y, z, z$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; bexp = $f.bexp; e = $f.e; mant = $f.mant; p = $f.p; r = $f.r; sign = $f.sign; x = $f.x; y = $f.y; z = $f.z; z$1 = $f.z$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
			_1 = x.form;
			/* */ if (_1 === (1)) { $s = 5; continue; }
			/* */ if (_1 === (0)) { $s = 6; continue; }
			/* */ if (_1 === (2)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_1 === (1)) { */ case 5:
				e = x.exp - 1 >> 0;
				p = 24;
				if (e < -126) {
					p = 150 + ((e >> 0)) >> 0;
					if (p < 0 || (p === 0) && (x.mant.sticky((((x.mant.$length >>> 0)) * 32 >>> 0) - 1 >>> 0) === 0)) {
						if (x.neg) {
							z = 0;
							$s = -1; return [-z, 1];
						}
						$s = -1; return [0, -1];
					}
					if (p === 0) {
						if (x.neg) {
							$s = -1; return [-1.401298464324817e-45, -1];
						}
						$s = -1; return [1.401298464324817e-45, 1];
					}
				}
				r = new Float.ptr(0, 0, 0, 0, false, nat.nil, 0);
				r.prec = ((p >>> 0));
				_r$3 = r.Set(x); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				e = r.exp - 1 >> 0;
				if ((r.form === 2) || e > 127) {
					if (x.neg) {
						$s = -1; return [($fround(math.Inf(-1))), -1];
					}
					$s = -1; return [($fround(math.Inf(1))), 1];
				}
				_tmp = 0;
				_tmp$1 = 0;
				_tmp$2 = 0;
				sign = _tmp;
				bexp = _tmp$1;
				mant = _tmp$2;
				if (x.neg) {
					sign = 2147483648;
				}
				if (e < -126) {
					p = 150 + ((e >> 0)) >> 0;
					mant = (y = (((32 - p >> 0) >>> 0)), y < 32 ? (msb32(r.mant) >>> y) : 0) >>> 0;
				} else {
					bexp = (((e + 127 >> 0) >>> 0)) << 23 >>> 0;
					mant = ((msb32(r.mant) >>> 8 >>> 0) & 8388607) >>> 0;
				}
				$s = -1; return [math.Float32frombits((((sign | bexp) >>> 0) | mant) >>> 0), r.acc];
			/* } else if (_1 === (0)) { */ case 6:
				if (x.neg) {
					z$1 = 0;
					$s = -1; return [-z$1, 0];
				}
				$s = -1; return [0, 0];
			/* } else if (_1 === (2)) { */ case 7:
				if (x.neg) {
					$s = -1; return [($fround(math.Inf(-1))), 0];
				}
				$s = -1; return [($fround(math.Inf(1))), 0];
			/* } */ case 8:
		case 4:
		$panic(new $String("unreachable"));
		$s = -1; return [0, 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Float32 }; } $f._1 = _1; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f.bexp = bexp; $f.e = e; $f.mant = mant; $f.p = p; $f.r = r; $f.sign = sign; $f.x = x; $f.y = y; $f.z = z; $f.z$1 = z$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Float32 = function() { return this.$val.Float32(); };
	Float.ptr.prototype.Float64 = function() {
		var _1, _r$3, _tmp, _tmp$1, _tmp$2, bexp, e, mant, p, r, sign, x, x$1, x$2, z, z$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; bexp = $f.bexp; e = $f.e; mant = $f.mant; p = $f.p; r = $f.r; sign = $f.sign; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; z = $f.z; z$1 = $f.z$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
			_1 = x.form;
			/* */ if (_1 === (1)) { $s = 5; continue; }
			/* */ if (_1 === (0)) { $s = 6; continue; }
			/* */ if (_1 === (2)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_1 === (1)) { */ case 5:
				e = x.exp - 1 >> 0;
				p = 53;
				if (e < -1022) {
					p = 1075 + ((e >> 0)) >> 0;
					if (p < 0 || (p === 0) && (x.mant.sticky((((x.mant.$length >>> 0)) * 32 >>> 0) - 1 >>> 0) === 0)) {
						if (x.neg) {
							z = 0;
							$s = -1; return [-z, 1];
						}
						$s = -1; return [0, -1];
					}
					if (p === 0) {
						if (x.neg) {
							$s = -1; return [-5e-324, -1];
						}
						$s = -1; return [5e-324, 1];
					}
				}
				r = new Float.ptr(0, 0, 0, 0, false, nat.nil, 0);
				r.prec = ((p >>> 0));
				_r$3 = r.Set(x); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				e = r.exp - 1 >> 0;
				if ((r.form === 2) || e > 1023) {
					if (x.neg) {
						$s = -1; return [math.Inf(-1), -1];
					}
					$s = -1; return [math.Inf(1), 1];
				}
				_tmp = new $Uint64(0, 0);
				_tmp$1 = new $Uint64(0, 0);
				_tmp$2 = new $Uint64(0, 0);
				sign = _tmp;
				bexp = _tmp$1;
				mant = _tmp$2;
				if (x.neg) {
					sign = new $Uint64(2147483648, 0);
				}
				if (e < -1022) {
					p = 1075 + ((e >> 0)) >> 0;
					mant = $shiftRightUint64(msb64(r.mant), (((64 - p >> 0) >>> 0)));
				} else {
					bexp = $shiftLeft64((new $Uint64(0, (e + 1023 >> 0))), 52);
					mant = (x$1 = $shiftRightUint64(msb64(r.mant), 11), new $Uint64(x$1.$high & 1048575, (x$1.$low & 4294967295) >>> 0));
				}
				$s = -1; return [math.Float64frombits((x$2 = new $Uint64(sign.$high | bexp.$high, (sign.$low | bexp.$low) >>> 0), new $Uint64(x$2.$high | mant.$high, (x$2.$low | mant.$low) >>> 0))), r.acc];
			/* } else if (_1 === (0)) { */ case 6:
				if (x.neg) {
					z$1 = 0;
					$s = -1; return [-z$1, 0];
				}
				$s = -1; return [0, 0];
			/* } else if (_1 === (2)) { */ case 7:
				if (x.neg) {
					$s = -1; return [math.Inf(-1), 0];
				}
				$s = -1; return [math.Inf(1), 0];
			/* } */ case 8:
		case 4:
		$panic(new $String("unreachable"));
		$s = -1; return [0, 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Float64 }; } $f._1 = _1; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f.bexp = bexp; $f.e = e; $f.mant = mant; $f.p = p; $f.r = r; $f.sign = sign; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.z = z; $f.z$1 = z$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Float64 = function() { return this.$val.Float64(); };
	Float.ptr.prototype.Int = function(z) {
		var _1, acc, allBits, exp, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; acc = $f.acc; allBits = $f.allBits; exp = $f.exp; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (z === ptrType$1.nil && x.form <= 1) {
			z = new Int.ptr(false, nat.nil);
		}
		_1 = x.form;
		if (_1 === (1)) {
			acc = makeAcc(x.neg);
			if (x.exp <= 0) {
				$s = -1; return [z.SetInt64(new $Int64(0, 0)), acc];
			}
			allBits = ((x.mant.$length >>> 0)) * 32 >>> 0;
			exp = ((x.exp >>> 0));
			if (x.MinPrec() <= exp) {
				acc = 0;
			}
			if (z === ptrType$1.nil) {
				z = new Int.ptr(false, nat.nil);
			}
			z.neg = x.neg;
			if (exp > allBits) {
				z.abs = z.abs.shl(x.mant, exp - allBits >>> 0);
			} else if (exp < allBits) {
				z.abs = z.abs.shr(x.mant, allBits - exp >>> 0);
			} else {
				z.abs = z.abs.set(x.mant);
			}
			$s = -1; return [z, acc];
		} else if (_1 === (0)) {
			$s = -1; return [z.SetInt64(new $Int64(0, 0)), 0];
		} else if (_1 === (2)) {
			$s = -1; return [ptrType$1.nil, makeAcc(x.neg)];
		}
		$panic(new $String("unreachable"));
		$s = -1; return [ptrType$1.nil, 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Int }; } $f._1 = _1; $f.acc = acc; $f.allBits = allBits; $f.exp = exp; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Int = function(z) { return this.$val.Int(z); };
	Float.ptr.prototype.Rat = function(z) {
		var _1, _r$3, allBits, t, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; allBits = $f.allBits; t = $f.t; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (z === ptrType$2.nil && x.form <= 1) {
			z = new Rat.ptr(new Int.ptr(false, nat.nil), new Int.ptr(false, nat.nil));
		}
			_1 = x.form;
			/* */ if (_1 === (1)) { $s = 5; continue; }
			/* */ if (_1 === (0)) { $s = 6; continue; }
			/* */ if (_1 === (2)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_1 === (1)) { */ case 5:
				allBits = $imul(((x.mant.$length >> 0)), 32);
				z.a.neg = x.neg;
					/* */ if (x.exp > allBits) { $s = 10; continue; }
					/* */ if (x.exp < allBits) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (x.exp > allBits) { */ case 10:
						z.a.abs = z.a.abs.shl(x.mant, (((x.exp - allBits >> 0) >>> 0)));
						z.b.abs = $subslice(z.b.abs, 0, 0);
						$s = 13; continue;
					/* } else if (x.exp < allBits) { */ case 11:
						z.a.abs = z.a.abs.set(x.mant);
						t = z.b.abs.setUint64(new $Uint64(0, 1));
						z.b.abs = t.shl(t, (((allBits - x.exp >> 0) >>> 0)));
						_r$3 = z.norm(); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$3;
						$s = 13; continue;
					/* } else { */ case 12:
						z.a.abs = z.a.abs.set(x.mant);
						z.b.abs = $subslice(z.b.abs, 0, 0);
					/* } */ case 13:
				case 9:
				$s = -1; return [z, 0];
			/* } else if (_1 === (0)) { */ case 6:
				$s = -1; return [z.SetInt64(new $Int64(0, 0)), 0];
			/* } else if (_1 === (2)) { */ case 7:
				$s = -1; return [ptrType$2.nil, makeAcc(x.neg)];
			/* } */ case 8:
		case 4:
		$panic(new $String("unreachable"));
		$s = -1; return [ptrType$2.nil, 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Rat }; } $f._1 = _1; $f._r$3 = _r$3; $f.allBits = allBits; $f.t = t; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Rat = function(z) { return this.$val.Rat(z); };
	Float.ptr.prototype.Abs = function(x) {
		var _r$3, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.Set(x); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		z.neg = false;
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Abs }; } $f._r$3 = _r$3; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Abs = function(x) { return this.$val.Abs(x); };
	Float.ptr.prototype.Neg = function(x) {
		var _r$3, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.Set(x); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		z.neg = !z.neg;
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Neg }; } $f._r$3 = _r$3; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Neg = function(x) { return this.$val.Neg(x); };
	validateBinaryOperands = function(x, y) {
		var x, y;
		if (true) {
			$panic(new $String("validateBinaryOperands called but debugFloat is not set"));
		}
		if (x.mant.$length === 0) {
			$panic(new $String("empty mantissa for x"));
		}
		if (y.mant.$length === 0) {
			$panic(new $String("empty mantissa for y"));
		}
	};
	Float.ptr.prototype.uadd = function(x, y) {
		var al, ex, ey, t, t$1, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; al = $f.al; ex = $f.ex; ey = $f.ey; t = $f.t; t$1 = $f.t$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (false) {
			validateBinaryOperands(x, y);
		}
		ex = (x$1 = (new $Int64(0, x.exp)), x$2 = $mul64((new $Int64(0, x.mant.$length)), new $Int64(0, 32)), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		ey = (x$3 = (new $Int64(0, y.exp)), x$4 = $mul64((new $Int64(0, y.mant.$length)), new $Int64(0, 32)), new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low));
		al = alias(z.mant, x.mant) || alias(z.mant, y.mant);
		if ((ex.$high < ey.$high || (ex.$high === ey.$high && ex.$low < ey.$low))) {
			if (al) {
				t = (nat.nil).shl(y.mant, ((new $Int64(ey.$high - ex.$high, ey.$low - ex.$low).$low >>> 0)));
				z.mant = z.mant.add(x.mant, t);
			} else {
				z.mant = z.mant.shl(y.mant, ((new $Int64(ey.$high - ex.$high, ey.$low - ex.$low).$low >>> 0)));
				z.mant = z.mant.add(x.mant, z.mant);
			}
		} else if ((ex.$high > ey.$high || (ex.$high === ey.$high && ex.$low > ey.$low))) {
			if (al) {
				t$1 = (nat.nil).shl(x.mant, ((new $Int64(ex.$high - ey.$high, ex.$low - ey.$low).$low >>> 0)));
				z.mant = z.mant.add(t$1, y.mant);
			} else {
				z.mant = z.mant.shl(x.mant, ((new $Int64(ex.$high - ey.$high, ex.$low - ey.$low).$low >>> 0)));
				z.mant = z.mant.add(z.mant, y.mant);
			}
			ex = ey;
		} else {
			z.mant = z.mant.add(x.mant, y.mant);
		}
		$r = z.setExpAndRound((x$5 = (x$6 = $mul64((new $Int64(0, z.mant.$length)), new $Int64(0, 32)), new $Int64(ex.$high + x$6.$high, ex.$low + x$6.$low)), x$7 = fnorm(z.mant), new $Int64(x$5.$high - x$7.$high, x$5.$low - x$7.$low)), 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.uadd }; } $f.al = al; $f.ex = ex; $f.ey = ey; $f.t = t; $f.t$1 = t$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.uadd = function(x, y) { return this.$val.uadd(x, y); };
	Float.ptr.prototype.usub = function(x, y) {
		var al, ex, ey, t, t$1, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; al = $f.al; ex = $f.ex; ey = $f.ey; t = $f.t; t$1 = $f.t$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (false) {
			validateBinaryOperands(x, y);
		}
		ex = (x$1 = (new $Int64(0, x.exp)), x$2 = $mul64((new $Int64(0, x.mant.$length)), new $Int64(0, 32)), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		ey = (x$3 = (new $Int64(0, y.exp)), x$4 = $mul64((new $Int64(0, y.mant.$length)), new $Int64(0, 32)), new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low));
		al = alias(z.mant, x.mant) || alias(z.mant, y.mant);
		if ((ex.$high < ey.$high || (ex.$high === ey.$high && ex.$low < ey.$low))) {
			if (al) {
				t = (nat.nil).shl(y.mant, ((new $Int64(ey.$high - ex.$high, ey.$low - ex.$low).$low >>> 0)));
				z.mant = t.sub(x.mant, t);
			} else {
				z.mant = z.mant.shl(y.mant, ((new $Int64(ey.$high - ex.$high, ey.$low - ex.$low).$low >>> 0)));
				z.mant = z.mant.sub(x.mant, z.mant);
			}
		} else if ((ex.$high > ey.$high || (ex.$high === ey.$high && ex.$low > ey.$low))) {
			if (al) {
				t$1 = (nat.nil).shl(x.mant, ((new $Int64(ex.$high - ey.$high, ex.$low - ey.$low).$low >>> 0)));
				z.mant = t$1.sub(t$1, y.mant);
			} else {
				z.mant = z.mant.shl(x.mant, ((new $Int64(ex.$high - ey.$high, ex.$low - ey.$low).$low >>> 0)));
				z.mant = z.mant.sub(z.mant, y.mant);
			}
			ex = ey;
		} else {
			z.mant = z.mant.sub(x.mant, y.mant);
		}
		if (z.mant.$length === 0) {
			z.acc = 0;
			z.form = 0;
			z.neg = false;
			$s = -1; return;
		}
		$r = z.setExpAndRound((x$5 = (x$6 = $mul64((new $Int64(0, z.mant.$length)), new $Int64(0, 32)), new $Int64(ex.$high + x$6.$high, ex.$low + x$6.$low)), x$7 = fnorm(z.mant), new $Int64(x$5.$high - x$7.$high, x$5.$low - x$7.$low)), 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.usub }; } $f.al = al; $f.ex = ex; $f.ey = ey; $f.t = t; $f.t$1 = t$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.usub = function(x, y) { return this.$val.usub(x, y); };
	Float.ptr.prototype.umul = function(x, y) {
		var e, x, x$1, x$2, x$3, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; e = $f.e; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (false) {
			validateBinaryOperands(x, y);
		}
		e = (x$1 = (new $Int64(0, x.exp)), x$2 = (new $Int64(0, y.exp)), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low));
		if (x === y) {
			z.mant = z.mant.sqr(x.mant);
		} else {
			z.mant = z.mant.mul(x.mant, y.mant);
		}
		$r = z.setExpAndRound((x$3 = fnorm(z.mant), new $Int64(e.$high - x$3.$high, e.$low - x$3.$low)), 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.umul }; } $f.e = e; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.umul = function(x, y) { return this.$val.umul(x, y); };
	Float.ptr.prototype.uquo = function(x, y) {
		var _q, _r$3, _tuple, d, d$1, e, n, r, sbit, x, x$1, x$2, x$3, x$4, x$5, xadj, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r$3 = $f._r$3; _tuple = $f._tuple; d = $f.d; d$1 = $f.d$1; e = $f.e; n = $f.n; r = $f.r; sbit = $f.sbit; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; xadj = $f.xadj; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (false) {
			validateBinaryOperands(x, y);
		}
		n = (((_q = z.prec / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) + 1 >> 0;
		xadj = x.mant;
		d = (n - x.mant.$length >> 0) + y.mant.$length >> 0;
		if (d > 0) {
			xadj = $makeSlice(nat, (x.mant.$length + d >> 0));
			$copySlice($subslice(xadj, d), x.mant);
		}
		d$1 = xadj.$length - y.mant.$length >> 0;
		r = nat.nil;
		_r$3 = z.mant.div(nat.nil, xadj, y.mant); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		z.mant = _tuple[0];
		r = _tuple[1];
		e = (x$1 = (x$2 = (new $Int64(0, x.exp)), x$3 = (new $Int64(0, y.exp)), new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low)), x$4 = $mul64((new $Int64(0, (d$1 - z.mant.$length >> 0))), new $Int64(0, 32)), new $Int64(x$1.$high - x$4.$high, x$1.$low - x$4.$low));
		sbit = 0;
		if (r.$length > 0) {
			sbit = 1;
		}
		$r = z.setExpAndRound((x$5 = fnorm(z.mant), new $Int64(e.$high - x$5.$high, e.$low - x$5.$low)), sbit); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.uquo }; } $f._q = _q; $f._r$3 = _r$3; $f._tuple = _tuple; $f.d = d; $f.d$1 = d$1; $f.e = e; $f.n = n; $f.r = r; $f.sbit = sbit; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.xadj = xadj; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.uquo = function(x, y) { return this.$val.uquo(x, y); };
	Float.ptr.prototype.ucmp = function(y) {
		var _tmp, _tmp$1, i, j, x, x$1, x$2, xm, y, ym;
		x = this;
		if (false) {
			validateBinaryOperands(x, y);
		}
		if (x.exp < y.exp) {
			return -1;
		} else if (x.exp > y.exp) {
			return 1;
		}
		i = x.mant.$length;
		j = y.mant.$length;
		while (true) {
			if (!(i > 0 || j > 0)) { break; }
			_tmp = 0;
			_tmp$1 = 0;
			xm = _tmp;
			ym = _tmp$1;
			if (i > 0) {
				i = i - (1) >> 0;
				xm = (x$1 = x.mant, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i]));
			}
			if (j > 0) {
				j = j - (1) >> 0;
				ym = (x$2 = y.mant, ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j]));
			}
			if (xm < ym) {
				return -1;
			} else if (xm > ym) {
				return 1;
			}
		}
		return 0;
	};
	Float.prototype.ucmp = function(y) { return this.$val.ucmp(y); };
	Float.ptr.prototype.Add = function(x, y) {
		var _r$3, _r$4, x, x$1, y, yneg, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; x = $f.x; x$1 = $f.x$1; y = $f.y; yneg = $f.yneg; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = y.validate(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (z.prec === 0) {
			z.prec = umax32(x.prec, y.prec);
		}
		/* */ if ((x.form === 1) && (y.form === 1)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ((x.form === 1) && (y.form === 1)) { */ case 5:
			yneg = y.neg;
			z.neg = x.neg;
			/* */ if (x.neg === yneg) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (x.neg === yneg) { */ case 7:
				$r = z.uadd(x, y); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 9; continue;
			/* } else { */ case 8:
				/* */ if (x.ucmp(y) > 0) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (x.ucmp(y) > 0) { */ case 11:
					$r = z.usub(x, y); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 13; continue;
				/* } else { */ case 12:
					z.neg = !z.neg;
					$r = z.usub(y, x); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 13:
			/* } */ case 9:
			$s = -1; return z;
		/* } */ case 6:
		if ((x.form === 2) && (y.form === 2) && !(x.neg === y.neg)) {
			z.acc = 0;
			z.form = 0;
			z.neg = false;
			$panic((x$1 = new ErrNaN.ptr("addition of infinities with opposite signs"), new x$1.constructor.elem(x$1)));
		}
		if ((x.form === 0) && (y.form === 0)) {
			z.acc = 0;
			z.form = 0;
			z.neg = x.neg && y.neg;
			$s = -1; return z;
		}
		/* */ if ((x.form === 2) || (y.form === 0)) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if ((x.form === 2) || (y.form === 0)) { */ case 16:
			_r$3 = z.Set(x); /* */ $s = 18; case 18: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 17:
		_r$4 = z.Set(y); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Add }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.yneg = yneg; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Add = function(x, y) { return this.$val.Add(x, y); };
	Float.ptr.prototype.Sub = function(x, y) {
		var _r$3, _r$4, x, x$1, y, yneg, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; x = $f.x; x$1 = $f.x$1; y = $f.y; yneg = $f.yneg; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = y.validate(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (z.prec === 0) {
			z.prec = umax32(x.prec, y.prec);
		}
		/* */ if ((x.form === 1) && (y.form === 1)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ((x.form === 1) && (y.form === 1)) { */ case 5:
			yneg = y.neg;
			z.neg = x.neg;
			/* */ if (!(x.neg === yneg)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(x.neg === yneg)) { */ case 7:
				$r = z.uadd(x, y); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 9; continue;
			/* } else { */ case 8:
				/* */ if (x.ucmp(y) > 0) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (x.ucmp(y) > 0) { */ case 11:
					$r = z.usub(x, y); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 13; continue;
				/* } else { */ case 12:
					z.neg = !z.neg;
					$r = z.usub(y, x); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 13:
			/* } */ case 9:
			$s = -1; return z;
		/* } */ case 6:
		if ((x.form === 2) && (y.form === 2) && x.neg === y.neg) {
			z.acc = 0;
			z.form = 0;
			z.neg = false;
			$panic((x$1 = new ErrNaN.ptr("subtraction of infinities with equal signs"), new x$1.constructor.elem(x$1)));
		}
		if ((x.form === 0) && (y.form === 0)) {
			z.acc = 0;
			z.form = 0;
			z.neg = x.neg && !y.neg;
			$s = -1; return z;
		}
		/* */ if ((x.form === 2) || (y.form === 0)) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if ((x.form === 2) || (y.form === 0)) { */ case 16:
			_r$3 = z.Set(x); /* */ $s = 18; case 18: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 17:
		_r$4 = z.Neg(y); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Sub }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.yneg = yneg; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Sub = function(x, y) { return this.$val.Sub(x, y); };
	Float.ptr.prototype.Mul = function(x, y) {
		var x, x$1, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; x = $f.x; x$1 = $f.x$1; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = y.validate(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (z.prec === 0) {
			z.prec = umax32(x.prec, y.prec);
		}
		z.neg = !(x.neg === y.neg);
		/* */ if ((x.form === 1) && (y.form === 1)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ((x.form === 1) && (y.form === 1)) { */ case 5:
			$r = z.umul(x, y); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return z;
		/* } */ case 6:
		z.acc = 0;
		if ((x.form === 0) && (y.form === 2) || (x.form === 2) && (y.form === 0)) {
			z.form = 0;
			z.neg = false;
			$panic((x$1 = new ErrNaN.ptr("multiplication of zero with infinity"), new x$1.constructor.elem(x$1)));
		}
		if ((x.form === 2) || (y.form === 2)) {
			z.form = 2;
			$s = -1; return z;
		}
		z.form = 0;
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Mul }; } $f.x = x; $f.x$1 = x$1; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Mul = function(x, y) { return this.$val.Mul(x, y); };
	Float.ptr.prototype.Quo = function(x, y) {
		var x, x$1, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; x = $f.x; x$1 = $f.x$1; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = y.validate(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (z.prec === 0) {
			z.prec = umax32(x.prec, y.prec);
		}
		z.neg = !(x.neg === y.neg);
		/* */ if ((x.form === 1) && (y.form === 1)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ((x.form === 1) && (y.form === 1)) { */ case 5:
			$r = z.uquo(x, y); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return z;
		/* } */ case 6:
		z.acc = 0;
		if ((x.form === 0) && (y.form === 0) || (x.form === 2) && (y.form === 2)) {
			z.form = 0;
			z.neg = false;
			$panic((x$1 = new ErrNaN.ptr("division of zero by zero or infinity by infinity"), new x$1.constructor.elem(x$1)));
		}
		if ((x.form === 0) || (y.form === 2)) {
			z.form = 0;
			$s = -1; return z;
		}
		z.form = 2;
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Quo }; } $f.x = x; $f.x$1 = x$1; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Quo = function(x, y) { return this.$val.Quo(x, y); };
	Float.ptr.prototype.Cmp = function(y) {
		var _1, mx, my, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; mx = $f.mx; my = $f.my; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = y.validate(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		mx = x.ord();
		my = y.ord();
		if (mx < my) {
			$s = -1; return -1;
		} else if (mx > my) {
			$s = -1; return 1;
		}
		_1 = mx;
		if (_1 === (-1)) {
			$s = -1; return y.ucmp(x);
		} else if (_1 === (1)) {
			$s = -1; return x.ucmp(y);
		}
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Cmp }; } $f._1 = _1; $f.mx = mx; $f.my = my; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Cmp = function(y) { return this.$val.Cmp(y); };
	Float.ptr.prototype.ord = function() {
		var _1, m, x;
		x = this;
		m = 0;
		_1 = x.form;
		if (_1 === (1)) {
			m = 1;
		} else if (_1 === (0)) {
			return 0;
		} else if (_1 === (2)) {
			m = 2;
		}
		if (x.neg) {
			m = -m;
		}
		return m;
	};
	Float.prototype.ord = function() { return this.$val.ord(); };
	umax32 = function(x, y) {
		var x, y;
		if (x > y) {
			return x;
		}
		return y;
	};
	Float.ptr.prototype.SetString = function(s) {
		var _r$3, _tuple, err, f, s, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tuple = $f._tuple; err = $f.err; f = $f.f; s = $f.s; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.Parse(s, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		f = _tuple[0];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			$s = -1; return [f, true];
		}
		$s = -1; return [ptrType.nil, false];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.SetString }; } $f._r$3 = _r$3; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.s = s; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.SetString = function(s) { return this.$val.SetString(s); };
	Float.ptr.prototype.scan = function(r, base) {
		var _1, _2, _arg, _arg$1, _arg$2, _arg$3, _r$10, _r$11, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, b, base, d, ebase, err, exp, exp2, exp5, f, fcount, p, prec, r, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; base = $f.base; d = $f.d; ebase = $f.ebase; err = $f.err; exp = $f.exp; exp2 = $f.exp2; exp5 = $f.exp5; f = $f.f; fcount = $f.fcount; p = $f.p; prec = $f.prec; r = $f.r; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = ptrType.nil;
		b = 0;
		err = $ifaceNil;
		z = this;
		prec = z.prec;
		if (prec === 0) {
			prec = 64;
		}
		z.form = 0;
		_r$3 = scanSign(r); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		z.neg = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [f, b, err];
		}
		fcount = 0;
		_r$4 = z.mant.scan(r, base, true); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$1 = _r$4;
		z.mant = _tuple$1[0];
		b = _tuple$1[1];
		fcount = _tuple$1[2];
		err = _tuple$1[3];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [f, b, err];
		}
		exp = new $Int64(0, 0);
		ebase = 0;
		_r$5 = scanExponent(r, true); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$2 = _r$5;
		exp = _tuple$2[0];
		ebase = _tuple$2[1];
		err = _tuple$2[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [f, b, err];
		}
		if (z.mant.$length === 0) {
			z.prec = prec;
			z.acc = 0;
			z.form = 0;
			f = z;
			$s = -1; return [f, b, err];
		}
		exp2 = (x = $mul64((new $Int64(0, z.mant.$length)), new $Int64(0, 32)), x$1 = fnorm(z.mant), new $Int64(x.$high - x$1.$high, x.$low - x$1.$low));
		exp5 = new $Int64(0, 0);
		if (fcount < 0) {
			d = (new $Int64(0, fcount));
			_1 = b;
			if (_1 === (10)) {
				exp5 = d;
				exp2 = (x$2 = d, new $Int64(exp2.$high + x$2.$high, exp2.$low + x$2.$low));
			} else if (_1 === (2)) {
				exp2 = (x$3 = d, new $Int64(exp2.$high + x$3.$high, exp2.$low + x$3.$low));
			} else if (_1 === (16)) {
				exp2 = (x$4 = $mul64(d, new $Int64(0, 4)), new $Int64(exp2.$high + x$4.$high, exp2.$low + x$4.$low));
			} else {
				$panic(new $String("unexpected mantissa base"));
			}
		}
		_2 = ebase;
		if (_2 === (10)) {
			exp5 = (x$5 = exp, new $Int64(exp5.$high + x$5.$high, exp5.$low + x$5.$low));
			exp2 = (x$6 = exp, new $Int64(exp2.$high + x$6.$high, exp2.$low + x$6.$low));
		} else if (_2 === (2)) {
			exp2 = (x$7 = exp, new $Int64(exp2.$high + x$7.$high, exp2.$low + x$7.$low));
		} else {
			$panic(new $String("unexpected exponent base"));
		}
		/* */ if ((-1 < exp2.$high || (-1 === exp2.$high && 2147483648 <= exp2.$low)) && (exp2.$high < 0 || (exp2.$high === 0 && exp2.$low <= 2147483647))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((-1 < exp2.$high || (-1 === exp2.$high && 2147483648 <= exp2.$low)) && (exp2.$high < 0 || (exp2.$high === 0 && exp2.$low <= 2147483647))) { */ case 4:
			z.prec = prec;
			z.form = 1;
			z.exp = (((exp2.$low + ((exp2.$high >> 31) * 4294967296)) >> 0));
			f = z;
			$s = 6; continue;
		/* } else { */ case 5:
			_r$6 = fmt.Errorf("exponent overflow", new sliceType([])); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			err = _r$6;
			$s = -1; return [f, b, err];
		/* } */ case 6:
		/* */ if ((exp5.$high === 0 && exp5.$low === 0)) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ((exp5.$high === 0 && exp5.$low === 0)) { */ case 8:
			$r = z.round(0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return [f, b, err];
		/* } */ case 9:
		_r$7 = new Float.ptr(0, 0, 0, 0, false, nat.nil, 0).SetPrec(z.Prec() + 64 >>> 0); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		p = _r$7;
		/* */ if ((exp5.$high < 0 || (exp5.$high === 0 && exp5.$low < 0))) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((exp5.$high < 0 || (exp5.$high === 0 && exp5.$low < 0))) { */ case 12:
			_arg = z;
			_r$8 = p.pow5(((x$8 = new $Int64(-exp5.$high, -exp5.$low), new $Uint64(x$8.$high, x$8.$low)))); /* */ $s = 15; case 15: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_arg$1 = _r$8;
			_r$9 = z.Quo(_arg, _arg$1); /* */ $s = 16; case 16: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
			$s = 14; continue;
		/* } else { */ case 13:
			_arg$2 = z;
			_r$10 = p.pow5((new $Uint64(exp5.$high, exp5.$low))); /* */ $s = 17; case 17: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_arg$3 = _r$10;
			_r$11 = z.Mul(_arg$2, _arg$3); /* */ $s = 18; case 18: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$11;
		/* } */ case 14:
		$s = -1; return [f, b, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.scan }; } $f._1 = _1; $f._2 = _2; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.base = base; $f.d = d; $f.ebase = ebase; $f.err = err; $f.exp = exp; $f.exp2 = exp2; $f.exp5 = exp5; $f.f = f; $f.fcount = fcount; $f.p = p; $f.prec = prec; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.scan = function(r, base) { return this.$val.scan(r, base); };
	Float.ptr.prototype.pow5 = function(n) {
		var _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, f, n, x, x$1, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; f = $f.f; n = $f.n; x = $f.x; x$1 = $f.x$1; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if ((n.$high < 0 || (n.$high === 0 && n.$low <= 27))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((n.$high < 0 || (n.$high === 0 && n.$low <= 27))) { */ case 1:
			_r$3 = z.SetUint64((($flatten64(n) < 0 || $flatten64(n) >= pow5tab.length) ? ($throwRuntimeError("index out of range"), undefined) : pow5tab[$flatten64(n)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		_r$4 = z.SetUint64(pow5tab[27]); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		n = (x = new $Uint64(0, 27), new $Uint64(n.$high - x.$high, n.$low - x.$low));
		_r$5 = new Float.ptr(0, 0, 0, 0, false, nat.nil, 0).SetPrec(z.Prec() + 64 >>> 0); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$6 = _r$5.SetUint64(new $Uint64(0, 5)); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		f = _r$6;
		/* while (true) { */ case 7:
			/* if (!((n.$high > 0 || (n.$high === 0 && n.$low > 0)))) { break; } */ if(!((n.$high > 0 || (n.$high === 0 && n.$low > 0)))) { $s = 8; continue; }
			/* */ if (!((x$1 = new $Uint64(n.$high & 0, (n.$low & 1) >>> 0), (x$1.$high === 0 && x$1.$low === 0)))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!((x$1 = new $Uint64(n.$high & 0, (n.$low & 1) >>> 0), (x$1.$high === 0 && x$1.$low === 0)))) { */ case 9:
				_r$7 = z.Mul(z, f); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
			/* } */ case 10:
			_r$8 = f.Mul(f, f); /* */ $s = 12; case 12: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$8;
			n = $shiftRightUint64(n, (1));
		/* } */ $s = 7; continue; case 8:
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.pow5 }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.f = f; $f.n = n; $f.x = x; $f.x$1 = x$1; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.pow5 = function(n) { return this.$val.pow5(n); };
	Float.ptr.prototype.Parse = function(s, base) {
		var _r$3, _r$4, _tuple, _tuple$1, b, base, ch, err, err2, f, r, s, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; base = $f.base; ch = $f.ch; err = $f.err; err2 = $f.err2; f = $f.f; r = $f.r; s = $f.s; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = ptrType.nil;
		b = 0;
		err = $ifaceNil;
		z = this;
		if ((s.length === 3) && (s === "Inf" || s === "inf")) {
			f = z.SetInf(false);
			$s = -1; return [f, b, err];
		}
		if ((s.length === 4) && ((s.charCodeAt(0) === 43) || (s.charCodeAt(0) === 45)) && ($substring(s, 1) === "Inf" || $substring(s, 1) === "inf")) {
			f = z.SetInf(s.charCodeAt(0) === 45);
			$s = -1; return [f, b, err];
		}
		r = strings.NewReader(s);
		_r$3 = z.scan(r, base); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		f = _tuple[0];
		b = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [f, b, err];
		}
		_tuple$1 = r.ReadByte();
		ch = _tuple$1[0];
		err2 = _tuple$1[1];
		/* */ if ($interfaceIsEqual(err2, $ifaceNil)) { $s = 2; continue; }
		/* */ if (!($interfaceIsEqual(err2, io.EOF))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($interfaceIsEqual(err2, $ifaceNil)) { */ case 2:
			_r$4 = fmt.Errorf("expected end of string, found %q", new sliceType([new $Uint8(ch)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err = _r$4;
			$s = 4; continue;
		/* } else if (!($interfaceIsEqual(err2, io.EOF))) { */ case 3:
			err = err2;
		/* } */ case 4:
		$s = -1; return [f, b, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Parse }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.base = base; $f.ch = ch; $f.err = err; $f.err2 = err2; $f.f = f; $f.r = r; $f.s = s; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Parse = function(s, base) { return this.$val.Parse(s, base); };
	Float.ptr.prototype.Scan = function(s, ch) {
		var _r$3, _tuple, ch, err, s, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tuple = $f._tuple; ch = $f.ch; err = $f.err; s = $f.s; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		$r = s.SkipSpace(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = z.scan((x = new byteReader.ptr(s), new x.constructor.elem(x)), 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		err = _tuple[2];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Scan }; } $f._r$3 = _r$3; $f._tuple = _tuple; $f.ch = ch; $f.err = err; $f.s = s; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Scan = function(s, ch) { return this.$val.Scan(s, ch); };
	Float.ptr.prototype.GobEncode = function() {
		var _q, b, buf, n, sz, x;
		x = this;
		if (x === ptrType.nil) {
			return [sliceType$1.nil, $ifaceNil];
		}
		sz = 6;
		n = 0;
		if (x.form === 1) {
			n = (((_q = ((x.prec + 31 >>> 0)) / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
			if (x.mant.$length < n) {
				n = x.mant.$length;
			}
			sz = sz + ((4 + ($imul(n, 4)) >> 0)) >> 0;
		}
		buf = $makeSlice(sliceType$1, sz);
		(0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0] = 1);
		b = ((((((((x.mode & 7) >>> 0) << 24 >>> 24)) << 5 << 24 >>> 24) | ((((((x.acc + 1 << 24 >> 24)) & 3) << 24 >>> 24)) << 3 << 24 >>> 24)) >>> 0) | (((((x.form & 3) >>> 0) << 24 >>> 24)) << 1 << 24 >>> 24)) >>> 0;
		if (x.neg) {
			b = (b | (1)) >>> 0;
		}
		(1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1] = b);
		$clone(binary.BigEndian, binary.bigEndian).PutUint32($subslice(buf, 2), x.prec);
		if (x.form === 1) {
			$clone(binary.BigEndian, binary.bigEndian).PutUint32($subslice(buf, 6), ((x.exp >>> 0)));
			$subslice(x.mant, (x.mant.$length - n >> 0)).bytes($subslice(buf, 10));
		}
		return [buf, $ifaceNil];
	};
	Float.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Float.ptr.prototype.GobDecode = function(buf) {
		var _r$3, _r$4, b, buf, oldMode, oldPrec, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; b = $f.b; buf = $f.buf; oldMode = $f.oldMode; oldPrec = $f.oldPrec; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (buf.$length === 0) {
			Float.copy(z, new Float.ptr(0, 0, 0, 0, false, nat.nil, 0));
			$s = -1; return $ifaceNil;
		}
		/* */ if (!(((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 1))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 1))) { */ case 1:
			_r$3 = fmt.Errorf("Float.GobDecode: encoding version %d not supported", new sliceType([new $Uint8((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]))])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		oldPrec = z.prec;
		oldMode = z.mode;
		b = (1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]);
		z.mode = ((((((b >>> 5 << 24 >>> 24)) & 7) >>> 0) << 24 >>> 24));
		z.acc = ((((((b >>> 3 << 24 >>> 24)) & 3) >>> 0) << 24 >> 24)) - 1 << 24 >> 24;
		z.form = ((((((b >>> 1 << 24 >>> 24)) & 3) >>> 0) << 24 >>> 24));
		z.neg = !((((b & 1) >>> 0) === 0));
		z.prec = $clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(buf, 2));
		if (z.form === 1) {
			z.exp = (($clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(buf, 6)) >> 0));
			z.mant = z.mant.setBytes($subslice(buf, 10));
		}
		/* */ if (!((oldPrec === 0))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((oldPrec === 0))) { */ case 4:
			z.mode = oldMode;
			_r$4 = z.SetPrec(((oldPrec >>> 0))); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 5:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.GobDecode }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f.b = b; $f.buf = buf; $f.oldMode = oldMode; $f.oldPrec = oldPrec; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.GobDecode = function(buf) { return this.$val.GobDecode(buf); };
	Float.ptr.prototype.MarshalText = function() {
		var _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, buf, err, text, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; buf = $f.buf; err = $f.err; text = $f.text; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		text = sliceType$1.nil;
		err = $ifaceNil;
		x = this;
		if (x === ptrType.nil) {
			_tmp = (new sliceType$1($stringToBytes("<nil>")));
			_tmp$1 = $ifaceNil;
			text = _tmp;
			err = _tmp$1;
			$s = -1; return [text, err];
		}
		buf = sliceType$1.nil;
		_r$3 = x.Append(buf, 103, -1); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tmp$2 = _r$3;
		_tmp$3 = $ifaceNil;
		text = _tmp$2;
		err = _tmp$3;
		$s = -1; return [text, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.MarshalText }; } $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.buf = buf; $f.err = err; $f.text = text; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Float.ptr.prototype.UnmarshalText = function(text) {
		var _r$3, _r$4, _tuple, err, text, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; err = $f.err; text = $f.text; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.Parse(($bytesToString(text)), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		err = _tuple[2];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$4 = fmt.Errorf("math/big: cannot unmarshal %q into a *big.Float (%v)", new sliceType([text, err])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err = _r$4;
		/* } */ case 3:
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.UnmarshalText }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.err = err; $f.text = text; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.UnmarshalText = function(text) { return this.$val.UnmarshalText(text); };
	Float.ptr.prototype.Text = function(format, prec) {
		var _r$3, cap, format, prec, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; cap = $f.cap; format = $f.format; prec = $f.prec; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		cap = 10;
		if (prec > 0) {
			cap = cap + (prec) >> 0;
		}
		_r$3 = x.Append($makeSlice(sliceType$1, 0, cap), format, prec); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return ($bytesToString(_r$3));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Text }; } $f._r$3 = _r$3; $f.cap = cap; $f.format = format; $f.prec = prec; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Text = function(format, prec) { return this.$val.Text(format, prec); };
	Float.ptr.prototype.String = function() {
		var _r$3, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r$3 = x.Text(103, 10); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.String }; } $f._r$3 = _r$3; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.String = function() { return this.$val.String(); };
	Float.ptr.prototype.Append = function(buf, fmt$1, prec) {
		var _1, _2, _3, _4, _r$3, _r$4, buf, d, eprec, exp, fmt$1, prec, shortest, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _r$3 = $f._r$3; _r$4 = $f._r$4; buf = $f.buf; d = $f.d; eprec = $f.eprec; exp = $f.exp; fmt$1 = $f.fmt$1; prec = $f.prec; shortest = $f.shortest; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = [d];
		x = this;
		if (x.neg) {
			buf = $append(buf, 45);
		}
		if (x.form === 2) {
			if (!x.neg) {
				buf = $append(buf, 43);
			}
			$s = -1; return $appendSlice(buf, "Inf");
		}
			_1 = fmt$1;
			/* */ if (_1 === (98)) { $s = 2; continue; }
			/* */ if (_1 === (112)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (98)) { */ case 2:
				_r$3 = x.fmtB(buf); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$s = -1; return _r$3;
			/* } else if (_1 === (112)) { */ case 3:
				_r$4 = x.fmtP(buf); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return _r$4;
			/* } */ case 4:
		case 1:
		d[0] = new decimal.ptr(sliceType$1.nil, 0);
		/* */ if (x.form === 1) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (x.form === 1) { */ case 7:
			$r = d[0].init(x.mant, ((x.exp >> 0)) - x.mant.bitLen() >> 0); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		shortest = false;
		/* */ if (prec < 0) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (prec < 0) { */ case 10:
			shortest = true;
			$r = roundShortest(d[0], x); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_2 = fmt$1;
			if ((_2 === (101)) || (_2 === (69))) {
				prec = d[0].mant.$length - 1 >> 0;
			} else if (_2 === (102)) {
				prec = max(d[0].mant.$length - d[0].exp >> 0, 0);
			} else if ((_2 === (103)) || (_2 === (71))) {
				prec = d[0].mant.$length;
			}
			$s = 12; continue;
		/* } else { */ case 11:
			_3 = fmt$1;
			if ((_3 === (101)) || (_3 === (69))) {
				d[0].round(1 + prec >> 0);
			} else if (_3 === (102)) {
				d[0].round(d[0].exp + prec >> 0);
			} else if ((_3 === (103)) || (_3 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				d[0].round(prec);
			}
		/* } */ case 12:
		_4 = fmt$1;
		if ((_4 === (101)) || (_4 === (69))) {
			$s = -1; return fmtE(buf, fmt$1, prec, $clone(d[0], decimal));
		} else if (_4 === (102)) {
			$s = -1; return fmtF(buf, prec, $clone(d[0], decimal));
		} else if ((_4 === (103)) || (_4 === (71))) {
			eprec = prec;
			if (eprec > d[0].mant.$length && d[0].mant.$length >= d[0].exp) {
				eprec = d[0].mant.$length;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = d[0].exp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > d[0].mant.$length) {
					prec = d[0].mant.$length;
				}
				$s = -1; return fmtE(buf, (fmt$1 + 101 << 24 >>> 24) - 103 << 24 >>> 24, prec - 1 >> 0, $clone(d[0], decimal));
			}
			if (prec > d[0].exp) {
				prec = d[0].mant.$length;
			}
			$s = -1; return fmtF(buf, max(prec - d[0].exp >> 0, 0), $clone(d[0], decimal));
		}
		if (x.neg) {
			buf = $subslice(buf, 0, (buf.$length - 1 >> 0));
		}
		$s = -1; return $append(buf, 37, fmt$1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Append }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.buf = buf; $f.d = d; $f.eprec = eprec; $f.exp = exp; $f.fmt$1 = fmt$1; $f.prec = prec; $f.shortest = shortest; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Append = function(buf, fmt$1, prec) { return this.$val.Append(buf, fmt$1, prec); };
	roundShortest = function(d, x) {
		var _i, _ref, d, exp, i, inclusive, l, lower, m, mant, okdown, okup, s, tmp, u, upper, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; d = $f.d; exp = $f.exp; i = $f.i; inclusive = $f.inclusive; l = $f.l; lower = $f.lower; m = $f.m; mant = $f.mant; okdown = $f.okdown; okup = $f.okup; s = $f.s; tmp = $f.tmp; u = $f.u; upper = $f.upper; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (d.mant.$length === 0) {
			$s = -1; return;
		}
		mant = (nat.nil).set(x.mant);
		exp = ((x.exp >> 0)) - mant.bitLen() >> 0;
		s = mant.bitLen() - (((x.prec + 1 >>> 0) >> 0)) >> 0;
		if (s < 0) {
			mant = mant.shl(mant, ((-s >>> 0)));
		} else if (s > 0) {
			mant = mant.shr(mant, ((s >>> 0)));
		}
		exp = exp + (s) >> 0;
		lower = new decimal.ptr(sliceType$1.nil, 0);
		tmp = nat.nil;
		$r = lower.init(tmp.sub(mant, natOne), exp); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		upper = new decimal.ptr(sliceType$1.nil, 0);
		$r = upper.init(tmp.add(mant, natOne), exp); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		inclusive = (((0 >= mant.$length ? ($throwRuntimeError("index out of range"), undefined) : mant.$array[mant.$offset + 0]) & 2) >>> 0) === 0;
		_ref = d.mant;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			m = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			l = lower.at(i);
			u = upper.at(i);
			okdown = !((l === m)) || inclusive && ((i + 1 >> 0) === lower.mant.$length);
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.mant.$length);
			if (okdown && okup) {
				d.round(i + 1 >> 0);
				$s = -1; return;
			} else if (okdown) {
				d.roundDown(i + 1 >> 0);
				$s = -1; return;
			} else if (okup) {
				d.roundUp(i + 1 >> 0);
				$s = -1; return;
			}
			_i++;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: roundShortest }; } $f._i = _i; $f._ref = _ref; $f.d = d; $f.exp = exp; $f.i = i; $f.inclusive = inclusive; $f.l = l; $f.lower = lower; $f.m = m; $f.mant = mant; $f.okdown = okdown; $f.okup = okup; $f.s = s; $f.tmp = tmp; $f.u = u; $f.upper = upper; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	fmtE = function(buf, fmt$1, prec, d) {
		var buf, ch, d, exp, fmt$1, i, m, prec, x, x$1;
		ch = 48;
		if (d.mant.$length > 0) {
			ch = (x = d.mant, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		}
		buf = $append(buf, ch);
		if (prec > 0) {
			buf = $append(buf, 46);
			i = 1;
			m = min(d.mant.$length, prec + 1 >> 0);
			if (i < m) {
				buf = $appendSlice(buf, $subslice(d.mant, i, m));
				i = m;
			}
			while (true) {
				if (!(i <= prec)) { break; }
				buf = $append(buf, 48);
				i = i + (1) >> 0;
			}
		}
		buf = $append(buf, fmt$1);
		exp = new $Int64(0, 0);
		if (d.mant.$length > 0) {
			exp = (x$1 = (new $Int64(0, d.exp)), new $Int64(x$1.$high - 0, x$1.$low - 1));
		}
		if ((exp.$high < 0 || (exp.$high === 0 && exp.$low < 0))) {
			ch = 45;
			exp = new $Int64(-exp.$high, -exp.$low);
		} else {
			ch = 43;
		}
		buf = $append(buf, ch);
		if ((exp.$high < 0 || (exp.$high === 0 && exp.$low < 10))) {
			buf = $append(buf, 48);
		}
		return strconv.AppendInt(buf, exp, 10);
	};
	fmtF = function(buf, prec, d) {
		var buf, d, i, m, prec;
		if (d.exp > 0) {
			m = min(d.mant.$length, d.exp);
			buf = $appendSlice(buf, $subslice(d.mant, 0, m));
			while (true) {
				if (!(m < d.exp)) { break; }
				buf = $append(buf, 48);
				m = m + (1) >> 0;
			}
		} else {
			buf = $append(buf, 48);
		}
		if (prec > 0) {
			buf = $append(buf, 46);
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				buf = $append(buf, d.at(d.exp + i >> 0));
				i = i + (1) >> 0;
			}
		}
		return buf;
	};
	Float.ptr.prototype.fmtB = function(buf) {
		var _arg, _arg$1, _r$3, buf, e, m, w, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$3 = $f._r$3; buf = $f.buf; e = $f.e; m = $f.m; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if (x.form === 0) {
			$s = -1; return $append(buf, 48);
		}
		if (false && !((x.form === 1))) {
			$panic(new $String("non-finite float"));
		}
		m = x.mant;
		w = $imul(((x.mant.$length >>> 0)), 32) >>> 0;
		if (w < x.prec) {
			m = (nat.nil).shl(m, (((x.prec - w >>> 0) >>> 0)));
		} else if (w > x.prec) {
			m = (nat.nil).shr(m, (((w - x.prec >>> 0) >>> 0)));
		}
		_arg = buf;
		_r$3 = m.utoa(10); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$1 = _r$3;
		buf = $appendSlice(_arg, _arg$1);
		buf = $append(buf, 112);
		e = (x$1 = (new $Int64(0, x.exp)), x$2 = (new $Int64(0, x.prec)), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		if ((e.$high > 0 || (e.$high === 0 && e.$low >= 0))) {
			buf = $append(buf, 43);
		}
		$s = -1; return strconv.AppendInt(buf, e, 10);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.fmtB }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$3 = _r$3; $f.buf = buf; $f.e = e; $f.m = m; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.fmtB = function(buf) { return this.$val.fmtB(buf); };
	Float.ptr.prototype.fmtP = function(buf) {
		var _arg, _arg$1, _r$3, _r$4, buf, i, m, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$3 = $f._r$3; _r$4 = $f._r$4; buf = $f.buf; i = $f.i; m = $f.m; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if (x.form === 0) {
			$s = -1; return $append(buf, 48);
		}
		if (false && !((x.form === 1))) {
			$panic(new $String("non-finite float"));
		}
		m = x.mant;
		i = 0;
		while (true) {
			if (!(i < m.$length && (((i < 0 || i >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + i]) === 0))) { break; }
			i = i + (1) >> 0;
		}
		m = $subslice(m, i);
		buf = $appendSlice(buf, "0x.");
		_arg = buf;
		_r$3 = m.utoa(16); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = bytes.TrimRight(_r$3, "0"); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg$1 = _r$4;
		buf = $appendSlice(_arg, _arg$1);
		buf = $append(buf, 112);
		if (x.exp >= 0) {
			buf = $append(buf, 43);
		}
		$s = -1; return strconv.AppendInt(buf, (new $Int64(0, x.exp)), 10);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.fmtP }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.buf = buf; $f.i = i; $f.m = m; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.fmtP = function(buf) { return this.$val.fmtP(buf); };
	min = function(x, y) {
		var x, y;
		if (x < y) {
			return x;
		}
		return y;
	};
	Float.ptr.prototype.Format = function(s, format) {
		var _1, _arg, _arg$1, _arg$2, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, buf, format, hasPrec, hasWidth, padding, prec, s, sign, width, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buf = $f.buf; format = $f.format; hasPrec = $f.hasPrec; hasWidth = $f.hasWidth; padding = $f.padding; prec = $f.prec; s = $f.s; sign = $f.sign; width = $f.width; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r$3 = s.Precision(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		prec = _tuple[0];
		hasPrec = _tuple[1];
		if (!hasPrec) {
			prec = 6;
		}
			_1 = format;
			/* */ if ((_1 === (101)) || (_1 === (69)) || (_1 === (102)) || (_1 === (98)) || (_1 === (112))) { $s = 3; continue; }
			/* */ if (_1 === (70)) { $s = 4; continue; }
			/* */ if (_1 === (118)) { $s = 5; continue; }
			/* */ if ((_1 === (103)) || (_1 === (71))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_1 === (101)) || (_1 === (69)) || (_1 === (102)) || (_1 === (98)) || (_1 === (112))) { */ case 3:
				$s = 8; continue;
			/* } else if (_1 === (70)) { */ case 4:
				format = 102;
				$s = 8; continue;
			/* } else if (_1 === (118)) { */ case 5:
				format = 103;
				if (!hasPrec) {
					prec = -1;
				}
				$s = 8; continue;
			/* } else if ((_1 === (103)) || (_1 === (71))) { */ case 6:
				if (!hasPrec) {
					prec = -1;
				}
				$s = 8; continue;
			/* } else { */ case 7:
				_arg = s;
				_arg$1 = new $Int32(format);
				_r$4 = x.String(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_arg$2 = new $String(_r$4);
				_r$5 = fmt.Fprintf(_arg, "%%!%c(*big.Float=%s)", new sliceType([_arg$1, _arg$2])); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				$s = -1; return;
			/* } */ case 8:
		case 2:
		buf = sliceType$1.nil;
		_r$6 = x.Append(buf, ((format << 24 >>> 24)), prec); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		buf = _r$6;
		if (buf.$length === 0) {
			buf = (new sliceType$1($stringToBytes("?")));
		}
		sign = "";
			/* */ if (((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 45)) { $s = 13; continue; }
			/* */ if (((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 43)) { $s = 14; continue; }
			_r$7 = s.Flag(43); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if (_r$7) { $s = 15; continue; }
			_r$8 = s.Flag(32); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			/* */ if (_r$8) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 45)) { */ case 13:
				sign = "-";
				buf = $subslice(buf, 1);
				$s = 17; continue;
			/* } else if (((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 43)) { */ case 14:
				sign = "+";
				_r$9 = s.Flag(32); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				/* */ if (_r$9) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (_r$9) { */ case 20:
					sign = " ";
				/* } */ case 21:
				buf = $subslice(buf, 1);
				$s = 17; continue;
			/* } else if (_r$7) { */ case 15:
				sign = "+";
				$s = 17; continue;
			/* } else if (_r$8) { */ case 16:
				sign = " ";
			/* } */ case 17:
		case 12:
		padding = 0;
		_r$10 = s.Width(); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_tuple$1 = _r$10;
		width = _tuple$1[0];
		hasWidth = _tuple$1[1];
		if (hasWidth && width > (sign.length + buf.$length >> 0)) {
			padding = (width - sign.length >> 0) - buf.$length >> 0;
		}
			_r$11 = s.Flag(48); /* */ $s = 29; case 29: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			/* */ if (_r$11 && !x.IsInf()) { $s = 25; continue; }
			_r$12 = s.Flag(45); /* */ $s = 30; case 30: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			/* */ if (_r$12) { $s = 26; continue; }
			/* */ $s = 27; continue;
			/* if (_r$11 && !x.IsInf()) { */ case 25:
				$r = writeMultiple(s, sign, 1); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = writeMultiple(s, "0", padding); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$13 = s.Write(buf); /* */ $s = 33; case 33: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$13;
				$s = 28; continue;
			/* } else if (_r$12) { */ case 26:
				$r = writeMultiple(s, sign, 1); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$14 = s.Write(buf); /* */ $s = 35; case 35: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_r$14;
				$r = writeMultiple(s, " ", padding); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 28; continue;
			/* } else { */ case 27:
				$r = writeMultiple(s, " ", padding); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = writeMultiple(s, sign, 1); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$15 = s.Write(buf); /* */ $s = 39; case 39: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$15;
			/* } */ case 28:
		case 24:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Format }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.format = format; $f.hasPrec = hasPrec; $f.hasWidth = hasWidth; $f.padding = padding; $f.prec = prec; $f.s = s; $f.sign = sign; $f.width = width; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Format = function(s, format) { return this.$val.Format(s, format); };
	Int.ptr.prototype.Sign = function() {
		var x;
		x = this;
		if (x.abs.$length === 0) {
			return 0;
		}
		if (x.neg) {
			return -1;
		}
		return 1;
	};
	Int.prototype.Sign = function() { return this.$val.Sign(); };
	Int.ptr.prototype.SetInt64 = function(x) {
		var neg, x, z;
		z = this;
		neg = false;
		if ((x.$high < 0 || (x.$high === 0 && x.$low < 0))) {
			neg = true;
			x = new $Int64(-x.$high, -x.$low);
		}
		z.abs = z.abs.setUint64((new $Uint64(x.$high, x.$low)));
		z.neg = neg;
		return z;
	};
	Int.prototype.SetInt64 = function(x) { return this.$val.SetInt64(x); };
	Int.ptr.prototype.SetUint64 = function(x) {
		var x, z;
		z = this;
		z.abs = z.abs.setUint64(x);
		z.neg = false;
		return z;
	};
	Int.prototype.SetUint64 = function(x) { return this.$val.SetUint64(x); };
	NewInt = function(x) {
		var x;
		return new Int.ptr(false, nat.nil).SetInt64(x);
	};
	$pkg.NewInt = NewInt;
	Int.ptr.prototype.Set = function(x) {
		var x, z;
		z = this;
		if (!(z === x)) {
			z.abs = z.abs.set(x.abs);
			z.neg = x.neg;
		}
		return z;
	};
	Int.prototype.Set = function(x) { return this.$val.Set(x); };
	Int.ptr.prototype.Bits = function() {
		var x, x$1;
		x = this;
		return (x$1 = x.abs, $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length));
	};
	Int.prototype.Bits = function() { return this.$val.Bits(); };
	Int.ptr.prototype.SetBits = function(abs) {
		var abs, z;
		z = this;
		z.abs = ($subslice(new nat(abs.$array), abs.$offset, abs.$offset + abs.$length)).norm();
		z.neg = false;
		return z;
	};
	Int.prototype.SetBits = function(abs) { return this.$val.SetBits(abs); };
	Int.ptr.prototype.Abs = function(x) {
		var x, z;
		z = this;
		z.Set(x);
		z.neg = false;
		return z;
	};
	Int.prototype.Abs = function(x) { return this.$val.Abs(x); };
	Int.ptr.prototype.Neg = function(x) {
		var x, z;
		z = this;
		z.Set(x);
		z.neg = z.abs.$length > 0 && !z.neg;
		return z;
	};
	Int.prototype.Neg = function(x) { return this.$val.Neg(x); };
	Int.ptr.prototype.Add = function(x, y) {
		var neg, x, y, z;
		z = this;
		neg = x.neg;
		if (x.neg === y.neg) {
			z.abs = z.abs.add(x.abs, y.abs);
		} else {
			if (x.abs.cmp(y.abs) >= 0) {
				z.abs = z.abs.sub(x.abs, y.abs);
			} else {
				neg = !neg;
				z.abs = z.abs.sub(y.abs, x.abs);
			}
		}
		z.neg = z.abs.$length > 0 && neg;
		return z;
	};
	Int.prototype.Add = function(x, y) { return this.$val.Add(x, y); };
	Int.ptr.prototype.Sub = function(x, y) {
		var neg, x, y, z;
		z = this;
		neg = x.neg;
		if (!(x.neg === y.neg)) {
			z.abs = z.abs.add(x.abs, y.abs);
		} else {
			if (x.abs.cmp(y.abs) >= 0) {
				z.abs = z.abs.sub(x.abs, y.abs);
			} else {
				neg = !neg;
				z.abs = z.abs.sub(y.abs, x.abs);
			}
		}
		z.neg = z.abs.$length > 0 && neg;
		return z;
	};
	Int.prototype.Sub = function(x, y) { return this.$val.Sub(x, y); };
	Int.ptr.prototype.Mul = function(x, y) {
		var x, y, z;
		z = this;
		if (x === y) {
			z.abs = z.abs.sqr(x.abs);
			z.neg = false;
			return z;
		}
		z.abs = z.abs.mul(x.abs, y.abs);
		z.neg = z.abs.$length > 0 && !(x.neg === y.neg);
		return z;
	};
	Int.prototype.Mul = function(x, y) { return this.$val.Mul(x, y); };
	Int.ptr.prototype.MulRange = function(a, b) {
		var _tmp, _tmp$1, a, b, neg, x, x$1, z;
		z = this;
		if ((a.$high > b.$high || (a.$high === b.$high && a.$low > b.$low))) {
			return z.SetInt64(new $Int64(0, 1));
		} else if ((a.$high < 0 || (a.$high === 0 && a.$low <= 0)) && (b.$high > 0 || (b.$high === 0 && b.$low >= 0))) {
			return z.SetInt64(new $Int64(0, 0));
		}
		neg = false;
		if ((a.$high < 0 || (a.$high === 0 && a.$low < 0))) {
			neg = (x = (x$1 = new $Int64(b.$high - a.$high, b.$low - a.$low), new $Int64(x$1.$high & 0, (x$1.$low & 1) >>> 0)), (x.$high === 0 && x.$low === 0));
			_tmp = new $Int64(-b.$high, -b.$low);
			_tmp$1 = new $Int64(-a.$high, -a.$low);
			a = _tmp;
			b = _tmp$1;
		}
		z.abs = z.abs.mulRange((new $Uint64(a.$high, a.$low)), (new $Uint64(b.$high, b.$low)));
		z.neg = neg;
		return z;
	};
	Int.prototype.MulRange = function(a, b) { return this.$val.MulRange(a, b); };
	Int.ptr.prototype.Binomial = function(n, k) {
		var _r$3, _tmp, _tmp$1, a, b, k, n, x, x$1, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; a = $f.a; b = $f.b; k = $f.k; n = $f.n; x = $f.x; x$1 = $f.x$1; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		b = [b];
		z = this;
		if ((x = $div64(n, new $Int64(0, 2), false), (x.$high < k.$high || (x.$high === k.$high && x.$low < k.$low))) && (k.$high < n.$high || (k.$high === n.$high && k.$low <= n.$low))) {
			k = new $Int64(n.$high - k.$high, n.$low - k.$low);
		}
		_tmp = new Int.ptr(false, nat.nil);
		_tmp$1 = new Int.ptr(false, nat.nil);
		a[0] = $clone(_tmp, Int);
		b[0] = $clone(_tmp$1, Int);
		a[0].MulRange((x$1 = new $Int64(n.$high - k.$high, n.$low - k.$low), new $Int64(x$1.$high + 0, x$1.$low + 1)), n);
		b[0].MulRange(new $Int64(0, 1), k);
		_r$3 = z.Quo(a[0], b[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Binomial }; } $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.a = a; $f.b = b; $f.k = k; $f.n = n; $f.x = x; $f.x$1 = x$1; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Binomial = function(n, k) { return this.$val.Binomial(n, k); };
	Int.ptr.prototype.Quo = function(x, y) {
		var _r$3, _tuple, x, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tuple = $f._tuple; x = $f.x; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.abs.div(nat.nil, x.abs, y.abs); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		z.abs = _tuple[0];
		z.neg = z.abs.$length > 0 && !(x.neg === y.neg);
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Quo }; } $f._r$3 = _r$3; $f._tuple = _tuple; $f.x = x; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Quo = function(x, y) { return this.$val.Quo(x, y); };
	Int.ptr.prototype.Rem = function(x, y) {
		var _r$3, _tuple, x, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tuple = $f._tuple; x = $f.x; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = (nat.nil).div(z.abs, x.abs, y.abs); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		z.abs = _tuple[1];
		z.neg = z.abs.$length > 0 && x.neg;
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Rem }; } $f._r$3 = _r$3; $f._tuple = _tuple; $f.x = x; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Rem = function(x, y) { return this.$val.Rem(x, y); };
	Int.ptr.prototype.QuoRem = function(x, y, r) {
		var _r$3, _tmp, _tmp$1, _tuple, r, x, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; r = $f.r; x = $f.x; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.abs.div(r.abs, x.abs, y.abs); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		z.abs = _tuple[0];
		r.abs = _tuple[1];
		_tmp = z.abs.$length > 0 && !(x.neg === y.neg);
		_tmp$1 = r.abs.$length > 0 && x.neg;
		z.neg = _tmp;
		r.neg = _tmp$1;
		$s = -1; return [z, r];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.QuoRem }; } $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.r = r; $f.x = x; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.QuoRem = function(x, y, r) { return this.$val.QuoRem(x, y, r); };
	Int.ptr.prototype.Div = function(x, y) {
		var _r$3, r, x, y, y_neg, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; r = $f.r; x = $f.x; y = $f.y; y_neg = $f.y_neg; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = [r];
		z = this;
		y_neg = y.neg;
		r[0] = new Int.ptr(false, nat.nil);
		_r$3 = z.QuoRem(x, y, r[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		if (r[0].neg) {
			if (y_neg) {
				z.Add(z, intOne);
			} else {
				z.Sub(z, intOne);
			}
		}
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Div }; } $f._r$3 = _r$3; $f.r = r; $f.x = x; $f.y = y; $f.y_neg = y_neg; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Div = function(x, y) { return this.$val.Div(x, y); };
	Int.ptr.prototype.Mod = function(x, y) {
		var _r$3, q, x, y, y0, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; q = $f.q; x = $f.x; y = $f.y; y0 = $f.y0; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		y0 = y;
		if (z === y || alias(z.abs, y.abs)) {
			y0 = new Int.ptr(false, nat.nil).Set(y);
		}
		q = new Int.ptr(false, nat.nil);
		_r$3 = q.QuoRem(x, y, z); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		if (z.neg) {
			if (y0.neg) {
				z.Sub(z, y0);
			} else {
				z.Add(z, y0);
			}
		}
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Mod }; } $f._r$3 = _r$3; $f.q = q; $f.x = x; $f.y = y; $f.y0 = y0; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Mod = function(x, y) { return this.$val.Mod(x, y); };
	Int.ptr.prototype.DivMod = function(x, y, m) {
		var _r$3, m, x, y, y0, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; m = $f.m; x = $f.x; y = $f.y; y0 = $f.y0; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		y0 = y;
		if (z === y || alias(z.abs, y.abs)) {
			y0 = new Int.ptr(false, nat.nil).Set(y);
		}
		_r$3 = z.QuoRem(x, y, m); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		if (m.neg) {
			if (y0.neg) {
				z.Add(z, intOne);
				m.Sub(m, y0);
			} else {
				z.Sub(z, intOne);
				m.Add(m, y0);
			}
		}
		$s = -1; return [z, m];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.DivMod }; } $f._r$3 = _r$3; $f.m = m; $f.x = x; $f.y = y; $f.y0 = y0; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.DivMod = function(x, y, m) { return this.$val.DivMod(x, y, m); };
	Int.ptr.prototype.Cmp = function(y) {
		var r, x, y;
		r = 0;
		x = this;
		if (x.neg === y.neg) {
			r = x.abs.cmp(y.abs);
			if (x.neg) {
				r = -r;
			}
		} else if (x.neg) {
			r = -1;
		} else {
			r = 1;
		}
		return r;
	};
	Int.prototype.Cmp = function(y) { return this.$val.Cmp(y); };
	Int.ptr.prototype.CmpAbs = function(y) {
		var x, y;
		x = this;
		return x.abs.cmp(y.abs);
	};
	Int.prototype.CmpAbs = function(y) { return this.$val.CmpAbs(y); };
	low32 = function(x) {
		var x;
		if (x.$length === 0) {
			return 0;
		}
		return (((0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]) >>> 0));
	};
	low64 = function(x) {
		var v, x, x$1, x$2, x$3;
		if (x.$length === 0) {
			return new $Uint64(0, 0);
		}
		v = ((x$1 = (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]), new $Uint64(0, x$1.constructor === Number ? x$1 : 1)));
		if (true && x.$length > 1) {
			return (x$2 = $shiftLeft64(((x$3 = (1 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 1]), new $Uint64(0, x$3.constructor === Number ? x$3 : 1))), 32), new $Uint64(x$2.$high | v.$high, (x$2.$low | v.$low) >>> 0));
		}
		return v;
	};
	Int.ptr.prototype.Int64 = function() {
		var v, x, x$1;
		x = this;
		v = ((x$1 = low64(x.abs), new $Int64(x$1.$high, x$1.$low)));
		if (x.neg) {
			v = new $Int64(-v.$high, -v.$low);
		}
		return v;
	};
	Int.prototype.Int64 = function() { return this.$val.Int64(); };
	Int.ptr.prototype.Uint64 = function() {
		var x;
		x = this;
		return low64(x.abs);
	};
	Int.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Int.ptr.prototype.IsInt64 = function() {
		var w, x, x$1, x$2;
		x = this;
		if (x.abs.$length <= 2) {
			w = ((x$1 = low64(x.abs), new $Int64(x$1.$high, x$1.$low)));
			return (w.$high > 0 || (w.$high === 0 && w.$low >= 0)) || x.neg && (x$2 = new $Int64(-w.$high, -w.$low), (w.$high === x$2.$high && w.$low === x$2.$low));
		}
		return false;
	};
	Int.prototype.IsInt64 = function() { return this.$val.IsInt64(); };
	Int.ptr.prototype.IsUint64 = function() {
		var x;
		x = this;
		return !x.neg && x.abs.$length <= 2;
	};
	Int.prototype.IsUint64 = function() { return this.$val.IsUint64(); };
	Int.ptr.prototype.SetString = function(s, base) {
		var _r$3, base, s, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; base = $f.base; s = $f.s; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.setFromScanner(strings.NewReader(s), base); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.SetString }; } $f._r$3 = _r$3; $f.base = base; $f.s = s; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.SetString = function(s, base) { return this.$val.SetString(s, base); };
	Int.ptr.prototype.setFromScanner = function(r, base) {
		var _r$3, _r$4, _tuple, _tuple$1, base, err, err$1, r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; base = $f.base; err = $f.err; err$1 = $f.err$1; r = $f.r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.scan(r, base); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$1.nil, false];
		}
		_r$4 = r.ReadByte(); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$1 = _r$4;
		err$1 = _tuple$1[1];
		if (!($interfaceIsEqual(err$1, io.EOF))) {
			$s = -1; return [ptrType$1.nil, false];
		}
		$s = -1; return [z, true];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.setFromScanner }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.base = base; $f.err = err; $f.err$1 = err$1; $f.r = r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.setFromScanner = function(r, base) { return this.$val.setFromScanner(r, base); };
	Int.ptr.prototype.SetBytes = function(buf) {
		var buf, z;
		z = this;
		z.abs = z.abs.setBytes(buf);
		z.neg = false;
		return z;
	};
	Int.prototype.SetBytes = function(buf) { return this.$val.SetBytes(buf); };
	Int.ptr.prototype.Bytes = function() {
		var buf, x;
		x = this;
		buf = $makeSlice(sliceType$1, ($imul(x.abs.$length, 4)));
		return $subslice(buf, x.abs.bytes(buf));
	};
	Int.prototype.Bytes = function() { return this.$val.Bytes(); };
	Int.ptr.prototype.BitLen = function() {
		var x;
		x = this;
		return x.abs.bitLen();
	};
	Int.prototype.BitLen = function() { return this.$val.BitLen(); };
	Int.ptr.prototype.Exp = function(x, y, m) {
		var _r$3, m, mWords, x, y, yWords, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; m = $f.m; mWords = $f.mWords; x = $f.x; y = $f.y; yWords = $f.yWords; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		yWords = nat.nil;
		if (!y.neg) {
			yWords = y.abs;
		}
		mWords = nat.nil;
		if (!(m === ptrType$1.nil)) {
			mWords = m.abs;
		}
		_r$3 = z.abs.expNN(x.abs, yWords, mWords); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		z.abs = _r$3;
		z.neg = z.abs.$length > 0 && x.neg && yWords.$length > 0 && ((((0 >= yWords.$length ? ($throwRuntimeError("index out of range"), undefined) : yWords.$array[yWords.$offset + 0]) & 1) >>> 0) === 1);
		if (z.neg && mWords.$length > 0) {
			z.abs = z.abs.sub(mWords, z.abs);
			z.neg = false;
		}
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Exp }; } $f._r$3 = _r$3; $f.m = m; $f.mWords = mWords; $f.x = x; $f.y = y; $f.yWords = yWords; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Exp = function(x, y, m) { return this.$val.Exp(x, y, m); };
	Int.ptr.prototype.GCD = function(x, y, a, b) {
		var A, B, X, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tmp$2, _tuple, a, b, lastX, q, r, temp, x, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; A = $f.A; B = $f.B; X = $f.X; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; a = $f.a; b = $f.b; lastX = $f.lastX; q = $f.q; r = $f.r; temp = $f.temp; x = $f.x; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (a.Sign() <= 0 || b.Sign() <= 0) {
			z.SetInt64(new $Int64(0, 0));
			if (!(x === ptrType$1.nil)) {
				x.SetInt64(new $Int64(0, 0));
			}
			if (!(y === ptrType$1.nil)) {
				y.SetInt64(new $Int64(0, 0));
			}
			$s = -1; return z;
		}
		/* */ if (x === ptrType$1.nil && y === ptrType$1.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x === ptrType$1.nil && y === ptrType$1.nil) { */ case 1:
			_r$3 = z.lehmerGCD(a, b); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		A = new Int.ptr(false, nat.nil).Set(a);
		B = new Int.ptr(false, nat.nil).Set(b);
		X = new Int.ptr(false, nat.nil);
		lastX = new Int.ptr(false, nat.nil).SetInt64(new $Int64(0, 1));
		q = new Int.ptr(false, nat.nil);
		temp = new Int.ptr(false, nat.nil);
		r = new Int.ptr(false, nat.nil);
		/* while (true) { */ case 4:
			/* if (!(B.abs.$length > 0)) { break; } */ if(!(B.abs.$length > 0)) { $s = 5; continue; }
			_r$4 = q.QuoRem(A, B, r); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple = _r$4;
			q = _tuple[0];
			r = _tuple[1];
			_tmp = B;
			_tmp$1 = r;
			_tmp$2 = A;
			A = _tmp;
			B = _tmp$1;
			r = _tmp$2;
			temp.Set(X);
			X.Mul(X, q);
			X.Sub(lastX, X);
			lastX.Set(temp);
		/* } */ $s = 4; continue; case 5:
		if (!(x === ptrType$1.nil)) {
			Int.copy(x, lastX);
		}
		/* */ if (!(y === ptrType$1.nil)) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!(y === ptrType$1.nil)) { */ case 7:
			y.Mul(a, lastX);
			y.Sub(A, y);
			_r$5 = y.Div(y, b); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 8:
		Int.copy(z, A);
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.GCD }; } $f.A = A; $f.B = B; $f.X = X; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.lastX = lastX; $f.q = q; $f.r = r; $f.temp = temp; $f.x = x; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.GCD = function(x, y, a, b) { return this.$val.GCD(x, y, a, b); };
	Int.ptr.prototype.lehmerGCD = function(a, b) {
		var A, B, _q, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, a, a1, a1$1, a2, a2$1, b, even, h, m, n, q, r, s, t, u0, u1, u2, v0, v1, v2, w, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2, y$3, y$4, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; A = $f.A; B = $f.B; _q = $f._q; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; a = $f.a; a1 = $f.a1; a1$1 = $f.a1$1; a2 = $f.a2; a2$1 = $f.a2$1; b = $f.b; even = $f.even; h = $f.h; m = $f.m; n = $f.n; q = $f.q; r = $f.r; s = $f.s; t = $f.t; u0 = $f.u0; u1 = $f.u1; u2 = $f.u2; v0 = $f.v0; v1 = $f.v1; v2 = $f.v2; w = $f.w; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (a.abs.cmp(b.abs) < 0) {
			_tmp = b;
			_tmp$1 = a;
			a = _tmp;
			b = _tmp$1;
		}
		B = new Int.ptr(false, nat.nil).Set(b);
		A = z.Set(a);
		t = new Int.ptr(false, nat.nil);
		r = new Int.ptr(false, nat.nil);
		s = new Int.ptr(false, nat.nil);
		w = new Int.ptr(false, nat.nil);
		/* while (true) { */ case 1:
			/* if (!(B.abs.$length > 1)) { break; } */ if(!(B.abs.$length > 1)) { $s = 2; continue; }
			_tmp$2 = 0;
			_tmp$3 = 0;
			_tmp$4 = 0;
			_tmp$5 = 0;
			_tmp$6 = 0;
			_tmp$7 = 0;
			_tmp$8 = 0;
			_tmp$9 = 0;
			a1 = _tmp$2;
			a2 = _tmp$3;
			u0 = _tmp$4;
			u1 = _tmp$5;
			u2 = _tmp$6;
			v0 = _tmp$7;
			v1 = _tmp$8;
			v2 = _tmp$9;
			m = B.abs.$length;
			n = A.abs.$length;
			h = nlz((x = A.abs, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])));
			a1 = ((((y = h, y < 32 ? ((x$2 = A.abs, x$3 = n - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])) << y) : 0) >>> 0)) | (((y$1 = ((32 - h >>> 0)), y$1 < 32 ? ((x$4 = A.abs, x$5 = n - 2 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) >>> y$1) : 0) >>> 0))) >>> 0;
			if ((n === m)) {
				a2 = ((((y$2 = h, y$2 < 32 ? ((x$6 = B.abs, x$7 = n - 1 >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7])) << y$2) : 0) >>> 0)) | (((y$3 = ((32 - h >>> 0)), y$3 < 32 ? ((x$8 = B.abs, x$9 = n - 2 >> 0, ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9])) >>> y$3) : 0) >>> 0))) >>> 0;
			} else if ((n === (m + 1 >> 0))) {
				a2 = ((y$4 = ((32 - h >>> 0)), y$4 < 32 ? ((x$10 = B.abs, x$11 = n - 2 >> 0, ((x$11 < 0 || x$11 >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + x$11])) >>> y$4) : 0) >>> 0);
			} else {
				a2 = 0;
			}
			even = false;
			_tmp$10 = 0;
			_tmp$11 = 1;
			_tmp$12 = 0;
			u0 = _tmp$10;
			u1 = _tmp$11;
			u2 = _tmp$12;
			_tmp$13 = 0;
			_tmp$14 = 0;
			_tmp$15 = 1;
			v0 = _tmp$13;
			v1 = _tmp$14;
			v2 = _tmp$15;
			while (true) {
				if (!(a2 >= v2 && (a1 - a2 >>> 0) >= (v1 + v2 >>> 0))) { break; }
				q = (_q = a1 / a2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
				_tmp$16 = a2;
				_tmp$17 = a1 - ($imul(q, a2) >>> 0) >>> 0;
				a1 = _tmp$16;
				a2 = _tmp$17;
				_tmp$18 = u1;
				_tmp$19 = u2;
				_tmp$20 = u1 + ($imul(q, u2) >>> 0) >>> 0;
				u0 = _tmp$18;
				u1 = _tmp$19;
				u2 = _tmp$20;
				_tmp$21 = v1;
				_tmp$22 = v2;
				_tmp$23 = v1 + ($imul(q, v2) >>> 0) >>> 0;
				v0 = _tmp$21;
				v1 = _tmp$22;
				v2 = _tmp$23;
				even = !even;
			}
			/* */ if (!((v0 === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((v0 === 0))) { */ case 3:
				t.abs = t.abs.setWord(u0);
				s.abs = s.abs.setWord(v0);
				t.neg = !even;
				s.neg = even;
				t.Mul(A, t);
				s.Mul(B, s);
				r.abs = r.abs.setWord(u1);
				w.abs = w.abs.setWord(v1);
				r.neg = even;
				w.neg = !even;
				r.Mul(A, r);
				w.Mul(B, w);
				A.Add(t, s);
				B.Add(r, w);
				$s = 5; continue;
			/* } else { */ case 4:
				_r$3 = t.Rem(A, B); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				_tmp$24 = B;
				_tmp$25 = t;
				_tmp$26 = A;
				A = _tmp$24;
				B = _tmp$25;
				t = _tmp$26;
			/* } */ case 5:
		/* } */ $s = 1; continue; case 2:
		/* */ if (B.abs.$length > 0) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (B.abs.$length > 0) { */ case 7:
			/* */ if (A.abs.$length > 1) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (A.abs.$length > 1) { */ case 9:
				_r$4 = t.Rem(A, B); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				_tmp$27 = B;
				_tmp$28 = t;
				_tmp$29 = A;
				A = _tmp$27;
				B = _tmp$28;
				t = _tmp$29;
			/* } */ case 10:
			if (B.abs.$length > 0) {
				_tmp$30 = (x$12 = A.abs, (0 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 0]));
				_tmp$31 = (x$13 = B.abs, (0 >= x$13.$length ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + 0]));
				a1$1 = _tmp$30;
				a2$1 = _tmp$31;
				while (true) {
					if (!(!((a2$1 === 0)))) { break; }
					_tmp$32 = a2$1;
					_tmp$33 = (_r$5 = a1$1 % a2$1, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero"));
					a1$1 = _tmp$32;
					a2$1 = _tmp$33;
				}
				(x$14 = A.abs, (0 >= x$14.$length ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + 0] = a1$1));
			}
		/* } */ case 8:
		Int.copy(z, A);
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.lehmerGCD }; } $f.A = A; $f.B = B; $f._q = _q; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f.a = a; $f.a1 = a1; $f.a1$1 = a1$1; $f.a2 = a2; $f.a2$1 = a2$1; $f.b = b; $f.even = even; $f.h = h; $f.m = m; $f.n = n; $f.q = q; $f.r = r; $f.s = s; $f.t = t; $f.u0 = u0; $f.u1 = u1; $f.u2 = u2; $f.v0 = v0; $f.v1 = v1; $f.v2 = v2; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.lehmerGCD = function(a, b) { return this.$val.lehmerGCD(a, b); };
	Int.ptr.prototype.Rand = function(rnd, n) {
		var _r$3, n, rnd, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; n = $f.n; rnd = $f.rnd; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		z.neg = false;
		if (n.neg || (n.abs.$length === 0)) {
			z.abs = nat.nil;
			$s = -1; return z;
		}
		_r$3 = z.abs.random(rnd, n.abs, n.abs.bitLen()); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		z.abs = _r$3;
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Rand }; } $f._r$3 = _r$3; $f.n = n; $f.rnd = rnd; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Rand = function(rnd, n) { return this.$val.Rand(rnd, n); };
	Int.ptr.prototype.ModInverse = function(g, n) {
		var _r$3, _r$4, d, g, g2, n, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; d = $f.d; g = $f.g; g2 = $f.g2; n = $f.n; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (g.neg) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (g.neg) { */ case 1:
			g2 = new Int.ptr(false, nat.nil);
			_r$3 = g2.Mod(g, n); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			g = _r$3;
		/* } */ case 2:
		d = new Int.ptr(false, nat.nil);
		_r$4 = d.GCD(z, ptrType$1.nil, g, n); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		if (z.neg) {
			z.Add(z, n);
		}
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.ModInverse }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f.d = d; $f.g = g; $f.g2 = g2; $f.n = n; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.ModInverse = function(g, n) { return this.$val.ModInverse(g, n); };
	Jacobi = function(x, y) {
		var _r$3, _r$4, _tmp, _tmp$1, _tmp$2, a, b, bmod8, c, j, s, x, x$1, x$2, x$3, x$4, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; a = $f.a; b = $f.b; bmod8 = $f.bmod8; c = $f.c; j = $f.j; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		b = [b];
		c = [c];
		/* */ if ((y.abs.$length === 0) || ((((x$1 = y.abs, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) & 1) >>> 0) === 0)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((y.abs.$length === 0) || ((((x$1 = y.abs, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) & 1) >>> 0) === 0)) { */ case 1:
			_r$3 = fmt.Sprintf("big: invalid 2nd argument to Int.Jacobi: need odd integer but got %s", new sliceType([y])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String(_r$3));
		/* } */ case 2:
		_tmp = new Int.ptr(false, nat.nil);
		_tmp$1 = new Int.ptr(false, nat.nil);
		_tmp$2 = new Int.ptr(false, nat.nil);
		a[0] = $clone(_tmp, Int);
		b[0] = $clone(_tmp$1, Int);
		c[0] = $clone(_tmp$2, Int);
		a[0].Set(x);
		b[0].Set(y);
		j = 1;
		if (b[0].neg) {
			if (a[0].neg) {
				j = -1;
			}
			b[0].neg = false;
		}
		/* while (true) { */ case 4:
			if (b[0].Cmp(intOne) === 0) {
				$s = -1; return j;
			}
			if (a[0].abs.$length === 0) {
				$s = -1; return 0;
			}
			_r$4 = a[0].Mod(a[0], b[0]); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			if (a[0].abs.$length === 0) {
				$s = -1; return 0;
			}
			s = a[0].abs.trailingZeroBits();
			if (!((((s & 1) >>> 0) === 0))) {
				bmod8 = ((x$2 = b[0].abs, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])) & 7) >>> 0;
				if ((bmod8 === 3) || (bmod8 === 5)) {
					j = -j;
				}
			}
			c[0].Rsh(a[0], s);
			if (((((x$3 = b[0].abs, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])) & 3) >>> 0) === 3) && ((((x$4 = c[0].abs, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])) & 3) >>> 0) === 3)) {
				j = -j;
			}
			a[0].Set(b[0]);
			b[0].Set(c[0]);
		/* } */ $s = 4; continue; case 5:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Jacobi }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f.a = a; $f.b = b; $f.bmod8 = bmod8; $f.c = c; $f.j = j; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Jacobi = Jacobi;
	Int.ptr.prototype.modSqrt3Mod4Prime = function(x, p) {
		var _r$3, e, p, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; e = $f.e; p = $f.p; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		e = new Int.ptr(false, nat.nil).Add(p, intOne);
		e.Rsh(e, 2);
		_r$3 = z.Exp(x, e, p); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.modSqrt3Mod4Prime }; } $f._r$3 = _r$3; $f.e = e; $f.p = p; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.modSqrt3Mod4Prime = function(x, p) { return this.$val.modSqrt3Mod4Prime(x, p); };
	Int.ptr.prototype.modSqrtTonelliShanks = function(x, p) {
		var _r$10, _r$11, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$2, _tmp$3, b, e, g, m, n, p, r, s, t, x, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; b = $f.b; e = $f.e; g = $f.g; m = $f.m; n = $f.n; p = $f.p; r = $f.r; s = $f.s; t = $f.t; x = $f.x; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = [b];
		g = [g];
		n = [n];
		s = [s];
		t = [t];
		y = [y];
		z = this;
		s[0] = new Int.ptr(false, nat.nil);
		s[0].Sub(p, intOne);
		e = s[0].abs.trailingZeroBits();
		s[0].Rsh(s[0], e);
		n[0] = new Int.ptr(false, nat.nil);
		n[0].SetInt64(new $Int64(0, 2));
		/* while (true) { */ case 1:
			_r$3 = Jacobi(n[0], p); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* if (!(!((_r$3 === -1)))) { break; } */ if(!(!((_r$3 === -1)))) { $s = 2; continue; }
			n[0].Add(n[0], intOne);
		/* } */ $s = 1; continue; case 2:
		_tmp = new Int.ptr(false, nat.nil);
		_tmp$1 = new Int.ptr(false, nat.nil);
		_tmp$2 = new Int.ptr(false, nat.nil);
		_tmp$3 = new Int.ptr(false, nat.nil);
		y[0] = $clone(_tmp, Int);
		b[0] = $clone(_tmp$1, Int);
		g[0] = $clone(_tmp$2, Int);
		t[0] = $clone(_tmp$3, Int);
		y[0].Add(s[0], intOne);
		y[0].Rsh(y[0], 1);
		_r$4 = y[0].Exp(x, y[0], p); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		_r$5 = b[0].Exp(x, s[0], p); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = g[0].Exp(n[0], s[0], p); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		r = e;
		/* while (true) { */ case 7:
			m = 0;
			t[0].Set(b[0]);
			/* while (true) { */ case 9:
				/* if (!(!((t[0].Cmp(intOne) === 0)))) { break; } */ if(!(!((t[0].Cmp(intOne) === 0)))) { $s = 10; continue; }
				_r$7 = t[0].Mul(t[0], t[0]).Mod(t[0], p); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
				m = m + (1) >>> 0;
			/* } */ $s = 9; continue; case 10:
			if (m === 0) {
				$s = -1; return z.Set(y[0]);
			}
			_r$8 = t[0].SetInt64(new $Int64(0, 0)).SetBit(t[0], ((((r - m >>> 0) - 1 >>> 0) >> 0)), 1).Exp(g[0], t[0], p); /* */ $s = 12; case 12: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$8;
			_r$9 = g[0].Mul(t[0], t[0]).Mod(g[0], p); /* */ $s = 13; case 13: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
			_r$10 = y[0].Mul(y[0], t[0]).Mod(y[0], p); /* */ $s = 14; case 14: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$10;
			_r$11 = b[0].Mul(b[0], g[0]).Mod(b[0], p); /* */ $s = 15; case 15: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$11;
			r = m;
		/* } */ $s = 7; continue; case 8:
		$s = -1; return ptrType$1.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.modSqrtTonelliShanks }; } $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.b = b; $f.e = e; $f.g = g; $f.m = m; $f.n = n; $f.p = p; $f.r = r; $f.s = s; $f.t = t; $f.x = x; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.modSqrtTonelliShanks = function(x, p) { return this.$val.modSqrtTonelliShanks(x, p); };
	Int.ptr.prototype.ModSqrt = function(x, p) {
		var _1, _r$3, _r$4, _r$5, _r$6, _r$7, p, x, x$1, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; p = $f.p; x = $f.x; x$1 = $f.x$1; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
			_r$3 = Jacobi(x, p); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_1 = _r$3;
			if (_1 === (-1)) {
				$s = -1; return ptrType$1.nil;
			} else if (_1 === (0)) {
				$s = -1; return z.SetInt64(new $Int64(0, 0));
			} else if (_1 === (1)) {
				/* break; */ $s = 1; continue;
			}
		case 1:
		/* */ if (x.neg || x.Cmp(p) >= 0) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (x.neg || x.Cmp(p) >= 0) { */ case 3:
			_r$4 = new Int.ptr(false, nat.nil).Mod(x, p); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			x = _r$4;
		/* } */ case 4:
		/* */ if (p.abs.$length > 0 && ((_r$5 = (x$1 = p.abs, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) % 4, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")) === 3)) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (p.abs.$length > 0 && ((_r$5 = (x$1 = p.abs, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) % 4, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")) === 3)) { */ case 6:
			_r$6 = z.modSqrt3Mod4Prime(x, p); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$s = -1; return _r$6;
		/* } */ case 7:
		_r$7 = z.modSqrtTonelliShanks(x, p); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$s = -1; return _r$7;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.ModSqrt }; } $f._1 = _1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.ModSqrt = function(x, p) { return this.$val.ModSqrt(x, p); };
	Int.ptr.prototype.Lsh = function(x, n) {
		var n, x, z;
		z = this;
		z.abs = z.abs.shl(x.abs, n);
		z.neg = x.neg;
		return z;
	};
	Int.prototype.Lsh = function(x, n) { return this.$val.Lsh(x, n); };
	Int.ptr.prototype.Rsh = function(x, n) {
		var n, t, x, z;
		z = this;
		if (x.neg) {
			t = z.abs.sub(x.abs, natOne);
			t = t.shr(t, n);
			z.abs = t.add(t, natOne);
			z.neg = true;
			return z;
		}
		z.abs = z.abs.shr(x.abs, n);
		z.neg = false;
		return z;
	};
	Int.prototype.Rsh = function(x, n) { return this.$val.Rsh(x, n); };
	Int.ptr.prototype.Bit = function(i) {
		var i, t, x, x$1;
		x = this;
		if (i === 0) {
			if (x.abs.$length > 0) {
				return (((((x$1 = x.abs, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) & 1) >>> 0) >>> 0));
			}
			return 0;
		}
		if (i < 0) {
			$panic(new $String("negative bit index"));
		}
		if (x.neg) {
			t = (nat.nil).sub(x.abs, natOne);
			return (t.bit(((i >>> 0))) ^ 1) >>> 0;
		}
		return x.abs.bit(((i >>> 0)));
	};
	Int.prototype.Bit = function(i) { return this.$val.Bit(i); };
	Int.ptr.prototype.SetBit = function(x, i, b) {
		var b, i, t, x, z;
		z = this;
		if (i < 0) {
			$panic(new $String("negative bit index"));
		}
		if (x.neg) {
			t = z.abs.sub(x.abs, natOne);
			t = t.setBit(t, ((i >>> 0)), (b ^ 1) >>> 0);
			z.abs = t.add(t, natOne);
			z.neg = z.abs.$length > 0;
			return z;
		}
		z.abs = z.abs.setBit(x.abs, ((i >>> 0)), b);
		z.neg = false;
		return z;
	};
	Int.prototype.SetBit = function(x, i, b) { return this.$val.SetBit(x, i, b); };
	Int.ptr.prototype.And = function(x, y) {
		var _tmp, _tmp$1, x, x1, y, y1, y1$1, z;
		z = this;
		if (x.neg === y.neg) {
			if (x.neg) {
				x1 = (nat.nil).sub(x.abs, natOne);
				y1 = (nat.nil).sub(y.abs, natOne);
				z.abs = z.abs.add(z.abs.or(x1, y1), natOne);
				z.neg = true;
				return z;
			}
			z.abs = z.abs.and(x.abs, y.abs);
			z.neg = false;
			return z;
		}
		if (x.neg) {
			_tmp = y;
			_tmp$1 = x;
			x = _tmp;
			y = _tmp$1;
		}
		y1$1 = (nat.nil).sub(y.abs, natOne);
		z.abs = z.abs.andNot(x.abs, y1$1);
		z.neg = false;
		return z;
	};
	Int.prototype.And = function(x, y) { return this.$val.And(x, y); };
	Int.ptr.prototype.AndNot = function(x, y) {
		var x, x1, x1$1, y, y1, y1$1, z;
		z = this;
		if (x.neg === y.neg) {
			if (x.neg) {
				x1 = (nat.nil).sub(x.abs, natOne);
				y1 = (nat.nil).sub(y.abs, natOne);
				z.abs = z.abs.andNot(y1, x1);
				z.neg = false;
				return z;
			}
			z.abs = z.abs.andNot(x.abs, y.abs);
			z.neg = false;
			return z;
		}
		if (x.neg) {
			x1$1 = (nat.nil).sub(x.abs, natOne);
			z.abs = z.abs.add(z.abs.or(x1$1, y.abs), natOne);
			z.neg = true;
			return z;
		}
		y1$1 = (nat.nil).sub(y.abs, natOne);
		z.abs = z.abs.and(x.abs, y1$1);
		z.neg = false;
		return z;
	};
	Int.prototype.AndNot = function(x, y) { return this.$val.AndNot(x, y); };
	Int.ptr.prototype.Or = function(x, y) {
		var _tmp, _tmp$1, x, x1, y, y1, y1$1, z;
		z = this;
		if (x.neg === y.neg) {
			if (x.neg) {
				x1 = (nat.nil).sub(x.abs, natOne);
				y1 = (nat.nil).sub(y.abs, natOne);
				z.abs = z.abs.add(z.abs.and(x1, y1), natOne);
				z.neg = true;
				return z;
			}
			z.abs = z.abs.or(x.abs, y.abs);
			z.neg = false;
			return z;
		}
		if (x.neg) {
			_tmp = y;
			_tmp$1 = x;
			x = _tmp;
			y = _tmp$1;
		}
		y1$1 = (nat.nil).sub(y.abs, natOne);
		z.abs = z.abs.add(z.abs.andNot(y1$1, x.abs), natOne);
		z.neg = true;
		return z;
	};
	Int.prototype.Or = function(x, y) { return this.$val.Or(x, y); };
	Int.ptr.prototype.Xor = function(x, y) {
		var _tmp, _tmp$1, x, x1, y, y1, y1$1, z;
		z = this;
		if (x.neg === y.neg) {
			if (x.neg) {
				x1 = (nat.nil).sub(x.abs, natOne);
				y1 = (nat.nil).sub(y.abs, natOne);
				z.abs = z.abs.xor(x1, y1);
				z.neg = false;
				return z;
			}
			z.abs = z.abs.xor(x.abs, y.abs);
			z.neg = false;
			return z;
		}
		if (x.neg) {
			_tmp = y;
			_tmp$1 = x;
			x = _tmp;
			y = _tmp$1;
		}
		y1$1 = (nat.nil).sub(y.abs, natOne);
		z.abs = z.abs.add(z.abs.xor(x.abs, y1$1), natOne);
		z.neg = true;
		return z;
	};
	Int.prototype.Xor = function(x, y) { return this.$val.Xor(x, y); };
	Int.ptr.prototype.Not = function(x) {
		var x, z;
		z = this;
		if (x.neg) {
			z.abs = z.abs.sub(x.abs, natOne);
			z.neg = false;
			return z;
		}
		z.abs = z.abs.add(x.abs, natOne);
		z.neg = true;
		return z;
	};
	Int.prototype.Not = function(x) { return this.$val.Not(x); };
	Int.ptr.prototype.Sqrt = function(x) {
		var _r$3, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (x.neg) {
			$panic(new $String("square root of negative number"));
		}
		z.neg = false;
		_r$3 = z.abs.sqrt(x.abs); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		z.abs = _r$3;
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Sqrt }; } $f._r$3 = _r$3; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Sqrt = function(x) { return this.$val.Sqrt(x); };
	Int.ptr.prototype.Text = function(base) {
		var _r$3, base, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; base = $f.base; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if (x === ptrType$1.nil) {
			$s = -1; return "<nil>";
		}
		_r$3 = x.abs.itoa(x.neg, base); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return ($bytesToString(_r$3));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Text }; } $f._r$3 = _r$3; $f.base = base; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Text = function(base) { return this.$val.Text(base); };
	Int.ptr.prototype.Append = function(buf, base) {
		var _arg, _arg$1, _r$3, base, buf, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$3 = $f._r$3; base = $f.base; buf = $f.buf; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if (x === ptrType$1.nil) {
			$s = -1; return $appendSlice(buf, "<nil>");
		}
		_arg = buf;
		_r$3 = x.abs.itoa(x.neg, base); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$1 = _r$3;
		$s = -1; return $appendSlice(_arg, _arg$1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Append }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$3 = _r$3; $f.base = base; $f.buf = buf; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Append = function(buf, base) { return this.$val.Append(buf, base); };
	Int.ptr.prototype.String = function() {
		var _r$3, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r$3 = x.Text(10); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.String }; } $f._r$3 = _r$3; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.String = function() { return this.$val.String(); };
	writeMultiple = function(s, text, count) {
		var _r$3, b, count, s, text, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; b = $f.b; count = $f.count; s = $f.s; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (text.length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (text.length > 0) { */ case 1:
			b = (new sliceType$1($stringToBytes(text)));
			/* while (true) { */ case 3:
				/* if (!(count > 0)) { break; } */ if(!(count > 0)) { $s = 4; continue; }
				_r$3 = s.Write(b); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				count = count - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: writeMultiple }; } $f._r$3 = _r$3; $f.b = b; $f.count = count; $f.s = s; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.ptr.prototype.Format = function(s, ch) {
		var _1, _2, _arg, _arg$1, _arg$2, _i, _r$10, _r$11, _r$12, _r$13, _r$14, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, base, ch, d, d$1, digits, i, left, length, precision, precisionSet, prefix, right, s, sign, width, widthSet, x, zeros, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; base = $f.base; ch = $f.ch; d = $f.d; d$1 = $f.d$1; digits = $f.digits; i = $f.i; left = $f.left; length = $f.length; precision = $f.precision; precisionSet = $f.precisionSet; prefix = $f.prefix; right = $f.right; s = $f.s; sign = $f.sign; width = $f.width; widthSet = $f.widthSet; x = $f.x; zeros = $f.zeros; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		base = 0;
			_1 = ch;
			/* */ if (_1 === (98)) { $s = 2; continue; }
			/* */ if (_1 === (111)) { $s = 3; continue; }
			/* */ if ((_1 === (100)) || (_1 === (115)) || (_1 === (118))) { $s = 4; continue; }
			/* */ if ((_1 === (120)) || (_1 === (88))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (98)) { */ case 2:
				base = 2;
				$s = 7; continue;
			/* } else if (_1 === (111)) { */ case 3:
				base = 8;
				$s = 7; continue;
			/* } else if ((_1 === (100)) || (_1 === (115)) || (_1 === (118))) { */ case 4:
				base = 10;
				$s = 7; continue;
			/* } else if ((_1 === (120)) || (_1 === (88))) { */ case 5:
				base = 16;
				$s = 7; continue;
			/* } else { */ case 6:
				_arg = s;
				_arg$1 = new $Int32(ch);
				_r$3 = x.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_arg$2 = new $String(_r$3);
				_r$4 = fmt.Fprintf(_arg, "%%!%c(big.Int=%s)", new sliceType([_arg$1, _arg$2])); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				$s = -1; return;
			/* } */ case 7:
		case 1:
		/* */ if (x === ptrType$1.nil) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (x === ptrType$1.nil) { */ case 10:
			_r$5 = fmt.Fprint(s, new sliceType([new $String("<nil>")])); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			$s = -1; return;
		/* } */ case 11:
		sign = "";
			/* */ if (x.neg) { $s = 14; continue; }
			_r$6 = s.Flag(43); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			/* */ if (_r$6) { $s = 15; continue; }
			_r$7 = s.Flag(32); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if (_r$7) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (x.neg) { */ case 14:
				sign = "-";
				$s = 17; continue;
			/* } else if (_r$6) { */ case 15:
				sign = "+";
				$s = 17; continue;
			/* } else if (_r$7) { */ case 16:
				sign = " ";
			/* } */ case 17:
		case 13:
		prefix = "";
		_r$8 = s.Flag(35); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		/* */ if (_r$8) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if (_r$8) { */ case 20:
			_2 = ch;
			if (_2 === (111)) {
				prefix = "0";
			} else if (_2 === (120)) {
				prefix = "0x";
			} else if (_2 === (88)) {
				prefix = "0X";
			}
		/* } */ case 21:
		_r$9 = x.abs.utoa(base); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		digits = _r$9;
		if (ch === 88) {
			_ref = digits;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				d = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (97 <= d && d <= 122) {
					((i < 0 || i >= digits.$length) ? ($throwRuntimeError("index out of range"), undefined) : digits.$array[digits.$offset + i] = (65 + ((d - 97 << 24 >>> 24)) << 24 >>> 24));
				}
				_i++;
			}
		}
		left = 0;
		zeros = 0;
		right = 0;
		_r$10 = s.Precision(); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_tuple = _r$10;
		precision = _tuple[0];
		precisionSet = _tuple[1];
		if (precisionSet) {
			if (digits.$length < precision) {
				zeros = precision - digits.$length >> 0;
			} else if ((digits.$length === 1) && ((0 >= digits.$length ? ($throwRuntimeError("index out of range"), undefined) : digits.$array[digits.$offset + 0]) === 48) && (precision === 0)) {
				$s = -1; return;
			}
		}
		length = ((sign.length + prefix.length >> 0) + zeros >> 0) + digits.$length >> 0;
		_r$11 = s.Width(); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_tuple$1 = _r$11;
		width = _tuple$1[0];
		widthSet = _tuple$1[1];
		/* */ if (widthSet && length < width) { $s = 26; continue; }
		/* */ $s = 27; continue;
		/* if (widthSet && length < width) { */ case 26:
				d$1 = width - length >> 0;
				_r$12 = s.Flag(45); /* */ $s = 33; case 33: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				/* */ if (_r$12) { $s = 29; continue; }
				_r$13 = s.Flag(48); /* */ $s = 34; case 34: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				/* */ if (_r$13 && !precisionSet) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if (_r$12) { */ case 29:
					right = d$1;
					$s = 32; continue;
				/* } else if (_r$13 && !precisionSet) { */ case 30:
					zeros = d$1;
					$s = 32; continue;
				/* } else { */ case 31:
					left = d$1;
				/* } */ case 32:
			case 28:
		/* } */ case 27:
		$r = writeMultiple(s, " ", left); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = writeMultiple(s, sign, 1); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = writeMultiple(s, prefix, 1); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = writeMultiple(s, "0", zeros); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$14 = s.Write(digits); /* */ $s = 39; case 39: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$14;
		$r = writeMultiple(s, " ", right); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Format }; } $f._1 = _1; $f._2 = _2; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.base = base; $f.ch = ch; $f.d = d; $f.d$1 = d$1; $f.digits = digits; $f.i = i; $f.left = left; $f.length = length; $f.precision = precision; $f.precisionSet = precisionSet; $f.prefix = prefix; $f.right = right; $f.s = s; $f.sign = sign; $f.width = width; $f.widthSet = widthSet; $f.x = x; $f.zeros = zeros; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Format = function(s, ch) { return this.$val.Format(s, ch); };
	Int.ptr.prototype.scan = function(r, base) {
		var _r$3, _r$4, _tuple, _tuple$1, base, err, neg, r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; base = $f.base; err = $f.err; neg = $f.neg; r = $f.r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = scanSign(r); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		neg = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$1.nil, 0, err];
		}
		_r$4 = z.abs.scan(r, base, false); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$1 = _r$4;
		z.abs = _tuple$1[0];
		base = _tuple$1[1];
		err = _tuple$1[3];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$1.nil, base, err];
		}
		z.neg = z.abs.$length > 0 && neg;
		$s = -1; return [z, base, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.scan }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.base = base; $f.err = err; $f.neg = neg; $f.r = r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.scan = function(r, base) { return this.$val.scan(r, base); };
	scanSign = function(r) {
		var _1, _r$3, _r$4, _tmp, _tmp$1, _tuple, ch, err, neg, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; ch = $f.ch; err = $f.err; neg = $f.neg; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		neg = false;
		err = $ifaceNil;
		ch = 0;
		_r$3 = r.ReadByte(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		ch = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = false;
			_tmp$1 = err;
			neg = _tmp;
			err = _tmp$1;
			$s = -1; return [neg, err];
		}
			_1 = ch;
			/* */ if (_1 === (45)) { $s = 3; continue; }
			/* */ if (_1 === (43)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (45)) { */ case 3:
				neg = true;
				$s = 6; continue;
			/* } else if (_1 === (43)) { */ case 4:
				$s = 6; continue;
			/* } else { */ case 5:
				_r$4 = r.UnreadByte(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
			/* } */ case 6:
		case 2:
		$s = -1; return [neg, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: scanSign }; } $f._1 = _1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.ch = ch; $f.err = err; $f.neg = neg; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	byteReader.ptr.prototype.ReadByte = function() {
		var _r$3, _r$4, _tuple, ch, err, r, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; ch = $f.ch; err = $f.err; r = $f.r; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r$3 = r.ScanState.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		ch = _tuple[0];
		size = _tuple[1];
		err = _tuple[2];
		/* */ if (!((size === 1)) && $interfaceIsEqual(err, $ifaceNil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((size === 1)) && $interfaceIsEqual(err, $ifaceNil)) { */ case 2:
			_r$4 = fmt.Errorf("invalid rune %#U", new sliceType([new $Int32(ch)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err = _r$4;
		/* } */ case 3:
		$s = -1; return [((ch << 24 >>> 24)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: byteReader.ptr.prototype.ReadByte }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.ch = ch; $f.err = err; $f.r = r; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	byteReader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	byteReader.ptr.prototype.UnreadByte = function() {
		var _r$3, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r$3 = r.ScanState.UnreadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: byteReader.ptr.prototype.UnreadByte }; } $f._r$3 = _r$3; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	byteReader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Int.ptr.prototype.Scan = function(s, ch) {
		var _1, _r$3, _tuple, base, ch, err, s, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; _tuple = $f._tuple; base = $f.base; ch = $f.ch; err = $f.err; s = $f.s; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		$r = s.SkipSpace(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		base = 0;
		_1 = ch;
		if (_1 === (98)) {
			base = 2;
		} else if (_1 === (111)) {
			base = 8;
		} else if (_1 === (100)) {
			base = 10;
		} else if ((_1 === (120)) || (_1 === (88))) {
			base = 16;
		} else if ((_1 === (115)) || (_1 === (118))) {
		} else {
			$s = -1; return errors.New("Int.Scan: invalid verb");
		}
		_r$3 = z.scan((x = new byteReader.ptr(s), new x.constructor.elem(x)), base); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		err = _tuple[2];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Scan }; } $f._1 = _1; $f._r$3 = _r$3; $f._tuple = _tuple; $f.base = base; $f.ch = ch; $f.err = err; $f.s = s; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Scan = function(s, ch) { return this.$val.Scan(s, ch); };
	Int.ptr.prototype.GobEncode = function() {
		var b, buf, i, x;
		x = this;
		if (x === ptrType$1.nil) {
			return [sliceType$1.nil, $ifaceNil];
		}
		buf = $makeSlice(sliceType$1, (1 + ($imul(x.abs.$length, 4)) >> 0));
		i = x.abs.bytes(buf) - 1 >> 0;
		b = 2;
		if (x.neg) {
			b = (b | (1)) >>> 0;
		}
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = b);
		return [$subslice(buf, i), $ifaceNil];
	};
	Int.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Int.ptr.prototype.GobDecode = function(buf) {
		var _r$3, b, buf, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; b = $f.b; buf = $f.buf; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (buf.$length === 0) {
			Int.copy(z, new Int.ptr(false, nat.nil));
			$s = -1; return $ifaceNil;
		}
		b = (0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]);
		/* */ if (!(((b >>> 1 << 24 >>> 24) === 1))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(((b >>> 1 << 24 >>> 24) === 1))) { */ case 1:
			_r$3 = fmt.Errorf("Int.GobDecode: encoding version %d not supported", new sliceType([new $Uint8((b >>> 1 << 24 >>> 24))])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		z.neg = !((((b & 1) >>> 0) === 0));
		z.abs = z.abs.setBytes($subslice(buf, 1));
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.GobDecode }; } $f._r$3 = _r$3; $f.b = b; $f.buf = buf; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.GobDecode = function(buf) { return this.$val.GobDecode(buf); };
	Int.ptr.prototype.MarshalText = function() {
		var _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, err, text, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; err = $f.err; text = $f.text; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		text = sliceType$1.nil;
		err = $ifaceNil;
		x = this;
		if (x === ptrType$1.nil) {
			_tmp = (new sliceType$1($stringToBytes("<nil>")));
			_tmp$1 = $ifaceNil;
			text = _tmp;
			err = _tmp$1;
			$s = -1; return [text, err];
		}
		_r$3 = x.abs.itoa(x.neg, 10); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tmp$2 = _r$3;
		_tmp$3 = $ifaceNil;
		text = _tmp$2;
		err = _tmp$3;
		$s = -1; return [text, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.MarshalText }; } $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.err = err; $f.text = text; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Int.ptr.prototype.UnmarshalText = function(text) {
		var _r$3, _r$4, _tuple, ok, text, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; ok = $f.ok; text = $f.text; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.setFromScanner(bytes.NewReader(text), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			_r$4 = fmt.Errorf("math/big: cannot unmarshal %q into a *big.Int", new sliceType([text])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return _r$4;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.UnmarshalText }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.ok = ok; $f.text = text; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.UnmarshalText = function(text) { return this.$val.UnmarshalText(text); };
	Int.ptr.prototype.MarshalJSON = function() {
		var _r$3, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r$3 = x.MarshalText(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.MarshalJSON }; } $f._r$3 = _r$3; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Int.ptr.prototype.UnmarshalJSON = function(text) {
		var _r$3, text, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; text = $f.text; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (($bytesToString(text)) === "null") {
			$s = -1; return $ifaceNil;
		}
		_r$3 = z.UnmarshalText(text); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.UnmarshalJSON }; } $f._r$3 = _r$3; $f.text = text; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.UnmarshalJSON = function(text) { return this.$val.UnmarshalJSON(text); };
	nat.prototype.clear = function() {
		var _i, _ref, i, z;
		z = this;
		_ref = z;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = 0);
			_i++;
		}
	};
	$ptrType(nat).prototype.clear = function() { return this.$get().clear(); };
	nat.prototype.norm = function() {
		var i, x, z;
		z = this;
		i = z.$length;
		while (true) {
			if (!(i > 0 && ((x = i - 1 >> 0, ((x < 0 || x >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x])) === 0))) { break; }
			i = i - (1) >> 0;
		}
		return $subslice(z, 0, i);
	};
	$ptrType(nat).prototype.norm = function() { return this.$get().norm(); };
	nat.prototype.make = function(n) {
		var n, z;
		z = this;
		if (n <= z.$capacity) {
			return $subslice(z, 0, n);
		}
		return $makeSlice(nat, n, (n + 4 >> 0));
	};
	$ptrType(nat).prototype.make = function(n) { return this.$get().make(n); };
	nat.prototype.setWord = function(x) {
		var x, z;
		z = this;
		if (x === 0) {
			return $subslice(z, 0, 0);
		}
		z = z.make(1);
		(0 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 0] = x);
		return z;
	};
	$ptrType(nat).prototype.setWord = function(x) { return this.$get().setWord(x); };
	nat.prototype.setUint64 = function(x) {
		var w, x, x$1, z;
		z = this;
		w = ((x.$low >>> 0));
		if ((x$1 = (new $Uint64(0, w.constructor === Number ? w : 1)), (x$1.$high === x.$high && x$1.$low === x.$low))) {
			return z.setWord(w);
		}
		z = z.make(2);
		(1 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 1] = (($shiftRightUint64(x, 32).$low >>> 0)));
		(0 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 0] = ((x.$low >>> 0)));
		return z;
	};
	$ptrType(nat).prototype.setUint64 = function(x) { return this.$get().setUint64(x); };
	nat.prototype.set = function(x) {
		var x, z;
		z = this;
		z = z.make(x.$length);
		$copySlice(z, x);
		return z;
	};
	$ptrType(nat).prototype.set = function(x) { return this.$get().set(x); };
	nat.prototype.add = function(x, y) {
		var c, m, n, x, x$1, x$2, x$3, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		if (m < n) {
			return z.add(y, x);
		} else if ((m === 0)) {
			return $subslice(z, 0, 0);
		} else if ((n === 0)) {
			return z.set(x);
		}
		z = z.make(m + 1 >> 0);
		c = addVV((x$1 = $subslice(z, 0, n), $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length), $subslice(new sliceType$2(y.$array), y.$offset, y.$offset + y.$length));
		if (m > n) {
			c = addVW((x$2 = $subslice(z, n, m), $subslice(new sliceType$2(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), (x$3 = $subslice(x, n), $subslice(new sliceType$2(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), c);
		}
		((m < 0 || m >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + m] = c);
		return z.norm();
	};
	$ptrType(nat).prototype.add = function(x, y) { return this.$get().add(x, y); };
	nat.prototype.sub = function(x, y) {
		var c, m, n, x, x$1, x$2, x$3, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		if (m < n) {
			$panic(new $String("underflow"));
		} else if ((m === 0)) {
			return $subslice(z, 0, 0);
		} else if ((n === 0)) {
			return z.set(x);
		}
		z = z.make(m);
		c = subVV((x$1 = $subslice(z, 0, n), $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length), $subslice(new sliceType$2(y.$array), y.$offset, y.$offset + y.$length));
		if (m > n) {
			c = subVW((x$2 = $subslice(z, n), $subslice(new sliceType$2(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), (x$3 = $subslice(x, n), $subslice(new sliceType$2(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), c);
		}
		if (!((c === 0))) {
			$panic(new $String("underflow"));
		}
		return z.norm();
	};
	$ptrType(nat).prototype.sub = function(x, y) { return this.$get().sub(x, y); };
	nat.prototype.cmp = function(y) {
		var i, m, n, r, x, y;
		r = 0;
		x = this;
		m = x.$length;
		n = y.$length;
		if (!((m === n)) || (m === 0)) {
			if (m < n) {
				r = -1;
			} else if (m > n) {
				r = 1;
			}
			return r;
		}
		i = m - 1 >> 0;
		while (true) {
			if (!(i > 0 && (((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) === ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])))) { break; }
			i = i - (1) >> 0;
		}
		if (((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) < ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])) {
			r = -1;
		} else if (((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) > ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])) {
			r = 1;
		}
		return r;
	};
	$ptrType(nat).prototype.cmp = function(y) { return this.$get().cmp(y); };
	nat.prototype.mulAddWW = function(x, y, r) {
		var m, r, x, x$1, y, z;
		z = this;
		m = x.$length;
		if ((m === 0) || (y === 0)) {
			return z.setWord(r);
		}
		z = z.make(m + 1 >> 0);
		((m < 0 || m >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + m] = mulAddVWW((x$1 = $subslice(z, 0, m), $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length), y, r));
		return z.norm();
	};
	$ptrType(nat).prototype.mulAddWW = function(x, y, r) { return this.$get().mulAddWW(x, y, r); };
	basicMul = function(z, x, y) {
		var _i, _ref, d, i, x, x$1, x$2, y, z;
		$subslice(z, 0, (x.$length + y.$length >> 0)).clear();
		_ref = y;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			d = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((d === 0))) {
				(x$2 = x.$length + i >> 0, ((x$2 < 0 || x$2 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x$2] = addMulVVW((x$1 = $subslice(z, i, (i + x.$length >> 0)), $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length), d)));
			}
			_i++;
		}
	};
	nat.prototype.montgomery = function(x, y, m, k, n) {
		var c, c2, c3, cx, cy, d, i, k, m, n, t, x, x$1, y, z;
		z = this;
		if (!((x.$length === n)) || !((y.$length === n)) || !((m.$length === n))) {
			$panic(new $String("math/big: mismatched montgomery number lengths"));
		}
		z = z.make(n);
		z.clear();
		c = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			d = ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i]);
			c2 = addMulVVW($subslice(new sliceType$2(z.$array), z.$offset, z.$offset + z.$length), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length), d);
			t = $imul((0 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 0]), k) >>> 0;
			c3 = addMulVVW($subslice(new sliceType$2(z.$array), z.$offset, z.$offset + z.$length), $subslice(new sliceType$2(m.$array), m.$offset, m.$offset + m.$length), t);
			$copySlice(z, $subslice(z, 1));
			cx = c + c2 >>> 0;
			cy = cx + c3 >>> 0;
			(x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x$1] = cy));
			if (cx < c2 || cy < c3) {
				c = 1;
			} else {
				c = 0;
			}
			i = i + (1) >> 0;
		}
		if (!((c === 0))) {
			subVV($subslice(new sliceType$2(z.$array), z.$offset, z.$offset + z.$length), $subslice(new sliceType$2(z.$array), z.$offset, z.$offset + z.$length), $subslice(new sliceType$2(m.$array), m.$offset, m.$offset + m.$length));
		}
		return z;
	};
	$ptrType(nat).prototype.montgomery = function(x, y, m, k, n) { return this.$get().montgomery(x, y, m, k, n); };
	karatsubaAdd = function(z, x, n) {
		var c, n, x, x$1, x$2, x$3, z;
		c = addVV((x$1 = $subslice(z, 0, n), $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$2(z.$array), z.$offset, z.$offset + z.$length), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length));
		if (!((c === 0))) {
			addVW((x$2 = $subslice(z, n, (n + (n >> 1 >> 0) >> 0)), $subslice(new sliceType$2(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), (x$3 = $subslice(z, n), $subslice(new sliceType$2(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), c);
		}
	};
	karatsubaSub = function(z, x, n) {
		var c, n, x, x$1, x$2, x$3, z;
		c = subVV((x$1 = $subslice(z, 0, n), $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$2(z.$array), z.$offset, z.$offset + z.$length), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length));
		if (!((c === 0))) {
			subVW((x$2 = $subslice(z, n, (n + (n >> 1 >> 0) >> 0)), $subslice(new sliceType$2(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), (x$3 = $subslice(z, n), $subslice(new sliceType$2(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), c);
		}
	};
	karatsuba = function(z, x, y) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, n, n2, p, r, s, x, x0, x1, xd, y, y0, y1, yd, z;
		n = y.$length;
		if (!(((n & 1) === 0)) || n < karatsubaThreshold || n < 2) {
			basicMul(z, x, y);
			return;
		}
		n2 = n >> 1 >> 0;
		_tmp = $subslice(x, n2);
		_tmp$1 = $subslice(x, 0, n2);
		x1 = _tmp;
		x0 = _tmp$1;
		_tmp$2 = $subslice(y, n2);
		_tmp$3 = $subslice(y, 0, n2);
		y1 = _tmp$2;
		y0 = _tmp$3;
		karatsuba(z, x0, y0);
		karatsuba($subslice(z, n), x1, y1);
		s = 1;
		xd = $subslice(z, ($imul(2, n)), (($imul(2, n)) + n2 >> 0));
		if (!((subVV($subslice(new sliceType$2(xd.$array), xd.$offset, xd.$offset + xd.$length), $subslice(new sliceType$2(x1.$array), x1.$offset, x1.$offset + x1.$length), $subslice(new sliceType$2(x0.$array), x0.$offset, x0.$offset + x0.$length)) === 0))) {
			s = -s;
			subVV($subslice(new sliceType$2(xd.$array), xd.$offset, xd.$offset + xd.$length), $subslice(new sliceType$2(x0.$array), x0.$offset, x0.$offset + x0.$length), $subslice(new sliceType$2(x1.$array), x1.$offset, x1.$offset + x1.$length));
		}
		yd = $subslice(z, (($imul(2, n)) + n2 >> 0), ($imul(3, n)));
		if (!((subVV($subslice(new sliceType$2(yd.$array), yd.$offset, yd.$offset + yd.$length), $subslice(new sliceType$2(y0.$array), y0.$offset, y0.$offset + y0.$length), $subslice(new sliceType$2(y1.$array), y1.$offset, y1.$offset + y1.$length)) === 0))) {
			s = -s;
			subVV($subslice(new sliceType$2(yd.$array), yd.$offset, yd.$offset + yd.$length), $subslice(new sliceType$2(y1.$array), y1.$offset, y1.$offset + y1.$length), $subslice(new sliceType$2(y0.$array), y0.$offset, y0.$offset + y0.$length));
		}
		p = $subslice(z, ($imul(n, 3)));
		karatsuba(p, xd, yd);
		r = $subslice(z, ($imul(n, 4)));
		$copySlice(r, $subslice(z, 0, ($imul(n, 2))));
		karatsubaAdd($subslice(z, n2), r, n);
		karatsubaAdd($subslice(z, n2), $subslice(r, n), n);
		if (s > 0) {
			karatsubaAdd($subslice(z, n2), p, n);
		} else {
			karatsubaSub($subslice(z, n2), p, n);
		}
	};
	alias = function(x, y) {
		var x, x$1, x$2, y;
		return x.$capacity > 0 && y.$capacity > 0 && (x$1 = $subslice(x, 0, x.$capacity), $indexPtr(x$1.$array, x$1.$offset + (x.$capacity - 1 >> 0), ptrType$3)) === (x$2 = $subslice(y, 0, y.$capacity), $indexPtr(x$2.$array, x$2.$offset + (y.$capacity - 1 >> 0), ptrType$3));
	};
	addAt = function(z, x, i) {
		var c, i, j, n, x, x$1, x$2, x$3, x$4, z;
		n = x.$length;
		if (n > 0) {
			c = addVV((x$1 = $subslice(z, i, (i + n >> 0)), $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), (x$2 = $subslice(z, i), $subslice(new sliceType$2(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length));
			if (!((c === 0))) {
				j = i + n >> 0;
				if (j < z.$length) {
					addVW((x$3 = $subslice(z, j), $subslice(new sliceType$2(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), (x$4 = $subslice(z, j), $subslice(new sliceType$2(x$4.$array), x$4.$offset, x$4.$offset + x$4.$length)), c);
				}
			}
		}
	};
	max = function(x, y) {
		var x, y;
		if (x > y) {
			return x;
		}
		return y;
	};
	karatsubaLen = function(n) {
		var i, n, y;
		i = 0;
		while (true) {
			if (!(n > karatsubaThreshold)) { break; }
			n = (n >> $min((1), 31)) >> 0;
			i = i + (1) >>> 0;
		}
		return (y = i, y < 32 ? (n << y) : 0) >> 0;
	};
	nat.prototype.mul = function(x, y) {
		var i, k, m, n, t, x, x0, x0$1, xi, y, y0, y0$1, y1, z;
		z = this;
		m = x.$length;
		n = y.$length;
		if (m < n) {
			return z.mul(y, x);
		} else if ((m === 0) || (n === 0)) {
			return $subslice(z, 0, 0);
		} else if ((n === 1)) {
			return z.mulAddWW(x, (0 >= y.$length ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + 0]), 0);
		}
		if (alias(z, x) || alias(z, y)) {
			z = nat.nil;
		}
		if (n < karatsubaThreshold) {
			z = z.make(m + n >> 0);
			basicMul(z, x, y);
			return z.norm();
		}
		k = karatsubaLen(n);
		x0 = $subslice(x, 0, k);
		y0 = $subslice(y, 0, k);
		z = z.make(max($imul(6, k), m + n >> 0));
		karatsuba(z, x0, y0);
		z = $subslice(z, 0, (m + n >> 0));
		$subslice(z, ($imul(2, k))).clear();
		if (k < n || !((m === n))) {
			t = nat.nil;
			x0$1 = x0.norm();
			y1 = $subslice(y, k);
			t = t.mul(x0$1, y1);
			addAt(z, t, k);
			y0$1 = y0.norm();
			i = k;
			while (true) {
				if (!(i < x.$length)) { break; }
				xi = $subslice(x, i);
				if (xi.$length > k) {
					xi = $subslice(xi, 0, k);
				}
				xi = xi.norm();
				t = t.mul(xi, y0$1);
				addAt(z, t, i);
				t = t.mul(xi, y1);
				addAt(z, t, i + k >> 0);
				i = i + (k) >> 0;
			}
		}
		return z.norm();
	};
	$ptrType(nat).prototype.mul = function(x, y) { return this.$get().mul(x, y); };
	basicSqr = function(z, x) {
		var _tuple, _tuple$1, d, i, n, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, z;
		n = x.$length;
		t = $makeSlice(nat, ($imul(2, n)));
		_tuple = mulWW((0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]), (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		(1 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 1] = _tuple[0]);
		(0 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 0] = _tuple[1]);
		i = 1;
		while (true) {
			if (!(i < n)) { break; }
			d = ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]);
			_tuple$1 = mulWW(d, d);
			(x$1 = ($imul(2, i)) + 1 >> 0, ((x$1 < 0 || x$1 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x$1] = _tuple$1[0]));
			(x$2 = $imul(2, i), ((x$2 < 0 || x$2 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x$2] = _tuple$1[1]));
			(x$5 = $imul(2, i), ((x$5 < 0 || x$5 >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + x$5] = addMulVVW((x$3 = $subslice(t, i, ($imul(2, i))), $subslice(new sliceType$2(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), (x$4 = $subslice(x, 0, i), $subslice(new sliceType$2(x$4.$array), x$4.$offset, x$4.$offset + x$4.$length)), d)));
			i = i + (1) >> 0;
		}
		(x$8 = ($imul(2, n)) - 1 >> 0, ((x$8 < 0 || x$8 >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + x$8] = shlVU((x$6 = $subslice(t, 1, (($imul(2, n)) - 1 >> 0)), $subslice(new sliceType$2(x$6.$array), x$6.$offset, x$6.$offset + x$6.$length)), (x$7 = $subslice(t, 1, (($imul(2, n)) - 1 >> 0)), $subslice(new sliceType$2(x$7.$array), x$7.$offset, x$7.$offset + x$7.$length)), 1)));
		addVV($subslice(new sliceType$2(z.$array), z.$offset, z.$offset + z.$length), $subslice(new sliceType$2(z.$array), z.$offset, z.$offset + z.$length), $subslice(new sliceType$2(t.$array), t.$offset, t.$offset + t.$length));
	};
	nat.prototype.sqr = function(x) {
		var _tuple, d, n, x, z;
		z = this;
		n = x.$length;
		if ((n === 0)) {
			return $subslice(z, 0, 0);
		} else if ((n === 1)) {
			d = (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]);
			z = z.make(2);
			_tuple = mulWW(d, d);
			(1 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 1] = _tuple[0]);
			(0 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 0] = _tuple[1]);
			return z.norm();
		}
		if (alias(z, x)) {
			z = nat.nil;
		}
		z = z.make($imul(2, n));
		if (n < basicSqrThreshold) {
			basicMul(z, x, x);
			return z.norm();
		}
		if (n < karatsubaSqrThreshold) {
			basicSqr(z, x);
			return z.norm();
		}
		return z.mul(x, x);
	};
	$ptrType(nat).prototype.sqr = function(x) { return this.$get().sqr(x); };
	nat.prototype.mulRange = function(a, b) {
		var a, b, m, x, z;
		z = this;
		if ((a.$high === 0 && a.$low === 0)) {
			return z.setUint64(new $Uint64(0, 0));
		} else if ((a.$high > b.$high || (a.$high === b.$high && a.$low > b.$low))) {
			return z.setUint64(new $Uint64(0, 1));
		} else if ((a.$high === b.$high && a.$low === b.$low)) {
			return z.setUint64(a);
		} else if ((x = new $Uint64(a.$high + 0, a.$low + 1), (x.$high === b.$high && x.$low === b.$low))) {
			return z.mul((nat.nil).setUint64(a), (nat.nil).setUint64(b));
		}
		m = $div64((new $Uint64(a.$high + b.$high, a.$low + b.$low)), new $Uint64(0, 2), false);
		return z.mul((nat.nil).mulRange(a, m), (nat.nil).mulRange(new $Uint64(m.$high + 0, m.$low + 1), b));
	};
	$ptrType(nat).prototype.mulRange = function(a, b) { return this.$get().mulRange(a, b); };
	nat.prototype.divW = function(x, y) {
		var m, q, r, x, y, z;
		q = nat.nil;
		r = 0;
		z = this;
		m = x.$length;
		if ((y === 0)) {
			$panic(new $String("division by zero"));
		} else if ((y === 1)) {
			q = z.set(x);
			return [q, r];
		} else if ((m === 0)) {
			q = $subslice(z, 0, 0);
			return [q, r];
		}
		z = z.make(m);
		r = divWVW($subslice(new sliceType$2(z.$array), z.$offset, z.$offset + z.$length), 0, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length), y);
		q = z.norm();
		return [q, r];
	};
	$ptrType(nat).prototype.divW = function(x, y) { return this.$get().divW(x, y); };
	nat.prototype.div = function(z2, u, v) {
		var _r$3, _tuple, _tuple$1, q, r, r2, u, v, z, z2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; q = $f.q; r = $f.r; r2 = $f.r2; u = $f.u; v = $f.v; z = $f.z; z2 = $f.z2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		q = nat.nil;
		r = nat.nil;
		z = this;
		if (v.$length === 0) {
			$panic(new $String("division by zero"));
		}
		if (u.cmp(v) < 0) {
			q = $subslice(z, 0, 0);
			r = z2.set(u);
			$s = -1; return [q, r];
		}
		if (v.$length === 1) {
			r2 = 0;
			_tuple = z.divW(u, (0 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 0]));
			q = _tuple[0];
			r2 = _tuple[1];
			r = z2.setWord(r2);
			$s = -1; return [q, r];
		}
		_r$3 = z.divLarge(z2, u, v); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$1 = _r$3;
		q = _tuple$1[0];
		r = _tuple$1[1];
		$s = -1; return [q, r];
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.div }; } $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.q = q; $f.r = r; $f.r2 = r2; $f.u = u; $f.v = v; $f.z = z; $f.z2 = z2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.div = function(z2, u, v) { return this.$get().div(z2, u, v); };
	getNat = function(n) {
		var _r$3, n, v, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; n = $f.n; v = $f.v; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = ptrType$4.nil;
		_r$3 = natPool.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		v = _r$3;
		if (!($interfaceIsEqual(v, $ifaceNil))) {
			z = $assertType(v, ptrType$4);
		}
		if (z === ptrType$4.nil) {
			z = $newDataPointer(nat.nil, ptrType$4);
		}
		z.$set(z.make(n));
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getNat }; } $f._r$3 = _r$3; $f.n = n; $f.v = v; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	putNat = function(x) {
		var x;
		natPool.Put(x);
	};
	nat.prototype.divLarge = function(u, uIn, v) {
		var _index, _r$3, _r$4, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, c, c$1, j, m, n, prevRhat, q, qhat, qhatv, qhatvp, r, rhat, shift, u, uIn, ujn, ujn2, v, v1, v1p, vn1, vn2, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x1, x2, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _index = $f._index; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; c = $f.c; c$1 = $f.c$1; j = $f.j; m = $f.m; n = $f.n; prevRhat = $f.prevRhat; q = $f.q; qhat = $f.qhat; qhatv = $f.qhatv; qhatvp = $f.qhatvp; r = $f.r; rhat = $f.rhat; shift = $f.shift; u = $f.u; uIn = $f.uIn; ujn = $f.ujn; ujn2 = $f.ujn2; v = $f.v; v1 = $f.v1; v1p = $f.v1p; vn1 = $f.vn1; vn2 = $f.vn2; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; x1 = $f.x1; x2 = $f.x2; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		q = nat.nil;
		r = nat.nil;
		z = this;
		n = v.$length;
		m = uIn.$length - n >> 0;
		if (alias(z, u) || alias(z, uIn) || alias(z, v)) {
			z = nat.nil;
		}
		q = z.make(m + 1 >> 0);
		_r$3 = getNat(n + 1 >> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		qhatvp = _r$3;
		qhatv = qhatvp.$get();
		if (alias(u, uIn) || alias(u, v)) {
			u = nat.nil;
		}
		u = u.make(uIn.$length + 1 >> 0);
		u.clear();
		v1p = ptrType$4.nil;
		shift = nlz((x = n - 1 >> 0, ((x < 0 || x >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + x])));
		/* */ if (shift > 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (shift > 0) { */ case 2:
			_r$4 = getNat(n); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			v1p = _r$4;
			v1 = v1p.$get();
			shlVU($subslice(new sliceType$2(v1.$array), v1.$offset, v1.$offset + v1.$length), $subslice(new sliceType$2(v.$array), v.$offset, v.$offset + v.$length), shift);
			v = v1;
		/* } */ case 3:
		(x$2 = uIn.$length, ((x$2 < 0 || x$2 >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + x$2] = shlVU((x$1 = $subslice(u, 0, uIn.$length), $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$2(uIn.$array), uIn.$offset, uIn.$offset + uIn.$length), shift)));
		vn1 = (x$3 = n - 1 >> 0, ((x$3 < 0 || x$3 >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + x$3]));
		j = m;
		while (true) {
			if (!(j >= 0)) { break; }
			qhat = 4294967295;
			ujn = (x$4 = j + n >> 0, ((x$4 < 0 || x$4 >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + x$4]));
			if (!((ujn === vn1))) {
				rhat = 0;
				_tuple = divWW(ujn, (x$5 = (j + n >> 0) - 1 >> 0, ((x$5 < 0 || x$5 >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + x$5])), vn1);
				qhat = _tuple[0];
				rhat = _tuple[1];
				vn2 = (x$6 = n - 2 >> 0, ((x$6 < 0 || x$6 >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + x$6]));
				_tuple$1 = mulWW(qhat, vn2);
				x1 = _tuple$1[0];
				x2 = _tuple$1[1];
				ujn2 = (x$7 = (j + n >> 0) - 2 >> 0, ((x$7 < 0 || x$7 >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + x$7]));
				while (true) {
					if (!(greaterThan(x1, x2, rhat, ujn2))) { break; }
					qhat = qhat - (1) >>> 0;
					prevRhat = rhat;
					rhat = rhat + (vn1) >>> 0;
					if (rhat < prevRhat) {
						break;
					}
					_tuple$2 = mulWW(qhat, vn2);
					x1 = _tuple$2[0];
					x2 = _tuple$2[1];
				}
			}
			((n < 0 || n >= qhatv.$length) ? ($throwRuntimeError("index out of range"), undefined) : qhatv.$array[qhatv.$offset + n] = mulAddVWW((x$8 = $subslice(qhatv, 0, n), $subslice(new sliceType$2(x$8.$array), x$8.$offset, x$8.$offset + x$8.$length)), $subslice(new sliceType$2(v.$array), v.$offset, v.$offset + v.$length), qhat, 0));
			c = subVV((x$9 = $subslice(u, j, (j + qhatv.$length >> 0)), $subslice(new sliceType$2(x$9.$array), x$9.$offset, x$9.$offset + x$9.$length)), (x$10 = $subslice(u, j), $subslice(new sliceType$2(x$10.$array), x$10.$offset, x$10.$offset + x$10.$length)), $subslice(new sliceType$2(qhatv.$array), qhatv.$offset, qhatv.$offset + qhatv.$length));
			if (!((c === 0))) {
				c$1 = addVV((x$11 = $subslice(u, j, (j + n >> 0)), $subslice(new sliceType$2(x$11.$array), x$11.$offset, x$11.$offset + x$11.$length)), (x$12 = $subslice(u, j), $subslice(new sliceType$2(x$12.$array), x$12.$offset, x$12.$offset + x$12.$length)), $subslice(new sliceType$2(v.$array), v.$offset, v.$offset + v.$length));
				_index = j + n >> 0;
				((_index < 0 || _index >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + _index] = (((_index < 0 || _index >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + _index]) + (c$1) >>> 0));
				qhat = qhat - (1) >>> 0;
			}
			((j < 0 || j >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + j] = qhat);
			j = j - (1) >> 0;
		}
		if (!(v1p === ptrType$4.nil)) {
			putNat(v1p);
		}
		putNat(qhatvp);
		q = q.norm();
		shrVU($subslice(new sliceType$2(u.$array), u.$offset, u.$offset + u.$length), $subslice(new sliceType$2(u.$array), u.$offset, u.$offset + u.$length), shift);
		r = u.norm();
		_tmp = q;
		_tmp$1 = r;
		q = _tmp;
		r = _tmp$1;
		$s = -1; return [q, r];
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.divLarge }; } $f._index = _index; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.c = c; $f.c$1 = c$1; $f.j = j; $f.m = m; $f.n = n; $f.prevRhat = prevRhat; $f.q = q; $f.qhat = qhat; $f.qhatv = qhatv; $f.qhatvp = qhatvp; $f.r = r; $f.rhat = rhat; $f.shift = shift; $f.u = u; $f.uIn = uIn; $f.ujn = ujn; $f.ujn2 = ujn2; $f.v = v; $f.v1 = v1; $f.v1p = v1p; $f.vn1 = vn1; $f.vn2 = vn2; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.x1 = x1; $f.x2 = x2; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.divLarge = function(u, uIn, v) { return this.$get().divLarge(u, uIn, v); };
	nat.prototype.bitLen = function() {
		var i, x;
		x = this;
		i = x.$length - 1 >> 0;
		if (i >= 0) {
			return ($imul(i, 32)) + bits.Len(((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) >>> 0))) >> 0;
		}
		return 0;
	};
	$ptrType(nat).prototype.bitLen = function() { return this.$get().bitLen(); };
	nat.prototype.trailingZeroBits = function() {
		var i, x;
		x = this;
		if (x.$length === 0) {
			return 0;
		}
		i = 0;
		while (true) {
			if (!(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) === 0)) { break; }
			i = i + (1) >>> 0;
		}
		return (i * 32 >>> 0) + ((bits.TrailingZeros(((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) >>> 0))) >>> 0)) >>> 0;
	};
	$ptrType(nat).prototype.trailingZeroBits = function() { return this.$get().trailingZeroBits(); };
	nat.prototype.shl = function(x, s) {
		var _q, _r$3, m, n, s, x, x$1, z;
		z = this;
		m = x.$length;
		if (m === 0) {
			return $subslice(z, 0, 0);
		}
		n = m + (((_q = s / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) >> 0;
		z = z.make(n + 1 >> 0);
		((n < 0 || n >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + n] = shlVU((x$1 = $subslice(z, (n - m >> 0), n), $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length), (_r$3 = s % 32, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"))));
		$subslice(z, 0, (n - m >> 0)).clear();
		return z.norm();
	};
	$ptrType(nat).prototype.shl = function(x, s) { return this.$get().shl(x, s); };
	nat.prototype.shr = function(x, s) {
		var _q, _r$3, m, n, s, x, x$1, z;
		z = this;
		m = x.$length;
		n = m - (((_q = s / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) >> 0;
		if (n <= 0) {
			return $subslice(z, 0, 0);
		}
		z = z.make(n);
		shrVU($subslice(new sliceType$2(z.$array), z.$offset, z.$offset + z.$length), (x$1 = $subslice(x, (m - n >> 0)), $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), (_r$3 = s % 32, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")));
		return z.norm();
	};
	$ptrType(nat).prototype.shr = function(x, s) { return this.$get().shr(x, s); };
	nat.prototype.setBit = function(x, i, b) {
		var _1, _q, _r$3, b, i, j, m, n, x, y, z;
		z = this;
		j = (((_q = i / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
		m = (y = ((_r$3 = i % 32, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"))), y < 32 ? (1 << y) : 0) >>> 0;
		n = x.$length;
		_1 = b;
		if (_1 === (0)) {
			z = z.make(n);
			$copySlice(z, x);
			if (j >= n) {
				return z;
			}
			((j < 0 || j >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + j] = ((((j < 0 || j >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + j]) & ~(m)) >>> 0));
			return z.norm();
		} else if (_1 === (1)) {
			if (j >= n) {
				z = z.make(j + 1 >> 0);
				$subslice(z, n).clear();
			} else {
				z = z.make(n);
			}
			$copySlice(z, x);
			((j < 0 || j >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + j] = ((((j < 0 || j >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + j]) | (m)) >>> 0));
			return z;
		}
		$panic(new $String("set bit is not 0 or 1"));
	};
	$ptrType(nat).prototype.setBit = function(x, i, b) { return this.$get().setBit(x, i, b); };
	nat.prototype.bit = function(i) {
		var _q, _r$3, i, j, x, y;
		x = this;
		j = (_q = i / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		if (j >= ((x.$length >>> 0))) {
			return 0;
		}
		return ((((((y = ((_r$3 = i % 32, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"))), y < 32 ? (((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]) >>> y) : 0) >>> 0) & 1) >>> 0) >>> 0));
	};
	$ptrType(nat).prototype.bit = function(i) { return this.$get().bit(i); };
	nat.prototype.sticky = function(i) {
		var _i, _q, _r$3, _ref, i, j, x, x$1, y;
		x = this;
		j = (_q = i / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		if (j >= ((x.$length >>> 0))) {
			if (x.$length === 0) {
				return 0;
			}
			return 1;
		}
		_ref = $subslice(x, 0, j);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((x$1 === 0))) {
				return 1;
			}
			_i++;
		}
		if (!((((y = ((32 - (_r$3 = i % 32, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) >>> 0)), y < 32 ? (((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]) << y) : 0) >>> 0) === 0))) {
			return 1;
		}
		return 0;
	};
	$ptrType(nat).prototype.sticky = function(i) { return this.$get().sticky(i); };
	nat.prototype.and = function(x, y) {
		var i, m, n, x, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		if (m > n) {
			m = n;
		}
		z = z.make(m);
		i = 0;
		while (true) {
			if (!(i < m)) { break; }
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) & ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])) >>> 0));
			i = i + (1) >> 0;
		}
		return z.norm();
	};
	$ptrType(nat).prototype.and = function(x, y) { return this.$get().and(x, y); };
	nat.prototype.andNot = function(x, y) {
		var i, m, n, x, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		if (n > m) {
			n = m;
		}
		z = z.make(m);
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) & ~((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])) >>> 0));
			i = i + (1) >> 0;
		}
		$copySlice($subslice(z, n, m), $subslice(x, n, m));
		return z.norm();
	};
	$ptrType(nat).prototype.andNot = function(x, y) { return this.$get().andNot(x, y); };
	nat.prototype.or = function(x, y) {
		var _tmp, _tmp$1, i, m, n, s, x, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		s = x;
		if (m < n) {
			_tmp = m;
			_tmp$1 = n;
			n = _tmp;
			m = _tmp$1;
			s = y;
		}
		z = z.make(m);
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) | ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])) >>> 0));
			i = i + (1) >> 0;
		}
		$copySlice($subslice(z, n, m), $subslice(s, n, m));
		return z.norm();
	};
	$ptrType(nat).prototype.or = function(x, y) { return this.$get().or(x, y); };
	nat.prototype.xor = function(x, y) {
		var _tmp, _tmp$1, i, m, n, s, x, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		s = x;
		if (m < n) {
			_tmp = m;
			_tmp$1 = n;
			n = _tmp;
			m = _tmp$1;
			s = y;
		}
		z = z.make(m);
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) ^ ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])) >>> 0));
			i = i + (1) >> 0;
		}
		$copySlice($subslice(z, n, m), $subslice(s, n, m));
		return z.norm();
	};
	$ptrType(nat).prototype.xor = function(x, y) { return this.$get().xor(x, y); };
	greaterThan = function(x1, x2, y1, y2) {
		var x1, x2, y1, y2;
		return x1 > y1 || (x1 === y1) && x2 > y2;
	};
	nat.prototype.modW = function(d) {
		var d, q, r, x;
		r = 0;
		x = this;
		q = nat.nil;
		q = q.make(x.$length);
		r = divWVW($subslice(new sliceType$2(q.$array), q.$offset, q.$offset + q.$length), 0, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length), d);
		return r;
	};
	$ptrType(nat).prototype.modW = function(d) { return this.$get().modW(d); };
	nat.prototype.random = function(rand$1, limit, n) {
		var _1, _i, _i$1, _index, _r$3, _r$4, _r$5, _ref, _ref$1, bitLengthOfMSW, i, i$1, limit, mask, n, rand$1, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _i$1 = $f._i$1; _index = $f._index; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _ref$1 = $f._ref$1; bitLengthOfMSW = $f.bitLengthOfMSW; i = $f.i; i$1 = $f.i$1; limit = $f.limit; mask = $f.mask; n = $f.n; rand$1 = $f.rand$1; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (alias(z, limit)) {
			z = nat.nil;
		}
		z = z.make(limit.$length);
		bitLengthOfMSW = (((_r$3 = n % 32, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) >>> 0));
		if (bitLengthOfMSW === 0) {
			bitLengthOfMSW = 32;
		}
		mask = (((((y = bitLengthOfMSW, y < 32 ? (1 << y) : 0) >>> 0)) - 1 >>> 0));
		/* while (true) { */ case 1:
				_1 = 32;
				/* */ if (_1 === (32)) { $s = 4; continue; }
				/* */ if (_1 === (64)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_1 === (32)) { */ case 4:
					_ref = z;
					_i = 0;
					/* while (true) { */ case 8:
						/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 9; continue; }
						i = _i;
						_r$4 = rand$1.Uint32(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((_r$4 >>> 0)));
						_i++;
					/* } */ $s = 8; continue; case 9:
					$s = 7; continue;
				/* } else if (_1 === (64)) { */ case 5:
					_ref$1 = z;
					_i$1 = 0;
					/* while (true) { */ case 11:
						/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 12; continue; }
						i$1 = _i$1;
						_r$5 = rand$1.Uint32(); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						((i$1 < 0 || i$1 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i$1] = ((((_r$5 >>> 0)) | 0) >>> 0));
						_i$1++;
					/* } */ $s = 11; continue; case 12:
					$s = 7; continue;
				/* } else { */ case 6:
					$panic(new $String("unknown word size"));
				/* } */ case 7:
			case 3:
			_index = limit.$length - 1 >> 0;
			((_index < 0 || _index >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + _index] = ((((_index < 0 || _index >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + _index]) & (mask)) >>> 0));
			if (z.cmp(limit) < 0) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return z.norm();
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.random }; } $f._1 = _1; $f._i = _i; $f._i$1 = _i$1; $f._index = _index; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._ref$1 = _ref$1; $f.bitLengthOfMSW = bitLengthOfMSW; $f.i = i; $f.i$1 = i$1; $f.limit = limit; $f.mask = mask; $f.n = n; $f.rand$1 = rand$1; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.random = function(rand$1, limit, n) { return this.$get().random(rand$1, limit, n); };
	nat.prototype.expNN = function(x, y, m) {
		var _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, i, j, j$1, m, q, r, shift, v, w, x, x$1, y, y$1, y$2, y$3, z, zz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; i = $f.i; j = $f.j; j$1 = $f.j$1; m = $f.m; q = $f.q; r = $f.r; shift = $f.shift; v = $f.v; w = $f.w; x = $f.x; x$1 = $f.x$1; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; z = $f.z; zz = $f.zz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (alias(z, x) || alias(z, y)) {
			z = nat.nil;
		}
		if ((m.$length === 1) && ((0 >= m.$length ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + 0]) === 1)) {
			$s = -1; return z.setWord(0);
		}
		if (y.$length === 0) {
			$s = -1; return z.setWord(1);
		}
		/* */ if ((y.$length === 1) && ((0 >= y.$length ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + 0]) === 1) && !((m.$length === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((y.$length === 1) && ((0 >= y.$length ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + 0]) === 1) && !((m.$length === 0))) { */ case 1:
			_r$3 = z.div(z, x, m); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			z = _tuple[1];
			$s = -1; return z;
		/* } */ case 2:
		if (!((m.$length === 0))) {
			z = z.make(m.$length);
		}
		z = z.set(x);
		/* */ if (x.cmp(natOne) > 0 && y.$length > 1 && m.$length > 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (x.cmp(natOne) > 0 && y.$length > 1 && m.$length > 0) { */ case 4:
			/* */ if ((((0 >= m.$length ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + 0]) & 1) >>> 0) === 1) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((((0 >= m.$length ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + 0]) & 1) >>> 0) === 1) { */ case 6:
				_r$4 = z.expNNMontgomery(x, y, m); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return _r$4;
			/* } */ case 7:
			_r$5 = z.expNNWindowed(x, y, m); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return _r$5;
		/* } */ case 5:
		v = (x$1 = y.$length - 1 >> 0, ((x$1 < 0 || x$1 >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + x$1]));
		shift = nlz(v) + 1 >>> 0;
		v = (y$1 = (shift), y$1 < 32 ? (v << y$1) : 0) >>> 0;
		q = nat.nil;
		w = 32 - ((shift >> 0)) >> 0;
		_tmp = nat.nil;
		_tmp$1 = nat.nil;
		zz = _tmp;
		r = _tmp$1;
		j = 0;
		/* while (true) { */ case 10:
			/* if (!(j < w)) { break; } */ if(!(j < w)) { $s = 11; continue; }
			zz = zz.sqr(z);
			_tmp$2 = z;
			_tmp$3 = zz;
			zz = _tmp$2;
			z = _tmp$3;
			if (!((((v & 2147483648) >>> 0) === 0))) {
				zz = zz.mul(z, x);
				_tmp$4 = z;
				_tmp$5 = zz;
				zz = _tmp$4;
				z = _tmp$5;
			}
			/* */ if (!((m.$length === 0))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (!((m.$length === 0))) { */ case 12:
				_r$6 = zz.div(r, z, m); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple$1 = _r$6;
				zz = _tuple$1[0];
				r = _tuple$1[1];
				_tmp$6 = q;
				_tmp$7 = z;
				_tmp$8 = zz;
				_tmp$9 = r;
				zz = _tmp$6;
				r = _tmp$7;
				q = _tmp$8;
				z = _tmp$9;
			/* } */ case 13:
			v = (y$2 = (1), y$2 < 32 ? (v << y$2) : 0) >>> 0;
			j = j + (1) >> 0;
		/* } */ $s = 10; continue; case 11:
		i = y.$length - 2 >> 0;
		/* while (true) { */ case 15:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 16; continue; }
			v = ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i]);
			j$1 = 0;
			/* while (true) { */ case 17:
				/* if (!(j$1 < 32)) { break; } */ if(!(j$1 < 32)) { $s = 18; continue; }
				zz = zz.sqr(z);
				_tmp$10 = z;
				_tmp$11 = zz;
				zz = _tmp$10;
				z = _tmp$11;
				if (!((((v & 2147483648) >>> 0) === 0))) {
					zz = zz.mul(z, x);
					_tmp$12 = z;
					_tmp$13 = zz;
					zz = _tmp$12;
					z = _tmp$13;
				}
				/* */ if (!((m.$length === 0))) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (!((m.$length === 0))) { */ case 19:
					_r$7 = zz.div(r, z, m); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_tuple$2 = _r$7;
					zz = _tuple$2[0];
					r = _tuple$2[1];
					_tmp$14 = q;
					_tmp$15 = z;
					_tmp$16 = zz;
					_tmp$17 = r;
					zz = _tmp$14;
					r = _tmp$15;
					q = _tmp$16;
					z = _tmp$17;
				/* } */ case 20:
				v = (y$3 = (1), y$3 < 32 ? (v << y$3) : 0) >>> 0;
				j$1 = j$1 + (1) >> 0;
			/* } */ $s = 17; continue; case 18:
			i = i - (1) >> 0;
		/* } */ $s = 15; continue; case 16:
		$s = -1; return z.norm();
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.expNN }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.i = i; $f.j = j; $f.j$1 = j$1; $f.m = m; $f.q = q; $f.r = r; $f.shift = shift; $f.v = v; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.z = z; $f.zz = zz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.expNN = function(x, y, m) { return this.$get().expNN(x, y, m); };
	nat.prototype.expNNWindowed = function(x, y, m) {
		var _q, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, i, i$1, j, m, p, p1, p2, powers, r, x, x$1, y, y$1, yi, z, zz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; i = $f.i; i$1 = $f.i$1; j = $f.j; m = $f.m; p = $f.p; p1 = $f.p1; p2 = $f.p2; powers = $f.powers; r = $f.r; x = $f.x; x$1 = $f.x$1; y = $f.y; y$1 = $f.y$1; yi = $f.yi; z = $f.z; zz = $f.zz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_tmp = nat.nil;
		_tmp$1 = nat.nil;
		zz = _tmp;
		r = _tmp$1;
		powers = arrayType$1.zero();
		powers[0] = natOne;
		powers[1] = x;
		i = 2;
		/* while (true) { */ case 1:
			/* if (!(i < 16)) { break; } */ if(!(i < 16)) { $s = 2; continue; }
			_tmp$2 = $indexPtr(powers, (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), ptrType$4);
			_tmp$3 = $indexPtr(powers, i, ptrType$4);
			_tmp$4 = $indexPtr(powers, (i + 1 >> 0), ptrType$4);
			p2 = _tmp$2;
			p = _tmp$3;
			p1 = _tmp$4;
			p.$set(p.sqr(p2.$get()));
			_r$3 = zz.div(r, p.$get(), m); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			zz = _tuple[0];
			r = _tuple[1];
			_tmp$5 = r;
			_tmp$6 = p.$get();
			p.$set(_tmp$5);
			r = _tmp$6;
			p1.$set(p1.mul(p.$get(), x));
			_r$4 = zz.div(r, p1.$get(), m); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$1 = _r$4;
			zz = _tuple$1[0];
			r = _tuple$1[1];
			_tmp$7 = r;
			_tmp$8 = p1.$get();
			p1.$set(_tmp$7);
			r = _tmp$8;
			i = i + (2) >> 0;
		/* } */ $s = 1; continue; case 2:
		z = z.setWord(1);
		i$1 = y.$length - 1 >> 0;
		/* while (true) { */ case 5:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 6; continue; }
			yi = ((i$1 < 0 || i$1 >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i$1]);
			j = 0;
			/* while (true) { */ case 7:
				/* if (!(j < 32)) { break; } */ if(!(j < 32)) { $s = 8; continue; }
				/* */ if (!((i$1 === (y.$length - 1 >> 0))) || !((j === 0))) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (!((i$1 === (y.$length - 1 >> 0))) || !((j === 0))) { */ case 9:
					zz = zz.sqr(z);
					_tmp$9 = z;
					_tmp$10 = zz;
					zz = _tmp$9;
					z = _tmp$10;
					_r$5 = zz.div(r, z, m); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$2 = _r$5;
					zz = _tuple$2[0];
					r = _tuple$2[1];
					_tmp$11 = r;
					_tmp$12 = z;
					z = _tmp$11;
					r = _tmp$12;
					zz = zz.sqr(z);
					_tmp$13 = z;
					_tmp$14 = zz;
					zz = _tmp$13;
					z = _tmp$14;
					_r$6 = zz.div(r, z, m); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_tuple$3 = _r$6;
					zz = _tuple$3[0];
					r = _tuple$3[1];
					_tmp$15 = r;
					_tmp$16 = z;
					z = _tmp$15;
					r = _tmp$16;
					zz = zz.sqr(z);
					_tmp$17 = z;
					_tmp$18 = zz;
					zz = _tmp$17;
					z = _tmp$18;
					_r$7 = zz.div(r, z, m); /* */ $s = 13; case 13: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_tuple$4 = _r$7;
					zz = _tuple$4[0];
					r = _tuple$4[1];
					_tmp$19 = r;
					_tmp$20 = z;
					z = _tmp$19;
					r = _tmp$20;
					zz = zz.sqr(z);
					_tmp$21 = z;
					_tmp$22 = zz;
					zz = _tmp$21;
					z = _tmp$22;
					_r$8 = zz.div(r, z, m); /* */ $s = 14; case 14: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_tuple$5 = _r$8;
					zz = _tuple$5[0];
					r = _tuple$5[1];
					_tmp$23 = r;
					_tmp$24 = z;
					z = _tmp$23;
					r = _tmp$24;
				/* } */ case 10:
				zz = zz.mul(z, (x$1 = yi >>> 28 >>> 0, ((x$1 < 0 || x$1 >= powers.length) ? ($throwRuntimeError("index out of range"), undefined) : powers[x$1])));
				_tmp$25 = z;
				_tmp$26 = zz;
				zz = _tmp$25;
				z = _tmp$26;
				_r$9 = zz.div(r, z, m); /* */ $s = 15; case 15: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_tuple$6 = _r$9;
				zz = _tuple$6[0];
				r = _tuple$6[1];
				_tmp$27 = r;
				_tmp$28 = z;
				z = _tmp$27;
				r = _tmp$28;
				yi = (y$1 = (4), y$1 < 32 ? (yi << y$1) : 0) >>> 0;
				j = j + (4) >> 0;
			/* } */ $s = 7; continue; case 8:
			i$1 = i$1 - (1) >> 0;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return z.norm();
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.expNNWindowed }; } $f._q = _q; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f.i = i; $f.i$1 = i$1; $f.j = j; $f.m = m; $f.p = p; $f.p1 = p1; $f.p2 = p2; $f.powers = powers; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.y$1 = y$1; $f.yi = yi; $f.z = z; $f.zz = zz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.expNNWindowed = function(x, y, m) { return this.$get().expNNWindowed(x, y, m); };
	nat.prototype.expNNMontgomery = function(x, y, m) {
		var RR, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, i, i$1, i$2, j, k0, m, numWords, one, powers, rr, t, x, x$1, x$2, y, y$1, y$2, yi, z, zz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; RR = $f.RR; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; j = $f.j; k0 = $f.k0; m = $f.m; numWords = $f.numWords; one = $f.one; powers = $f.powers; rr = $f.rr; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; yi = $f.yi; z = $f.z; zz = $f.zz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		numWords = m.$length;
		/* */ if (x.$length > numWords) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.$length > numWords) { */ case 1:
			_r$3 = (nat.nil).div(nat.nil, x, m); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			x = _tuple[1];
		/* } */ case 2:
		if (x.$length < numWords) {
			rr = $makeSlice(nat, numWords);
			$copySlice(rr, x);
			x = rr;
		}
		k0 = 2 - (0 >= m.$length ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + 0]) >>> 0;
		t = (0 >= m.$length ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + 0]) - 1 >>> 0;
		i = 1;
		while (true) {
			if (!(i < 32)) { break; }
			t = $imul(t, (t)) >>> 0;
			k0 = $imul(k0, (((t + 1 >>> 0)))) >>> 0;
			i = (y$1 = (1), y$1 < 32 ? (i << y$1) : 0) >> 0;
		}
		k0 = -k0 >>> 0;
		RR = (nat.nil).setWord(1);
		zz = (nat.nil).shl(RR, ((($imul(($imul(2, numWords)), 32)) >>> 0)));
		_r$4 = RR.div(RR, zz, m); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$1 = _r$4;
		RR = _tuple$1[1];
		if (RR.$length < numWords) {
			zz = zz.make(numWords);
			$copySlice(zz, RR);
			RR = zz;
		}
		one = $makeSlice(nat, numWords);
		(0 >= one.$length ? ($throwRuntimeError("index out of range"), undefined) : one.$array[one.$offset + 0] = 1);
		powers = arrayType$1.zero();
		powers[0] = powers[0].montgomery(one, RR, m, k0, numWords);
		powers[1] = powers[1].montgomery(x, RR, m, k0, numWords);
		i$1 = 2;
		while (true) {
			if (!(i$1 < 16)) { break; }
			((i$1 < 0 || i$1 >= powers.length) ? ($throwRuntimeError("index out of range"), undefined) : powers[i$1] = ((i$1 < 0 || i$1 >= powers.length) ? ($throwRuntimeError("index out of range"), undefined) : powers[i$1]).montgomery((x$1 = i$1 - 1 >> 0, ((x$1 < 0 || x$1 >= powers.length) ? ($throwRuntimeError("index out of range"), undefined) : powers[x$1])), powers[1], m, k0, numWords));
			i$1 = i$1 + (1) >> 0;
		}
		z = z.make(numWords);
		$copySlice(z, powers[0]);
		zz = zz.make(numWords);
		i$2 = y.$length - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			yi = ((i$2 < 0 || i$2 >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i$2]);
			j = 0;
			while (true) {
				if (!(j < 32)) { break; }
				if (!((i$2 === (y.$length - 1 >> 0))) || !((j === 0))) {
					zz = zz.montgomery(z, z, m, k0, numWords);
					z = z.montgomery(zz, zz, m, k0, numWords);
					zz = zz.montgomery(z, z, m, k0, numWords);
					z = z.montgomery(zz, zz, m, k0, numWords);
				}
				zz = zz.montgomery(z, (x$2 = yi >>> 28 >>> 0, ((x$2 < 0 || x$2 >= powers.length) ? ($throwRuntimeError("index out of range"), undefined) : powers[x$2])), m, k0, numWords);
				_tmp = zz;
				_tmp$1 = z;
				z = _tmp;
				zz = _tmp$1;
				yi = (y$2 = (4), y$2 < 32 ? (yi << y$2) : 0) >>> 0;
				j = j + (4) >> 0;
			}
			i$2 = i$2 - (1) >> 0;
		}
		zz = zz.montgomery(z, one, m, k0, numWords);
		/* */ if (zz.cmp(m) >= 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (zz.cmp(m) >= 0) { */ case 5:
			zz = zz.sub(zz, m);
			/* */ if (zz.cmp(m) >= 0) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (zz.cmp(m) >= 0) { */ case 7:
				_r$5 = (nat.nil).div(nat.nil, zz, m); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple$2 = _r$5;
				zz = _tuple$2[1];
			/* } */ case 8:
		/* } */ case 6:
		$s = -1; return zz.norm();
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.expNNMontgomery }; } $f.RR = RR; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.j = j; $f.k0 = k0; $f.m = m; $f.numWords = numWords; $f.one = one; $f.powers = powers; $f.rr = rr; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.yi = yi; $f.z = z; $f.zz = zz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.expNNMontgomery = function(x, y, m) { return this.$get().expNNMontgomery(x, y, m); };
	nat.prototype.bytes = function(buf) {
		var _i, _ref, buf, d, i, j, y, z;
		i = 0;
		z = this;
		i = buf.$length;
		_ref = z;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			d = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			j = 0;
			while (true) {
				if (!(j < 4)) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = ((d << 24 >>> 24)));
				d = (y = (8), y < 32 ? (d >>> y) : 0) >>> 0;
				j = j + (1) >> 0;
			}
			_i++;
		}
		while (true) {
			if (!(i < buf.$length && (((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i]) === 0))) { break; }
			i = i + (1) >> 0;
		}
		return i;
	};
	$ptrType(nat).prototype.bytes = function(buf) { return this.$get().bytes(buf); };
	nat.prototype.setBytes = function(buf) {
		var _q, buf, d, i, k, s, x, y, z;
		z = this;
		z = z.make((_q = (((buf.$length + 4 >> 0) - 1 >> 0)) / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		k = 0;
		s = 0;
		d = 0;
		i = buf.$length;
		while (true) {
			if (!(i > 0)) { break; }
			d = (d | (((y = s, y < 32 ? ((((x = i - 1 >> 0, ((x < 0 || x >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + x])) >>> 0)) << y) : 0) >>> 0))) >>> 0;
			s = s + (8) >>> 0;
			if (s === 32) {
				((k < 0 || k >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + k] = d);
				k = k + (1) >> 0;
				s = 0;
				d = 0;
			}
			i = i - (1) >> 0;
		}
		if (k < z.$length) {
			((k < 0 || k >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + k] = d);
		}
		return z.norm();
	};
	$ptrType(nat).prototype.setBytes = function(buf) { return this.$get().setBytes(buf); };
	nat.prototype.sqrt = function(x) {
		var _q, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, n, x, z, z1, z2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; n = $f.n; x = $f.x; z = $f.z; z1 = $f.z1; z2 = $f.z2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (x.cmp(natOne) <= 0) {
			$s = -1; return z.set(x);
		}
		if (alias(z, x)) {
			z = nat.nil;
		}
		_tmp = nat.nil;
		_tmp$1 = nat.nil;
		z1 = _tmp;
		z2 = _tmp$1;
		z1 = z;
		z1 = z1.setUint64(new $Uint64(0, 1));
		z1 = z1.shl(z1, ((((_q = x.bitLen() / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0) >>> 0)));
		n = 0;
		/* while (true) { */ case 1:
			_r$3 = z2.div(nat.nil, x, z1); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			z2 = _tuple[0];
			z2 = z2.add(z2, z1);
			z2 = z2.shr(z2, 1);
			if (z2.cmp(z1) >= 0) {
				if ((n & 1) === 0) {
					$s = -1; return z1;
				}
				$s = -1; return z.set(z1);
			}
			_tmp$2 = z2;
			_tmp$3 = z1;
			z1 = _tmp$2;
			z2 = _tmp$3;
			n = n + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return nat.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.sqrt }; } $f._q = _q; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.n = n; $f.x = x; $f.z = z; $f.z1 = z1; $f.z2 = z2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.sqrt = function(x) { return this.$get().sqrt(x); };
	maxPow = function(b) {
		var _q, _tmp, _tmp$1, b, max$1, n, p;
		p = 0;
		n = 0;
		_tmp = b;
		_tmp$1 = 1;
		p = _tmp;
		n = _tmp$1;
		max$1 = (_q = 4294967295 / b, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		while (true) {
			if (!(p <= max$1)) { break; }
			p = $imul(p, (b)) >>> 0;
			n = n + (1) >> 0;
		}
		return [p, n];
	};
	pow = function(x, n) {
		var n, p, x;
		p = 0;
		p = 1;
		while (true) {
			if (!(n > 0)) { break; }
			if (!(((n & 1) === 0))) {
				p = $imul(p, (x)) >>> 0;
			}
			x = $imul(x, (x)) >>> 0;
			n = (n >> $min((1), 31)) >> 0;
		}
		return p;
	};
	nat.prototype.scan = function(r, base, fracOk) {
		var _1, _2, _3, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, b, b1, base, baseOk, bn, ch, count, d1, di, dp, err, fracOk, i, n, r, res, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; b = $f.b; b1 = $f.b1; base = $f.base; baseOk = $f.baseOk; bn = $f.bn; ch = $f.ch; count = $f.count; d1 = $f.d1; di = $f.di; dp = $f.dp; err = $f.err; fracOk = $f.fracOk; i = $f.i; n = $f.n; r = $f.r; res = $f.res; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		res = nat.nil;
		b = 0;
		count = 0;
		err = $ifaceNil;
		z = this;
		baseOk = (base === 0) || !fracOk && 2 <= base && base <= 62 || fracOk && ((base === 2) || (base === 10) || (base === 16));
		/* */ if (!baseOk) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!baseOk) { */ case 1:
			_r$3 = fmt.Sprintf("illegal number base %d", new sliceType([new $Int(base)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String(_r$3));
		/* } */ case 2:
		_r$4 = r.ReadByte(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		ch = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [res, b, count, err];
		}
		b = base;
		/* */ if (base === 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (base === 0) { */ case 5:
			b = 10;
			/* */ if (ch === 48) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (ch === 48) { */ case 7:
				count = 1;
					_r$5 = r.ReadByte(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$1 = _r$5;
					ch = _tuple$1[0];
					err = _tuple$1[1];
					_1 = err;
					/* */ if ($interfaceIsEqual(_1, $ifaceNil)) { $s = 11; continue; }
					/* */ if ($interfaceIsEqual(_1, (io.EOF))) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if ($interfaceIsEqual(_1, $ifaceNil)) { */ case 11:
						if (!fracOk) {
							b = 8;
						}
						_2 = ch;
						if ((_2 === (120)) || (_2 === (88))) {
							b = 16;
						} else if ((_2 === (98)) || (_2 === (66))) {
							b = 2;
						}
							_3 = b;
							/* */ if ((_3 === (16)) || (_3 === (2))) { $s = 16; continue; }
							/* */ if (_3 === (8)) { $s = 17; continue; }
							/* */ $s = 18; continue;
							/* if ((_3 === (16)) || (_3 === (2))) { */ case 16:
								count = 0;
								_r$6 = r.ReadByte(); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
								_tuple$2 = _r$6;
								ch = _tuple$2[0];
								err = _tuple$2[1];
								if (!($interfaceIsEqual(err, $ifaceNil))) {
									$s = -1; return [res, b, count, err];
								}
								$s = 18; continue;
							/* } else if (_3 === (8)) { */ case 17:
								count = 0;
							/* } */ case 18:
						case 15:
						$s = 14; continue;
					/* } else if ($interfaceIsEqual(_1, (io.EOF))) { */ case 12:
						res = $subslice(z, 0, 0);
						err = $ifaceNil;
						$s = -1; return [res, b, count, err];
					/* } else { */ case 13:
						$s = -1; return [res, b, count, err];
					/* } */ case 14:
				case 9:
			/* } */ case 8:
		/* } */ case 6:
		z = $subslice(z, 0, 0);
		b1 = ((b >>> 0));
		_tuple$3 = maxPow(b1);
		bn = _tuple$3[0];
		n = _tuple$3[1];
		di = 0;
		i = 0;
		dp = -1;
		/* while (true) { */ case 20:
			/* */ if (fracOk && (ch === 46)) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (fracOk && (ch === 46)) { */ case 22:
				fracOk = false;
				dp = count;
				_r$7 = r.ReadByte(); /* */ $s = 24; case 24: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_tuple$4 = _r$7;
				ch = _tuple$4[0];
				err = _tuple$4[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					if ($interfaceIsEqual(err, io.EOF)) {
						err = $ifaceNil;
						/* break; */ $s = 21; continue;
					}
					$s = -1; return [res, b, count, err];
				}
			/* } */ case 23:
			d1 = 0;
			if (48 <= ch && ch <= 57) {
				d1 = (((ch - 48 << 24 >>> 24) >>> 0));
			} else if (97 <= ch && ch <= 122) {
				d1 = ((((ch - 97 << 24 >>> 24) + 10 << 24 >>> 24) >>> 0));
			} else if (65 <= ch && ch <= 90) {
				if (b <= 36) {
					d1 = ((((ch - 65 << 24 >>> 24) + 10 << 24 >>> 24) >>> 0));
				} else {
					d1 = ((((ch - 65 << 24 >>> 24) + 36 << 24 >>> 24) >>> 0));
				}
			} else {
				d1 = 63;
			}
			/* */ if (d1 >= b1) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (d1 >= b1) { */ case 25:
				_r$8 = r.UnreadByte(); /* */ $s = 27; case 27: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8;
				/* break; */ $s = 21; continue;
			/* } */ case 26:
			count = count + (1) >> 0;
			di = ($imul(di, b1) >>> 0) + d1 >>> 0;
			i = i + (1) >> 0;
			if (i === n) {
				z = z.mulAddWW(z, bn, di);
				di = 0;
				i = 0;
			}
			_r$9 = r.ReadByte(); /* */ $s = 28; case 28: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_tuple$5 = _r$9;
			ch = _tuple$5[0];
			err = _tuple$5[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF)) {
					err = $ifaceNil;
					/* break; */ $s = 21; continue;
				}
				$s = -1; return [res, b, count, err];
			}
		/* } */ $s = 20; continue; case 21:
		if (count === 0) {
			if ((base === 0) && (b === 8)) {
				count = 1;
				b = 10;
			} else if (!((base === 0)) || !((b === 8))) {
				err = errors.New("syntax error scanning number");
			}
			$s = -1; return [res, b, count, err];
		}
		if (i > 0) {
			z = z.mulAddWW(z, pow(b1, i), di);
		}
		res = z.norm();
		if (dp >= 0) {
			count = dp - count >> 0;
		}
		$s = -1; return [res, b, count, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.scan }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.b = b; $f.b1 = b1; $f.base = base; $f.baseOk = baseOk; $f.bn = bn; $f.ch = ch; $f.count = count; $f.d1 = d1; $f.di = di; $f.dp = dp; $f.err = err; $f.fracOk = fracOk; $f.i = i; $f.n = n; $f.r = r; $f.res = res; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.scan = function(r, base, fracOk) { return this.$get().scan(r, base, fracOk); };
	nat.prototype.utoa = function(base) {
		var _r$3, base, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; base = $f.base; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r$3 = x.itoa(false, base); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.utoa }; } $f._r$3 = _r$3; $f.base = base; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.utoa = function(base) { return this.$get().utoa(base); };
	nat.prototype.itoa = function(neg, base) {
		var _r$3, _tuple, b, base, bb, i, k, mask, nbits, ndigits, neg, q, s, shift, table, w, x, y, y$1, y$2, y$3, y$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tuple = $f._tuple; b = $f.b; base = $f.base; bb = $f.bb; i = $f.i; k = $f.k; mask = $f.mask; nbits = $f.nbits; ndigits = $f.ndigits; neg = $f.neg; q = $f.q; s = $f.s; shift = $f.shift; table = $f.table; w = $f.w; x = $f.x; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if (base < 2 || base > 62) {
			$panic(new $String("invalid base"));
		}
		if (x.$length === 0) {
			$s = -1; return (new sliceType$1($stringToBytes("0")));
		}
		i = (((x.bitLen()) / math.Log2((base)) >> 0)) + 1 >> 0;
		if (neg) {
			i = i + (1) >> 0;
		}
		s = $makeSlice(sliceType$1, i);
		b = ((base >>> 0));
		/* */ if (b === ((b & (-b >>> 0)) >>> 0)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b === ((b & (-b >>> 0)) >>> 0)) { */ case 1:
			shift = ((bits.TrailingZeros(((b >>> 0))) >>> 0));
			mask = ((((y = shift, y < 32 ? (1 << y) : 0) >>> 0) - 1 >>> 0));
			w = (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]);
			nbits = 32;
			k = 1;
			while (true) {
				if (!(k < x.$length)) { break; }
				while (true) {
					if (!(nbits >= shift)) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charCodeAt(((w & mask) >>> 0)));
					w = (y$1 = (shift), y$1 < 32 ? (w >>> y$1) : 0) >>> 0;
					nbits = nbits - (shift) >>> 0;
				}
				if (nbits === 0) {
					w = ((k < 0 || k >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + k]);
					nbits = 32;
				} else {
					w = (w | (((y$2 = nbits, y$2 < 32 ? (((k < 0 || k >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + k]) << y$2) : 0) >>> 0))) >>> 0;
					i = i - (1) >> 0;
					((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charCodeAt(((w & mask) >>> 0)));
					w = (y$3 = ((shift - nbits >>> 0)), y$3 < 32 ? (((k < 0 || k >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + k]) >>> y$3) : 0) >>> 0;
					nbits = 32 - ((shift - nbits >>> 0)) >>> 0;
				}
				k = k + (1) >> 0;
			}
			while (true) {
				if (!(!((w === 0)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charCodeAt(((w & mask) >>> 0)));
				w = (y$4 = (shift), y$4 < 32 ? (w >>> y$4) : 0) >>> 0;
			}
			$s = 3; continue;
		/* } else { */ case 2:
			_tuple = maxPow(b);
			bb = _tuple[0];
			ndigits = _tuple[1];
			_r$3 = divisors(x.$length, b, ndigits, bb); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			table = _r$3;
			q = (nat.nil).set(x);
			$r = q.convertWords(s, b, ndigits, bb, table); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = 0;
			while (true) {
				if (!(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]) === 48)) { break; }
				i = i + (1) >> 0;
			}
		/* } */ case 3:
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = 45);
		}
		$s = -1; return $subslice(s, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.itoa }; } $f._r$3 = _r$3; $f._tuple = _tuple; $f.b = b; $f.base = base; $f.bb = bb; $f.i = i; $f.k = k; $f.mask = mask; $f.nbits = nbits; $f.ndigits = ndigits; $f.neg = neg; $f.q = q; $f.s = s; $f.shift = shift; $f.table = table; $f.w = w; $f.x = x; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.itoa = function(neg, base) { return this.$get().itoa(neg, base); };
	nat.prototype.convertWords = function(s, b, ndigits, bb, table) {
		var _q, _q$1, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, b, bb, h, i, index, j, j$1, maxLength, minLength, ndigits, q, r, r$1, s, t, table, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; bb = $f.bb; h = $f.h; i = $f.i; index = $f.index; j = $f.j; j$1 = $f.j$1; maxLength = $f.maxLength; minLength = $f.minLength; ndigits = $f.ndigits; q = $f.q; r = $f.r; r$1 = $f.r$1; s = $f.s; t = $f.t; table = $f.table; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		q = this;
		/* */ if (!(table === sliceType$3.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(table === sliceType$3.nil)) { */ case 1:
			r = nat.nil;
			index = table.$length - 1 >> 0;
			/* while (true) { */ case 3:
				/* if (!(q.$length > leafSize)) { break; } */ if(!(q.$length > leafSize)) { $s = 4; continue; }
				maxLength = q.bitLen();
				minLength = maxLength >> 1 >> 0;
				while (true) {
					if (!(index > 0 && (x = index - 1 >> 0, ((x < 0 || x >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + x])).nbits > minLength)) { break; }
					index = index - (1) >> 0;
				}
				if (((index < 0 || index >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + index]).nbits >= maxLength && ((index < 0 || index >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + index]).bbb.cmp(q) >= 0) {
					index = index - (1) >> 0;
					if (index < 0) {
						$panic(new $String("internal inconsistency"));
					}
				}
				_r$3 = q.div(r, q, ((index < 0 || index >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + index]).bbb); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple = _r$3;
				q = _tuple[0];
				r = _tuple[1];
				h = s.$length - ((index < 0 || index >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + index]).ndigits >> 0;
				$r = r.convertWords($subslice(s, h), b, ndigits, bb, $subslice(table, 0, index)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				s = $subslice(s, 0, h);
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		i = s.$length;
		r$1 = 0;
		if (b === 10) {
			while (true) {
				if (!(q.$length > 0)) { break; }
				_tuple$1 = q.divW(q, bb);
				q = _tuple$1[0];
				r$1 = _tuple$1[1];
				j = 0;
				while (true) {
					if (!(j < ndigits && i > 0)) { break; }
					i = i - (1) >> 0;
					t = (_q = r$1 / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
					((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = (48 + (((r$1 - ($imul(t, 10) >>> 0) >>> 0) << 24 >>> 24)) << 24 >>> 24));
					r$1 = t;
					j = j + (1) >> 0;
				}
			}
		} else {
			while (true) {
				if (!(q.$length > 0)) { break; }
				_tuple$2 = q.divW(q, bb);
				q = _tuple$2[0];
				r$1 = _tuple$2[1];
				j$1 = 0;
				while (true) {
					if (!(j$1 < ndigits && i > 0)) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charCodeAt((_r$4 = r$1 % b, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"))));
					r$1 = (_q$1 = r$1 / (b), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
					j$1 = j$1 + (1) >> 0;
				}
			}
		}
		while (true) {
			if (!(i > 0)) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = 48);
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.convertWords }; } $f._q = _q; $f._q$1 = _q$1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.bb = bb; $f.h = h; $f.i = i; $f.index = index; $f.j = j; $f.j$1 = j$1; $f.maxLength = maxLength; $f.minLength = minLength; $f.ndigits = ndigits; $f.q = q; $f.r = r; $f.r$1 = r$1; $f.s = s; $f.t = t; $f.table = table; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.convertWords = function(s, b, ndigits, bb, table) { return this.$get().convertWords(s, b, ndigits, bb, table); };
	nat.prototype.expWW = function(x, y) {
		var _r$3, x, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.expNN((nat.nil).setWord(x), (nat.nil).setWord(y), nat.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.expWW }; } $f._r$3 = _r$3; $f.x = x; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.expWW = function(x, y) { return this.$get().expWW(x, y); };
	divisors = function(m, b, ndigits, bb) {
		var _r$3, b, bb, i, k, larger, m, ndigits, table, words, x, x$1, x$2, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; b = $f.b; bb = $f.bb; i = $f.i; k = $f.k; larger = $f.larger; m = $f.m; ndigits = $f.ndigits; table = $f.table; words = $f.words; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ((leafSize === 0) || m <= leafSize) {
			$s = -1; return sliceType$3.nil;
		}
		k = 1;
		words = leafSize;
		while (true) {
			if (!(words < (m >> 1 >> 0) && k < 64)) { break; }
			k = k + (1) >> 0;
			words = (y = (1), y < 32 ? (words << y) : 0) >> 0;
		}
		table = sliceType$3.nil;
		if (b === 10) {
			cacheBase10.Mutex.Lock();
			table = $subslice(new sliceType$3(cacheBase10.table), 0, k);
		} else {
			table = $makeSlice(sliceType$3, k);
		}
		/* */ if ((x = k - 1 >> 0, ((x < 0 || x >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + x])).ndigits === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x = k - 1 >> 0, ((x < 0 || x >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + x])).ndigits === 0) { */ case 1:
			larger = nat.nil;
			i = 0;
			/* while (true) { */ case 3:
				/* if (!(i < k)) { break; } */ if(!(i < k)) { $s = 4; continue; }
				/* */ if (((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).ndigits === 0) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).ndigits === 0) { */ case 5:
					/* */ if (i === 0) { $s = 7; continue; }
					/* */ $s = 8; continue;
					/* if (i === 0) { */ case 7:
						_r$3 = (nat.nil).expWW(bb, ((leafSize >>> 0))); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						(0 >= table.$length ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + 0]).bbb = _r$3;
						(0 >= table.$length ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + 0]).ndigits = $imul(ndigits, leafSize);
						$s = 9; continue;
					/* } else { */ case 8:
						((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).bbb = (nat.nil).sqr((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + x$1])).bbb);
						((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).ndigits = $imul(2, (x$2 = i - 1 >> 0, ((x$2 < 0 || x$2 >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + x$2])).ndigits);
					/* } */ case 9:
					larger = (nat.nil).set(((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).bbb);
					while (true) {
						if (!(mulAddVWW($subslice(new sliceType$2(larger.$array), larger.$offset, larger.$offset + larger.$length), $subslice(new sliceType$2(larger.$array), larger.$offset, larger.$offset + larger.$length), b, 0) === 0)) { break; }
						((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).bbb = ((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).bbb.set(larger);
						((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).ndigits = ((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).ndigits + (1) >> 0;
					}
					((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).nbits = ((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).bbb.bitLen();
				/* } */ case 6:
				i = i + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		if (b === 10) {
			cacheBase10.Mutex.Unlock();
		}
		$s = -1; return table;
		/* */ } return; } if ($f === undefined) { $f = { $blk: divisors }; } $f._r$3 = _r$3; $f.b = b; $f.bb = bb; $f.i = i; $f.k = k; $f.larger = larger; $f.m = m; $f.ndigits = ndigits; $f.table = table; $f.words = words; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.ptr.prototype.ProbablyPrime = function(n) {
		var _1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _v, n, r, rA, rB, w, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _v = $f._v; n = $f.n; r = $f.r; rA = $f.rA; rB = $f.rB; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if (n < 0) {
			$panic(new $String("negative n for ProbablyPrime"));
		}
		if (x.neg || (x.abs.$length === 0)) {
			$s = -1; return false;
		}
		w = (x$1 = x.abs, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0]));
		if ((x.abs.$length === 1) && w < 64) {
			$s = -1; return !((x$2 = (x$3 = $shiftLeft64(new $Uint64(0, 1), w), new $Uint64(673221152 & x$3.$high, (2693408940 & x$3.$low) >>> 0)), (x$2.$high === 0 && x$2.$low === 0)));
		}
		if (((w & 1) >>> 0) === 0) {
			$s = -1; return false;
		}
		_tmp = 0;
		_tmp$1 = 0;
		rA = _tmp;
		rB = _tmp$1;
		_1 = 32;
		if (_1 === (32)) {
			rA = ((x.abs.modW(4127218095) >>> 0));
			rB = ((x.abs.modW(3948078067) >>> 0));
		} else if (_1 === (64)) {
			r = x.abs.modW(820596253);
			rA = (((_r$3 = r % 4127218095, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) >>> 0));
			rB = (((_r$4 = r % 3948078067, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")) >>> 0));
		} else {
			$panic(new $String("math/big: invalid word size"));
		}
		if (((_r$5 = rA % 3, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$6 = rA % 5, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$7 = rA % 7, _r$7 === _r$7 ? _r$7 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$8 = rA % 11, _r$8 === _r$8 ? _r$8 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$9 = rA % 13, _r$9 === _r$9 ? _r$9 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$10 = rA % 17, _r$10 === _r$10 ? _r$10 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$11 = rA % 19, _r$11 === _r$11 ? _r$11 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$12 = rA % 23, _r$12 === _r$12 ? _r$12 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$13 = rA % 37, _r$13 === _r$13 ? _r$13 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$14 = rB % 29, _r$14 === _r$14 ? _r$14 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$15 = rB % 31, _r$15 === _r$15 ? _r$15 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$16 = rB % 41, _r$16 === _r$16 ? _r$16 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$17 = rB % 43, _r$17 === _r$17 ? _r$17 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$18 = rB % 47, _r$18 === _r$18 ? _r$18 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$19 = rB % 53, _r$19 === _r$19 ? _r$19 : $throwRuntimeError("integer divide by zero")) === 0)) {
			$s = -1; return false;
		}
		_r$20 = x.abs.probablyPrimeMillerRabin(n + 1 >> 0, true); /* */ $s = 2; case 2: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		if (!(_r$20)) { _v = false; $s = 1; continue s; }
		_r$21 = x.abs.probablyPrimeLucas(); /* */ $s = 3; case 3: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		_v = _r$21; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.ProbablyPrime }; } $f._1 = _1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._v = _v; $f.n = n; $f.r = r; $f.rA = rA; $f.rB = rB; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.ProbablyPrime = function(n) { return this.$val.ProbablyPrime(n); };
	nat.prototype.probablyPrimeMillerRabin = function(reps, force2) {
		var _r$3, _r$4, _r$5, _tmp, _tmp$1, _tmp$2, _tuple, force2, i, j, k, n, nm1, nm3, nm3Len, q, quotient, rand$1, reps, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; force2 = $f.force2; i = $f.i; j = $f.j; k = $f.k; n = $f.n; nm1 = $f.nm1; nm3 = $f.nm3; nm3Len = $f.nm3Len; q = $f.q; quotient = $f.quotient; rand$1 = $f.rand$1; reps = $f.reps; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = this;
		nm1 = (nat.nil).sub(n, natOne);
		k = nm1.trailingZeroBits();
		q = (nat.nil).shr(nm1, k);
		nm3 = (nat.nil).sub(nm1, natTwo);
		rand$1 = rand.New(rand.NewSource(((x = (0 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 0]), new $Int64(0, x.constructor === Number ? x : 1)))));
		_tmp = nat.nil;
		_tmp$1 = nat.nil;
		_tmp$2 = nat.nil;
		x$1 = _tmp;
		y = _tmp$1;
		quotient = _tmp$2;
		nm3Len = nm3.bitLen();
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < reps)) { break; } */ if(!(i < reps)) { $s = 2; continue; }
			/* */ if ((i === (reps - 1 >> 0)) && force2) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((i === (reps - 1 >> 0)) && force2) { */ case 3:
				x$1 = x$1.set(natTwo);
				$s = 5; continue;
			/* } else { */ case 4:
				_r$3 = x$1.random(rand$1, nm3, nm3Len); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				x$1 = _r$3;
				x$1 = x$1.add(x$1, natTwo);
			/* } */ case 5:
			_r$4 = y.expNN(x$1, q, n); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			y = _r$4;
			/* */ if ((y.cmp(natOne) === 0) || (y.cmp(nm1) === 0)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((y.cmp(natOne) === 0) || (y.cmp(nm1) === 0)) { */ case 8:
				i = i + (1) >> 0;
				/* continue; */ $s = 1; continue;
			/* } */ case 9:
			j = 1;
			/* while (true) { */ case 10:
				/* if (!(j < k)) { break; } */ if(!(j < k)) { $s = 11; continue; }
				y = y.sqr(y);
				_r$5 = quotient.div(y, y, n); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple = _r$5;
				quotient = _tuple[0];
				y = _tuple[1];
				if (y.cmp(nm1) === 0) {
					i = i + (1) >> 0;
					/* continue NextRandom; */ $s = 1; continue s;
				}
				if (y.cmp(natOne) === 0) {
					$s = -1; return false;
				}
				j = j + (1) >>> 0;
			/* } */ $s = 10; continue; case 11:
			$s = -1; return false;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.probablyPrimeMillerRabin }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f.force2 = force2; $f.i = i; $f.j = j; $f.k = k; $f.n = n; $f.nm1 = nm1; $f.nm3 = nm3; $f.nm3Len = nm3Len; $f.q = q; $f.quotient = quotient; $f.rand$1 = rand$1; $f.reps = reps; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.probablyPrimeMillerRabin = function(reps, force2) { return this.$get().probablyPrimeMillerRabin(reps, force2); };
	nat.prototype.probablyPrimeLucas = function() {
		var _r$10, _r$11, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, d, i, intD, intN, j, n, natP, nm2, p, r, s, t, t1, t1$1, t2, t2$1, t3, vk, vk1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; d = $f.d; i = $f.i; intD = $f.intD; intN = $f.intN; j = $f.j; n = $f.n; natP = $f.natP; nm2 = $f.nm2; p = $f.p; r = $f.r; s = $f.s; t = $f.t; t1 = $f.t1; t1$1 = $f.t1$1; t2 = $f.t2; t2$1 = $f.t2$1; t3 = $f.t3; vk = $f.vk; vk1 = $f.vk1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = this;
		if ((n.$length === 0) || (n.cmp(natOne) === 0)) {
			$s = -1; return false;
		}
		if ((((0 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 0]) & 1) >>> 0) === 0) {
			$s = -1; return n.cmp(natTwo) === 0;
		}
		p = 3;
		d = new nat([1]);
		t1 = (nat.nil);
		intD = new Int.ptr(false, d);
		intN = new Int.ptr(false, n);
		/* while (true) { */ case 1:
			/* */ if (p > 10000) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (p > 10000) { */ case 3:
				_r$3 = intN.String(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$panic(new $String("math/big: internal error: cannot find (D/n) = -1 for " + _r$3));
			/* } */ case 4:
			(0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0] = (($imul(p, p) >>> 0) - 4 >>> 0));
			_r$4 = Jacobi(intD, intN); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			j = _r$4;
			if (j === -1) {
				/* break; */ $s = 2; continue;
			}
			if (j === 0) {
				$s = -1; return (n.$length === 1) && ((0 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 0]) === (p + 2 >>> 0));
			}
			/* */ if (p === 40) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (p === 40) { */ case 7:
				_r$5 = t1.sqrt(n); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				t1 = _r$5;
				t1 = t1.sqr(t1);
				if (t1.cmp(n) === 0) {
					$s = -1; return false;
				}
			/* } */ case 8:
			p = p + (1) >>> 0;
		/* } */ $s = 1; continue; case 2:
		s = (nat.nil).add(n, natOne);
		r = ((s.trailingZeroBits() >> 0));
		s = s.shr(s, ((r >>> 0)));
		nm2 = (nat.nil).sub(n, natTwo);
		natP = (nat.nil).setWord(p);
		vk = (nat.nil).setWord(2);
		vk1 = (nat.nil).setWord(p);
		t2 = (nat.nil);
		i = (s.bitLen());
		/* while (true) { */ case 10:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 11; continue; }
			/* */ if (!((s.bit(((i >>> 0))) === 0))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (!((s.bit(((i >>> 0))) === 0))) { */ case 12:
				t1 = t1.mul(vk, vk1);
				t1 = t1.add(t1, n);
				t1 = t1.sub(t1, natP);
				_r$6 = t2.div(vk, t1, n); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple = _r$6;
				t2 = _tuple[0];
				vk = _tuple[1];
				t1 = t1.sqr(vk1);
				t1 = t1.add(t1, nm2);
				_r$7 = t2.div(vk1, t1, n); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_tuple$1 = _r$7;
				t2 = _tuple$1[0];
				vk1 = _tuple$1[1];
				$s = 14; continue;
			/* } else { */ case 13:
				t1 = t1.mul(vk, vk1);
				t1 = t1.add(t1, n);
				t1 = t1.sub(t1, natP);
				_r$8 = t2.div(vk1, t1, n); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_tuple$2 = _r$8;
				t2 = _tuple$2[0];
				vk1 = _tuple$2[1];
				t1 = t1.sqr(vk);
				t1 = t1.add(t1, nm2);
				_r$9 = t2.div(vk, t1, n); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_tuple$3 = _r$9;
				t2 = _tuple$3[0];
				vk = _tuple$3[1];
			/* } */ case 14:
			i = i - (1) >> 0;
		/* } */ $s = 10; continue; case 11:
		/* */ if ((vk.cmp(natTwo) === 0) || (vk.cmp(nm2) === 0)) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if ((vk.cmp(natTwo) === 0) || (vk.cmp(nm2) === 0)) { */ case 19:
			t1$1 = t1.mul(vk, natP);
			t2$1 = t2.shl(vk1, 1);
			if (t1$1.cmp(t2$1) < 0) {
				_tmp = t2$1;
				_tmp$1 = t1$1;
				t1$1 = _tmp;
				t2$1 = _tmp$1;
			}
			t1$1 = t1$1.sub(t1$1, t2$1);
			t3 = vk1;
			vk1 = nat.nil;
			$unused(vk1);
			_r$10 = t2$1.div(t3, t1$1, n); /* */ $s = 21; case 21: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_tuple$4 = _r$10;
			t2$1 = _tuple$4[0];
			t3 = _tuple$4[1];
			if (t3.$length === 0) {
				$s = -1; return true;
			}
		/* } */ case 20:
		t = 0;
		/* while (true) { */ case 22:
			/* if (!(t < (r - 1 >> 0))) { break; } */ if(!(t < (r - 1 >> 0))) { $s = 23; continue; }
			if (vk.$length === 0) {
				$s = -1; return true;
			}
			if ((vk.$length === 1) && ((0 >= vk.$length ? ($throwRuntimeError("index out of range"), undefined) : vk.$array[vk.$offset + 0]) === 2)) {
				$s = -1; return false;
			}
			t1 = t1.sqr(vk);
			t1 = t1.sub(t1, natTwo);
			_r$11 = t2.div(vk, t1, n); /* */ $s = 24; case 24: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_tuple$5 = _r$11;
			t2 = _tuple$5[0];
			vk = _tuple$5[1];
			t = t + (1) >> 0;
		/* } */ $s = 22; continue; case 23:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.probablyPrimeLucas }; } $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.d = d; $f.i = i; $f.intD = intD; $f.intN = intN; $f.j = j; $f.n = n; $f.natP = natP; $f.nm2 = nm2; $f.p = p; $f.r = r; $f.s = s; $f.t = t; $f.t1 = t1; $f.t1$1 = t1$1; $f.t2 = t2; $f.t2$1 = t2$1; $f.t3 = t3; $f.vk = vk; $f.vk1 = vk1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.probablyPrimeLucas = function() { return this.$get().probablyPrimeLucas(); };
	NewRat = function(a, b) {
		var _r$3, a, b, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; a = $f.a; b = $f.b; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = new Rat.ptr(new Int.ptr(false, nat.nil), new Int.ptr(false, nat.nil)).SetFrac64(a, b); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewRat }; } $f._r$3 = _r$3; $f.a = a; $f.b = b; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewRat = NewRat;
	Rat.ptr.prototype.SetFloat64 = function(f) {
		var _1, _r$3, bits$1, exp, f, mantissa, shift, x, x$1, x$2, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; bits$1 = $f.bits$1; exp = $f.exp; f = $f.f; mantissa = $f.mantissa; shift = $f.shift; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		bits$1 = math.Float64bits(f);
		mantissa = new $Uint64(bits$1.$high & 1048575, (bits$1.$low & 4294967295) >>> 0);
		exp = (((x = $shiftRightUint64(bits$1, 52), new $Uint64(x.$high & 0, (x.$low & 2047) >>> 0)).$low >> 0));
		_1 = exp;
		if (_1 === (2047)) {
			$s = -1; return ptrType$2.nil;
		} else if (_1 === (0)) {
			exp = exp - (1022) >> 0;
		} else {
			mantissa = (x$1 = new $Uint64(1048576, 0), new $Uint64(mantissa.$high | x$1.$high, (mantissa.$low | x$1.$low) >>> 0));
			exp = exp - (1023) >> 0;
		}
		shift = 52 - exp >> 0;
		while (true) {
			if (!((x$2 = new $Uint64(mantissa.$high & 0, (mantissa.$low & 1) >>> 0), (x$2.$high === 0 && x$2.$low === 0)) && shift > 0)) { break; }
			mantissa = $shiftRightUint64(mantissa, (1));
			shift = shift - (1) >> 0;
		}
		z.a.SetUint64(mantissa);
		z.a.neg = f < 0;
		z.b.Set(intOne);
		if (shift > 0) {
			z.b.Lsh(z.b, ((shift >>> 0)));
		} else {
			z.a.Lsh(z.a, ((-shift >>> 0)));
		}
		_r$3 = z.norm(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.SetFloat64 }; } $f._1 = _1; $f._r$3 = _r$3; $f.bits$1 = bits$1; $f.exp = exp; $f.f = f; $f.mantissa = mantissa; $f.shift = shift; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.SetFloat64 = function(f) { return this.$val.SetFloat64(f); };
	quotToFloat32 = function(a, b) {
		var _r$3, _r$4, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, a, a2, alen, b, b2, blen, exact, exp, f, haveRem, lostbits, mantissa, q, r, shift, shift$1, y, y$1, y$2, y$3, y$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; a = $f.a; a2 = $f.a2; alen = $f.alen; b = $f.b; b2 = $f.b2; blen = $f.blen; exact = $f.exact; exp = $f.exp; f = $f.f; haveRem = $f.haveRem; lostbits = $f.lostbits; mantissa = $f.mantissa; q = $f.q; r = $f.r; shift = $f.shift; shift$1 = $f.shift$1; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = 0;
		exact = false;
		alen = a.bitLen();
		if (alen === 0) {
			_tmp = 0;
			_tmp$1 = true;
			f = _tmp;
			exact = _tmp$1;
			$s = -1; return [f, exact];
		}
		blen = b.bitLen();
		if (blen === 0) {
			$panic(new $String("division by zero"));
		}
		exp = alen - blen >> 0;
		_tmp$2 = nat.nil;
		_tmp$3 = nat.nil;
		a2 = _tmp$2;
		b2 = _tmp$3;
		a2 = a2.set(a);
		b2 = b2.set(b);
		shift = 25 - exp >> 0;
		if (shift > 0) {
			a2 = a2.shl(a2, ((shift >>> 0)));
		} else if (shift < 0) {
			b2 = b2.shl(b2, ((-shift >>> 0)));
		}
		q = nat.nil;
		_r$3 = q.div(a2, a2, b2); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		q = _tuple[0];
		r = _tuple[1];
		mantissa = low32(q);
		haveRem = r.$length > 0;
		if ((mantissa >>> 25 >>> 0) === 1) {
			if (((mantissa & 1) >>> 0) === 1) {
				haveRem = true;
			}
			mantissa = (y = (1), y < 32 ? (mantissa >>> y) : 0) >>> 0;
			exp = exp + (1) >> 0;
		}
		/* */ if (!(((mantissa >>> 24 >>> 0) === 1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(((mantissa >>> 24 >>> 0) === 1))) { */ case 2:
			_r$4 = fmt.Sprintf("expected exactly %d bits of result", new sliceType([new $Int(25)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$panic(new $String(_r$4));
		/* } */ case 3:
		if (-149 <= exp && exp <= -126) {
			shift$1 = (((-126 - ((exp - 1 >> 0)) >> 0) >>> 0));
			lostbits = (mantissa & ((((y$1 = shift$1, y$1 < 32 ? (1 << y$1) : 0) >>> 0) - 1 >>> 0))) >>> 0;
			haveRem = haveRem || !((lostbits === 0));
			mantissa = (y$2 = (shift$1), y$2 < 32 ? (mantissa >>> y$2) : 0) >>> 0;
			exp = -125;
		}
		exact = !haveRem;
		if (!((((mantissa & 1) >>> 0) === 0))) {
			exact = false;
			if (haveRem || !((((mantissa & 2) >>> 0) === 0))) {
				mantissa = mantissa + (1) >>> 0;
				if (mantissa >= 33554432) {
					mantissa = (y$3 = (1), y$3 < 32 ? (mantissa >>> y$3) : 0) >>> 0;
					exp = exp + (1) >> 0;
				}
			}
		}
		mantissa = (y$4 = (1), y$4 < 32 ? (mantissa >>> y$4) : 0) >>> 0;
		f = ($fround(math.Ldexp((mantissa), exp - 24 >> 0)));
		if (math.IsInf((f), 0)) {
			exact = false;
		}
		$s = -1; return [f, exact];
		/* */ } return; } if ($f === undefined) { $f = { $blk: quotToFloat32 }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.a = a; $f.a2 = a2; $f.alen = alen; $f.b = b; $f.b2 = b2; $f.blen = blen; $f.exact = exact; $f.exp = exp; $f.f = f; $f.haveRem = haveRem; $f.lostbits = lostbits; $f.mantissa = mantissa; $f.q = q; $f.r = r; $f.shift = shift; $f.shift$1 = shift$1; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	quotToFloat64 = function(a, b) {
		var _r$3, _r$4, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, a, a2, alen, b, b2, blen, exact, exp, f, haveRem, lostbits, mantissa, q, r, shift, shift$1, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; a = $f.a; a2 = $f.a2; alen = $f.alen; b = $f.b; b2 = $f.b2; blen = $f.blen; exact = $f.exact; exp = $f.exp; f = $f.f; haveRem = $f.haveRem; lostbits = $f.lostbits; mantissa = $f.mantissa; q = $f.q; r = $f.r; shift = $f.shift; shift$1 = $f.shift$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = 0;
		exact = false;
		alen = a.bitLen();
		if (alen === 0) {
			_tmp = 0;
			_tmp$1 = true;
			f = _tmp;
			exact = _tmp$1;
			$s = -1; return [f, exact];
		}
		blen = b.bitLen();
		if (blen === 0) {
			$panic(new $String("division by zero"));
		}
		exp = alen - blen >> 0;
		_tmp$2 = nat.nil;
		_tmp$3 = nat.nil;
		a2 = _tmp$2;
		b2 = _tmp$3;
		a2 = a2.set(a);
		b2 = b2.set(b);
		shift = 54 - exp >> 0;
		if (shift > 0) {
			a2 = a2.shl(a2, ((shift >>> 0)));
		} else if (shift < 0) {
			b2 = b2.shl(b2, ((-shift >>> 0)));
		}
		q = nat.nil;
		_r$3 = q.div(a2, a2, b2); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		q = _tuple[0];
		r = _tuple[1];
		mantissa = low64(q);
		haveRem = r.$length > 0;
		if ((x = $shiftRightUint64(mantissa, 54), (x.$high === 0 && x.$low === 1))) {
			if ((x$1 = new $Uint64(mantissa.$high & 0, (mantissa.$low & 1) >>> 0), (x$1.$high === 0 && x$1.$low === 1))) {
				haveRem = true;
			}
			mantissa = $shiftRightUint64(mantissa, (1));
			exp = exp + (1) >> 0;
		}
		/* */ if (!((x$2 = $shiftRightUint64(mantissa, 53), (x$2.$high === 0 && x$2.$low === 1)))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((x$2 = $shiftRightUint64(mantissa, 53), (x$2.$high === 0 && x$2.$low === 1)))) { */ case 2:
			_r$4 = fmt.Sprintf("expected exactly %d bits of result", new sliceType([new $Int(54)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$panic(new $String(_r$4));
		/* } */ case 3:
		if (-1074 <= exp && exp <= -1022) {
			shift$1 = (((-1022 - ((exp - 1 >> 0)) >> 0) >>> 0));
			lostbits = (x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), shift$1), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(mantissa.$high & x$3.$high, (mantissa.$low & x$3.$low) >>> 0));
			haveRem = haveRem || !((lostbits.$high === 0 && lostbits.$low === 0));
			mantissa = $shiftRightUint64(mantissa, (shift$1));
			exp = -1021;
		}
		exact = !haveRem;
		if (!((x$5 = new $Uint64(mantissa.$high & 0, (mantissa.$low & 1) >>> 0), (x$5.$high === 0 && x$5.$low === 0)))) {
			exact = false;
			if (haveRem || !((x$6 = new $Uint64(mantissa.$high & 0, (mantissa.$low & 2) >>> 0), (x$6.$high === 0 && x$6.$low === 0)))) {
				mantissa = (x$7 = new $Uint64(0, 1), new $Uint64(mantissa.$high + x$7.$high, mantissa.$low + x$7.$low));
				if ((mantissa.$high > 4194304 || (mantissa.$high === 4194304 && mantissa.$low >= 0))) {
					mantissa = $shiftRightUint64(mantissa, (1));
					exp = exp + (1) >> 0;
				}
			}
		}
		mantissa = $shiftRightUint64(mantissa, (1));
		f = math.Ldexp(($flatten64(mantissa)), exp - 53 >> 0);
		if (math.IsInf(f, 0)) {
			exact = false;
		}
		$s = -1; return [f, exact];
		/* */ } return; } if ($f === undefined) { $f = { $blk: quotToFloat64 }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.a = a; $f.a2 = a2; $f.alen = alen; $f.b = b; $f.b2 = b2; $f.blen = blen; $f.exact = exact; $f.exp = exp; $f.f = f; $f.haveRem = haveRem; $f.lostbits = lostbits; $f.mantissa = mantissa; $f.q = q; $f.r = r; $f.shift = shift; $f.shift$1 = shift$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.ptr.prototype.Float32 = function() {
		var _r$3, _tuple, b, exact, f, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tuple = $f._tuple; b = $f.b; exact = $f.exact; f = $f.f; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = 0;
		exact = false;
		x = this;
		b = x.b.abs;
		if (b.$length === 0) {
			b = b.set(natOne);
		}
		_r$3 = quotToFloat32(x.a.abs, b); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		f = _tuple[0];
		exact = _tuple[1];
		if (x.a.neg) {
			f = -f;
		}
		$s = -1; return [f, exact];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.Float32 }; } $f._r$3 = _r$3; $f._tuple = _tuple; $f.b = b; $f.exact = exact; $f.f = f; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.Float32 = function() { return this.$val.Float32(); };
	Rat.ptr.prototype.Float64 = function() {
		var _r$3, _tuple, b, exact, f, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tuple = $f._tuple; b = $f.b; exact = $f.exact; f = $f.f; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = 0;
		exact = false;
		x = this;
		b = x.b.abs;
		if (b.$length === 0) {
			b = b.set(natOne);
		}
		_r$3 = quotToFloat64(x.a.abs, b); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		f = _tuple[0];
		exact = _tuple[1];
		if (x.a.neg) {
			f = -f;
		}
		$s = -1; return [f, exact];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.Float64 }; } $f._r$3 = _r$3; $f._tuple = _tuple; $f.b = b; $f.exact = exact; $f.f = f; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.Float64 = function() { return this.$val.Float64(); };
	Rat.ptr.prototype.SetFrac = function(a, b) {
		var _r$3, a, b, babs, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; a = $f.a; b = $f.b; babs = $f.babs; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		z.a.neg = !(a.neg === b.neg);
		babs = b.abs;
		if (babs.$length === 0) {
			$panic(new $String("division by zero"));
		}
		if (z.a === b || alias(z.a.abs, babs)) {
			babs = (nat.nil).set(babs);
		}
		z.a.abs = z.a.abs.set(a.abs);
		z.b.abs = z.b.abs.set(babs);
		_r$3 = z.norm(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.SetFrac }; } $f._r$3 = _r$3; $f.a = a; $f.b = b; $f.babs = babs; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.SetFrac = function(a, b) { return this.$val.SetFrac(a, b); };
	Rat.ptr.prototype.SetFrac64 = function(a, b) {
		var _r$3, a, b, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; a = $f.a; b = $f.b; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		z.a.SetInt64(a);
		if ((b.$high === 0 && b.$low === 0)) {
			$panic(new $String("division by zero"));
		}
		if ((b.$high < 0 || (b.$high === 0 && b.$low < 0))) {
			b = new $Int64(-b.$high, -b.$low);
			z.a.neg = !z.a.neg;
		}
		z.b.abs = z.b.abs.setUint64((new $Uint64(b.$high, b.$low)));
		_r$3 = z.norm(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.SetFrac64 }; } $f._r$3 = _r$3; $f.a = a; $f.b = b; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.SetFrac64 = function(a, b) { return this.$val.SetFrac64(a, b); };
	Rat.ptr.prototype.SetInt = function(x) {
		var x, z;
		z = this;
		z.a.Set(x);
		z.b.abs = $subslice(z.b.abs, 0, 0);
		return z;
	};
	Rat.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Rat.ptr.prototype.SetInt64 = function(x) {
		var x, z;
		z = this;
		z.a.SetInt64(x);
		z.b.abs = $subslice(z.b.abs, 0, 0);
		return z;
	};
	Rat.prototype.SetInt64 = function(x) { return this.$val.SetInt64(x); };
	Rat.ptr.prototype.Set = function(x) {
		var x, z;
		z = this;
		if (!(z === x)) {
			z.a.Set(x.a);
			z.b.Set(x.b);
		}
		return z;
	};
	Rat.prototype.Set = function(x) { return this.$val.Set(x); };
	Rat.ptr.prototype.Abs = function(x) {
		var x, z;
		z = this;
		z.Set(x);
		z.a.neg = false;
		return z;
	};
	Rat.prototype.Abs = function(x) { return this.$val.Abs(x); };
	Rat.ptr.prototype.Neg = function(x) {
		var x, z;
		z = this;
		z.Set(x);
		z.a.neg = z.a.abs.$length > 0 && !z.a.neg;
		return z;
	};
	Rat.prototype.Neg = function(x) { return this.$val.Neg(x); };
	Rat.ptr.prototype.Inv = function(x) {
		var _tmp, _tmp$1, a, b, x, z;
		z = this;
		if (x.a.abs.$length === 0) {
			$panic(new $String("division by zero"));
		}
		z.Set(x);
		a = z.b.abs;
		if (a.$length === 0) {
			a = a.set(natOne);
		}
		b = z.a.abs;
		if (b.cmp(natOne) === 0) {
			b = $subslice(b, 0, 0);
		}
		_tmp = a;
		_tmp$1 = b;
		z.a.abs = _tmp;
		z.b.abs = _tmp$1;
		return z;
	};
	Rat.prototype.Inv = function(x) { return this.$val.Inv(x); };
	Rat.ptr.prototype.Sign = function() {
		var x;
		x = this;
		return x.a.Sign();
	};
	Rat.prototype.Sign = function() { return this.$val.Sign(); };
	Rat.ptr.prototype.IsInt = function() {
		var x;
		x = this;
		return (x.b.abs.$length === 0) || (x.b.abs.cmp(natOne) === 0);
	};
	Rat.prototype.IsInt = function() { return this.$val.IsInt(); };
	Rat.ptr.prototype.Num = function() {
		var x;
		x = this;
		return x.a;
	};
	Rat.prototype.Num = function() { return this.$val.Num(); };
	Rat.ptr.prototype.Denom = function() {
		var x;
		x = this;
		x.b.neg = false;
		if (x.b.abs.$length === 0) {
			x.b.abs = x.b.abs.set(natOne);
		}
		return x.b;
	};
	Rat.prototype.Denom = function() { return this.$val.Denom(); };
	Rat.ptr.prototype.norm = function() {
		var _r$3, _r$4, _r$5, _tuple, _tuple$1, f, neg, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; f = $f.f; neg = $f.neg; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
			/* */ if ((z.a.abs.$length === 0)) { $s = 2; continue; }
			/* */ if ((z.b.abs.$length === 0)) { $s = 3; continue; }
			/* */ if ((z.b.abs.cmp(natOne) === 0)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((z.a.abs.$length === 0)) { */ case 2:
				z.a.neg = false;
				z.b.abs = $subslice(z.b.abs, 0, 0);
				$s = 6; continue;
			/* } else if ((z.b.abs.$length === 0)) { */ case 3:
				$s = 6; continue;
			/* } else if ((z.b.abs.cmp(natOne) === 0)) { */ case 4:
				z.b.abs = $subslice(z.b.abs, 0, 0);
				$s = 6; continue;
			/* } else { */ case 5:
				neg = z.a.neg;
				z.a.neg = false;
				z.b.neg = false;
				_r$3 = NewInt(new $Int64(0, 0)).lehmerGCD(z.a, z.b); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				f = _r$3;
				/* */ if (!((f.Cmp(intOne) === 0))) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!((f.Cmp(intOne) === 0))) { */ case 8:
					_r$4 = z.a.abs.div(nat.nil, z.a.abs, f.abs); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_tuple = _r$4;
					z.a.abs = _tuple[0];
					_r$5 = z.b.abs.div(nat.nil, z.b.abs, f.abs); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$1 = _r$5;
					z.b.abs = _tuple$1[0];
					if (z.b.abs.cmp(natOne) === 0) {
						z.b.abs = $subslice(z.b.abs, 0, 0);
					}
				/* } */ case 9:
				z.a.neg = neg;
			/* } */ case 6:
		case 1:
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.norm }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.f = f; $f.neg = neg; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.norm = function() { return this.$val.norm(); };
	mulDenom = function(z, x, y) {
		var x, y, z;
		if ((x.$length === 0)) {
			return z.set(y);
		} else if ((y.$length === 0)) {
			return z.set(x);
		}
		return z.mul(x, y);
	};
	scaleDenom = function(x, f) {
		var f, x, z;
		z = new Int.ptr(false, nat.nil);
		if (f.$length === 0) {
			return z.Set(x);
		}
		z.abs = z.abs.mul(x.abs, f);
		z.neg = x.neg;
		return z;
	};
	Rat.ptr.prototype.Cmp = function(y) {
		var x, y;
		x = this;
		return scaleDenom(x.a, y.b.abs).Cmp(scaleDenom(y.a, x.b.abs));
	};
	Rat.prototype.Cmp = function(y) { return this.$val.Cmp(y); };
	Rat.ptr.prototype.Add = function(x, y) {
		var _r$3, a1, a2, x, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; a1 = $f.a1; a2 = $f.a2; x = $f.x; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		a1 = scaleDenom(x.a, y.b.abs);
		a2 = scaleDenom(y.a, x.b.abs);
		z.a.Add(a1, a2);
		z.b.abs = mulDenom(z.b.abs, x.b.abs, y.b.abs);
		_r$3 = z.norm(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.Add }; } $f._r$3 = _r$3; $f.a1 = a1; $f.a2 = a2; $f.x = x; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.Add = function(x, y) { return this.$val.Add(x, y); };
	Rat.ptr.prototype.Sub = function(x, y) {
		var _r$3, a1, a2, x, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; a1 = $f.a1; a2 = $f.a2; x = $f.x; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		a1 = scaleDenom(x.a, y.b.abs);
		a2 = scaleDenom(y.a, x.b.abs);
		z.a.Sub(a1, a2);
		z.b.abs = mulDenom(z.b.abs, x.b.abs, y.b.abs);
		_r$3 = z.norm(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.Sub }; } $f._r$3 = _r$3; $f.a1 = a1; $f.a2 = a2; $f.x = x; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.Sub = function(x, y) { return this.$val.Sub(x, y); };
	Rat.ptr.prototype.Mul = function(x, y) {
		var _r$3, x, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (x === y) {
			z.a.neg = false;
			z.a.abs = z.a.abs.sqr(x.a.abs);
			z.b.abs = z.b.abs.sqr(x.b.abs);
			$s = -1; return z;
		}
		z.a.Mul(x.a, y.a);
		z.b.abs = mulDenom(z.b.abs, x.b.abs, y.b.abs);
		_r$3 = z.norm(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.Mul }; } $f._r$3 = _r$3; $f.x = x; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.Mul = function(x, y) { return this.$val.Mul(x, y); };
	Rat.ptr.prototype.Quo = function(x, y) {
		var _r$3, a, b, x, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; a = $f.a; b = $f.b; x = $f.x; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (y.a.abs.$length === 0) {
			$panic(new $String("division by zero"));
		}
		a = scaleDenom(x.a, y.b.abs);
		b = scaleDenom(y.a, x.b.abs);
		z.a.abs = a.abs;
		z.b.abs = b.abs;
		z.a.neg = !(a.neg === b.neg);
		_r$3 = z.norm(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.Quo }; } $f._r$3 = _r$3; $f.a = a; $f.b = b; $f.x = x; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.Quo = function(x, y) { return this.$val.Quo(x, y); };
	ratTok = function(ch) {
		var ch;
		return strings.ContainsRune("+-/0123456789.eE", ch);
	};
	Rat.ptr.prototype.Scan = function(s, ch) {
		var _r$3, _r$4, _tuple, _tuple$1, ch, err, ok, s, tok, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; ch = $f.ch; err = $f.err; ok = $f.ok; s = $f.s; tok = $f.tok; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = s.Token(true, ratTok); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		tok = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		if (!strings.ContainsRune("efgEFGv", ch)) {
			$s = -1; return errors.New("Rat.Scan: invalid verb");
		}
		_r$4 = z.SetString(($bytesToString(tok))); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$1 = _r$4;
		ok = _tuple$1[1];
		if (!ok) {
			$s = -1; return errors.New("Rat.Scan: invalid syntax");
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.Scan }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.ch = ch; $f.err = err; $f.ok = ok; $f.s = s; $f.tok = tok; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.Scan = function(s, ch) { return this.$val.Scan(s, ch); };
	Rat.ptr.prototype.SetString = function(s) {
		var _r$10, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, ecorr, err, err$1, exp, expabs, neg, ok, powTen, r, r$1, s, sep, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$10 = $f._r$10; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; ecorr = $f.ecorr; err = $f.err; err$1 = $f.err$1; exp = $f.exp; expabs = $f.expabs; neg = $f.neg; ok = $f.ok; powTen = $f.powTen; r = $f.r; r$1 = $f.r$1; s = $f.s; sep = $f.sep; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (s.length === 0) {
			$s = -1; return [ptrType$2.nil, false];
		}
		sep = strings.Index(s, "/");
		/* */ if (sep >= 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (sep >= 0) { */ case 1:
			_r$3 = z.a.SetString($substring(s, 0, sep), 0); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			ok = _tuple[1];
			if (!ok) {
				$s = -1; return [ptrType$2.nil, false];
			}
			r = strings.NewReader($substring(s, (sep + 1 >> 0)));
			err = $ifaceNil;
			_r$4 = z.b.abs.scan(r, 0, false); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$1 = _r$4;
			z.b.abs = _tuple$1[0];
			err = _tuple$1[3];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ptrType$2.nil, false];
			}
			_tuple$2 = r.ReadByte();
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, io.EOF))) {
				$s = -1; return [ptrType$2.nil, false];
			}
			if (z.b.abs.$length === 0) {
				$s = -1; return [ptrType$2.nil, false];
			}
			_r$5 = z.norm(); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return [_r$5, true];
		/* } */ case 2:
		r$1 = strings.NewReader(s);
		_r$6 = scanSign(r$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple$3 = _r$6;
		neg = _tuple$3[0];
		err$1 = _tuple$3[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [ptrType$2.nil, false];
		}
		ecorr = 0;
		_r$7 = z.a.abs.scan(r$1, 10, true); /* */ $s = 7; case 7: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_tuple$4 = _r$7;
		z.a.abs = _tuple$4[0];
		ecorr = _tuple$4[2];
		err$1 = _tuple$4[3];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [ptrType$2.nil, false];
		}
		exp = new $Int64(0, 0);
		_r$8 = scanExponent(r$1, false); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_tuple$5 = _r$8;
		exp = _tuple$5[0];
		err$1 = _tuple$5[2];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [ptrType$2.nil, false];
		}
		_tuple$6 = r$1.ReadByte();
		err$1 = _tuple$6[1];
		if (!($interfaceIsEqual(err$1, io.EOF))) {
			$s = -1; return [ptrType$2.nil, false];
		}
		if (z.a.abs.$length === 0) {
			$s = -1; return [z, true];
		}
		if (ecorr < 0) {
			exp = (x = (new $Int64(0, ecorr)), new $Int64(exp.$high + x.$high, exp.$low + x.$low));
		}
		expabs = exp;
		if ((expabs.$high < 0 || (expabs.$high === 0 && expabs.$low < 0))) {
			expabs = new $Int64(-expabs.$high, -expabs.$low);
		}
		_r$9 = (nat.nil).expNN(natTen, (nat.nil).setWord(((expabs.$low >>> 0))), nat.nil); /* */ $s = 9; case 9: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		powTen = _r$9;
		/* */ if ((exp.$high < 0 || (exp.$high === 0 && exp.$low < 0))) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if ((exp.$high < 0 || (exp.$high === 0 && exp.$low < 0))) { */ case 10:
			z.b.abs = powTen;
			_r$10 = z.norm(); /* */ $s = 13; case 13: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$10;
			$s = 12; continue;
		/* } else { */ case 11:
			z.a.abs = z.a.abs.mul(z.a.abs, powTen);
			z.b.abs = $subslice(z.b.abs, 0, 0);
		/* } */ case 12:
		z.a.neg = neg && z.a.abs.$length > 0;
		$s = -1; return [z, true];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.SetString }; } $f._r$10 = _r$10; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f.ecorr = ecorr; $f.err = err; $f.err$1 = err$1; $f.exp = exp; $f.expabs = expabs; $f.neg = neg; $f.ok = ok; $f.powTen = powTen; $f.r = r; $f.r$1 = r$1; $f.s = s; $f.sep = sep; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.SetString = function(s) { return this.$val.SetString(s); };
	scanExponent = function(r, binExpOk) {
		var _1, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, base, binExpOk, ch, digits, err, exp, i, neg, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; base = $f.base; binExpOk = $f.binExpOk; ch = $f.ch; digits = $f.digits; err = $f.err; exp = $f.exp; i = $f.i; neg = $f.neg; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		exp = new $Int64(0, 0);
		base = 0;
		err = $ifaceNil;
		base = 10;
		ch = 0;
		_r$3 = r.ReadByte(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		ch = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = $ifaceNil;
			}
			$s = -1; return [exp, base, err];
		}
			_1 = ch;
			/* */ if ((_1 === (101)) || (_1 === (69))) { $s = 3; continue; }
			/* */ if (_1 === (112)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (101)) || (_1 === (69))) { */ case 3:
				$s = 6; continue;
			/* } else if (_1 === (112)) { */ case 4:
				if (binExpOk) {
					base = 2;
					/* break; */ $s = 2; continue;
				}
				_r$4 = r.UnreadByte(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				$s = -1; return [exp, base, err];
			/* } else { */ case 5:
				_r$5 = r.UnreadByte(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				$s = -1; return [exp, base, err];
			/* } */ case 6:
		case 2:
		neg = false;
		_r$6 = scanSign(r); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple$1 = _r$6;
		neg = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [exp, base, err];
		}
		digits = sliceType$1.nil;
		if (neg) {
			digits = $append(digits, 45);
		}
		i = 0;
		/* while (true) { */ case 10:
			_r$7 = r.ReadByte(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_tuple$2 = _r$7;
			ch = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if (!($interfaceIsEqual(err, io.EOF)) || (i === 0)) {
					$s = -1; return [exp, base, err];
				}
				err = $ifaceNil;
				/* break; */ $s = 11; continue;
			}
			/* */ if (ch < 48 || 57 < ch) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (ch < 48 || 57 < ch) { */ case 13:
				/* */ if (i === 0) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (i === 0) { */ case 15:
					_r$8 = r.UnreadByte(); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$8;
					_r$9 = fmt.Errorf("invalid exponent (missing digits)", new sliceType([])); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					err = _r$9;
					$s = -1; return [exp, base, err];
				/* } */ case 16:
				/* break; */ $s = 11; continue;
			/* } */ case 14:
			digits = $append(digits, ch);
			i = i + (1) >> 0;
		/* } */ $s = 10; continue; case 11:
		_tuple$3 = strconv.ParseInt(($bytesToString(digits)), 10, 64);
		exp = _tuple$3[0];
		err = _tuple$3[1];
		$s = -1; return [exp, base, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: scanExponent }; } $f._1 = _1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.base = base; $f.binExpOk = binExpOk; $f.ch = ch; $f.digits = digits; $f.err = err; $f.exp = exp; $f.i = i; $f.neg = neg; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.ptr.prototype.String = function() {
		var _r$3, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r$3 = x.marshal(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return ($bytesToString(_r$3));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.String }; } $f._r$3 = _r$3; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.String = function() { return this.$val.String(); };
	Rat.ptr.prototype.marshal = function() {
		var _r$3, _r$4, buf, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; buf = $f.buf; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		buf = sliceType$1.nil;
		_r$3 = x.a.Append(buf, 10); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		buf = _r$3;
		buf = $append(buf, 47);
		/* */ if (!((x.b.abs.$length === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((x.b.abs.$length === 0))) { */ case 2:
			_r$4 = x.b.Append(buf, 10); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			buf = _r$4;
			$s = 4; continue;
		/* } else { */ case 3:
			buf = $append(buf, 49);
		/* } */ case 4:
		$s = -1; return buf;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.marshal }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f.buf = buf; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.marshal = function() { return this.$val.marshal(); };
	Rat.ptr.prototype.RatString = function() {
		var _r$3, _r$4, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (x.IsInt()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.IsInt()) { */ case 1:
			_r$3 = x.a.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		_r$4 = x.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.RatString }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.RatString = function() { return this.$val.RatString(); };
	Rat.ptr.prototype.FloatString = function(prec) {
		var _arg, _arg$1, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tuple, _tuple$1, buf, i, i$1, p, prec, q, r, r2, rs, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buf = $f.buf; i = $f.i; i$1 = $f.i$1; p = $f.p; prec = $f.prec; q = $f.q; r = $f.r; r2 = $f.r2; rs = $f.rs; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		buf = sliceType$1.nil;
		/* */ if (x.IsInt()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.IsInt()) { */ case 1:
			_r$3 = x.a.Append(buf, 10); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			buf = _r$3;
			if (prec > 0) {
				buf = $append(buf, 46);
				i = prec;
				while (true) {
					if (!(i > 0)) { break; }
					buf = $append(buf, 48);
					i = i - (1) >> 0;
				}
			}
			$s = -1; return ($bytesToString(buf));
		/* } */ case 2:
		_r$4 = (nat.nil).div((nat.nil), x.a.abs, x.b.abs); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		q = _tuple[0];
		r = _tuple[1];
		p = natOne;
		/* */ if (prec > 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (prec > 0) { */ case 5:
			_r$5 = (nat.nil).expNN(natTen, (nat.nil).setUint64((new $Uint64(0, prec))), nat.nil); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			p = _r$5;
		/* } */ case 6:
		r = r.mul(r, p);
		_r$6 = r.div((nat.nil), r, x.b.abs); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple$1 = _r$6;
		r = _tuple$1[0];
		r2 = _tuple$1[1];
		r2 = r2.add(r2, r2);
		if (x.b.abs.cmp(r2) <= 0) {
			r = r.add(r, natOne);
			if (r.cmp(p) >= 0) {
				q = (nat.nil).add(q, natOne);
				r = (nat.nil).sub(r, p);
			}
		}
		if (x.a.neg) {
			buf = $append(buf, 45);
		}
		_arg = buf;
		_r$7 = q.utoa(10); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_arg$1 = _r$7;
		buf = $appendSlice(_arg, _arg$1);
		/* */ if (prec > 0) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (prec > 0) { */ case 10:
			buf = $append(buf, 46);
			_r$8 = r.utoa(10); /* */ $s = 12; case 12: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			rs = _r$8;
			i$1 = prec - rs.$length >> 0;
			while (true) {
				if (!(i$1 > 0)) { break; }
				buf = $append(buf, 48);
				i$1 = i$1 - (1) >> 0;
			}
			buf = $appendSlice(buf, rs);
		/* } */ case 11:
		$s = -1; return ($bytesToString(buf));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.FloatString }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.i = i; $f.i$1 = i$1; $f.p = p; $f.prec = prec; $f.q = q; $f.r = r; $f.r2 = r2; $f.rs = rs; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.FloatString = function(prec) { return this.$val.FloatString(prec); };
	Rat.ptr.prototype.GobEncode = function() {
		var b, buf, i, j, n, x;
		x = this;
		if (x === ptrType$2.nil) {
			return [sliceType$1.nil, $ifaceNil];
		}
		buf = $makeSlice(sliceType$1, (5 + ($imul(((x.a.abs.$length + x.b.abs.$length >> 0)), 4)) >> 0));
		i = x.b.abs.bytes(buf);
		j = x.a.abs.bytes($subslice(buf, 0, i));
		n = i - j >> 0;
		if (!((((((n >>> 0)) >> 0)) === n))) {
			return [sliceType$1.nil, errors.New("Rat.GobEncode: numerator too large")];
		}
		$clone(binary.BigEndian, binary.bigEndian).PutUint32($subslice(buf, (j - 4 >> 0), j), ((n >>> 0)));
		j = j - (5) >> 0;
		b = 2;
		if (x.a.neg) {
			b = (b | (1)) >>> 0;
		}
		((j < 0 || j >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + j] = b);
		return [$subslice(buf, j), $ifaceNil];
	};
	Rat.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Rat.ptr.prototype.GobDecode = function(buf) {
		var _r$3, b, buf, i, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; b = $f.b; buf = $f.buf; i = $f.i; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (buf.$length === 0) {
			Rat.copy(z, new Rat.ptr(new Int.ptr(false, nat.nil), new Int.ptr(false, nat.nil)));
			$s = -1; return $ifaceNil;
		}
		b = (0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]);
		/* */ if (!(((b >>> 1 << 24 >>> 24) === 1))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(((b >>> 1 << 24 >>> 24) === 1))) { */ case 1:
			_r$3 = fmt.Errorf("Rat.GobDecode: encoding version %d not supported", new sliceType([new $Uint8((b >>> 1 << 24 >>> 24))])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		i = 5 + $clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(buf, 1, 5)) >>> 0;
		z.a.neg = !((((b & 1) >>> 0) === 0));
		z.a.abs = z.a.abs.setBytes($subslice(buf, 5, i));
		z.b.abs = z.b.abs.setBytes($subslice(buf, i));
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.GobDecode }; } $f._r$3 = _r$3; $f.b = b; $f.buf = buf; $f.i = i; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.GobDecode = function(buf) { return this.$val.GobDecode(buf); };
	Rat.ptr.prototype.MarshalText = function() {
		var _r$3, _r$4, _tmp, _tmp$1, _tuple, err, text, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; text = $f.text; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		text = sliceType$1.nil;
		err = $ifaceNil;
		x = this;
		/* */ if (x.IsInt()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.IsInt()) { */ case 1:
			_r$3 = x.a.MarshalText(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			text = _tuple[0];
			err = _tuple[1];
			$s = -1; return [text, err];
		/* } */ case 2:
		_r$4 = x.marshal(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tmp = _r$4;
		_tmp$1 = $ifaceNil;
		text = _tmp;
		err = _tmp$1;
		$s = -1; return [text, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.MarshalText }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.text = text; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Rat.ptr.prototype.UnmarshalText = function(text) {
		var _r$3, _r$4, _tuple, ok, text, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; ok = $f.ok; text = $f.text; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.SetString(($bytesToString(text))); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			_r$4 = fmt.Errorf("math/big: cannot unmarshal %q into a *big.Rat", new sliceType([text])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return _r$4;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.UnmarshalText }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.ok = ok; $f.text = text; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.UnmarshalText = function(text) { return this.$val.UnmarshalText(text); };
	RoundingMode.prototype.String = function() {
		var _r$3, i, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; i = $f.i; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this.$val;
		/* */ if ((i + 1 << 24 >>> 24) >= 7) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((i + 1 << 24 >>> 24) >= 7) { */ case 1:
			_r$3 = fmt.Sprintf("RoundingMode(%d)", new sliceType([new RoundingMode(i)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		$s = -1; return $substring("ToNearestEvenToNearestAwayToZeroAwayFromZeroToNegativeInfToPositiveInf", ((i < 0 || i >= _RoundingMode_index.length) ? ($throwRuntimeError("index out of range"), undefined) : _RoundingMode_index[i]), (x = i + 1 << 24 >>> 24, ((x < 0 || x >= _RoundingMode_index.length) ? ($throwRuntimeError("index out of range"), undefined) : _RoundingMode_index[x])));
		/* */ } return; } if ($f === undefined) { $f = { $blk: RoundingMode.prototype.String }; } $f._r$3 = _r$3; $f.i = i; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(RoundingMode).prototype.String = function() { return new RoundingMode(this.$get()).String(); };
	Float.ptr.prototype.Sqrt = function(x) {
		var _1, _q, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, b, prec, x, x$1, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; b = $f.b; prec = $f.prec; x = $f.x; x$1 = $f.x$1; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (z.prec === 0) {
			z.prec = x.prec;
		}
		_r$3 = x.Sign(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === -1) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === -1) { */ case 4:
			$panic((x$1 = new ErrNaN.ptr("square root of negative operand"), new x$1.constructor.elem(x$1)));
		/* } */ case 5:
		if (!((x.form === 1))) {
			z.acc = 0;
			z.form = x.form;
			z.neg = x.neg;
			$s = -1; return z;
		}
		prec = z.prec;
		_r$4 = x.MantExp(z); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		b = _r$4;
		z.prec = prec;
			_1 = (_r$5 = b % 2, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero"));
			/* */ if (_1 === (0)) { $s = 9; continue; }
			/* */ if (_1 === (1)) { $s = 10; continue; }
			/* */ if (_1 === (-1)) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (_1 === (0)) { */ case 9:
				$s = 12; continue;
			/* } else if (_1 === (1)) { */ case 10:
				_r$6 = z.Mul(two, z); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				$s = 12; continue;
			/* } else if (_1 === (-1)) { */ case 11:
				_r$7 = z.Mul(half, z); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
			/* } */ case 12:
		case 8:
		/* */ if (z.prec <= 128) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (z.prec <= 128) { */ case 15:
			$r = z.sqrtDirect(z); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 17; continue;
		/* } else { */ case 16:
			$r = z.sqrtInverse(z); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 17:
		_r$8 = z.SetMantExp(z, (_q = b / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$s = -1; return _r$8;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Sqrt }; } $f._1 = _1; $f._q = _q; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.b = b; $f.prec = prec; $f.x = x; $f.x$1 = x$1; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Sqrt = function(x) { return this.$val.Sqrt(x); };
	Float.ptr.prototype.sqrtDirect = function(x) {
		var _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tuple, ng, sq, u, x, xf, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; ng = $f.ng; sq = $f.sq; u = $f.u; x = $f.x; xf = $f.xf; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = [u];
		x = [x];
		z = this;
		u[0] = new Float.ptr(0, 0, 0, 0, false, nat.nil, 0);
		ng = (function(u, x) { return function $b(t) {
			var _r$3, _r$4, _r$5, _r$6, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			u[0].prec = t.prec;
			_r$3 = u[0].Mul(t, t); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_r$4 = u[0].Add(u[0], x[0]); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			_r$5 = u[0].Mul(half, u[0]); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			_r$6 = t.Quo(u[0], t); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$s = -1; return _r$6;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		}; })(u, x);
		_r$3 = x[0].Float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		xf = _tuple[0];
		_r$4 = NewFloat(math.Sqrt(xf)); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		sq = _r$4;
			/* */ if (z.prec > 128) { $s = 4; continue; }
			/* */ if (z.prec > 64) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (z.prec > 128) { */ case 4:
				$panic(new $String("sqrtDirect: only for z.prec <= 128"));
				$s = 7; continue;
			/* } else if (z.prec > 64) { */ case 5:
				sq.prec = $imul(sq.prec, (2)) >>> 0;
				_r$5 = ng(sq); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				sq = _r$5;
				sq.prec = $imul(sq.prec, (2)) >>> 0;
				_r$6 = ng(sq); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				sq = _r$6;
				$s = 7; continue;
			/* } else { */ case 6:
				sq.prec = $imul(sq.prec, (2)) >>> 0;
				_r$7 = ng(sq); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				sq = _r$7;
			/* } */ case 7:
		case 3:
		_r$8 = z.Set(sq); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$8;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.sqrtDirect }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f.ng = ng; $f.sq = sq; $f.u = u; $f.x = x; $f.xf = xf; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.sqrtDirect = function(x) { return this.$val.sqrtDirect(x); };
	Float.ptr.prototype.sqrtInverse = function(x) {
		var _r$3, _r$4, _r$5, _r$6, _tuple, ng, prec, sqi, u, x, xf, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; ng = $f.ng; prec = $f.prec; sqi = $f.sqi; u = $f.u; x = $f.x; xf = $f.xf; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = [u];
		x = [x];
		z = this;
		u[0] = new Float.ptr(0, 0, 0, 0, false, nat.nil, 0);
		ng = (function(u, x) { return function $b(t) {
			var _r$3, _r$4, _r$5, _r$6, _r$7, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			u[0].prec = t.prec;
			_r$3 = u[0].Mul(t, t); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_r$4 = u[0].Mul(x[0], u[0]); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			_r$5 = u[0].Sub(three, u[0]); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			_r$6 = u[0].Mul(t, u[0]); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			_r$7 = t.Mul(half, u[0]); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$s = -1; return _r$7;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		}; })(u, x);
		_r$3 = x[0].Float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		xf = _tuple[0];
		_r$4 = NewFloat(1 / math.Sqrt(xf)); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		sqi = _r$4;
		prec = z.prec + 32 >>> 0;
		/* while (true) { */ case 3:
			/* if (!(sqi.prec < prec)) { break; } */ if(!(sqi.prec < prec)) { $s = 4; continue; }
			sqi.prec = $imul(sqi.prec, (2)) >>> 0;
			_r$5 = ng(sqi); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			sqi = _r$5;
		/* } */ $s = 3; continue; case 4:
		_r$6 = z.Mul(x[0], sqi); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.sqrtInverse }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.ng = ng; $f.prec = prec; $f.sqi = sqi; $f.u = u; $f.x = x; $f.xf = xf; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.sqrtInverse = function(x) { return this.$val.sqrtInverse(x); };
	ptrType$5.methods = [{prop: "at", name: "at", pkg: "math/big", typ: $funcType([$Int], [$Uint8], false)}, {prop: "init", name: "init", pkg: "math/big", typ: $funcType([nat, $Int], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "round", name: "round", pkg: "math/big", typ: $funcType([$Int], [], false)}, {prop: "roundUp", name: "roundUp", pkg: "math/big", typ: $funcType([$Int], [], false)}, {prop: "roundDown", name: "roundDown", pkg: "math/big", typ: $funcType([$Int], [], false)}];
	ptrType.methods = [{prop: "SetPrec", name: "SetPrec", pkg: "", typ: $funcType([$Uint], [ptrType], false)}, {prop: "SetMode", name: "SetMode", pkg: "", typ: $funcType([RoundingMode], [ptrType], false)}, {prop: "Prec", name: "Prec", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "MinPrec", name: "MinPrec", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [RoundingMode], false)}, {prop: "Acc", name: "Acc", pkg: "", typ: $funcType([], [Accuracy], false)}, {prop: "Sign", name: "Sign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MantExp", name: "MantExp", pkg: "", typ: $funcType([ptrType], [$Int], false)}, {prop: "setExpAndRound", name: "setExpAndRound", pkg: "math/big", typ: $funcType([$Int64, $Uint], [], false)}, {prop: "SetMantExp", name: "SetMantExp", pkg: "", typ: $funcType([ptrType, $Int], [ptrType], false)}, {prop: "Signbit", name: "Signbit", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsInf", name: "IsInf", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsInt", name: "IsInt", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "validate", name: "validate", pkg: "math/big", typ: $funcType([], [], false)}, {prop: "round", name: "round", pkg: "math/big", typ: $funcType([$Uint], [], false)}, {prop: "setBits64", name: "setBits64", pkg: "math/big", typ: $funcType([$Bool, $Uint64], [ptrType], false)}, {prop: "SetUint64", name: "SetUint64", pkg: "", typ: $funcType([$Uint64], [ptrType], false)}, {prop: "SetInt64", name: "SetInt64", pkg: "", typ: $funcType([$Int64], [ptrType], false)}, {prop: "SetFloat64", name: "SetFloat64", pkg: "", typ: $funcType([$Float64], [ptrType], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([ptrType$1], [ptrType], false)}, {prop: "SetRat", name: "SetRat", pkg: "", typ: $funcType([ptrType$2], [ptrType], false)}, {prop: "SetInf", name: "SetInf", pkg: "", typ: $funcType([$Bool], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64, Accuracy], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64, Accuracy], false)}, {prop: "Float32", name: "Float32", pkg: "", typ: $funcType([], [$Float32, Accuracy], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([], [$Float64, Accuracy], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([ptrType$1], [ptrType$1, Accuracy], false)}, {prop: "Rat", name: "Rat", pkg: "", typ: $funcType([ptrType$2], [ptrType$2, Accuracy], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Neg", name: "Neg", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "uadd", name: "uadd", pkg: "math/big", typ: $funcType([ptrType, ptrType], [], false)}, {prop: "usub", name: "usub", pkg: "math/big", typ: $funcType([ptrType, ptrType], [], false)}, {prop: "umul", name: "umul", pkg: "math/big", typ: $funcType([ptrType, ptrType], [], false)}, {prop: "uquo", name: "uquo", pkg: "math/big", typ: $funcType([ptrType, ptrType], [], false)}, {prop: "ucmp", name: "ucmp", pkg: "math/big", typ: $funcType([ptrType], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Quo", name: "Quo", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Cmp", name: "Cmp", pkg: "", typ: $funcType([ptrType], [$Int], false)}, {prop: "ord", name: "ord", pkg: "math/big", typ: $funcType([], [$Int], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [ptrType, $Bool], false)}, {prop: "scan", name: "scan", pkg: "math/big", typ: $funcType([io.ByteScanner, $Int], [ptrType, $Int, $error], false)}, {prop: "pow5", name: "pow5", pkg: "math/big", typ: $funcType([$Uint64], [ptrType], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([$String, $Int], [ptrType, $Int, $error], false)}, {prop: "Scan", name: "Scan", pkg: "", typ: $funcType([fmt.ScanState, $Int32], [$error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "Text", name: "Text", pkg: "", typ: $funcType([$Uint8, $Int], [$String], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Append", name: "Append", pkg: "", typ: $funcType([sliceType$1, $Uint8, $Int], [sliceType$1], false)}, {prop: "fmtB", name: "fmtB", pkg: "math/big", typ: $funcType([sliceType$1], [sliceType$1], false)}, {prop: "fmtP", name: "fmtP", pkg: "math/big", typ: $funcType([sliceType$1], [sliceType$1], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([fmt.State, $Int32], [], false)}, {prop: "Sqrt", name: "Sqrt", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "sqrtDirect", name: "sqrtDirect", pkg: "math/big", typ: $funcType([ptrType], [], false)}, {prop: "sqrtInverse", name: "sqrtInverse", pkg: "math/big", typ: $funcType([ptrType], [], false)}];
	ErrNaN.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	RoundingMode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Accuracy.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "Sign", name: "Sign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetInt64", name: "SetInt64", pkg: "", typ: $funcType([$Int64], [ptrType$1], false)}, {prop: "SetUint64", name: "SetUint64", pkg: "", typ: $funcType([$Uint64], [ptrType$1], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([ptrType$1], [ptrType$1], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [sliceType$2], false)}, {prop: "SetBits", name: "SetBits", pkg: "", typ: $funcType([sliceType$2], [ptrType$1], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([ptrType$1], [ptrType$1], false)}, {prop: "Neg", name: "Neg", pkg: "", typ: $funcType([ptrType$1], [ptrType$1], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "MulRange", name: "MulRange", pkg: "", typ: $funcType([$Int64, $Int64], [ptrType$1], false)}, {prop: "Binomial", name: "Binomial", pkg: "", typ: $funcType([$Int64, $Int64], [ptrType$1], false)}, {prop: "Quo", name: "Quo", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Rem", name: "Rem", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "QuoRem", name: "QuoRem", pkg: "", typ: $funcType([ptrType$1, ptrType$1, ptrType$1], [ptrType$1, ptrType$1], false)}, {prop: "Div", name: "Div", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Mod", name: "Mod", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "DivMod", name: "DivMod", pkg: "", typ: $funcType([ptrType$1, ptrType$1, ptrType$1], [ptrType$1, ptrType$1], false)}, {prop: "Cmp", name: "Cmp", pkg: "", typ: $funcType([ptrType$1], [$Int], false)}, {prop: "CmpAbs", name: "CmpAbs", pkg: "", typ: $funcType([ptrType$1], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "IsInt64", name: "IsInt64", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsUint64", name: "IsUint64", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String, $Int], [ptrType$1, $Bool], false)}, {prop: "setFromScanner", name: "setFromScanner", pkg: "math/big", typ: $funcType([io.ByteScanner, $Int], [ptrType$1, $Bool], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$1], [ptrType$1], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$1], false)}, {prop: "BitLen", name: "BitLen", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Exp", name: "Exp", pkg: "", typ: $funcType([ptrType$1, ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "GCD", name: "GCD", pkg: "", typ: $funcType([ptrType$1, ptrType$1, ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "lehmerGCD", name: "lehmerGCD", pkg: "math/big", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Rand", name: "Rand", pkg: "", typ: $funcType([ptrType$6, ptrType$1], [ptrType$1], false)}, {prop: "ModInverse", name: "ModInverse", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "modSqrt3Mod4Prime", name: "modSqrt3Mod4Prime", pkg: "math/big", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "modSqrtTonelliShanks", name: "modSqrtTonelliShanks", pkg: "math/big", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "ModSqrt", name: "ModSqrt", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Lsh", name: "Lsh", pkg: "", typ: $funcType([ptrType$1, $Uint], [ptrType$1], false)}, {prop: "Rsh", name: "Rsh", pkg: "", typ: $funcType([ptrType$1, $Uint], [ptrType$1], false)}, {prop: "Bit", name: "Bit", pkg: "", typ: $funcType([$Int], [$Uint], false)}, {prop: "SetBit", name: "SetBit", pkg: "", typ: $funcType([ptrType$1, $Int, $Uint], [ptrType$1], false)}, {prop: "And", name: "And", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "AndNot", name: "AndNot", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Or", name: "Or", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Xor", name: "Xor", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Not", name: "Not", pkg: "", typ: $funcType([ptrType$1], [ptrType$1], false)}, {prop: "Sqrt", name: "Sqrt", pkg: "", typ: $funcType([ptrType$1], [ptrType$1], false)}, {prop: "Text", name: "Text", pkg: "", typ: $funcType([$Int], [$String], false)}, {prop: "Append", name: "Append", pkg: "", typ: $funcType([sliceType$1, $Int], [sliceType$1], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([fmt.State, $Int32], [], false)}, {prop: "scan", name: "scan", pkg: "math/big", typ: $funcType([io.ByteScanner, $Int], [ptrType$1, $Int, $error], false)}, {prop: "Scan", name: "Scan", pkg: "", typ: $funcType([fmt.ScanState, $Int32], [$error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "ProbablyPrime", name: "ProbablyPrime", pkg: "", typ: $funcType([$Int], [$Bool], false)}];
	byteReader.methods = [{prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}];
	nat.methods = [{prop: "clear", name: "clear", pkg: "math/big", typ: $funcType([], [], false)}, {prop: "norm", name: "norm", pkg: "math/big", typ: $funcType([], [nat], false)}, {prop: "make", name: "make", pkg: "math/big", typ: $funcType([$Int], [nat], false)}, {prop: "setWord", name: "setWord", pkg: "math/big", typ: $funcType([Word], [nat], false)}, {prop: "setUint64", name: "setUint64", pkg: "math/big", typ: $funcType([$Uint64], [nat], false)}, {prop: "set", name: "set", pkg: "math/big", typ: $funcType([nat], [nat], false)}, {prop: "add", name: "add", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "sub", name: "sub", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "cmp", name: "cmp", pkg: "math/big", typ: $funcType([nat], [$Int], false)}, {prop: "mulAddWW", name: "mulAddWW", pkg: "math/big", typ: $funcType([nat, Word, Word], [nat], false)}, {prop: "montgomery", name: "montgomery", pkg: "math/big", typ: $funcType([nat, nat, nat, Word, $Int], [nat], false)}, {prop: "mul", name: "mul", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "sqr", name: "sqr", pkg: "math/big", typ: $funcType([nat], [nat], false)}, {prop: "mulRange", name: "mulRange", pkg: "math/big", typ: $funcType([$Uint64, $Uint64], [nat], false)}, {prop: "divW", name: "divW", pkg: "math/big", typ: $funcType([nat, Word], [nat, Word], false)}, {prop: "div", name: "div", pkg: "math/big", typ: $funcType([nat, nat, nat], [nat, nat], false)}, {prop: "divLarge", name: "divLarge", pkg: "math/big", typ: $funcType([nat, nat, nat], [nat, nat], false)}, {prop: "bitLen", name: "bitLen", pkg: "math/big", typ: $funcType([], [$Int], false)}, {prop: "trailingZeroBits", name: "trailingZeroBits", pkg: "math/big", typ: $funcType([], [$Uint], false)}, {prop: "shl", name: "shl", pkg: "math/big", typ: $funcType([nat, $Uint], [nat], false)}, {prop: "shr", name: "shr", pkg: "math/big", typ: $funcType([nat, $Uint], [nat], false)}, {prop: "setBit", name: "setBit", pkg: "math/big", typ: $funcType([nat, $Uint, $Uint], [nat], false)}, {prop: "bit", name: "bit", pkg: "math/big", typ: $funcType([$Uint], [$Uint], false)}, {prop: "sticky", name: "sticky", pkg: "math/big", typ: $funcType([$Uint], [$Uint], false)}, {prop: "and", name: "and", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "andNot", name: "andNot", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "or", name: "or", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "xor", name: "xor", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "modW", name: "modW", pkg: "math/big", typ: $funcType([Word], [Word], false)}, {prop: "random", name: "random", pkg: "math/big", typ: $funcType([ptrType$6, nat, $Int], [nat], false)}, {prop: "expNN", name: "expNN", pkg: "math/big", typ: $funcType([nat, nat, nat], [nat], false)}, {prop: "expNNWindowed", name: "expNNWindowed", pkg: "math/big", typ: $funcType([nat, nat, nat], [nat], false)}, {prop: "expNNMontgomery", name: "expNNMontgomery", pkg: "math/big", typ: $funcType([nat, nat, nat], [nat], false)}, {prop: "bytes", name: "bytes", pkg: "math/big", typ: $funcType([sliceType$1], [$Int], false)}, {prop: "setBytes", name: "setBytes", pkg: "math/big", typ: $funcType([sliceType$1], [nat], false)}, {prop: "sqrt", name: "sqrt", pkg: "math/big", typ: $funcType([nat], [nat], false)}, {prop: "scan", name: "scan", pkg: "math/big", typ: $funcType([io.ByteScanner, $Int, $Bool], [nat, $Int, $Int, $error], false)}, {prop: "utoa", name: "utoa", pkg: "math/big", typ: $funcType([$Int], [sliceType$1], false)}, {prop: "itoa", name: "itoa", pkg: "math/big", typ: $funcType([$Bool, $Int], [sliceType$1], false)}, {prop: "convertWords", name: "convertWords", pkg: "math/big", typ: $funcType([sliceType$1, Word, $Int, Word, sliceType$3], [], false)}, {prop: "expWW", name: "expWW", pkg: "math/big", typ: $funcType([Word, Word], [nat], false)}, {prop: "probablyPrimeMillerRabin", name: "probablyPrimeMillerRabin", pkg: "math/big", typ: $funcType([$Int, $Bool], [$Bool], false)}, {prop: "probablyPrimeLucas", name: "probablyPrimeLucas", pkg: "math/big", typ: $funcType([], [$Bool], false)}];
	ptrType$2.methods = [{prop: "SetFloat64", name: "SetFloat64", pkg: "", typ: $funcType([$Float64], [ptrType$2], false)}, {prop: "Float32", name: "Float32", pkg: "", typ: $funcType([], [$Float32, $Bool], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([], [$Float64, $Bool], false)}, {prop: "SetFrac", name: "SetFrac", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$2], false)}, {prop: "SetFrac64", name: "SetFrac64", pkg: "", typ: $funcType([$Int64, $Int64], [ptrType$2], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([ptrType$1], [ptrType$2], false)}, {prop: "SetInt64", name: "SetInt64", pkg: "", typ: $funcType([$Int64], [ptrType$2], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}, {prop: "Neg", name: "Neg", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}, {prop: "Inv", name: "Inv", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}, {prop: "Sign", name: "Sign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "IsInt", name: "IsInt", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Num", name: "Num", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Denom", name: "Denom", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "norm", name: "norm", pkg: "math/big", typ: $funcType([], [ptrType$2], false)}, {prop: "Cmp", name: "Cmp", pkg: "", typ: $funcType([ptrType$2], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "Quo", name: "Quo", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "Scan", name: "Scan", pkg: "", typ: $funcType([fmt.ScanState, $Int32], [$error], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [ptrType$2, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "marshal", name: "marshal", pkg: "math/big", typ: $funcType([], [sliceType$1], false)}, {prop: "RatString", name: "RatString", pkg: "", typ: $funcType([], [$String], false)}, {prop: "FloatString", name: "FloatString", pkg: "", typ: $funcType([$Int], [$String], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$1], [$error], false)}];
	decimal.init("math/big", [{prop: "mant", name: "mant", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "exp", name: "exp", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	Float.init("math/big", [{prop: "prec", name: "prec", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "mode", name: "mode", anonymous: false, exported: false, typ: RoundingMode, tag: ""}, {prop: "acc", name: "acc", anonymous: false, exported: false, typ: Accuracy, tag: ""}, {prop: "form", name: "form", anonymous: false, exported: false, typ: form, tag: ""}, {prop: "neg", name: "neg", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "mant", name: "mant", anonymous: false, exported: false, typ: nat, tag: ""}, {prop: "exp", name: "exp", anonymous: false, exported: false, typ: $Int32, tag: ""}]);
	ErrNaN.init("math/big", [{prop: "msg", name: "msg", anonymous: false, exported: false, typ: $String, tag: ""}]);
	Int.init("math/big", [{prop: "neg", name: "neg", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "abs", name: "abs", anonymous: false, exported: false, typ: nat, tag: ""}]);
	byteReader.init("", [{prop: "ScanState", name: "ScanState", anonymous: true, exported: true, typ: fmt.ScanState, tag: ""}]);
	nat.init(Word);
	divisor.init("math/big", [{prop: "bbb", name: "bbb", anonymous: false, exported: false, typ: nat, tag: ""}, {prop: "nbits", name: "nbits", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "ndigits", name: "ndigits", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	Rat.init("math/big", [{prop: "a", name: "a", anonymous: false, exported: false, typ: Int, tag: ""}, {prop: "b", name: "b", anonymous: false, exported: false, typ: Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rand.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		natPool = new nosync.Pool.ptr(sliceType.nil, $throwNilPointerError);
		cacheBase10 = new structType.ptr(new nosync.Mutex.ptr(false), arrayType.zero());
		_Accuracy_index = $toNativeArray($kindUint8, [0, 5, 10, 15]);
		pow5tab = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 5), new $Uint64(0, 25), new $Uint64(0, 125), new $Uint64(0, 625), new $Uint64(0, 3125), new $Uint64(0, 15625), new $Uint64(0, 78125), new $Uint64(0, 390625), new $Uint64(0, 1953125), new $Uint64(0, 9765625), new $Uint64(0, 48828125), new $Uint64(0, 244140625), new $Uint64(0, 1220703125), new $Uint64(1, 1808548329), new $Uint64(7, 452807053), new $Uint64(35, 2264035265), new $Uint64(177, 2730241733), new $Uint64(888, 766306777), new $Uint64(4440, 3831533885), new $Uint64(22204, 1977800241), new $Uint64(111022, 1299066613), new $Uint64(555111, 2200365769), new $Uint64(2775557, 2411894253), new $Uint64(13877787, 3469536673), new $Uint64(69388939, 167814181), new $Uint64(346944695, 839070905), new $Uint64(1734723475, 4195354525)]);
		natOne = new nat([1]);
		intOne = new Int.ptr(false, natOne);
		natTwo = new nat([2]);
		natTen = new nat([10]);
		karatsubaThreshold = 40;
		basicSqrThreshold = 20;
		karatsubaSqrThreshold = 400;
		leafSize = 8;
		_RoundingMode_index = $toNativeArray($kindUint8, [0, 13, 26, 32, 44, 57, 70]);
		_r = NewFloat(0.5); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		half = _r;
		_r$1 = NewFloat(2); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		two = _r$1;
		_r$2 = NewFloat(3); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		three = _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["go/constant"] = (function() {
	var $pkg = {}, $init, fmt, token, math, big, strconv, strings, sync, utf8, Kind, Value, unknownVal, boolVal, stringVal, int64Val, intVal, ratVal, floatVal, complexVal, ptrType, sliceType, sliceType$1, ptrType$1, ptrType$2, ptrType$3, floatVal0, _r, reverse, newInt, newRat, newFloat, i64toi, i64tor, i64tof, itor, itof, rtof, vtoc, makeInt, makeRat, makeFloat, makeComplex, makeFloatFromLiteral, smallRat, MakeUnknown, MakeBool, MakeString, MakeInt64, MakeFloat64, MakeFromLiteral, BoolVal, StringVal, Int64Val, Uint64Val, Float32Val, Float64Val, BitLen, Sign, MakeImag, Real, Imag, ToInt, ToFloat, ToComplex, is32bit, is63bit, UnaryOp, ord, match, BinaryOp, add, sub, mul, quo, Shift, cmpZero, Compare;
	fmt = $packages["fmt"];
	token = $packages["go/token"];
	math = $packages["math"];
	big = $packages["math/big"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	utf8 = $packages["unicode/utf8"];
	Kind = $pkg.Kind = $newType(4, $kindInt, "constant.Kind", true, "go/constant", true, null);
	Value = $pkg.Value = $newType(8, $kindInterface, "constant.Value", true, "go/constant", true, null);
	unknownVal = $pkg.unknownVal = $newType(0, $kindStruct, "constant.unknownVal", true, "go/constant", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	boolVal = $pkg.boolVal = $newType(1, $kindBool, "constant.boolVal", true, "go/constant", false, null);
	stringVal = $pkg.stringVal = $newType(0, $kindStruct, "constant.stringVal", true, "go/constant", false, function(mu_, s_, l_, r_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mu = new sync.Mutex.ptr(0, 0);
			this.s = "";
			this.l = ptrType.nil;
			this.r = ptrType.nil;
			return;
		}
		this.mu = mu_;
		this.s = s_;
		this.l = l_;
		this.r = r_;
	});
	int64Val = $pkg.int64Val = $newType(8, $kindInt64, "constant.int64Val", true, "go/constant", false, null);
	intVal = $pkg.intVal = $newType(0, $kindStruct, "constant.intVal", true, "go/constant", false, function(val_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.val = ptrType$2.nil;
			return;
		}
		this.val = val_;
	});
	ratVal = $pkg.ratVal = $newType(0, $kindStruct, "constant.ratVal", true, "go/constant", false, function(val_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.val = ptrType$3.nil;
			return;
		}
		this.val = val_;
	});
	floatVal = $pkg.floatVal = $newType(0, $kindStruct, "constant.floatVal", true, "go/constant", false, function(val_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.val = ptrType$1.nil;
			return;
		}
		this.val = val_;
	});
	complexVal = $pkg.complexVal = $newType(0, $kindStruct, "constant.complexVal", true, "go/constant", false, function(re_, im_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.re = $ifaceNil;
			this.im = $ifaceNil;
			return;
		}
		this.re = re_;
		this.im = im_;
	});
	ptrType = $ptrType(stringVal);
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(big.Float);
	ptrType$2 = $ptrType(big.Int);
	ptrType$3 = $ptrType(big.Rat);
	unknownVal.ptr.prototype.Kind = function() {
		return 0;
	};
	unknownVal.prototype.Kind = function() { return this.$val.Kind(); };
	boolVal.prototype.Kind = function() {
		return 1;
	};
	$ptrType(boolVal).prototype.Kind = function() { return new boolVal(this.$get()).Kind(); };
	stringVal.ptr.prototype.Kind = function() {
		return 2;
	};
	stringVal.prototype.Kind = function() { return this.$val.Kind(); };
	int64Val.prototype.Kind = function() {
		return 3;
	};
	$ptrType(int64Val).prototype.Kind = function() { return this.$get().Kind(); };
	intVal.ptr.prototype.Kind = function() {
		return 3;
	};
	intVal.prototype.Kind = function() { return this.$val.Kind(); };
	ratVal.ptr.prototype.Kind = function() {
		return 4;
	};
	ratVal.prototype.Kind = function() { return this.$val.Kind(); };
	floatVal.ptr.prototype.Kind = function() {
		return 4;
	};
	floatVal.prototype.Kind = function() { return this.$val.Kind(); };
	complexVal.ptr.prototype.Kind = function() {
		return 5;
	};
	complexVal.prototype.Kind = function() { return this.$val.Kind(); };
	unknownVal.ptr.prototype.String = function() {
		return "unknown";
	};
	unknownVal.prototype.String = function() { return this.$val.String(); };
	boolVal.prototype.String = function() {
		var x;
		x = this.$val;
		return strconv.FormatBool((x));
	};
	$ptrType(boolVal).prototype.String = function() { return new boolVal(this.$get()).String(); };
	stringVal.ptr.prototype.String = function() {
		var _r$1, _r$2, _tuple, i, n, s, size, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; i = $f.i; n = $f.n; s = $f.s; size = $f.size; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r$1 = x.string(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = strconv.Quote(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		s = _r$2;
		if (utf8.RuneCountInString(s) > 72) {
			i = 0;
			n = 0;
			while (true) {
				if (!(n < 69)) { break; }
				_tuple = utf8.DecodeRuneInString($substring(s, i));
				size = _tuple[1];
				i = i + (size) >> 0;
				n = n + (1) >> 0;
			}
			s = $substring(s, 0, i) + "...";
		}
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stringVal.ptr.prototype.String }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.i = i; $f.n = n; $f.s = s; $f.size = size; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	stringVal.prototype.String = function() { return this.$val.String(); };
	stringVal.ptr.prototype.string = function() {
		var _r$1, _r$2, _r$3, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		$r = x.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!(x.l === ptrType.nil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(x.l === ptrType.nil)) { */ case 2:
			_r$1 = x.appendReverse(sliceType.nil); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = reverse(_r$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = strings.Join(_r$2, ""); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			x.s = _r$3;
			x.l = ptrType.nil;
			x.r = ptrType.nil;
		/* } */ case 3:
		s = x.s;
		$r = x.mu.Unlock(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stringVal.ptr.prototype.string }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	stringVal.prototype.string = function() { return this.$val.string(); };
	reverse = function(x) {
		var _tmp, _tmp$1, i, n, x, x$1, x$2;
		n = x.$length;
		i = 0;
		while (true) {
			if (!((i + i >> 0) < n)) { break; }
			_tmp = (x$1 = (n - 1 >> 0) - i >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
			_tmp$1 = ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]);
			((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = _tmp);
			(x$2 = (n - 1 >> 0) - i >> 0, ((x$2 < 0 || x$2 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$2] = _tmp$1));
			i = i + (1) >> 0;
		}
		return x;
	};
	stringVal.ptr.prototype.appendReverse = function(list) {
		var _r$1, l, list, s, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; l = $f.l; list = $f.list; s = $f.s; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		y = x;
		/* while (true) { */ case 1:
			/* if (!(!(y.r === ptrType.nil))) { break; } */ if(!(!(y.r === ptrType.nil))) { $s = 2; continue; }
			$r = y.r.mu.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$1 = y.r.appendReverse(list); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			list = _r$1;
			$r = y.r.mu.Unlock(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			l = y.l;
			/* */ if (!(y === x)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(y === x)) { */ case 6:
				$r = y.mu.Unlock(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 7:
			$r = l.mu.Lock(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			y = l;
		/* } */ $s = 1; continue; case 2:
		s = y.s;
		/* */ if (!(y === x)) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (!(y === x)) { */ case 10:
			$r = y.mu.Unlock(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 11:
		$s = -1; return $append(list, s);
		/* */ } return; } if ($f === undefined) { $f = { $blk: stringVal.ptr.prototype.appendReverse }; } $f._r$1 = _r$1; $f.l = l; $f.list = list; $f.s = s; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	stringVal.prototype.appendReverse = function(list) { return this.$val.appendReverse(list); };
	int64Val.prototype.String = function() {
		var x;
		x = this;
		return strconv.FormatInt((new $Int64(x.$high, x.$low)), 10);
	};
	$ptrType(int64Val).prototype.String = function() { return this.$get().String(); };
	intVal.ptr.prototype.String = function() {
		var _r$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r$1 = x.val.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: intVal.ptr.prototype.String }; } $f._r$1 = _r$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	intVal.prototype.String = function() { return this.$val.String(); };
	ratVal.ptr.prototype.String = function() {
		var _r$1, _r$2, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r$1 = rtof($clone(x, ratVal)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = $clone(_r$1, floatVal).String(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ratVal.ptr.prototype.String }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ratVal.prototype.String = function() { return this.$val.String(); };
	floatVal.ptr.prototype.String = function() {
		var _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _tuple$1, am, d, e, exp, f, m, mant, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; am = $f.am; d = $f.d; e = $f.e; exp = $f.exp; f = $f.f; m = $f.m; mant = $f.mant; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mant = [mant];
		x = this;
		f = x.val;
		/* */ if (f.IsInf()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (f.IsInf()) { */ case 1:
			_r$1 = f.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 2:
		_r$2 = f.Float64(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		x$1 = _tuple[0];
		_r$3 = f.Sign(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if ((_r$3 === 0) === ((x$1 === 0)) && !math.IsInf(x$1, 0)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ((_r$3 === 0) === ((x$1 === 0)) && !math.IsInf(x$1, 0)) { */ case 5:
			_r$4 = fmt.Sprintf("%.6g", new sliceType$1([new $Float64(x$1)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return _r$4;
		/* } */ case 6:
		mant[0] = new big.Float.ptr(0, 0, 0, 0, false, big.nat.nil, 0);
		_r$5 = f.MantExp(mant[0]); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		exp = _r$5;
		_r$6 = mant[0].Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple$1 = _r$6;
		m = _tuple$1[0];
		d = (exp) * 0.3010299956639812;
		e = (new $Int64(0, d));
		m = m * (math.Pow(10, d - ($flatten64(e))));
		am = math.Abs(m);
		if (am < 0.9999995) {
			m = m * (10);
			e = (x$2 = new $Int64(0, 1), new $Int64(e.$high - x$2.$high, e.$low - x$2.$low));
		} else if (am >= 10) {
			m = m / (10);
			e = (x$3 = new $Int64(0, 1), new $Int64(e.$high + x$3.$high, e.$low + x$3.$low));
		}
		_r$7 = fmt.Sprintf("%.6ge%+d", new sliceType$1([new $Float64(m), e])); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$s = -1; return _r$7;
		/* */ } return; } if ($f === undefined) { $f = { $blk: floatVal.ptr.prototype.String }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.am = am; $f.d = d; $f.e = e; $f.exp = exp; $f.f = f; $f.m = m; $f.mant = mant; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	floatVal.prototype.String = function() { return this.$val.String(); };
	complexVal.ptr.prototype.String = function() {
		var _r$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r$1 = fmt.Sprintf("(%s + %si)", new sliceType$1([x.re, x.im])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: complexVal.ptr.prototype.String }; } $f._r$1 = _r$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	complexVal.prototype.String = function() { return this.$val.String(); };
	unknownVal.ptr.prototype.ExactString = function() {
		var x;
		x = this;
		return $clone(x, unknownVal).String();
	};
	unknownVal.prototype.ExactString = function() { return this.$val.ExactString(); };
	boolVal.prototype.ExactString = function() {
		var x;
		x = this.$val;
		return new boolVal(x).String();
	};
	$ptrType(boolVal).prototype.ExactString = function() { return new boolVal(this.$get()).ExactString(); };
	stringVal.ptr.prototype.ExactString = function() {
		var _r$1, _r$2, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r$1 = x.string(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = strconv.Quote(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stringVal.ptr.prototype.ExactString }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	stringVal.prototype.ExactString = function() { return this.$val.ExactString(); };
	int64Val.prototype.ExactString = function() {
		var x;
		x = this;
		return x.String();
	};
	$ptrType(int64Val).prototype.ExactString = function() { return this.$get().ExactString(); };
	intVal.ptr.prototype.ExactString = function() {
		var _r$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r$1 = $clone(x, intVal).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: intVal.ptr.prototype.ExactString }; } $f._r$1 = _r$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	intVal.prototype.ExactString = function() { return this.$val.ExactString(); };
	ratVal.ptr.prototype.ExactString = function() {
		var _r$1, _r$2, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		r = x.val;
		/* */ if (r.IsInt()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r.IsInt()) { */ case 1:
			_r$1 = r.Num().String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 2:
		_r$2 = r.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ratVal.ptr.prototype.ExactString }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ratVal.prototype.ExactString = function() { return this.$val.ExactString(); };
	floatVal.ptr.prototype.ExactString = function() {
		var _r$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r$1 = x.val.Text(112, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: floatVal.ptr.prototype.ExactString }; } $f._r$1 = _r$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	floatVal.prototype.ExactString = function() { return this.$val.ExactString(); };
	complexVal.ptr.prototype.ExactString = function() {
		var _arg, _arg$1, _r$1, _r$2, _r$3, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r$1 = x.re.ExactString(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg = new $String(_r$1);
		_r$2 = x.im.ExactString(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$1 = new $String(_r$2);
		_r$3 = fmt.Sprintf("(%s + %si)", new sliceType$1([_arg, _arg$1])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: complexVal.ptr.prototype.ExactString }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	complexVal.prototype.ExactString = function() { return this.$val.ExactString(); };
	newInt = function() {
		return new big.Int.ptr(false, big.nat.nil);
	};
	newRat = function() {
		return new big.Rat.ptr(new big.Int.ptr(false, big.nat.nil), new big.Int.ptr(false, big.nat.nil));
	};
	newFloat = function() {
		var _r$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$1 = new big.Float.ptr(0, 0, 0, 0, false, big.nat.nil, 0).SetPrec(512); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newFloat }; } $f._r$1 = _r$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	i64toi = function(x) {
		var x;
		return new intVal.ptr(newInt().SetInt64((new $Int64(x.$high, x.$low))));
	};
	i64tor = function(x) {
		var x;
		return new ratVal.ptr(newRat().SetInt64((new $Int64(x.$high, x.$low))));
	};
	i64tof = function(x) {
		var _r$1, _r$2, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$1 = newFloat(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = _r$1.SetInt64((new $Int64(x.$high, x.$low))); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return new floatVal.ptr(_r$2);
		/* */ } return; } if ($f === undefined) { $f = { $blk: i64tof }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	itor = function(x) {
		var x;
		return new ratVal.ptr(newRat().SetInt(x.val));
	};
	itof = function(x) {
		var _r$1, _r$2, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$1 = newFloat(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = _r$1.SetInt(x.val); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return new floatVal.ptr(_r$2);
		/* */ } return; } if ($f === undefined) { $f = { $blk: itof }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtof = function(x) {
		var _r$1, _r$2, _r$3, _r$4, _r$5, a, b, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; a = $f.a; b = $f.b; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$1 = newFloat(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = _r$1.SetInt(x.val.Num()); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		a = _r$2;
		_r$3 = newFloat(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = _r$3.SetInt(x.val.Denom()); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		b = _r$4;
		_r$5 = a.Quo(a, b); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return new floatVal.ptr(_r$5);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtof }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.a = a; $f.b = b; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	vtoc = function(x) {
		var x;
		return new complexVal.ptr(x, new int64Val(0, 0));
	};
	makeInt = function(x) {
		var x, x$1, x$2;
		if (x.IsInt64()) {
			return ((x$1 = x.Int64(), new int64Val(x$1.$high, x$1.$low)));
		}
		return (x$2 = new intVal.ptr(x), new x$2.constructor.elem(x$2));
	};
	makeRat = function(x) {
		var _r$1, _r$2, _r$3, _r$4, _r$5, a, b, fa, fb, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; a = $f.a; b = $f.b; fa = $f.fa; fb = $f.fb; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = x.Num();
		b = x.Denom();
		if (a.BitLen() < 4096 && b.BitLen() < 4096) {
			$s = -1; return (x$1 = new ratVal.ptr(x), new x$1.constructor.elem(x$1));
		}
		_r$1 = newFloat(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = _r$1.SetInt(a); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		fa = _r$2;
		_r$3 = newFloat(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = _r$3.SetInt(b); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		fb = _r$4;
		_r$5 = fa.Quo(fa, fb); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return (x$2 = new floatVal.ptr(_r$5), new x$2.constructor.elem(x$2));
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeRat }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.a = a; $f.b = b; $f.fa = fa; $f.fb = fb; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeFloat = function(x) {
		var _r$1, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$1 = x.Sign(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1 === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$1 === 0) { */ case 1:
			$s = -1; return new floatVal0.constructor.elem(floatVal0);
		/* } */ case 2:
		$s = -1; return (x$1 = new floatVal.ptr(x), new x$1.constructor.elem(x$1));
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeFloat }; } $f._r$1 = _r$1; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeComplex = function(re, im) {
		var im, re, x;
		return (x = new complexVal.ptr(re, im), new x.constructor.elem(x));
	};
	makeFloatFromLiteral = function(lit) {
		var _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, f, lit, ok, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; f = $f.f; lit = $f.lit; ok = $f.ok; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$1 = newFloat(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = _r$1.SetString(lit); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		f = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (ok) { */ case 3:
			_r$3 = smallRat(f); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_r$3) { */ case 5:
				_r$4 = f.Sign(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ if (_r$4 === 0) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_r$4 === 0) { */ case 8:
					lit = "0";
				/* } */ case 9:
				_r$5 = newRat().SetString(lit); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple$1 = _r$5;
				r = _tuple$1[0];
				$s = -1; return (x = new ratVal.ptr(r), new x.constructor.elem(x));
			/* } */ case 6:
			_r$6 = makeFloat(f); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$s = -1; return _r$6;
		/* } */ case 4:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeFloatFromLiteral }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.f = f; $f.lit = lit; $f.ok = ok; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	smallRat = function(x) {
		var _r$1, e, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; e = $f.e; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!x.IsInf()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!x.IsInf()) { */ case 1:
			_r$1 = x.MantExp(ptrType$1.nil); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			e = _r$1;
			$s = -1; return -4096 < e && e < 4096;
		/* } */ case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: smallRat }; } $f._r$1 = _r$1; $f.e = e; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	MakeUnknown = function() {
		var x;
		return (x = new unknownVal.ptr(), new x.constructor.elem(x));
	};
	$pkg.MakeUnknown = MakeUnknown;
	MakeBool = function(b) {
		var b;
		return new boolVal((b));
	};
	$pkg.MakeBool = MakeBool;
	MakeString = function(s) {
		var s;
		return new stringVal.ptr(new sync.Mutex.ptr(0, 0), s, ptrType.nil, ptrType.nil);
	};
	$pkg.MakeString = MakeString;
	MakeInt64 = function(x) {
		var x;
		return (new int64Val(x.$high, x.$low));
	};
	$pkg.MakeInt64 = MakeInt64;
	MakeFloat64 = function(x) {
		var _r$1, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (math.IsInf(x, 0) || math.IsNaN(x)) {
			$s = -1; return (x$1 = new unknownVal.ptr(), new x$1.constructor.elem(x$1));
		}
		if (x === 0) {
			$s = -1; return new int64Val(0, 0);
		}
		_r$1 = newRat().SetFloat64(x); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return (x$2 = new ratVal.ptr(_r$1), new x$2.constructor.elem(x$2));
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeFloat64 }; } $f._r$1 = _r$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeFloat64 = MakeFloat64;
	MakeFromLiteral = function(lit, tok, zero) {
		var _1, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, _tuple$3, code, err, err$1, err$2, im, lit, n, n$1, ok, s, tok, x, x$1, x$2, x$3, x$4, zero, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; code = $f.code; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; im = $f.im; lit = $f.lit; n = $f.n; n$1 = $f.n$1; ok = $f.ok; s = $f.s; tok = $f.tok; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; zero = $f.zero; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!((zero === 0))) {
			$panic(new $String("MakeFromLiteral called with non-zero last argument"));
		}
			_1 = tok;
			/* */ if (_1 === (5)) { $s = 2; continue; }
			/* */ if (_1 === (6)) { $s = 3; continue; }
			/* */ if (_1 === (7)) { $s = 4; continue; }
			/* */ if (_1 === (8)) { $s = 5; continue; }
			/* */ if (_1 === (9)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (5)) { */ case 2:
				_tuple = strconv.ParseInt(lit, 0, 64);
				x = _tuple[0];
				err = _tuple[1];
				if ($interfaceIsEqual(err, $ifaceNil)) {
					$s = -1; return (new int64Val(x.$high, x.$low));
				}
				_r$1 = newInt().SetString(lit, 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1;
				x$1 = _tuple$1[0];
				ok = _tuple$1[1];
				if (ok) {
					$s = -1; return (x$2 = new intVal.ptr(x$1), new x$2.constructor.elem(x$2));
				}
				$s = 8; continue;
			/* } else if (_1 === (6)) { */ case 3:
				_r$2 = makeFloatFromLiteral(lit); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				x$3 = _r$2;
				if (!($interfaceIsEqual(x$3, $ifaceNil))) {
					$s = -1; return x$3;
				}
				$s = 8; continue;
			/* } else if (_1 === (7)) { */ case 4:
				n = lit.length;
				/* */ if (n > 0 && (lit.charCodeAt((n - 1 >> 0)) === 105)) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (n > 0 && (lit.charCodeAt((n - 1 >> 0)) === 105)) { */ case 11:
					_r$3 = makeFloatFromLiteral($substring(lit, 0, (n - 1 >> 0))); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					im = _r$3;
					if (!($interfaceIsEqual(im, $ifaceNil))) {
						$s = -1; return makeComplex(new int64Val(0, 0), im);
					}
				/* } */ case 12:
				$s = 8; continue;
			/* } else if (_1 === (8)) { */ case 5:
				n$1 = lit.length;
				if (n$1 >= 2) {
					_tuple$2 = strconv.UnquoteChar($substring(lit, 1, (n$1 - 1 >> 0)), 39);
					code = _tuple$2[0];
					err$1 = _tuple$2[3];
					if ($interfaceIsEqual(err$1, $ifaceNil)) {
						$s = -1; return MakeInt64((new $Int64(0, code)));
					}
				}
				$s = 8; continue;
			/* } else if (_1 === (9)) { */ case 6:
				_tuple$3 = strconv.Unquote(lit);
				s = _tuple$3[0];
				err$2 = _tuple$3[1];
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					$s = -1; return MakeString(s);
				}
				$s = 8; continue;
			/* } else { */ case 7:
				_r$4 = fmt.Sprintf("%v is not a valid token", new sliceType$1([new token.Token(tok)])); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$panic(new $String(_r$4));
			/* } */ case 8:
		case 1:
		$s = -1; return (x$4 = new unknownVal.ptr(), new x$4.constructor.elem(x$4));
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeFromLiteral }; } $f._1 = _1; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.code = code; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.im = im; $f.lit = lit; $f.n = n; $f.n$1 = n$1; $f.ok = ok; $f.s = s; $f.tok = tok; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.zero = zero; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeFromLiteral = MakeFromLiteral;
	BoolVal = function(x) {
		var _r$1, _ref, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _ref = $f._ref; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = x;
		/* */ if ($assertType(_ref, boolVal, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, unknownVal, true)[1]) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($assertType(_ref, boolVal, true)[1]) { */ case 1:
			x$1 = _ref.$val;
			$s = -1; return (x$1);
		/* } else if ($assertType(_ref, unknownVal, true)[1]) { */ case 2:
			x$2 = $clone(_ref.$val, unknownVal);
			$s = -1; return false;
		/* } else { */ case 3:
			x$3 = _ref;
			_r$1 = fmt.Sprintf("%v not a Bool", new sliceType$1([x$3])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(_r$1));
		/* } */ case 4:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BoolVal }; } $f._r$1 = _r$1; $f._ref = _ref; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.BoolVal = BoolVal;
	StringVal = function(x) {
		var _r$1, _r$2, _ref, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = x;
		/* */ if ($assertType(_ref, ptrType, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, unknownVal, true)[1]) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($assertType(_ref, ptrType, true)[1]) { */ case 1:
			x$1 = _ref.$val;
			_r$1 = x$1.string(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } else if ($assertType(_ref, unknownVal, true)[1]) { */ case 2:
			x$2 = $clone(_ref.$val, unknownVal);
			$s = -1; return "";
		/* } else { */ case 3:
			x$3 = _ref;
			_r$2 = fmt.Sprintf("%v not a String", new sliceType$1([x$3])); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$panic(new $String(_r$2));
		/* } */ case 4:
		$s = -1; return "";
		/* */ } return; } if ($f === undefined) { $f = { $blk: StringVal }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.StringVal = StringVal;
	Int64Val = function(x) {
		var _r$1, _ref, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _ref = $f._ref; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = x;
		/* */ if ($assertType(_ref, int64Val, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, intVal, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, unknownVal, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, int64Val, true)[1]) { */ case 1:
			x$1 = _ref.$val;
			$s = -1; return [(new $Int64(x$1.$high, x$1.$low)), true];
		/* } else if ($assertType(_ref, intVal, true)[1]) { */ case 2:
			x$2 = $clone(_ref.$val, intVal);
			$s = -1; return [x$2.val.Int64(), false];
		/* } else if ($assertType(_ref, unknownVal, true)[1]) { */ case 3:
			x$3 = $clone(_ref.$val, unknownVal);
			$s = -1; return [new $Int64(0, 0), false];
		/* } else { */ case 4:
			x$4 = _ref;
			_r$1 = fmt.Sprintf("%v not an Int", new sliceType$1([x$4])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(_r$1));
		/* } */ case 5:
		$s = -1; return [new $Int64(0, 0), false];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int64Val }; } $f._r$1 = _r$1; $f._ref = _ref; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Int64Val = Int64Val;
	Uint64Val = function(x) {
		var _r$1, _ref, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _ref = $f._ref; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = x;
		/* */ if ($assertType(_ref, int64Val, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, intVal, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, unknownVal, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, int64Val, true)[1]) { */ case 1:
			x$1 = _ref.$val;
			$s = -1; return [(new $Uint64(x$1.$high, x$1.$low)), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0))];
		/* } else if ($assertType(_ref, intVal, true)[1]) { */ case 2:
			x$2 = $clone(_ref.$val, intVal);
			$s = -1; return [x$2.val.Uint64(), x$2.val.IsUint64()];
		/* } else if ($assertType(_ref, unknownVal, true)[1]) { */ case 3:
			x$3 = $clone(_ref.$val, unknownVal);
			$s = -1; return [new $Uint64(0, 0), false];
		/* } else { */ case 4:
			x$4 = _ref;
			_r$1 = fmt.Sprintf("%v not an Int", new sliceType$1([x$4])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(_r$1));
		/* } */ case 5:
		$s = -1; return [new $Uint64(0, 0), false];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Uint64Val }; } $f._r$1 = _r$1; $f._ref = _ref; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Uint64Val = Uint64Val;
	Float32Val = function(x) {
		var _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _tuple, _tuple$1, acc, acc$1, f, f$1, f$2, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; acc = $f.acc; acc$1 = $f.acc$1; f = $f.f; f$1 = $f.f$1; f$2 = $f.f$2; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = x;
		/* */ if ($assertType(_ref, int64Val, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, intVal, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ratVal, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, floatVal, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, unknownVal, true)[1]) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ($assertType(_ref, int64Val, true)[1]) { */ case 1:
			x$1 = _ref.$val;
			f = ($flatten64(x$1));
			$s = -1; return [f, (x$7 = (new int64Val(0, f)), (x$7.$high === x$1.$high && x$7.$low === x$1.$low))];
		/* } else if ($assertType(_ref, intVal, true)[1]) { */ case 2:
			x$2 = $clone(_ref.$val, intVal);
			_r$1 = newFloat(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = _r$1.SetInt(x$2.val); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = _r$2.Float32(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			f$1 = _tuple[0];
			acc = _tuple[1];
			$s = -1; return [f$1, acc === 0];
		/* } else if ($assertType(_ref, ratVal, true)[1]) { */ case 3:
			x$3 = $clone(_ref.$val, ratVal);
			_r$4 = x$3.val.Float32(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return _r$4;
		/* } else if ($assertType(_ref, floatVal, true)[1]) { */ case 4:
			x$4 = $clone(_ref.$val, floatVal);
			_r$5 = x$4.val.Float32(); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$1 = _r$5;
			f$2 = _tuple$1[0];
			acc$1 = _tuple$1[1];
			$s = -1; return [f$2, acc$1 === 0];
		/* } else if ($assertType(_ref, unknownVal, true)[1]) { */ case 5:
			x$5 = $clone(_ref.$val, unknownVal);
			$s = -1; return [0, false];
		/* } else { */ case 6:
			x$6 = _ref;
			_r$6 = fmt.Sprintf("%v not a Float", new sliceType$1([x$6])); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$panic(new $String(_r$6));
		/* } */ case 7:
		$s = -1; return [0, false];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float32Val }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.acc = acc; $f.acc$1 = acc$1; $f.f = f; $f.f$1 = f$1; $f.f$2 = f$2; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Float32Val = Float32Val;
	Float64Val = function(x) {
		var _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _tuple, _tuple$1, acc, acc$1, f, f$1, f$2, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; acc = $f.acc; acc$1 = $f.acc$1; f = $f.f; f$1 = $f.f$1; f$2 = $f.f$2; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = x;
		/* */ if ($assertType(_ref, int64Val, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, intVal, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ratVal, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, floatVal, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, unknownVal, true)[1]) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ($assertType(_ref, int64Val, true)[1]) { */ case 1:
			x$1 = _ref.$val;
			f = ($flatten64((new $Int64(x$1.$high, x$1.$low))));
			$s = -1; return [f, (x$7 = (new int64Val(0, f)), (x$7.$high === x$1.$high && x$7.$low === x$1.$low))];
		/* } else if ($assertType(_ref, intVal, true)[1]) { */ case 2:
			x$2 = $clone(_ref.$val, intVal);
			_r$1 = newFloat(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = _r$1.SetInt(x$2.val); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = _r$2.Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			f$1 = _tuple[0];
			acc = _tuple[1];
			$s = -1; return [f$1, acc === 0];
		/* } else if ($assertType(_ref, ratVal, true)[1]) { */ case 3:
			x$3 = $clone(_ref.$val, ratVal);
			_r$4 = x$3.val.Float64(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return _r$4;
		/* } else if ($assertType(_ref, floatVal, true)[1]) { */ case 4:
			x$4 = $clone(_ref.$val, floatVal);
			_r$5 = x$4.val.Float64(); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$1 = _r$5;
			f$2 = _tuple$1[0];
			acc$1 = _tuple$1[1];
			$s = -1; return [f$2, acc$1 === 0];
		/* } else if ($assertType(_ref, unknownVal, true)[1]) { */ case 5:
			x$5 = $clone(_ref.$val, unknownVal);
			$s = -1; return [0, false];
		/* } else { */ case 6:
			x$6 = _ref;
			_r$6 = fmt.Sprintf("%v not a Float", new sliceType$1([x$6])); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$panic(new $String(_r$6));
		/* } */ case 7:
		$s = -1; return [0, false];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float64Val }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.acc = acc; $f.acc$1 = acc$1; $f.f = f; $f.f$1 = f$1; $f.f$2 = f$2; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Float64Val = Float64Val;
	BitLen = function(x) {
		var _r$1, _ref, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _ref = $f._ref; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = x;
		/* */ if ($assertType(_ref, int64Val, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, intVal, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, unknownVal, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, int64Val, true)[1]) { */ case 1:
			x$1 = _ref.$val;
			$s = -1; return i64toi(x$1).val.BitLen();
		/* } else if ($assertType(_ref, intVal, true)[1]) { */ case 2:
			x$2 = $clone(_ref.$val, intVal);
			$s = -1; return x$2.val.BitLen();
		/* } else if ($assertType(_ref, unknownVal, true)[1]) { */ case 3:
			x$3 = $clone(_ref.$val, unknownVal);
			$s = -1; return 0;
		/* } else { */ case 4:
			x$4 = _ref;
			_r$1 = fmt.Sprintf("%v not an Int", new sliceType$1([x$4])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(_r$1));
		/* } */ case 5:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BitLen }; } $f._r$1 = _r$1; $f._ref = _ref; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.BitLen = BitLen;
	Sign = function(x) {
		var _r$1, _r$2, _r$3, _r$4, _ref, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = x;
		/* */ if ($assertType(_ref, int64Val, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, intVal, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ratVal, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, floatVal, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, complexVal, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, unknownVal, true)[1]) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if ($assertType(_ref, int64Val, true)[1]) { */ case 1:
			x$1 = _ref.$val;
			if ((x$1.$high < 0 || (x$1.$high === 0 && x$1.$low < 0))) {
				$s = -1; return -1;
			} else if ((x$1.$high > 0 || (x$1.$high === 0 && x$1.$low > 0))) {
				$s = -1; return 1;
			}
			$s = -1; return 0;
		/* } else if ($assertType(_ref, intVal, true)[1]) { */ case 2:
			x$2 = $clone(_ref.$val, intVal);
			$s = -1; return x$2.val.Sign();
		/* } else if ($assertType(_ref, ratVal, true)[1]) { */ case 3:
			x$3 = $clone(_ref.$val, ratVal);
			$s = -1; return x$3.val.Sign();
		/* } else if ($assertType(_ref, floatVal, true)[1]) { */ case 4:
			x$4 = $clone(_ref.$val, floatVal);
			_r$1 = x$4.val.Sign(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } else if ($assertType(_ref, complexVal, true)[1]) { */ case 5:
			x$5 = $clone(_ref.$val, complexVal);
			_r$2 = Sign(x$5.re); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = Sign(x$5.im); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$2 | _r$3;
		/* } else if ($assertType(_ref, unknownVal, true)[1]) { */ case 6:
			x$6 = $clone(_ref.$val, unknownVal);
			$s = -1; return 1;
		/* } else { */ case 7:
			x$7 = _ref;
			_r$4 = fmt.Sprintf("%v not numeric", new sliceType$1([x$7])); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$panic(new $String(_r$4));
		/* } */ case 8:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sign }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sign = Sign;
	MakeImag = function(x) {
		var _r$1, _ref, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _ref = $f._ref; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = x;
		/* */ if ($assertType(_ref, unknownVal, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, int64Val, true)[1] || $assertType(_ref, intVal, true)[1] || $assertType(_ref, ratVal, true)[1] || $assertType(_ref, floatVal, true)[1]) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($assertType(_ref, unknownVal, true)[1]) { */ case 1:
			$s = -1; return x;
		/* } else if ($assertType(_ref, int64Val, true)[1] || $assertType(_ref, intVal, true)[1] || $assertType(_ref, ratVal, true)[1] || $assertType(_ref, floatVal, true)[1]) { */ case 2:
			$s = -1; return makeComplex(new int64Val(0, 0), x);
		/* } else { */ case 3:
			_r$1 = fmt.Sprintf("%v not Int or Float", new sliceType$1([x])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(_r$1));
		/* } */ case 4:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeImag }; } $f._r$1 = _r$1; $f._ref = _ref; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeImag = MakeImag;
	Real = function(x) {
		var _r$1, _ref, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _ref = $f._ref; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = x;
		/* */ if ($assertType(_ref, unknownVal, true)[1] || $assertType(_ref, int64Val, true)[1] || $assertType(_ref, intVal, true)[1] || $assertType(_ref, ratVal, true)[1] || $assertType(_ref, floatVal, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, complexVal, true)[1]) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($assertType(_ref, unknownVal, true)[1] || $assertType(_ref, int64Val, true)[1] || $assertType(_ref, intVal, true)[1] || $assertType(_ref, ratVal, true)[1] || $assertType(_ref, floatVal, true)[1]) { */ case 1:
			x$1 = _ref;
			$s = -1; return x$1;
		/* } else if ($assertType(_ref, complexVal, true)[1]) { */ case 2:
			x$2 = $clone(_ref.$val, complexVal);
			$s = -1; return x$2.re;
		/* } else { */ case 3:
			x$3 = _ref;
			_r$1 = fmt.Sprintf("%v not numeric", new sliceType$1([x$3])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(_r$1));
		/* } */ case 4:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Real }; } $f._r$1 = _r$1; $f._ref = _ref; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Real = Real;
	Imag = function(x) {
		var _r$1, _ref, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _ref = $f._ref; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = x;
		/* */ if ($assertType(_ref, unknownVal, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, int64Val, true)[1] || $assertType(_ref, intVal, true)[1] || $assertType(_ref, ratVal, true)[1] || $assertType(_ref, floatVal, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, complexVal, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, unknownVal, true)[1]) { */ case 1:
			x$1 = $clone(_ref.$val, unknownVal);
			$s = -1; return new x$1.constructor.elem(x$1);
		/* } else if ($assertType(_ref, int64Val, true)[1] || $assertType(_ref, intVal, true)[1] || $assertType(_ref, ratVal, true)[1] || $assertType(_ref, floatVal, true)[1]) { */ case 2:
			x$2 = _ref;
			$s = -1; return new int64Val(0, 0);
		/* } else if ($assertType(_ref, complexVal, true)[1]) { */ case 3:
			x$3 = $clone(_ref.$val, complexVal);
			$s = -1; return x$3.im;
		/* } else { */ case 4:
			x$4 = _ref;
			_r$1 = fmt.Sprintf("%v not numeric", new sliceType$1([x$4])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(_r$1));
		/* } */ case 5:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Imag }; } $f._r$1 = _r$1; $f._ref = _ref; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Imag = Imag;
	ToInt = function(x) {
		var _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, _tuple$2, acc, acc$1, acc$2, i, re, t, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; acc = $f.acc; acc$1 = $f.acc$1; acc$2 = $f.acc$2; i = $f.i; re = $f.re; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = x;
		/* */ if ($assertType(_ref, int64Val, true)[1] || $assertType(_ref, intVal, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ratVal, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, floatVal, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, complexVal, true)[1]) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ($assertType(_ref, int64Val, true)[1] || $assertType(_ref, intVal, true)[1]) { */ case 1:
			x$1 = _ref;
			$s = -1; return x$1;
		/* } else if ($assertType(_ref, ratVal, true)[1]) { */ case 2:
			x$2 = $clone(_ref.$val, ratVal);
			if (x$2.val.IsInt()) {
				$s = -1; return makeInt(x$2.val.Num());
			}
			$s = 5; continue;
		/* } else if ($assertType(_ref, floatVal, true)[1]) { */ case 3:
			x$3 = $clone(_ref.$val, floatVal);
			_r$1 = smallRat(x$3.val); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$1) { */ case 6:
				i = newInt();
				_r$2 = x$3.val.Int(i); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				acc = _tuple[1];
				if (acc === 0) {
					$s = -1; return makeInt(i);
				}
				t = new big.Float.ptr(0, 0, 0, 0, false, big.nat.nil, 0);
				_r$3 = t.SetPrec(508); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				t.SetMode(2);
				_r$4 = t.Set(x$3.val); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				_r$5 = t.Int(i); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple$1 = _r$5;
				acc$1 = _tuple$1[1];
				if (acc$1 === 0) {
					$s = -1; return makeInt(i);
				}
				t.SetMode(3);
				_r$6 = t.Set(x$3.val); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				_r$7 = t.Int(i); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_tuple$2 = _r$7;
				acc$2 = _tuple$2[1];
				if (acc$2 === 0) {
					$s = -1; return makeInt(i);
				}
			/* } */ case 7:
			$s = 5; continue;
		/* } else if ($assertType(_ref, complexVal, true)[1]) { */ case 4:
			x$4 = $clone(_ref.$val, complexVal);
			_r$8 = ToFloat(new x$4.constructor.elem(x$4)); /* */ $s = 15; case 15: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			re = _r$8;
			_r$9 = re.Kind(); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			/* */ if (_r$9 === 4) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (_r$9 === 4) { */ case 16:
				_r$10 = ToInt(re); /* */ $s = 19; case 19: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				$s = -1; return _r$10;
			/* } */ case 17:
		/* } */ case 5:
		$s = -1; return (x$5 = new unknownVal.ptr(), new x$5.constructor.elem(x$5));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ToInt }; } $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.acc = acc; $f.acc$1 = acc$1; $f.acc$2 = acc$2; $f.i = i; $f.re = re; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ToInt = ToInt;
	ToFloat = function(x) {
		var _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _v, im, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _v = $f._v; im = $f.im; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = x;
		/* */ if ($assertType(_ref, int64Val, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, intVal, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ratVal, true)[1] || $assertType(_ref, floatVal, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, complexVal, true)[1]) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ($assertType(_ref, int64Val, true)[1]) { */ case 1:
			x$1 = _ref.$val;
			_r$1 = i64tof(x$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return (x$5 = _r$1, new x$5.constructor.elem(x$5));
		/* } else if ($assertType(_ref, intVal, true)[1]) { */ case 2:
			x$2 = $clone(_ref.$val, intVal);
			_r$2 = itof($clone(x$2, intVal)); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return (x$6 = _r$2, new x$6.constructor.elem(x$6));
		/* } else if ($assertType(_ref, ratVal, true)[1] || $assertType(_ref, floatVal, true)[1]) { */ case 3:
			x$3 = _ref;
			$s = -1; return x$3;
		/* } else if ($assertType(_ref, complexVal, true)[1]) { */ case 4:
			x$4 = $clone(_ref.$val, complexVal);
			_r$3 = ToInt(x$4.im); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			im = _r$3;
			_r$4 = im.Kind(); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			if (!(_r$4 === 3)) { _v = false; $s = 11; continue s; }
			_r$5 = Sign(im); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_v = _r$5 === 0; case 11:
			/* */ if (_v) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_v) { */ case 9:
				_r$6 = ToFloat(x$4.re); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$s = -1; return _r$6;
			/* } */ case 10:
		/* } */ case 5:
		$s = -1; return (x$7 = new unknownVal.ptr(), new x$7.constructor.elem(x$7));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ToFloat }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._v = _v; $f.im = im; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ToFloat = ToFloat;
	ToComplex = function(x) {
		var _r$1, _r$2, _r$3, _r$4, _ref, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = x;
		/* */ if ($assertType(_ref, int64Val, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, intVal, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ratVal, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, floatVal, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, complexVal, true)[1]) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ($assertType(_ref, int64Val, true)[1]) { */ case 1:
			x$1 = _ref.$val;
			_r$1 = i64tof(x$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = vtoc((x$7 = _r$1, new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return (x$6 = _r$2, new x$6.constructor.elem(x$6));
		/* } else if ($assertType(_ref, intVal, true)[1]) { */ case 2:
			x$2 = $clone(_ref.$val, intVal);
			_r$3 = itof($clone(x$2, intVal)); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = vtoc((x$9 = _r$3, new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return (x$8 = _r$4, new x$8.constructor.elem(x$8));
		/* } else if ($assertType(_ref, ratVal, true)[1]) { */ case 3:
			x$3 = $clone(_ref.$val, ratVal);
			$s = -1; return (x$10 = vtoc(new x$3.constructor.elem(x$3)), new x$10.constructor.elem(x$10));
		/* } else if ($assertType(_ref, floatVal, true)[1]) { */ case 4:
			x$4 = $clone(_ref.$val, floatVal);
			$s = -1; return (x$11 = vtoc(new x$4.constructor.elem(x$4)), new x$11.constructor.elem(x$11));
		/* } else if ($assertType(_ref, complexVal, true)[1]) { */ case 5:
			x$5 = $clone(_ref.$val, complexVal);
			$s = -1; return new x$5.constructor.elem(x$5);
		/* } */ case 6:
		$s = -1; return (x$12 = new unknownVal.ptr(), new x$12.constructor.elem(x$12));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ToComplex }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ToComplex = ToComplex;
	is32bit = function(x) {
		var x;
		return (-1 < x.$high || (-1 === x.$high && 2147483648 <= x.$low)) && (x.$high < 0 || (x.$high === 0 && x.$low <= 2147483647));
	};
	is63bit = function(x) {
		var x;
		return (-1073741824 < x.$high || (-1073741824 === x.$high && 0 <= x.$low)) && (x.$high < 1073741823 || (x.$high === 1073741823 && x.$low <= 4294967295));
	};
	UnaryOp = function(op, y, prec) {
		var _1, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _ref$1, _ref$2, _ref$3, im, op, prec, re, y, y$1, y$10, y$11, y$12, y$2, y$3, y$4, y$5, y$6, y$7, y$8, y$9, z, z$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; im = $f.im; op = $f.op; prec = $f.prec; re = $f.re; y = $f.y; y$1 = $f.y$1; y$10 = $f.y$10; y$11 = $f.y$11; y$12 = $f.y$12; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; y$5 = $f.y$5; y$6 = $f.y$6; y$7 = $f.y$7; y$8 = $f.y$8; y$9 = $f.y$9; z = $f.z; z$1 = $f.z$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = op;
			/* */ if (_1 === (12)) { $s = 2; continue; }
			/* */ if (_1 === (13)) { $s = 3; continue; }
			/* */ if (_1 === (19)) { $s = 4; continue; }
			/* */ if (_1 === (43)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (12)) { */ case 2:
				_ref = y;
				if ($assertType(_ref, unknownVal, true)[1] || $assertType(_ref, int64Val, true)[1] || $assertType(_ref, intVal, true)[1] || $assertType(_ref, ratVal, true)[1] || $assertType(_ref, floatVal, true)[1] || $assertType(_ref, complexVal, true)[1]) {
					$s = -1; return y;
				}
				$s = 6; continue;
			/* } else if (_1 === (13)) { */ case 3:
				_ref$1 = y;
				/* */ if ($assertType(_ref$1, unknownVal, true)[1]) { $s = 7; continue; }
				/* */ if ($assertType(_ref$1, int64Val, true)[1]) { $s = 8; continue; }
				/* */ if ($assertType(_ref$1, intVal, true)[1]) { $s = 9; continue; }
				/* */ if ($assertType(_ref$1, ratVal, true)[1]) { $s = 10; continue; }
				/* */ if ($assertType(_ref$1, floatVal, true)[1]) { $s = 11; continue; }
				/* */ if ($assertType(_ref$1, complexVal, true)[1]) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if ($assertType(_ref$1, unknownVal, true)[1]) { */ case 7:
					y$1 = $clone(_ref$1.$val, unknownVal);
					$s = -1; return new y$1.constructor.elem(y$1);
				/* } else if ($assertType(_ref$1, int64Val, true)[1]) { */ case 8:
					y$2 = _ref$1.$val;
					z = new int64Val(-y$2.$high, -y$2.$low);
					if (!((z.$high === y$2.$high && z.$low === y$2.$low))) {
						$s = -1; return z;
					}
					$s = -1; return makeInt(newInt().Neg(big.NewInt((new $Int64(y$2.$high, y$2.$low)))));
				/* } else if ($assertType(_ref$1, intVal, true)[1]) { */ case 9:
					y$3 = $clone(_ref$1.$val, intVal);
					$s = -1; return makeInt(newInt().Neg(y$3.val));
				/* } else if ($assertType(_ref$1, ratVal, true)[1]) { */ case 10:
					y$4 = $clone(_ref$1.$val, ratVal);
					_r$1 = makeRat(newRat().Neg(y$4.val)); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$s = -1; return _r$1;
				/* } else if ($assertType(_ref$1, floatVal, true)[1]) { */ case 11:
					y$5 = $clone(_ref$1.$val, floatVal);
					_r$2 = newFloat(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$3 = _r$2.Neg(y$5.val); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = makeFloat(_r$3); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					$s = -1; return _r$4;
				/* } else if ($assertType(_ref$1, complexVal, true)[1]) { */ case 12:
					y$6 = $clone(_ref$1.$val, complexVal);
					_r$5 = UnaryOp(13, y$6.re, 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					re = _r$5;
					_r$6 = UnaryOp(13, y$6.im, 0); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					im = _r$6;
					$s = -1; return makeComplex(re, im);
				/* } */ case 13:
				$s = 6; continue;
			/* } else if (_1 === (19)) { */ case 4:
				z$1 = newInt();
				_ref$2 = y;
				/* */ if ($assertType(_ref$2, unknownVal, true)[1]) { $s = 20; continue; }
				/* */ if ($assertType(_ref$2, int64Val, true)[1]) { $s = 21; continue; }
				/* */ if ($assertType(_ref$2, intVal, true)[1]) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if ($assertType(_ref$2, unknownVal, true)[1]) { */ case 20:
					y$7 = $clone(_ref$2.$val, unknownVal);
					$s = -1; return new y$7.constructor.elem(y$7);
				/* } else if ($assertType(_ref$2, int64Val, true)[1]) { */ case 21:
					y$8 = _ref$2.$val;
					z$1.Not(big.NewInt((new $Int64(y$8.$high, y$8.$low))));
					$s = 24; continue;
				/* } else if ($assertType(_ref$2, intVal, true)[1]) { */ case 22:
					y$9 = $clone(_ref$2.$val, intVal);
					z$1.Not(y$9.val);
					$s = 24; continue;
				/* } else { */ case 23:
					y$10 = _ref$2;
					/* goto Error */ $s = 25; continue;
				/* } */ case 24:
				if (prec > 0) {
					z$1.AndNot(z$1, newInt().Lsh(big.NewInt(new $Int64(-1, 4294967295)), prec));
				}
				$s = -1; return makeInt(z$1);
			/* } else if (_1 === (43)) { */ case 5:
				_ref$3 = y;
				if ($assertType(_ref$3, unknownVal, true)[1]) {
					y$11 = $clone(_ref$3.$val, unknownVal);
					$s = -1; return new y$11.constructor.elem(y$11);
				} else if ($assertType(_ref$3, boolVal, true)[1]) {
					y$12 = _ref$3.$val;
					$s = -1; return new boolVal(!y$12);
				}
			/* } */ case 6:
		case 1:
		/* Error: */ case 25:
		_r$7 = fmt.Sprintf("invalid unary operation %s%v", new sliceType$1([new token.Token(op), y])); /* */ $s = 26; case 26: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$panic(new $String(_r$7));
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: UnaryOp }; } $f._1 = _1; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f.im = im; $f.op = op; $f.prec = prec; $f.re = re; $f.y = y; $f.y$1 = y$1; $f.y$10 = y$10; $f.y$11 = y$11; $f.y$12 = y$12; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.y$5 = y$5; $f.y$6 = y$6; $f.y$7 = y$7; $f.y$8 = y$8; $f.y$9 = y$9; $f.z = z; $f.z$1 = z$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.UnaryOp = UnaryOp;
	ord = function(x) {
		var _ref, x;
		_ref = x;
		if ($assertType(_ref, unknownVal, true)[1]) {
			return 0;
		} else if ($assertType(_ref, boolVal, true)[1] || $assertType(_ref, ptrType, true)[1]) {
			return 1;
		} else if ($assertType(_ref, int64Val, true)[1]) {
			return 2;
		} else if ($assertType(_ref, intVal, true)[1]) {
			return 3;
		} else if ($assertType(_ref, ratVal, true)[1]) {
			return 4;
		} else if ($assertType(_ref, floatVal, true)[1]) {
			return 5;
		} else if ($assertType(_ref, complexVal, true)[1]) {
			return 6;
		} else {
			return -1;
		}
	};
	match = function(x, y) {
		var _, _$1, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$10, y$11, y$12, y$13, y$14, y$2, y$3, y$4, y$5, y$6, y$7, y$8, y$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _ = $f._; _$1 = $f._$1; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; y$1 = $f.y$1; y$10 = $f.y$10; y$11 = $f.y$11; y$12 = $f.y$12; y$13 = $f.y$13; y$14 = $f.y$14; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; y$5 = $f.y$5; y$6 = $f.y$6; y$7 = $f.y$7; y$8 = $f.y$8; y$9 = $f.y$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ = $ifaceNil;
		_$1 = $ifaceNil;
		/* */ if (ord(x) > ord(y)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ord(x) > ord(y)) { */ case 1:
			_r$1 = match(y, x); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			y = _tuple[0];
			x = _tuple[1];
			_tmp = x;
			_tmp$1 = y;
			_ = _tmp;
			_$1 = _tmp$1;
			$s = -1; return [_, _$1];
		/* } */ case 2:
		_ref = x;
		/* */ if ($assertType(_ref, boolVal, true)[1] || $assertType(_ref, ptrType, true)[1] || $assertType(_ref, complexVal, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, int64Val, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, intVal, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ratVal, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, floatVal, true)[1]) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ($assertType(_ref, boolVal, true)[1] || $assertType(_ref, ptrType, true)[1] || $assertType(_ref, complexVal, true)[1]) { */ case 4:
			x$1 = _ref;
			_tmp$2 = x$1;
			_tmp$3 = y;
			_ = _tmp$2;
			_$1 = _tmp$3;
			$s = -1; return [_, _$1];
		/* } else if ($assertType(_ref, int64Val, true)[1]) { */ case 5:
			x$2 = _ref.$val;
			_ref$1 = y;
			/* */ if ($assertType(_ref$1, int64Val, true)[1]) { $s = 10; continue; }
			/* */ if ($assertType(_ref$1, intVal, true)[1]) { $s = 11; continue; }
			/* */ if ($assertType(_ref$1, ratVal, true)[1]) { $s = 12; continue; }
			/* */ if ($assertType(_ref$1, floatVal, true)[1]) { $s = 13; continue; }
			/* */ if ($assertType(_ref$1, complexVal, true)[1]) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if ($assertType(_ref$1, int64Val, true)[1]) { */ case 10:
				y$1 = _ref$1.$val;
				_tmp$4 = x$2;
				_tmp$5 = y$1;
				_ = _tmp$4;
				_$1 = _tmp$5;
				$s = -1; return [_, _$1];
			/* } else if ($assertType(_ref$1, intVal, true)[1]) { */ case 11:
				y$2 = $clone(_ref$1.$val, intVal);
				_tmp$6 = (x$6 = i64toi(x$2), new x$6.constructor.elem(x$6));
				_tmp$7 = new y$2.constructor.elem(y$2);
				_ = _tmp$6;
				_$1 = _tmp$7;
				$s = -1; return [_, _$1];
			/* } else if ($assertType(_ref$1, ratVal, true)[1]) { */ case 12:
				y$3 = $clone(_ref$1.$val, ratVal);
				_tmp$8 = (x$7 = i64tor(x$2), new x$7.constructor.elem(x$7));
				_tmp$9 = new y$3.constructor.elem(y$3);
				_ = _tmp$8;
				_$1 = _tmp$9;
				$s = -1; return [_, _$1];
			/* } else if ($assertType(_ref$1, floatVal, true)[1]) { */ case 13:
				y$4 = $clone(_ref$1.$val, floatVal);
				_r$2 = i64tof(x$2); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tmp$10 = (x$8 = _r$2, new x$8.constructor.elem(x$8));
				_tmp$11 = new y$4.constructor.elem(y$4);
				_ = _tmp$10;
				_$1 = _tmp$11;
				$s = -1; return [_, _$1];
			/* } else if ($assertType(_ref$1, complexVal, true)[1]) { */ case 14:
				y$5 = $clone(_ref$1.$val, complexVal);
				_tmp$12 = (x$9 = vtoc(x$2), new x$9.constructor.elem(x$9));
				_tmp$13 = new y$5.constructor.elem(y$5);
				_ = _tmp$12;
				_$1 = _tmp$13;
				$s = -1; return [_, _$1];
			/* } */ case 15:
			$s = 9; continue;
		/* } else if ($assertType(_ref, intVal, true)[1]) { */ case 6:
			x$3 = $clone(_ref.$val, intVal);
			_ref$2 = y;
			/* */ if ($assertType(_ref$2, intVal, true)[1]) { $s = 17; continue; }
			/* */ if ($assertType(_ref$2, ratVal, true)[1]) { $s = 18; continue; }
			/* */ if ($assertType(_ref$2, floatVal, true)[1]) { $s = 19; continue; }
			/* */ if ($assertType(_ref$2, complexVal, true)[1]) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ($assertType(_ref$2, intVal, true)[1]) { */ case 17:
				y$6 = $clone(_ref$2.$val, intVal);
				_tmp$14 = new x$3.constructor.elem(x$3);
				_tmp$15 = new y$6.constructor.elem(y$6);
				_ = _tmp$14;
				_$1 = _tmp$15;
				$s = -1; return [_, _$1];
			/* } else if ($assertType(_ref$2, ratVal, true)[1]) { */ case 18:
				y$7 = $clone(_ref$2.$val, ratVal);
				_tmp$16 = (x$10 = itor($clone(x$3, intVal)), new x$10.constructor.elem(x$10));
				_tmp$17 = new y$7.constructor.elem(y$7);
				_ = _tmp$16;
				_$1 = _tmp$17;
				$s = -1; return [_, _$1];
			/* } else if ($assertType(_ref$2, floatVal, true)[1]) { */ case 19:
				y$8 = $clone(_ref$2.$val, floatVal);
				_r$3 = itof($clone(x$3, intVal)); /* */ $s = 22; case 22: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tmp$18 = (x$11 = _r$3, new x$11.constructor.elem(x$11));
				_tmp$19 = new y$8.constructor.elem(y$8);
				_ = _tmp$18;
				_$1 = _tmp$19;
				$s = -1; return [_, _$1];
			/* } else if ($assertType(_ref$2, complexVal, true)[1]) { */ case 20:
				y$9 = $clone(_ref$2.$val, complexVal);
				_tmp$20 = (x$12 = vtoc(new x$3.constructor.elem(x$3)), new x$12.constructor.elem(x$12));
				_tmp$21 = new y$9.constructor.elem(y$9);
				_ = _tmp$20;
				_$1 = _tmp$21;
				$s = -1; return [_, _$1];
			/* } */ case 21:
			$s = 9; continue;
		/* } else if ($assertType(_ref, ratVal, true)[1]) { */ case 7:
			x$4 = $clone(_ref.$val, ratVal);
			_ref$3 = y;
			/* */ if ($assertType(_ref$3, ratVal, true)[1]) { $s = 23; continue; }
			/* */ if ($assertType(_ref$3, floatVal, true)[1]) { $s = 24; continue; }
			/* */ if ($assertType(_ref$3, complexVal, true)[1]) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if ($assertType(_ref$3, ratVal, true)[1]) { */ case 23:
				y$10 = $clone(_ref$3.$val, ratVal);
				_tmp$22 = new x$4.constructor.elem(x$4);
				_tmp$23 = new y$10.constructor.elem(y$10);
				_ = _tmp$22;
				_$1 = _tmp$23;
				$s = -1; return [_, _$1];
			/* } else if ($assertType(_ref$3, floatVal, true)[1]) { */ case 24:
				y$11 = $clone(_ref$3.$val, floatVal);
				_r$4 = rtof($clone(x$4, ratVal)); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tmp$24 = (x$13 = _r$4, new x$13.constructor.elem(x$13));
				_tmp$25 = new y$11.constructor.elem(y$11);
				_ = _tmp$24;
				_$1 = _tmp$25;
				$s = -1; return [_, _$1];
			/* } else if ($assertType(_ref$3, complexVal, true)[1]) { */ case 25:
				y$12 = $clone(_ref$3.$val, complexVal);
				_tmp$26 = (x$14 = vtoc(new x$4.constructor.elem(x$4)), new x$14.constructor.elem(x$14));
				_tmp$27 = new y$12.constructor.elem(y$12);
				_ = _tmp$26;
				_$1 = _tmp$27;
				$s = -1; return [_, _$1];
			/* } */ case 26:
			$s = 9; continue;
		/* } else if ($assertType(_ref, floatVal, true)[1]) { */ case 8:
			x$5 = $clone(_ref.$val, floatVal);
			_ref$4 = y;
			if ($assertType(_ref$4, floatVal, true)[1]) {
				y$13 = $clone(_ref$4.$val, floatVal);
				_tmp$28 = new x$5.constructor.elem(x$5);
				_tmp$29 = new y$13.constructor.elem(y$13);
				_ = _tmp$28;
				_$1 = _tmp$29;
				$s = -1; return [_, _$1];
			} else if ($assertType(_ref$4, complexVal, true)[1]) {
				y$14 = $clone(_ref$4.$val, complexVal);
				_tmp$30 = (x$15 = vtoc(new x$5.constructor.elem(x$5)), new x$15.constructor.elem(x$15));
				_tmp$31 = new y$14.constructor.elem(y$14);
				_ = _tmp$30;
				_$1 = _tmp$31;
				$s = -1; return [_, _$1];
			}
		/* } */ case 9:
		_tmp$32 = x;
		_tmp$33 = x;
		_ = _tmp$32;
		_$1 = _tmp$33;
		$s = -1; return [_, _$1];
		/* */ } return; } if ($f === undefined) { $f = { $blk: match }; } $f._ = _; $f._$1 = _$1; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.y$1 = y$1; $f.y$10 = y$10; $f.y$11 = y$11; $f.y$12 = y$12; $f.y$13 = y$13; $f.y$14 = y$14; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.y$5 = y$5; $f.y$6 = y$6; $f.y$7 = y$7; $f.y$8 = y$8; $f.y$9 = y$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	BinaryOp = function(x_, op, y_) {
		var _1, _2, _3, _4, _5, _6, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$4, _r$40, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, a, a$1, a$2, a$3, a$4, ac, ac$1, ad, ad$1, b, b$1, b$2, b$3, b$4, bc, bc$1, bd, bd$1, c, c$1, c$2, c$3, c$4, cc, d, dd, im, op, re, s, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x_, y, y$1, y$2, y_, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$4 = $f._r$4; _r$40 = $f._r$40; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; a = $f.a; a$1 = $f.a$1; a$2 = $f.a$2; a$3 = $f.a$3; a$4 = $f.a$4; ac = $f.ac; ac$1 = $f.ac$1; ad = $f.ad; ad$1 = $f.ad$1; b = $f.b; b$1 = $f.b$1; b$2 = $f.b$2; b$3 = $f.b$3; b$4 = $f.b$4; bc = $f.bc; bc$1 = $f.bc$1; bd = $f.bd; bd$1 = $f.bd$1; c = $f.c; c$1 = $f.c$1; c$2 = $f.c$2; c$3 = $f.c$3; c$4 = $f.c$4; cc = $f.cc; d = $f.d; dd = $f.dd; im = $f.im; op = $f.op; re = $f.re; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; x_ = $f.x_; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y_ = $f.y_; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$1 = match(x_, y_); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		x = _tuple[0];
		y = _tuple[1];
		_ref = x;
		/* */ if ($assertType(_ref, unknownVal, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, boolVal, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, int64Val, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, intVal, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ratVal, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, floatVal, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, complexVal, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType, true)[1]) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ($assertType(_ref, unknownVal, true)[1]) { */ case 2:
			x$1 = $clone(_ref.$val, unknownVal);
			$s = -1; return new x$1.constructor.elem(x$1);
		/* } else if ($assertType(_ref, boolVal, true)[1]) { */ case 3:
			x$2 = _ref.$val;
			y$1 = $assertType(y, boolVal);
			_1 = op;
			if (_1 === (34)) {
				$s = -1; return new boolVal(x$2 && y$1);
			} else if (_1 === (35)) {
				$s = -1; return new boolVal(x$2 || y$1);
			}
			$s = 10; continue;
		/* } else if ($assertType(_ref, int64Val, true)[1]) { */ case 4:
			x$3 = _ref.$val;
			a = (new $Int64(x$3.$high, x$3.$low));
			b = ((x$9 = $assertType(y, int64Val), new $Int64(x$9.$high, x$9.$low)));
			c = new $Int64(0, 0);
				_2 = op;
				/* */ if (_2 === (12)) { $s = 12; continue; }
				/* */ if (_2 === (13)) { $s = 13; continue; }
				/* */ if (_2 === (14)) { $s = 14; continue; }
				/* */ if (_2 === (15)) { $s = 15; continue; }
				/* */ if (_2 === (26)) { $s = 16; continue; }
				/* */ if (_2 === (16)) { $s = 17; continue; }
				/* */ if (_2 === (17)) { $s = 18; continue; }
				/* */ if (_2 === (18)) { $s = 19; continue; }
				/* */ if (_2 === (19)) { $s = 20; continue; }
				/* */ if (_2 === (22)) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (_2 === (12)) { */ case 12:
					if (!is63bit(a) || !is63bit(b)) {
						$s = -1; return makeInt(newInt().Add(big.NewInt(a), big.NewInt(b)));
					}
					c = new $Int64(a.$high + b.$high, a.$low + b.$low);
					$s = 23; continue;
				/* } else if (_2 === (13)) { */ case 13:
					if (!is63bit(a) || !is63bit(b)) {
						$s = -1; return makeInt(newInt().Sub(big.NewInt(a), big.NewInt(b)));
					}
					c = new $Int64(a.$high - b.$high, a.$low - b.$low);
					$s = 23; continue;
				/* } else if (_2 === (14)) { */ case 14:
					if (!is32bit(a) || !is32bit(b)) {
						$s = -1; return makeInt(newInt().Mul(big.NewInt(a), big.NewInt(b)));
					}
					c = $mul64(a, b);
					$s = 23; continue;
				/* } else if (_2 === (15)) { */ case 15:
					_r$2 = big.NewRat(a, b); /* */ $s = 24; case 24: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$3 = makeRat(_r$2); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$s = -1; return _r$3;
				/* } else if (_2 === (26)) { */ case 16:
					c = $div64(a, b, false);
					$s = 23; continue;
				/* } else if (_2 === (16)) { */ case 17:
					c = $div64(a, b, true);
					$s = 23; continue;
				/* } else if (_2 === (17)) { */ case 18:
					c = new $Int64(a.$high & b.$high, (a.$low & b.$low) >>> 0);
					$s = 23; continue;
				/* } else if (_2 === (18)) { */ case 19:
					c = new $Int64(a.$high | b.$high, (a.$low | b.$low) >>> 0);
					$s = 23; continue;
				/* } else if (_2 === (19)) { */ case 20:
					c = new $Int64(a.$high ^ b.$high, (a.$low ^ b.$low) >>> 0);
					$s = 23; continue;
				/* } else if (_2 === (22)) { */ case 21:
					c = new $Int64(a.$high & ~b.$high, (a.$low & ~b.$low) >>> 0);
					$s = 23; continue;
				/* } else { */ case 22:
					/* goto Error */ $s = 26; continue;
				/* } */ case 23:
			case 11:
			$s = -1; return (new int64Val(c.$high, c.$low));
		/* } else if ($assertType(_ref, intVal, true)[1]) { */ case 5:
			x$4 = $clone(_ref.$val, intVal);
			a$1 = x$4.val;
			b$1 = $assertType(y, intVal).val;
			c$1 = newInt();
				_3 = op;
				/* */ if (_3 === (12)) { $s = 28; continue; }
				/* */ if (_3 === (13)) { $s = 29; continue; }
				/* */ if (_3 === (14)) { $s = 30; continue; }
				/* */ if (_3 === (15)) { $s = 31; continue; }
				/* */ if (_3 === (26)) { $s = 32; continue; }
				/* */ if (_3 === (16)) { $s = 33; continue; }
				/* */ if (_3 === (17)) { $s = 34; continue; }
				/* */ if (_3 === (18)) { $s = 35; continue; }
				/* */ if (_3 === (19)) { $s = 36; continue; }
				/* */ if (_3 === (22)) { $s = 37; continue; }
				/* */ $s = 38; continue;
				/* if (_3 === (12)) { */ case 28:
					c$1.Add(a$1, b$1);
					$s = 39; continue;
				/* } else if (_3 === (13)) { */ case 29:
					c$1.Sub(a$1, b$1);
					$s = 39; continue;
				/* } else if (_3 === (14)) { */ case 30:
					c$1.Mul(a$1, b$1);
					$s = 39; continue;
				/* } else if (_3 === (15)) { */ case 31:
					_r$4 = newRat().SetFrac(a$1, b$1); /* */ $s = 40; case 40: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$5 = makeRat(_r$4); /* */ $s = 41; case 41: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$s = -1; return _r$5;
				/* } else if (_3 === (26)) { */ case 32:
					_r$6 = c$1.Quo(a$1, b$1); /* */ $s = 42; case 42: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$6;
					$s = 39; continue;
				/* } else if (_3 === (16)) { */ case 33:
					_r$7 = c$1.Rem(a$1, b$1); /* */ $s = 43; case 43: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_r$7;
					$s = 39; continue;
				/* } else if (_3 === (17)) { */ case 34:
					c$1.And(a$1, b$1);
					$s = 39; continue;
				/* } else if (_3 === (18)) { */ case 35:
					c$1.Or(a$1, b$1);
					$s = 39; continue;
				/* } else if (_3 === (19)) { */ case 36:
					c$1.Xor(a$1, b$1);
					$s = 39; continue;
				/* } else if (_3 === (22)) { */ case 37:
					c$1.AndNot(a$1, b$1);
					$s = 39; continue;
				/* } else { */ case 38:
					/* goto Error */ $s = 26; continue;
				/* } */ case 39:
			case 27:
			$s = -1; return makeInt(c$1);
		/* } else if ($assertType(_ref, ratVal, true)[1]) { */ case 6:
			x$5 = $clone(_ref.$val, ratVal);
			a$2 = x$5.val;
			b$2 = $assertType(y, ratVal).val;
			c$2 = newRat();
				_4 = op;
				/* */ if (_4 === (12)) { $s = 45; continue; }
				/* */ if (_4 === (13)) { $s = 46; continue; }
				/* */ if (_4 === (14)) { $s = 47; continue; }
				/* */ if (_4 === (15)) { $s = 48; continue; }
				/* */ $s = 49; continue;
				/* if (_4 === (12)) { */ case 45:
					_r$8 = c$2.Add(a$2, b$2); /* */ $s = 51; case 51: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$8;
					$s = 50; continue;
				/* } else if (_4 === (13)) { */ case 46:
					_r$9 = c$2.Sub(a$2, b$2); /* */ $s = 52; case 52: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_r$9;
					$s = 50; continue;
				/* } else if (_4 === (14)) { */ case 47:
					_r$10 = c$2.Mul(a$2, b$2); /* */ $s = 53; case 53: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_r$10;
					$s = 50; continue;
				/* } else if (_4 === (15)) { */ case 48:
					_r$11 = c$2.Quo(a$2, b$2); /* */ $s = 54; case 54: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_r$11;
					$s = 50; continue;
				/* } else { */ case 49:
					/* goto Error */ $s = 26; continue;
				/* } */ case 50:
			case 44:
			_r$12 = makeRat(c$2); /* */ $s = 55; case 55: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			$s = -1; return _r$12;
		/* } else if ($assertType(_ref, floatVal, true)[1]) { */ case 7:
			x$6 = $clone(_ref.$val, floatVal);
			a$3 = x$6.val;
			b$3 = $assertType(y, floatVal).val;
			_r$13 = newFloat(); /* */ $s = 56; case 56: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			c$3 = _r$13;
				_5 = op;
				/* */ if (_5 === (12)) { $s = 58; continue; }
				/* */ if (_5 === (13)) { $s = 59; continue; }
				/* */ if (_5 === (14)) { $s = 60; continue; }
				/* */ if (_5 === (15)) { $s = 61; continue; }
				/* */ $s = 62; continue;
				/* if (_5 === (12)) { */ case 58:
					_r$14 = c$3.Add(a$3, b$3); /* */ $s = 64; case 64: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_r$14;
					$s = 63; continue;
				/* } else if (_5 === (13)) { */ case 59:
					_r$15 = c$3.Sub(a$3, b$3); /* */ $s = 65; case 65: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					_r$15;
					$s = 63; continue;
				/* } else if (_5 === (14)) { */ case 60:
					_r$16 = c$3.Mul(a$3, b$3); /* */ $s = 66; case 66: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					_r$16;
					$s = 63; continue;
				/* } else if (_5 === (15)) { */ case 61:
					_r$17 = c$3.Quo(a$3, b$3); /* */ $s = 67; case 67: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					_r$17;
					$s = 63; continue;
				/* } else { */ case 62:
					/* goto Error */ $s = 26; continue;
				/* } */ case 63:
			case 57:
			_r$18 = makeFloat(c$3); /* */ $s = 68; case 68: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			$s = -1; return _r$18;
		/* } else if ($assertType(_ref, complexVal, true)[1]) { */ case 8:
			x$7 = $clone(_ref.$val, complexVal);
			y$2 = $clone($assertType(y, complexVal), complexVal);
			_tmp = x$7.re;
			_tmp$1 = x$7.im;
			a$4 = _tmp;
			b$4 = _tmp$1;
			_tmp$2 = y$2.re;
			_tmp$3 = y$2.im;
			c$4 = _tmp$2;
			d = _tmp$3;
			_tmp$4 = $ifaceNil;
			_tmp$5 = $ifaceNil;
			re = _tmp$4;
			im = _tmp$5;
				_6 = op;
				/* */ if (_6 === (12)) { $s = 70; continue; }
				/* */ if (_6 === (13)) { $s = 71; continue; }
				/* */ if (_6 === (14)) { $s = 72; continue; }
				/* */ if (_6 === (15)) { $s = 73; continue; }
				/* */ $s = 74; continue;
				/* if (_6 === (12)) { */ case 70:
					_r$19 = add(a$4, c$4); /* */ $s = 76; case 76: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					re = _r$19;
					_r$20 = add(b$4, d); /* */ $s = 77; case 77: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
					im = _r$20;
					$s = 75; continue;
				/* } else if (_6 === (13)) { */ case 71:
					_r$21 = sub(a$4, c$4); /* */ $s = 78; case 78: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
					re = _r$21;
					_r$22 = sub(b$4, d); /* */ $s = 79; case 79: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					im = _r$22;
					$s = 75; continue;
				/* } else if (_6 === (14)) { */ case 72:
					_r$23 = mul(a$4, c$4); /* */ $s = 80; case 80: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
					ac = _r$23;
					_r$24 = mul(b$4, d); /* */ $s = 81; case 81: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
					bd = _r$24;
					_r$25 = mul(b$4, c$4); /* */ $s = 82; case 82: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					bc = _r$25;
					_r$26 = mul(a$4, d); /* */ $s = 83; case 83: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
					ad = _r$26;
					_r$27 = sub(ac, bd); /* */ $s = 84; case 84: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					re = _r$27;
					_r$28 = add(bc, ad); /* */ $s = 85; case 85: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
					im = _r$28;
					$s = 75; continue;
				/* } else if (_6 === (15)) { */ case 73:
					_r$29 = mul(a$4, c$4); /* */ $s = 86; case 86: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
					ac$1 = _r$29;
					_r$30 = mul(b$4, d); /* */ $s = 87; case 87: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
					bd$1 = _r$30;
					_r$31 = mul(b$4, c$4); /* */ $s = 88; case 88: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
					bc$1 = _r$31;
					_r$32 = mul(a$4, d); /* */ $s = 89; case 89: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
					ad$1 = _r$32;
					_r$33 = mul(c$4, c$4); /* */ $s = 90; case 90: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
					cc = _r$33;
					_r$34 = mul(d, d); /* */ $s = 91; case 91: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
					dd = _r$34;
					_r$35 = add(cc, dd); /* */ $s = 92; case 92: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
					s = _r$35;
					_r$36 = add(ac$1, bd$1); /* */ $s = 93; case 93: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
					re = _r$36;
					_r$37 = quo(re, s); /* */ $s = 94; case 94: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
					re = _r$37;
					_r$38 = sub(bc$1, ad$1); /* */ $s = 95; case 95: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
					im = _r$38;
					_r$39 = quo(im, s); /* */ $s = 96; case 96: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
					im = _r$39;
					$s = 75; continue;
				/* } else { */ case 74:
					/* goto Error */ $s = 26; continue;
				/* } */ case 75:
			case 69:
			$s = -1; return makeComplex(re, im);
		/* } else if ($assertType(_ref, ptrType, true)[1]) { */ case 9:
			x$8 = _ref.$val;
			if (op === 12) {
				$s = -1; return new stringVal.ptr(new sync.Mutex.ptr(0, 0), "", x$8, $assertType(y, ptrType));
			}
		/* } */ case 10:
		/* Error: */ case 26:
		_r$40 = fmt.Sprintf("invalid binary operation %v %s %v", new sliceType$1([x_, new token.Token(op), y_])); /* */ $s = 97; case 97: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
		$panic(new $String(_r$40));
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BinaryOp }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$4 = _r$4; $f._r$40 = _r$40; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.a = a; $f.a$1 = a$1; $f.a$2 = a$2; $f.a$3 = a$3; $f.a$4 = a$4; $f.ac = ac; $f.ac$1 = ac$1; $f.ad = ad; $f.ad$1 = ad$1; $f.b = b; $f.b$1 = b$1; $f.b$2 = b$2; $f.b$3 = b$3; $f.b$4 = b$4; $f.bc = bc; $f.bc$1 = bc$1; $f.bd = bd; $f.bd$1 = bd$1; $f.c = c; $f.c$1 = c$1; $f.c$2 = c$2; $f.c$3 = c$3; $f.c$4 = c$4; $f.cc = cc; $f.d = d; $f.dd = dd; $f.im = im; $f.op = op; $f.re = re; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.x_ = x_; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y_ = y_; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.BinaryOp = BinaryOp;
	add = function(x, y) {
		var _r$1, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$1 = BinaryOp(x, 12, y); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: add }; } $f._r$1 = _r$1; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	sub = function(x, y) {
		var _r$1, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$1 = BinaryOp(x, 13, y); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: sub }; } $f._r$1 = _r$1; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	mul = function(x, y) {
		var _r$1, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$1 = BinaryOp(x, 14, y); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mul }; } $f._r$1 = _r$1; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	quo = function(x, y) {
		var _r$1, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$1 = BinaryOp(x, 15, y); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: quo }; } $f._r$1 = _r$1; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Shift = function(x, op, s) {
		var _1, _2, _r$1, _ref, op, s, x, x$1, x$2, x$3, z, z$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r$1 = $f._r$1; _ref = $f._ref; op = $f.op; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; z = $f.z; z$1 = $f.z$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = x;
		if ($assertType(_ref, unknownVal, true)[1]) {
			x$1 = $clone(_ref.$val, unknownVal);
			$s = -1; return new x$1.constructor.elem(x$1);
		} else if ($assertType(_ref, int64Val, true)[1]) {
			x$2 = _ref.$val;
			if (s === 0) {
				$s = -1; return x$2;
			}
			_1 = op;
			if (_1 === (20)) {
				z = i64toi(x$2).val;
				$s = -1; return makeInt(z.Lsh(z, s));
			} else if (_1 === (21)) {
				$s = -1; return $shiftRightInt64(x$2, s);
			}
		} else if ($assertType(_ref, intVal, true)[1]) {
			x$3 = $clone(_ref.$val, intVal);
			if (s === 0) {
				$s = -1; return new x$3.constructor.elem(x$3);
			}
			z$1 = newInt();
			_2 = op;
			if (_2 === (20)) {
				$s = -1; return makeInt(z$1.Lsh(x$3.val, s));
			} else if (_2 === (21)) {
				$s = -1; return makeInt(z$1.Rsh(x$3.val, s));
			}
		}
		_r$1 = fmt.Sprintf("invalid shift %v %s %d", new sliceType$1([x, new token.Token(op), new $Uint(s)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$panic(new $String(_r$1));
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Shift }; } $f._1 = _1; $f._2 = _2; $f._r$1 = _r$1; $f._ref = _ref; $f.op = op; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.z = z; $f.z$1 = z$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Shift = Shift;
	cmpZero = function(x, op) {
		var _1, _r$1, op, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$1 = $f._r$1; op = $f.op; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_1 = op;
		if (_1 === (39)) {
			$s = -1; return x === 0;
		} else if (_1 === (44)) {
			$s = -1; return !((x === 0));
		} else if (_1 === (40)) {
			$s = -1; return x < 0;
		} else if (_1 === (45)) {
			$s = -1; return x <= 0;
		} else if (_1 === (41)) {
			$s = -1; return x > 0;
		} else if (_1 === (46)) {
			$s = -1; return x >= 0;
		}
		_r$1 = fmt.Sprintf("invalid comparison %v %s 0", new sliceType$1([new $Int(x), new token.Token(op)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$panic(new $String(_r$1));
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cmpZero }; } $f._1 = _1; $f._r$1 = _r$1; $f.op = op; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Compare = function(x_, op, y_) {
		var _1, _2, _3, _4, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, im, op, re, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x_, xs, y, y$1, y$2, y$3, y_, ys, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; im = $f.im; op = $f.op; re = $f.re; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x_ = $f.x_; xs = $f.xs; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y_ = $f.y_; ys = $f.ys; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$1 = match(x_, y_); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		x = _tuple[0];
		y = _tuple[1];
		_ref = x;
		/* */ if ($assertType(_ref, unknownVal, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, boolVal, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, int64Val, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, intVal, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ratVal, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, floatVal, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, complexVal, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType, true)[1]) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ($assertType(_ref, unknownVal, true)[1]) { */ case 2:
			x$1 = $clone(_ref.$val, unknownVal);
			$s = -1; return false;
		/* } else if ($assertType(_ref, boolVal, true)[1]) { */ case 3:
			x$2 = _ref.$val;
			y$1 = $assertType(y, boolVal);
			_1 = op;
			if (_1 === (39)) {
				$s = -1; return x$2 === y$1;
			} else if (_1 === (44)) {
				$s = -1; return !(x$2 === y$1);
			}
			$s = 10; continue;
		/* } else if ($assertType(_ref, int64Val, true)[1]) { */ case 4:
			x$3 = _ref.$val;
			y$2 = $assertType(y, int64Val);
			_2 = op;
			if (_2 === (39)) {
				$s = -1; return (x$3.$high === y$2.$high && x$3.$low === y$2.$low);
			} else if (_2 === (44)) {
				$s = -1; return !((x$3.$high === y$2.$high && x$3.$low === y$2.$low));
			} else if (_2 === (40)) {
				$s = -1; return (x$3.$high < y$2.$high || (x$3.$high === y$2.$high && x$3.$low < y$2.$low));
			} else if (_2 === (45)) {
				$s = -1; return (x$3.$high < y$2.$high || (x$3.$high === y$2.$high && x$3.$low <= y$2.$low));
			} else if (_2 === (41)) {
				$s = -1; return (x$3.$high > y$2.$high || (x$3.$high === y$2.$high && x$3.$low > y$2.$low));
			} else if (_2 === (46)) {
				$s = -1; return (x$3.$high > y$2.$high || (x$3.$high === y$2.$high && x$3.$low >= y$2.$low));
			}
			$s = 10; continue;
		/* } else if ($assertType(_ref, intVal, true)[1]) { */ case 5:
			x$4 = $clone(_ref.$val, intVal);
			_r$2 = cmpZero(x$4.val.Cmp($assertType(y, intVal).val), op); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } else if ($assertType(_ref, ratVal, true)[1]) { */ case 6:
			x$5 = $clone(_ref.$val, ratVal);
			_r$3 = cmpZero(x$5.val.Cmp($assertType(y, ratVal).val), op); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } else if ($assertType(_ref, floatVal, true)[1]) { */ case 7:
			x$6 = $clone(_ref.$val, floatVal);
			_r$4 = x$6.val.Cmp($assertType(y, floatVal).val); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = cmpZero(_r$4, op); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return _r$5;
		/* } else if ($assertType(_ref, complexVal, true)[1]) { */ case 8:
			x$7 = $clone(_ref.$val, complexVal);
			y$3 = $clone($assertType(y, complexVal), complexVal);
			_r$6 = Compare(x$7.re, 39, y$3.re); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			re = _r$6;
			_r$7 = Compare(x$7.im, 39, y$3.im); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			im = _r$7;
			_3 = op;
			if (_3 === (39)) {
				$s = -1; return re && im;
			} else if (_3 === (44)) {
				$s = -1; return !re || !im;
			}
			$s = 10; continue;
		/* } else if ($assertType(_ref, ptrType, true)[1]) { */ case 9:
			x$8 = _ref.$val;
			_r$8 = x$8.string(); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			xs = _r$8;
			_r$9 = $assertType(y, ptrType).string(); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			ys = _r$9;
			_4 = op;
			if (_4 === (39)) {
				$s = -1; return xs === ys;
			} else if (_4 === (44)) {
				$s = -1; return !(xs === ys);
			} else if (_4 === (40)) {
				$s = -1; return xs < ys;
			} else if (_4 === (45)) {
				$s = -1; return xs <= ys;
			} else if (_4 === (41)) {
				$s = -1; return xs > ys;
			} else if (_4 === (46)) {
				$s = -1; return xs >= ys;
			}
		/* } */ case 10:
		_r$10 = fmt.Sprintf("invalid comparison %v %s %v", new sliceType$1([x_, new token.Token(op), y_])); /* */ $s = 19; case 19: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		$panic(new $String(_r$10));
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Compare }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f.im = im; $f.op = op; $f.re = re; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x_ = x_; $f.xs = xs; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y_ = y_; $f.ys = ys; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Compare = Compare;
	unknownVal.methods = [{prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ExactString", name: "ExactString", pkg: "", typ: $funcType([], [$String], false)}, {prop: "implementsValue", name: "implementsValue", pkg: "go/constant", typ: $funcType([], [], false)}];
	boolVal.methods = [{prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ExactString", name: "ExactString", pkg: "", typ: $funcType([], [$String], false)}, {prop: "implementsValue", name: "implementsValue", pkg: "go/constant", typ: $funcType([], [], false)}];
	ptrType.methods = [{prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "string", name: "string", pkg: "go/constant", typ: $funcType([], [$String], false)}, {prop: "appendReverse", name: "appendReverse", pkg: "go/constant", typ: $funcType([sliceType], [sliceType], false)}, {prop: "ExactString", name: "ExactString", pkg: "", typ: $funcType([], [$String], false)}, {prop: "implementsValue", name: "implementsValue", pkg: "go/constant", typ: $funcType([], [], false)}];
	int64Val.methods = [{prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ExactString", name: "ExactString", pkg: "", typ: $funcType([], [$String], false)}, {prop: "implementsValue", name: "implementsValue", pkg: "go/constant", typ: $funcType([], [], false)}];
	intVal.methods = [{prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ExactString", name: "ExactString", pkg: "", typ: $funcType([], [$String], false)}, {prop: "implementsValue", name: "implementsValue", pkg: "go/constant", typ: $funcType([], [], false)}];
	ratVal.methods = [{prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ExactString", name: "ExactString", pkg: "", typ: $funcType([], [$String], false)}, {prop: "implementsValue", name: "implementsValue", pkg: "go/constant", typ: $funcType([], [], false)}];
	floatVal.methods = [{prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ExactString", name: "ExactString", pkg: "", typ: $funcType([], [$String], false)}, {prop: "implementsValue", name: "implementsValue", pkg: "go/constant", typ: $funcType([], [], false)}];
	complexVal.methods = [{prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ExactString", name: "ExactString", pkg: "", typ: $funcType([], [$String], false)}, {prop: "implementsValue", name: "implementsValue", pkg: "go/constant", typ: $funcType([], [], false)}];
	Value.init([{prop: "ExactString", name: "ExactString", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "implementsValue", name: "implementsValue", pkg: "go/constant", typ: $funcType([], [], false)}]);
	unknownVal.init("", []);
	stringVal.init("go/constant", [{prop: "mu", name: "mu", anonymous: false, exported: false, typ: sync.Mutex, tag: ""}, {prop: "s", name: "s", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "l", name: "l", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "r", name: "r", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	intVal.init("go/constant", [{prop: "val", name: "val", anonymous: false, exported: false, typ: ptrType$2, tag: ""}]);
	ratVal.init("go/constant", [{prop: "val", name: "val", anonymous: false, exported: false, typ: ptrType$3, tag: ""}]);
	floatVal.init("go/constant", [{prop: "val", name: "val", anonymous: false, exported: false, typ: ptrType$1, tag: ""}]);
	complexVal.init("go/constant", [{prop: "re", name: "re", anonymous: false, exported: false, typ: Value, tag: ""}, {prop: "im", name: "im", anonymous: false, exported: false, typ: Value, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = token.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = newFloat(); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		floatVal0 = new floatVal.ptr(_r);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["example.com/transpiler/xgtest/types"] = (function() {
	var $pkg = {}, $init, bytes, heap, ast, parser, fmt, constant, token, io, math, sort, strconv, strings, unicode, Error, Importer, ImportMode, ImporterFrom, Config, Info, TypeAndValue, Initializer, getter, exprInfo, funcInfo, context, importKey, Checker, bailout, opPredicates, exprKind, dependency, graphNode, nodeSet, nodeQueue, block, embeddedType, MethodSet, fieldSet, methodSet, Object, object, PkgName, Const, TypeName, Var, Func, Label, Builtin, Nil, objset, operandMode, operand, inSourceOrder, Package, ifacePair, declInfo, objSet, Scope, SelectionKind, Selection, Sizes, StdSizes, stmtContext, valueMap, valueType, Type, BasicKind, BasicInfo, Basic, Array, Slice, Struct, Pointer, Tuple, Signature, Interface, Map, Chan, ChanDir, Named, byUniqueTypeName, byUniqueMethodName, builtinId, ptrType, sliceType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, sliceType$1, ptrType$6, sliceType$2, sliceType$3, structType, structType$1, sliceType$4, ptrType$7, sliceType$5, arrayType, ptrType$8, ptrType$9, ptrType$10, ptrType$11, arrayType$1, sliceType$6, ptrType$12, sliceType$7, sliceType$8, ptrType$13, ptrType$14, ptrType$15, sliceType$9, sliceType$10, ptrType$16, ptrType$17, ptrType$18, ptrType$19, sliceType$11, ptrType$20, ptrType$21, ptrType$22, ptrType$23, ptrType$24, ptrType$25, sliceType$12, ptrType$26, ptrType$27, sliceType$13, sliceType$14, funcType, sliceType$15, ptrType$28, ptrType$29, ptrType$30, ptrType$31, sliceType$16, ptrType$32, ptrType$33, ptrType$34, ptrType$35, ptrType$36, ptrType$37, sliceType$17, sliceType$18, ptrType$38, ptrType$39, ptrType$40, ptrType$41, ptrType$42, ptrType$43, ptrType$44, ptrType$45, ptrType$46, ptrType$47, ptrType$48, ptrType$49, ptrType$50, ptrType$51, ptrType$52, ptrType$53, ptrType$54, ptrType$55, ptrType$56, ptrType$57, ptrType$58, ptrType$59, sliceType$19, arrayType$2, ptrType$60, ptrType$61, sliceType$20, ptrType$62, sliceType$21, ptrType$63, ptrType$64, ptrType$65, ptrType$66, sliceType$22, ptrType$67, ptrType$68, ptrType$69, ptrType$70, ptrType$71, ptrType$72, ptrType$73, ptrType$74, ptrType$75, ptrType$76, sliceType$23, ptrType$77, ptrType$78, sliceType$24, ptrType$79, ptrType$80, ptrType$81, ptrType$82, ptrType$83, ptrType$84, ptrType$85, ptrType$86, ptrType$87, ptrType$88, ptrType$89, ptrType$90, ptrType$91, sliceType$25, sliceType$26, ptrType$92, sliceType$27, sliceType$28, ptrType$93, funcType$1, mapType, mapType$1, mapType$2, mapType$3, mapType$4, mapType$5, ptrType$94, mapType$6, mapType$7, mapType$8, mapType$9, mapType$10, mapType$11, funcType$2, mapType$12, ptrType$95, ptrType$96, mapType$13, unaryOpPredicates, binaryOpPredicates, emptyMethodSet, emptyMethodSet$24ptr, operandModeString, basicSizes, gcArchSizes, stdSizes, emptyInterface, emptyInterface$24ptr, markComplete, gcCompatibilityMode, universeIota, universeByte, universeRune, aliases, predeclaredConsts, predeclaredFuncs, makeSig, implicitArrayDeref, unparen, substitute, unpack, wildcard, NewChecker, isUintptr, isUnsafePointer, isPointer, isBytesOrRunes, underlying, assert, unreachable, isShift, isComparison, fitsFloat32, roundFloat32, fitsFloat64, roundFloat64, representableConst, keyVal, ExprString, WriteExpr, writeSigExpr, writeFieldList, findPath, dependencyGraph, LookupFieldOrMethod, lookupFieldOrMethod, consolidateMultiples, lookupType, MissingMethod, assertableTo, deref, derefStructPtr, concat, fieldIndex, lookupMethod, NewMethodSet, ptrRecv, Id, NewPkgName, NewConst, NewTypeName, NewVar, NewParam, NewField, NewFunc, NewLabel, newBuiltin, writeObject, writePackage, ObjectString, writeFuncName, operandString, orderedSetObjects, NewPackage, isNamed, isBoolean, isInteger, isUnsigned, isFloat, isComplex, isNumeric, isString, isTyped, isUntyped, isOrdered, isConstType, IsInterface, Comparable, hasNil, Identical, IdenticalIgnoreTags, identical, Default, validatedImportPath, pkgName, dir, hasBreak, hasBreakList, NewScope, SelectionString, SizesFor, align, trimTrailingEmptyStmts, assignOp, goVal, NewSlice, NewPointer, NewTuple, NewInterface, TypeString, WriteType, writeType, writeTuple, WriteSignature, writeSignature, anonymousFieldIdent, defPredeclaredTypes, defPredeclaredConsts, defPredeclaredNil, defPredeclaredFuncs, init, def;
	bytes = $packages["bytes"];
	heap = $packages["container/heap"];
	ast = $packages["example.com/transpiler/xgtest/ast"];
	parser = $packages["example.com/transpiler/xgtest/parser"];
	fmt = $packages["fmt"];
	constant = $packages["go/constant"];
	token = $packages["go/token"];
	io = $packages["io"];
	math = $packages["math"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	unicode = $packages["unicode"];
	Error = $pkg.Error = $newType(0, $kindStruct, "types.Error", true, "example.com/transpiler/xgtest/types", true, function(Fset_, Pos_, Msg_, Soft_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Fset = ptrType$26.nil;
			this.Pos = 0;
			this.Msg = "";
			this.Soft = false;
			return;
		}
		this.Fset = Fset_;
		this.Pos = Pos_;
		this.Msg = Msg_;
		this.Soft = Soft_;
	});
	Importer = $pkg.Importer = $newType(8, $kindInterface, "types.Importer", true, "example.com/transpiler/xgtest/types", true, null);
	ImportMode = $pkg.ImportMode = $newType(4, $kindInt, "types.ImportMode", true, "example.com/transpiler/xgtest/types", true, null);
	ImporterFrom = $pkg.ImporterFrom = $newType(8, $kindInterface, "types.ImporterFrom", true, "example.com/transpiler/xgtest/types", true, null);
	Config = $pkg.Config = $newType(0, $kindStruct, "types.Config", true, "example.com/transpiler/xgtest/types", true, function(IgnoreFuncBodies_, FakeImportC_, Error_, Importer_, Sizes_, DisableUnusedImportCheck_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.IgnoreFuncBodies = false;
			this.FakeImportC = false;
			this.Error = $throwNilPointerError;
			this.Importer = $ifaceNil;
			this.Sizes = $ifaceNil;
			this.DisableUnusedImportCheck = false;
			return;
		}
		this.IgnoreFuncBodies = IgnoreFuncBodies_;
		this.FakeImportC = FakeImportC_;
		this.Error = Error_;
		this.Importer = Importer_;
		this.Sizes = Sizes_;
		this.DisableUnusedImportCheck = DisableUnusedImportCheck_;
	});
	Info = $pkg.Info = $newType(0, $kindStruct, "types.Info", true, "example.com/transpiler/xgtest/types", true, function(Types_, Defs_, Uses_, Implicits_, Selections_, Scopes_, InitOrder_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Types = false;
			this.Defs = false;
			this.Uses = false;
			this.Implicits = false;
			this.Selections = false;
			this.Scopes = false;
			this.InitOrder = sliceType$12.nil;
			return;
		}
		this.Types = Types_;
		this.Defs = Defs_;
		this.Uses = Uses_;
		this.Implicits = Implicits_;
		this.Selections = Selections_;
		this.Scopes = Scopes_;
		this.InitOrder = InitOrder_;
	});
	TypeAndValue = $pkg.TypeAndValue = $newType(0, $kindStruct, "types.TypeAndValue", true, "example.com/transpiler/xgtest/types", true, function(mode_, Type_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mode = 0;
			this.Type = $ifaceNil;
			this.Value = $ifaceNil;
			return;
		}
		this.mode = mode_;
		this.Type = Type_;
		this.Value = Value_;
	});
	Initializer = $pkg.Initializer = $newType(0, $kindStruct, "types.Initializer", true, "example.com/transpiler/xgtest/types", true, function(Lhs_, Rhs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lhs = sliceType$6.nil;
			this.Rhs = $ifaceNil;
			return;
		}
		this.Lhs = Lhs_;
		this.Rhs = Rhs_;
	});
	getter = $pkg.getter = $newType(4, $kindFunc, "types.getter", true, "example.com/transpiler/xgtest/types", false, null);
	exprInfo = $pkg.exprInfo = $newType(0, $kindStruct, "types.exprInfo", true, "example.com/transpiler/xgtest/types", false, function(isLhs_, mode_, typ_, val_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.isLhs = false;
			this.mode = 0;
			this.typ = ptrType$4.nil;
			this.val = $ifaceNil;
			return;
		}
		this.isLhs = isLhs_;
		this.mode = mode_;
		this.typ = typ_;
		this.val = val_;
	});
	funcInfo = $pkg.funcInfo = $newType(0, $kindStruct, "types.funcInfo", true, "example.com/transpiler/xgtest/types", false, function(name_, decl_, sig_, body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.decl = ptrType$23.nil;
			this.sig = ptrType$19.nil;
			this.body = ptrType$32.nil;
			return;
		}
		this.name = name_;
		this.decl = decl_;
		this.sig = sig_;
		this.body = body_;
	});
	context = $pkg.context = $newType(0, $kindStruct, "types.context", true, "example.com/transpiler/xgtest/types", false, function(decl_, scope_, iota_, sig_, hasLabel_, hasCallOrRecv_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.decl = ptrType$23.nil;
			this.scope = ptrType$1.nil;
			this.iota = $ifaceNil;
			this.sig = ptrType$19.nil;
			this.hasLabel = false;
			this.hasCallOrRecv = false;
			return;
		}
		this.decl = decl_;
		this.scope = scope_;
		this.iota = iota_;
		this.sig = sig_;
		this.hasLabel = hasLabel_;
		this.hasCallOrRecv = hasCallOrRecv_;
	});
	importKey = $pkg.importKey = $newType(0, $kindStruct, "types.importKey", true, "example.com/transpiler/xgtest/types", false, function(path_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.path = "";
			this.dir = "";
			return;
		}
		this.path = path_;
		this.dir = dir_;
	});
	Checker = $pkg.Checker = $newType(0, $kindStruct, "types.Checker", true, "example.com/transpiler/xgtest/types", true, function(conf_, fset_, pkg_, Info_, objMap_, impMap_, files_, unusedDotImports_, firstErr_, methods_, untyped_, funcs_, delayed_, context_, pos_, indent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.conf = ptrType$8.nil;
			this.fset = ptrType$26.nil;
			this.pkg = ptrType$2.nil;
			this.Info = ptrType$24.nil;
			this.objMap = false;
			this.impMap = false;
			this.files = sliceType$13.nil;
			this.unusedDotImports = false;
			this.firstErr = $ifaceNil;
			this.methods = false;
			this.untyped = false;
			this.funcs = sliceType$14.nil;
			this.delayed = sliceType$15.nil;
			this.context = new context.ptr(ptrType$23.nil, ptrType$1.nil, $ifaceNil, ptrType$19.nil, false, false);
			this.pos = 0;
			this.indent = 0;
			return;
		}
		this.conf = conf_;
		this.fset = fset_;
		this.pkg = pkg_;
		this.Info = Info_;
		this.objMap = objMap_;
		this.impMap = impMap_;
		this.files = files_;
		this.unusedDotImports = unusedDotImports_;
		this.firstErr = firstErr_;
		this.methods = methods_;
		this.untyped = untyped_;
		this.funcs = funcs_;
		this.delayed = delayed_;
		this.context = context_;
		this.pos = pos_;
		this.indent = indent_;
	});
	bailout = $pkg.bailout = $newType(0, $kindStruct, "types.bailout", true, "example.com/transpiler/xgtest/types", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	opPredicates = $pkg.opPredicates = $newType(4, $kindMap, "types.opPredicates", true, "example.com/transpiler/xgtest/types", false, null);
	exprKind = $pkg.exprKind = $newType(4, $kindInt, "types.exprKind", true, "example.com/transpiler/xgtest/types", false, null);
	dependency = $pkg.dependency = $newType(8, $kindInterface, "types.dependency", true, "example.com/transpiler/xgtest/types", false, null);
	graphNode = $pkg.graphNode = $newType(0, $kindStruct, "types.graphNode", true, "example.com/transpiler/xgtest/types", false, function(obj_, pred_, succ_, index_, ndeps_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.obj = $ifaceNil;
			this.pred = false;
			this.succ = false;
			this.index = 0;
			this.ndeps = 0;
			return;
		}
		this.obj = obj_;
		this.pred = pred_;
		this.succ = succ_;
		this.index = index_;
		this.ndeps = ndeps_;
	});
	nodeSet = $pkg.nodeSet = $newType(4, $kindMap, "types.nodeSet", true, "example.com/transpiler/xgtest/types", false, null);
	nodeQueue = $pkg.nodeQueue = $newType(12, $kindSlice, "types.nodeQueue", true, "example.com/transpiler/xgtest/types", false, null);
	block = $pkg.block = $newType(0, $kindStruct, "types.block", true, "example.com/transpiler/xgtest/types", false, function(parent_, lstmt_, labels_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.parent = ptrType$63.nil;
			this.lstmt = ptrType$64.nil;
			this.labels = false;
			return;
		}
		this.parent = parent_;
		this.lstmt = lstmt_;
		this.labels = labels_;
	});
	embeddedType = $pkg.embeddedType = $newType(0, $kindStruct, "types.embeddedType", true, "example.com/transpiler/xgtest/types", false, function(typ_, index_, indirect_, multiples_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = $ifaceNil;
			this.index = sliceType$11.nil;
			this.indirect = false;
			this.multiples = false;
			return;
		}
		this.typ = typ_;
		this.index = index_;
		this.indirect = indirect_;
		this.multiples = multiples_;
	});
	MethodSet = $pkg.MethodSet = $newType(0, $kindStruct, "types.MethodSet", true, "example.com/transpiler/xgtest/types", true, function(list_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.list = sliceType.nil;
			return;
		}
		this.list = list_;
	});
	fieldSet = $pkg.fieldSet = $newType(4, $kindMap, "types.fieldSet", true, "example.com/transpiler/xgtest/types", false, null);
	methodSet = $pkg.methodSet = $newType(4, $kindMap, "types.methodSet", true, "example.com/transpiler/xgtest/types", false, null);
	Object = $pkg.Object = $newType(8, $kindInterface, "types.Object", true, "example.com/transpiler/xgtest/types", true, null);
	object = $pkg.object = $newType(0, $kindStruct, "types.object", true, "example.com/transpiler/xgtest/types", false, function(parent_, pos_, pkg_, name_, typ_, order__, scopePos__) {
		this.$val = this;
		if (arguments.length === 0) {
			this.parent = ptrType$1.nil;
			this.pos = 0;
			this.pkg = ptrType$2.nil;
			this.name = "";
			this.typ = $ifaceNil;
			this.order_ = 0;
			this.scopePos_ = 0;
			return;
		}
		this.parent = parent_;
		this.pos = pos_;
		this.pkg = pkg_;
		this.name = name_;
		this.typ = typ_;
		this.order_ = order__;
		this.scopePos_ = scopePos__;
	});
	PkgName = $pkg.PkgName = $newType(0, $kindStruct, "types.PkgName", true, "example.com/transpiler/xgtest/types", true, function(object_, imported_, used_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = new object.ptr(ptrType$1.nil, 0, ptrType$2.nil, "", $ifaceNil, 0, 0);
			this.imported = ptrType$2.nil;
			this.used = false;
			return;
		}
		this.object = object_;
		this.imported = imported_;
		this.used = used_;
	});
	Const = $pkg.Const = $newType(0, $kindStruct, "types.Const", true, "example.com/transpiler/xgtest/types", true, function(object_, val_, visited_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = new object.ptr(ptrType$1.nil, 0, ptrType$2.nil, "", $ifaceNil, 0, 0);
			this.val = $ifaceNil;
			this.visited = false;
			return;
		}
		this.object = object_;
		this.val = val_;
		this.visited = visited_;
	});
	TypeName = $pkg.TypeName = $newType(0, $kindStruct, "types.TypeName", true, "example.com/transpiler/xgtest/types", true, function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = new object.ptr(ptrType$1.nil, 0, ptrType$2.nil, "", $ifaceNil, 0, 0);
			return;
		}
		this.object = object_;
	});
	Var = $pkg.Var = $newType(0, $kindStruct, "types.Var", true, "example.com/transpiler/xgtest/types", true, function(object_, anonymous_, visited_, isField_, used_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = new object.ptr(ptrType$1.nil, 0, ptrType$2.nil, "", $ifaceNil, 0, 0);
			this.anonymous = false;
			this.visited = false;
			this.isField = false;
			this.used = false;
			return;
		}
		this.object = object_;
		this.anonymous = anonymous_;
		this.visited = visited_;
		this.isField = isField_;
		this.used = used_;
	});
	Func = $pkg.Func = $newType(0, $kindStruct, "types.Func", true, "example.com/transpiler/xgtest/types", true, function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = new object.ptr(ptrType$1.nil, 0, ptrType$2.nil, "", $ifaceNil, 0, 0);
			return;
		}
		this.object = object_;
	});
	Label = $pkg.Label = $newType(0, $kindStruct, "types.Label", true, "example.com/transpiler/xgtest/types", true, function(object_, used_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = new object.ptr(ptrType$1.nil, 0, ptrType$2.nil, "", $ifaceNil, 0, 0);
			this.used = false;
			return;
		}
		this.object = object_;
		this.used = used_;
	});
	Builtin = $pkg.Builtin = $newType(0, $kindStruct, "types.Builtin", true, "example.com/transpiler/xgtest/types", true, function(object_, id_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = new object.ptr(ptrType$1.nil, 0, ptrType$2.nil, "", $ifaceNil, 0, 0);
			this.id = 0;
			return;
		}
		this.object = object_;
		this.id = id_;
	});
	Nil = $pkg.Nil = $newType(0, $kindStruct, "types.Nil", true, "example.com/transpiler/xgtest/types", true, function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = new object.ptr(ptrType$1.nil, 0, ptrType$2.nil, "", $ifaceNil, 0, 0);
			return;
		}
		this.object = object_;
	});
	objset = $pkg.objset = $newType(4, $kindMap, "types.objset", true, "example.com/transpiler/xgtest/types", false, null);
	operandMode = $pkg.operandMode = $newType(1, $kindUint8, "types.operandMode", true, "example.com/transpiler/xgtest/types", false, null);
	operand = $pkg.operand = $newType(0, $kindStruct, "types.operand", true, "example.com/transpiler/xgtest/types", false, function(mode_, expr_, typ_, val_, id_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mode = 0;
			this.expr = $ifaceNil;
			this.typ = $ifaceNil;
			this.val = $ifaceNil;
			this.id = 0;
			return;
		}
		this.mode = mode_;
		this.expr = expr_;
		this.typ = typ_;
		this.val = val_;
		this.id = id_;
	});
	inSourceOrder = $pkg.inSourceOrder = $newType(12, $kindSlice, "types.inSourceOrder", true, "example.com/transpiler/xgtest/types", false, null);
	Package = $pkg.Package = $newType(0, $kindStruct, "types.Package", true, "example.com/transpiler/xgtest/types", true, function(path_, name_, scope_, complete_, imports_, fake_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.path = "";
			this.name = "";
			this.scope = ptrType$1.nil;
			this.complete = false;
			this.imports = sliceType$24.nil;
			this.fake = false;
			return;
		}
		this.path = path_;
		this.name = name_;
		this.scope = scope_;
		this.complete = complete_;
		this.imports = imports_;
		this.fake = fake_;
	});
	ifacePair = $pkg.ifacePair = $newType(0, $kindStruct, "types.ifacePair", true, "example.com/transpiler/xgtest/types", false, function(x_, y_, prev_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.x = ptrType$58.nil;
			this.y = ptrType$58.nil;
			this.prev = ptrType$79.nil;
			return;
		}
		this.x = x_;
		this.y = y_;
		this.prev = prev_;
	});
	declInfo = $pkg.declInfo = $newType(0, $kindStruct, "types.declInfo", true, "example.com/transpiler/xgtest/types", false, function(file_, lhs_, typ_, init_, fdecl_, alias_, deps_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$1.nil;
			this.lhs = sliceType$6.nil;
			this.typ = $ifaceNil;
			this.init = $ifaceNil;
			this.fdecl = ptrType$80.nil;
			this.alias = false;
			this.deps = false;
			return;
		}
		this.file = file_;
		this.lhs = lhs_;
		this.typ = typ_;
		this.init = init_;
		this.fdecl = fdecl_;
		this.alias = alias_;
		this.deps = deps_;
	});
	objSet = $pkg.objSet = $newType(4, $kindMap, "types.objSet", true, "example.com/transpiler/xgtest/types", false, null);
	Scope = $pkg.Scope = $newType(0, $kindStruct, "types.Scope", true, "example.com/transpiler/xgtest/types", true, function(parent_, children_, elems_, pos_, end_, comment_, isFunc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.parent = ptrType$1.nil;
			this.children = sliceType$25.nil;
			this.elems = false;
			this.pos = 0;
			this.end = 0;
			this.comment = "";
			this.isFunc = false;
			return;
		}
		this.parent = parent_;
		this.children = children_;
		this.elems = elems_;
		this.pos = pos_;
		this.end = end_;
		this.comment = comment_;
		this.isFunc = isFunc_;
	});
	SelectionKind = $pkg.SelectionKind = $newType(4, $kindInt, "types.SelectionKind", true, "example.com/transpiler/xgtest/types", true, null);
	Selection = $pkg.Selection = $newType(0, $kindStruct, "types.Selection", true, "example.com/transpiler/xgtest/types", true, function(kind_, recv_, obj_, index_, indirect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.kind = 0;
			this.recv = $ifaceNil;
			this.obj = $ifaceNil;
			this.index = sliceType$11.nil;
			this.indirect = false;
			return;
		}
		this.kind = kind_;
		this.recv = recv_;
		this.obj = obj_;
		this.index = index_;
		this.indirect = indirect_;
	});
	Sizes = $pkg.Sizes = $newType(8, $kindInterface, "types.Sizes", true, "example.com/transpiler/xgtest/types", true, null);
	StdSizes = $pkg.StdSizes = $newType(0, $kindStruct, "types.StdSizes", true, "example.com/transpiler/xgtest/types", true, function(WordSize_, MaxAlign_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.WordSize = new $Int64(0, 0);
			this.MaxAlign = new $Int64(0, 0);
			return;
		}
		this.WordSize = WordSize_;
		this.MaxAlign = MaxAlign_;
	});
	stmtContext = $pkg.stmtContext = $newType(4, $kindUint, "types.stmtContext", true, "example.com/transpiler/xgtest/types", false, null);
	valueMap = $pkg.valueMap = $newType(4, $kindMap, "types.valueMap", true, "example.com/transpiler/xgtest/types", false, null);
	valueType = $pkg.valueType = $newType(0, $kindStruct, "types.valueType", true, "example.com/transpiler/xgtest/types", false, function(pos_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pos = 0;
			this.typ = $ifaceNil;
			return;
		}
		this.pos = pos_;
		this.typ = typ_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "types.Type", true, "example.com/transpiler/xgtest/types", true, null);
	BasicKind = $pkg.BasicKind = $newType(4, $kindInt, "types.BasicKind", true, "example.com/transpiler/xgtest/types", true, null);
	BasicInfo = $pkg.BasicInfo = $newType(4, $kindInt, "types.BasicInfo", true, "example.com/transpiler/xgtest/types", true, null);
	Basic = $pkg.Basic = $newType(0, $kindStruct, "types.Basic", true, "example.com/transpiler/xgtest/types", true, function(kind_, info_, name_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.kind = 0;
			this.info = 0;
			this.name = "";
			return;
		}
		this.kind = kind_;
		this.info = info_;
		this.name = name_;
	});
	Array = $pkg.Array = $newType(0, $kindStruct, "types.Array", true, "example.com/transpiler/xgtest/types", true, function(len_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.len = new $Int64(0, 0);
			this.elem = $ifaceNil;
			return;
		}
		this.len = len_;
		this.elem = elem_;
	});
	Slice = $pkg.Slice = $newType(0, $kindStruct, "types.Slice", true, "example.com/transpiler/xgtest/types", true, function(elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.elem = $ifaceNil;
			return;
		}
		this.elem = elem_;
	});
	Struct = $pkg.Struct = $newType(0, $kindStruct, "types.Struct", true, "example.com/transpiler/xgtest/types", true, function(fields_, tags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fields = sliceType$6.nil;
			this.tags = sliceType$26.nil;
			return;
		}
		this.fields = fields_;
		this.tags = tags_;
	});
	Pointer = $pkg.Pointer = $newType(0, $kindStruct, "types.Pointer", true, "example.com/transpiler/xgtest/types", true, function(base_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.base = $ifaceNil;
			return;
		}
		this.base = base_;
	});
	Tuple = $pkg.Tuple = $newType(0, $kindStruct, "types.Tuple", true, "example.com/transpiler/xgtest/types", true, function(vars_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.vars = sliceType$6.nil;
			return;
		}
		this.vars = vars_;
	});
	Signature = $pkg.Signature = $newType(0, $kindStruct, "types.Signature", true, "example.com/transpiler/xgtest/types", true, function(scope_, recv_, params_, results_, variadic_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.scope = ptrType$1.nil;
			this.recv = ptrType$10.nil;
			this.params = ptrType$16.nil;
			this.results = ptrType$16.nil;
			this.variadic = false;
			return;
		}
		this.scope = scope_;
		this.recv = recv_;
		this.params = params_;
		this.results = results_;
		this.variadic = variadic_;
	});
	Interface = $pkg.Interface = $newType(0, $kindStruct, "types.Interface", true, "example.com/transpiler/xgtest/types", true, function(methods_, embeddeds_, allMethods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.methods = sliceType$1.nil;
			this.embeddeds = sliceType$2.nil;
			this.allMethods = sliceType$1.nil;
			return;
		}
		this.methods = methods_;
		this.embeddeds = embeddeds_;
		this.allMethods = allMethods_;
	});
	Map = $pkg.Map = $newType(0, $kindStruct, "types.Map", true, "example.com/transpiler/xgtest/types", true, function(key_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.key = $ifaceNil;
			this.elem = $ifaceNil;
			return;
		}
		this.key = key_;
		this.elem = elem_;
	});
	Chan = $pkg.Chan = $newType(0, $kindStruct, "types.Chan", true, "example.com/transpiler/xgtest/types", true, function(dir_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.dir = 0;
			this.elem = $ifaceNil;
			return;
		}
		this.dir = dir_;
		this.elem = elem_;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "types.ChanDir", true, "example.com/transpiler/xgtest/types", true, null);
	Named = $pkg.Named = $newType(0, $kindStruct, "types.Named", true, "example.com/transpiler/xgtest/types", true, function(obj_, underlying_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.obj = ptrType$21.nil;
			this.underlying = $ifaceNil;
			this.methods = sliceType$1.nil;
			return;
		}
		this.obj = obj_;
		this.underlying = underlying_;
		this.methods = methods_;
	});
	byUniqueTypeName = $pkg.byUniqueTypeName = $newType(12, $kindSlice, "types.byUniqueTypeName", true, "example.com/transpiler/xgtest/types", false, null);
	byUniqueMethodName = $pkg.byUniqueMethodName = $newType(12, $kindSlice, "types.byUniqueMethodName", true, "example.com/transpiler/xgtest/types", false, null);
	builtinId = $pkg.builtinId = $newType(4, $kindInt, "types.builtinId", true, "example.com/transpiler/xgtest/types", false, null);
	ptrType = $ptrType(Selection);
	sliceType = $sliceType(ptrType);
	ptrType$1 = $ptrType(Scope);
	ptrType$2 = $ptrType(Package);
	ptrType$3 = $ptrType(Const);
	ptrType$4 = $ptrType(Basic);
	ptrType$5 = $ptrType(Func);
	sliceType$1 = $sliceType(ptrType$5);
	ptrType$6 = $ptrType(Named);
	sliceType$2 = $sliceType(ptrType$6);
	sliceType$3 = $sliceType(ptrType$4);
	structType = $structType("example.com/transpiler/xgtest/types", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "kind", name: "kind", anonymous: false, exported: false, typ: BasicKind, tag: ""}, {prop: "val", name: "val", anonymous: false, exported: false, typ: constant.Value, tag: ""}]);
	structType$1 = $structType("example.com/transpiler/xgtest/types", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "nargs", name: "nargs", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "variadic", name: "variadic", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "kind", name: "kind", anonymous: false, exported: false, typ: exprKind, tag: ""}]);
	sliceType$4 = $sliceType($emptyInterface);
	ptrType$7 = $ptrType(ast.Ident);
	sliceType$5 = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 64);
	ptrType$8 = $ptrType(Config);
	ptrType$9 = $ptrType($String);
	ptrType$10 = $ptrType(Var);
	ptrType$11 = $ptrType(ast.SelectorExpr);
	arrayType$1 = $arrayType(Type, 2);
	sliceType$6 = $sliceType(ptrType$10);
	ptrType$12 = $ptrType(Slice);
	sliceType$7 = $sliceType(operand);
	sliceType$8 = $sliceType(Type);
	ptrType$13 = $ptrType(Array);
	ptrType$14 = $ptrType(Chan);
	ptrType$15 = $ptrType(Map);
	sliceType$9 = $sliceType($Int64);
	sliceType$10 = $sliceType(ast.Expr);
	ptrType$16 = $ptrType(Tuple);
	ptrType$17 = $ptrType(Pointer);
	ptrType$18 = $ptrType(ast.ParenExpr);
	ptrType$19 = $ptrType(Signature);
	sliceType$11 = $sliceType($Int);
	ptrType$20 = $ptrType(PkgName);
	ptrType$21 = $ptrType(TypeName);
	ptrType$22 = $ptrType(Builtin);
	ptrType$23 = $ptrType(declInfo);
	ptrType$24 = $ptrType(Info);
	ptrType$25 = $ptrType(Initializer);
	sliceType$12 = $sliceType(ptrType$25);
	ptrType$26 = $ptrType(token.FileSet);
	ptrType$27 = $ptrType(ast.File);
	sliceType$13 = $sliceType(ptrType$27);
	sliceType$14 = $sliceType(funcInfo);
	funcType = $funcType([], [], false);
	sliceType$15 = $sliceType(funcType);
	ptrType$28 = $ptrType($error);
	ptrType$29 = $ptrType(constant.Value);
	ptrType$30 = $ptrType(Struct);
	ptrType$31 = $ptrType(objset);
	sliceType$16 = $sliceType(ptrType$21);
	ptrType$32 = $ptrType(ast.BlockStmt);
	ptrType$33 = $ptrType(ast.BadDecl);
	ptrType$34 = $ptrType(ast.GenDecl);
	ptrType$35 = $ptrType(ast.ValueSpec);
	ptrType$36 = $ptrType(ast.TypeSpec);
	ptrType$37 = $ptrType(ast.CommentGroup);
	sliceType$17 = $sliceType(ptrType$7);
	sliceType$18 = $sliceType(ptrType$3);
	ptrType$38 = $ptrType(operand);
	ptrType$39 = $ptrType(ast.UnaryExpr);
	ptrType$40 = $ptrType(ast.BadExpr);
	ptrType$41 = $ptrType(ast.FuncLit);
	ptrType$42 = $ptrType(ast.CompositeLit);
	ptrType$43 = $ptrType(ast.IndexExpr);
	ptrType$44 = $ptrType(ast.SliceExpr);
	ptrType$45 = $ptrType(ast.TypeAssertExpr);
	ptrType$46 = $ptrType(ast.StarExpr);
	ptrType$47 = $ptrType(ast.KeyValueExpr);
	ptrType$48 = $ptrType(ast.ArrayType);
	ptrType$49 = $ptrType(ast.StructType);
	ptrType$50 = $ptrType(ast.FuncType);
	ptrType$51 = $ptrType(ast.InterfaceType);
	ptrType$52 = $ptrType(ast.MapType);
	ptrType$53 = $ptrType(ast.VoidType);
	ptrType$54 = $ptrType(ast.ChanType);
	ptrType$55 = $ptrType(ast.CallExpr);
	ptrType$56 = $ptrType(ast.BasicLit);
	ptrType$57 = $ptrType(ast.BinaryExpr);
	ptrType$58 = $ptrType(Interface);
	ptrType$59 = $ptrType(ast.Ellipsis);
	sliceType$19 = $sliceType($Bool);
	arrayType$2 = $arrayType($Int64, 3);
	ptrType$60 = $ptrType(nodeQueue);
	ptrType$61 = $ptrType(graphNode);
	sliceType$20 = $sliceType(Object);
	ptrType$62 = $ptrType(nodeSet);
	sliceType$21 = $sliceType(ptrType$61);
	ptrType$63 = $ptrType(block);
	ptrType$64 = $ptrType(ast.LabeledStmt);
	ptrType$65 = $ptrType(Label);
	ptrType$66 = $ptrType(ast.BranchStmt);
	sliceType$22 = $sliceType(ptrType$66);
	ptrType$67 = $ptrType(ast.DeclStmt);
	ptrType$68 = $ptrType(ast.AssignStmt);
	ptrType$69 = $ptrType(ast.IfStmt);
	ptrType$70 = $ptrType(ast.CaseClause);
	ptrType$71 = $ptrType(ast.SwitchStmt);
	ptrType$72 = $ptrType(ast.TypeSwitchStmt);
	ptrType$73 = $ptrType(ast.CommClause);
	ptrType$74 = $ptrType(ast.SelectStmt);
	ptrType$75 = $ptrType(ast.ForStmt);
	ptrType$76 = $ptrType(ast.RangeStmt);
	sliceType$23 = $sliceType(embeddedType);
	ptrType$77 = $ptrType(Nil);
	ptrType$78 = $ptrType(sliceType$20);
	sliceType$24 = $sliceType(ptrType$2);
	ptrType$79 = $ptrType(ifacePair);
	ptrType$80 = $ptrType(ast.FuncDecl);
	ptrType$81 = $ptrType(token.File);
	ptrType$82 = $ptrType(ast.ImportSpec);
	ptrType$83 = $ptrType(ast.FieldList);
	ptrType$84 = $ptrType(ast.BadStmt);
	ptrType$85 = $ptrType(ast.EmptyStmt);
	ptrType$86 = $ptrType(ast.SendStmt);
	ptrType$87 = $ptrType(ast.IncDecStmt);
	ptrType$88 = $ptrType(ast.GoStmt);
	ptrType$89 = $ptrType(ast.DeferStmt);
	ptrType$90 = $ptrType(ast.ExprStmt);
	ptrType$91 = $ptrType(ast.ReturnStmt);
	sliceType$25 = $sliceType(ptrType$1);
	sliceType$26 = $sliceType($String);
	ptrType$92 = $ptrType(StdSizes);
	sliceType$27 = $sliceType(ast.Stmt);
	sliceType$28 = $sliceType(valueType);
	ptrType$93 = $ptrType(ast.Object);
	funcType$1 = $funcType([$error], [], false);
	mapType = $mapType(ast.Expr, TypeAndValue);
	mapType$1 = $mapType(ptrType$7, Object);
	mapType$2 = $mapType(ast.Node, Object);
	mapType$3 = $mapType(ptrType$11, ptrType);
	mapType$4 = $mapType(ast.Node, ptrType$1);
	mapType$5 = $mapType(Type, token.Pos);
	ptrType$94 = $ptrType(Checker);
	mapType$6 = $mapType(Object, ptrType$23);
	mapType$7 = $mapType(importKey, ptrType$2);
	mapType$8 = $mapType(ptrType$2, token.Pos);
	mapType$9 = $mapType(ptrType$1, mapType$8);
	mapType$10 = $mapType($String, sliceType$1);
	mapType$11 = $mapType(ast.Expr, exprInfo);
	funcType$2 = $funcType([Type], [$Bool], false);
	mapType$12 = $mapType($String, ptrType$64);
	ptrType$95 = $ptrType(MethodSet);
	ptrType$96 = $ptrType(object);
	mapType$13 = $mapType($String, Object);
	Error.ptr.prototype.Error = function() {
		var _arg, _arg$1, _r, _r$1, err, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; err = $f.err; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = this;
		_r = err.Fset.Position(err.Pos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = (x = _r, new x.constructor.elem(x));
		_arg$1 = new $String(err.Msg);
		_r$1 = fmt.Sprintf("%s: %s", new sliceType$4([_arg, _arg$1])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Error.ptr.prototype.Error }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Info.ptr.prototype.TypeOf = function(e) {
		var _entry, _r, _tuple, _tuple$1, e, id, info, obj, ok, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; e = $f.e; id = $f.id; info = $f.info; obj = $f.obj; ok = $f.ok; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		info = this;
		_tuple = (_entry = info.Types[ast.Expr.keyFor(e)], _entry !== undefined ? [_entry.v, true] : [new TypeAndValue.ptr(0, $ifaceNil, $ifaceNil), false]);
		t = $clone(_tuple[0], TypeAndValue);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return t.Type;
		}
		_tuple$1 = $assertType(e, ptrType$7, true);
		id = _tuple$1[0];
		/* */ if (!(id === ptrType$7.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(id === ptrType$7.nil)) { */ case 1:
			obj = info.ObjectOf(id);
			/* */ if (!($interfaceIsEqual(obj, $ifaceNil))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(obj, $ifaceNil))) { */ case 3:
				_r = obj.Type(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 4:
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Info.ptr.prototype.TypeOf }; } $f._entry = _entry; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.e = e; $f.id = id; $f.info = info; $f.obj = obj; $f.ok = ok; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Info.prototype.TypeOf = function(e) { return this.$val.TypeOf(e); };
	Info.ptr.prototype.ObjectOf = function(id) {
		var _entry, _entry$1, id, info, obj;
		info = this;
		obj = (_entry = info.Defs[ptrType$7.keyFor(id)], _entry !== undefined ? _entry.v : $ifaceNil);
		if (!($interfaceIsEqual(obj, $ifaceNil))) {
			return obj;
		}
		return (_entry$1 = info.Uses[ptrType$7.keyFor(id)], _entry$1 !== undefined ? _entry$1.v : $ifaceNil);
	};
	Info.prototype.ObjectOf = function(id) { return this.$val.ObjectOf(id); };
	TypeAndValue.ptr.prototype.IsVoid = function() {
		var tv;
		tv = this;
		return tv.mode === 1;
	};
	TypeAndValue.prototype.IsVoid = function() { return this.$val.IsVoid(); };
	TypeAndValue.ptr.prototype.IsType = function() {
		var tv;
		tv = this;
		return tv.mode === 3;
	};
	TypeAndValue.prototype.IsType = function() { return this.$val.IsType(); };
	TypeAndValue.ptr.prototype.IsBuiltin = function() {
		var tv;
		tv = this;
		return tv.mode === 2;
	};
	TypeAndValue.prototype.IsBuiltin = function() { return this.$val.IsBuiltin(); };
	TypeAndValue.ptr.prototype.IsValue = function() {
		var _1, tv;
		tv = this;
		_1 = tv.mode;
		if ((_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8))) {
			return true;
		}
		return false;
	};
	TypeAndValue.prototype.IsValue = function() { return this.$val.IsValue(); };
	TypeAndValue.ptr.prototype.IsNil = function() {
		var tv;
		tv = this;
		return (tv.mode === 7) && $interfaceIsEqual(tv.Type, (25 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 25]));
	};
	TypeAndValue.prototype.IsNil = function() { return this.$val.IsNil(); };
	TypeAndValue.ptr.prototype.Addressable = function() {
		var tv;
		tv = this;
		return tv.mode === 5;
	};
	TypeAndValue.prototype.Addressable = function() { return this.$val.Addressable(); };
	TypeAndValue.ptr.prototype.Assignable = function() {
		var tv;
		tv = this;
		return (tv.mode === 5) || (tv.mode === 6);
	};
	TypeAndValue.prototype.Assignable = function() { return this.$val.Assignable(); };
	TypeAndValue.ptr.prototype.HasOk = function() {
		var tv;
		tv = this;
		return (tv.mode === 8) || (tv.mode === 6);
	};
	TypeAndValue.prototype.HasOk = function() { return this.$val.HasOk(); };
	Initializer.ptr.prototype.String = function() {
		var _i, _ref, buf, i, init$1, lhs;
		init$1 = this;
		buf = new bytes.Buffer.ptr(sliceType$5.nil, 0, arrayType.zero(), 0);
		_ref = init$1.Lhs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			lhs = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				buf.WriteString(", ");
			}
			buf.WriteString(lhs.object.Name());
			_i++;
		}
		buf.WriteString(" = ");
		WriteExpr(buf, init$1.Rhs);
		return buf.String();
	};
	Initializer.prototype.String = function() { return this.$val.String(); };
	Config.ptr.prototype.Check = function(path, fset, files, info) {
		var _r, _r$1, conf, files, fset, info, path, pkg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; conf = $f.conf; files = $f.files; fset = $f.fset; info = $f.info; path = $f.path; pkg = $f.pkg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		conf = this;
		_r = NewPackage(path, ""); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		pkg = _r;
		_r$1 = NewChecker(conf, fset, pkg, info).Files(files); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return [pkg, _r$1];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Config.ptr.prototype.Check }; } $f._r = _r; $f._r$1 = _r$1; $f.conf = conf; $f.files = files; $f.fset = fset; $f.info = info; $f.path = path; $f.pkg = pkg; $f.$s = $s; $f.$r = $r; return $f;
	};
	Config.prototype.Check = function(path, fset, files, info) { return this.$val.Check(path, fset, files, info); };
	Checker.ptr.prototype.assignment = function(x, T, context$1) {
		var T, _1, _r, _r$1, _r$2, _v, check, context$1, target, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _v = $f._v; check = $f.check; context$1 = $f.context$1; target = $f.target; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		$r = check.singleValue(x); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_1 = x.mode;
		if (_1 === (0)) {
			$s = -1; return;
		} else if ((_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8))) {
		} else {
			unreachable();
		}
		_r = isUntyped(x.typ); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_r) { */ case 2:
			target = T;
			if ($interfaceIsEqual(T, $ifaceNil)) { _v = true; $s = 7; continue s; }
			_r$1 = IsInterface(T); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1; case 7:
			/* */ if (_v) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_v) { */ case 5:
				/* */ if ($interfaceIsEqual(T, $ifaceNil) && $interfaceIsEqual(x.typ, (25 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 25]))) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if ($interfaceIsEqual(T, $ifaceNil) && $interfaceIsEqual(x.typ, (25 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 25]))) { */ case 9:
					_r$2 = x.pos(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = check.errorf(_r$2, "use of untyped nil in %s", new sliceType$4([new $String(context$1)])); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					x.mode = 0;
					$s = -1; return;
				/* } */ case 10:
				target = Default(x.typ);
			/* } */ case 6:
			$r = check.convertUntyped(x, target); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (x.mode === 0) {
				$s = -1; return;
			}
		/* } */ case 3:
		if ($interfaceIsEqual(T, $ifaceNil)) {
			$s = -1; return;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.assignment }; } $f.T = T; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._v = _v; $f.check = check; $f.context$1 = context$1; $f.target = target; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.assignment = function(x, T, context$1) { return this.$val.assignment(x, T, context$1); };
	Checker.ptr.prototype.initConst = function(lhs, x) {
		var _r, _r$1, check, lhs, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; check = $f.check; lhs = $f.lhs; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		if ((x.mode === 0) || $interfaceIsEqual(x.typ, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0])) || $interfaceIsEqual(lhs.object.typ, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]))) {
			if ($interfaceIsEqual(lhs.object.typ, $ifaceNil)) {
				lhs.object.typ = (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]);
			}
			$s = -1; return;
		}
		/* */ if (!((x.mode === 4))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((x.mode === 4))) { */ case 1:
			_r = x.pos(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = check.errorf(_r, "%s is not constant", new sliceType$4([x])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if ($interfaceIsEqual(lhs.object.typ, $ifaceNil)) {
				lhs.object.typ = (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]);
			}
			$s = -1; return;
		/* } */ case 2:
		_r$1 = isConstType(x.typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$r = assert(_r$1); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if ($interfaceIsEqual(lhs.object.typ, $ifaceNil)) {
			lhs.object.typ = x.typ;
		}
		$r = check.assignment(x, lhs.object.typ, "constant declaration"); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (x.mode === 0) {
			$s = -1; return;
		}
		lhs.val = x.val;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.initConst }; } $f._r = _r; $f._r$1 = _r$1; $f.check = check; $f.lhs = lhs; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.initConst = function(lhs, x) { return this.$val.initConst(lhs, x); };
	Checker.ptr.prototype.initVar = function(lhs, x, context$1) {
		var _r, _r$1, check, context$1, lhs, typ, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; check = $f.check; context$1 = $f.context$1; lhs = $f.lhs; typ = $f.typ; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		if ((x.mode === 0) || $interfaceIsEqual(x.typ, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0])) || $interfaceIsEqual(lhs.object.typ, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]))) {
			if ($interfaceIsEqual(lhs.object.typ, $ifaceNil)) {
				lhs.object.typ = (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]);
			}
			$s = -1; return $ifaceNil;
		}
		/* */ if ($interfaceIsEqual(lhs.object.typ, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(lhs.object.typ, $ifaceNil)) { */ case 1:
			typ = x.typ;
			_r = isUntyped(typ); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r) { */ case 3:
				/* */ if ($interfaceIsEqual(typ, (25 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 25]))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ($interfaceIsEqual(typ, (25 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 25]))) { */ case 6:
					_r$1 = x.pos(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$r = check.errorf(_r$1, "use of untyped nil in %s", new sliceType$4([new $String(context$1)])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					lhs.object.typ = (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]);
					$s = -1; return $ifaceNil;
				/* } */ case 7:
				typ = Default(typ);
			/* } */ case 4:
			lhs.object.typ = typ;
		/* } */ case 2:
		$r = check.assignment(x, lhs.object.typ, context$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (x.mode === 0) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return x.typ;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.initVar }; } $f._r = _r; $f._r$1 = _r$1; $f.check = check; $f.context$1 = context$1; $f.lhs = lhs; $f.typ = typ; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.initVar = function(lhs, x, context$1) { return this.$val.initVar(lhs, x, context$1); };
	Checker.ptr.prototype.assignVar = function(lhs, x) {
		var _1, _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, _tuple$3, check, ident, lhs, obj, ok, op, sel, v, v_used, w, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; check = $f.check; ident = $f.ident; lhs = $f.lhs; obj = $f.obj; ok = $f.ok; op = $f.op; sel = $f.sel; v = $f.v; v_used = $f.v_used; w = $f.w; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		op = [op];
		z = [z];
		check = this;
		if ((x.mode === 0) || $interfaceIsEqual(x.typ, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]))) {
			$s = -1; return $ifaceNil;
		}
		_tuple = $assertType(unparen(lhs), ptrType$7, true);
		ident = _tuple[0];
		/* */ if (!(ident === ptrType$7.nil) && ident.Name === "_") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(ident === ptrType$7.nil) && ident.Name === "_") { */ case 1:
			check.recordDef(ident, $ifaceNil);
			$r = check.assignment(x, $ifaceNil, "assignment to _ identifier"); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (x.mode === 0) {
				$s = -1; return $ifaceNil;
			}
			$s = -1; return x.typ;
		/* } */ case 2:
		v = ptrType$10.nil;
		v_used = false;
		/* */ if (!(ident === ptrType$7.nil)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(ident === ptrType$7.nil)) { */ case 4:
			_r = check.context.scope.LookupParent(ident.Name, 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			obj = _tuple$1[1];
			if (!($interfaceIsEqual(obj, $ifaceNil))) {
				_tuple$2 = $assertType(obj, ptrType$10, true);
				w = _tuple$2[0];
				if (!(w === ptrType$10.nil) && w.object.pkg === check.pkg) {
					v = w;
					v_used = v.used;
				}
			}
		/* } */ case 5:
		z[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
		$r = check.expr(z[0], lhs); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!(v === ptrType$10.nil)) {
			v.used = v_used;
		}
		if ((z[0].mode === 0) || $interfaceIsEqual(z[0].typ, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]))) {
			$s = -1; return $ifaceNil;
		}
			_1 = z[0].mode;
			/* */ if (_1 === (0)) { $s = 9; continue; }
			/* */ if ((_1 === (5)) || (_1 === (6))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (0)) { */ case 9:
				$s = -1; return $ifaceNil;
			/* } else if ((_1 === (5)) || (_1 === (6))) { */ case 10:
				$s = 12; continue;
			/* } else { */ case 11:
				_tuple$3 = $assertType(z[0].expr, ptrType$11, true);
				sel = _tuple$3[0];
				ok = _tuple$3[1];
				/* */ if (ok) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (ok) { */ case 13:
					op[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
					$r = check.expr(op[0], sel.X); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* */ if (op[0].mode === 6) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if (op[0].mode === 6) { */ case 16:
						_r$1 = z[0].pos(); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$r = check.errorf(_r$1, "cannot assign to struct field %s in map", new sliceType$4([new $String(ExprString(z[0].expr))])); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return $ifaceNil;
					/* } */ case 17:
				/* } */ case 14:
				_r$2 = z[0].pos(); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = check.errorf(_r$2, "cannot assign to %s", new sliceType$4([z[0]])); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return $ifaceNil;
			/* } */ case 12:
		case 8:
		$r = check.assignment(x, z[0].typ, "assignment"); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (x.mode === 0) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return x.typ;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.assignVar }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.check = check; $f.ident = ident; $f.lhs = lhs; $f.obj = obj; $f.ok = ok; $f.op = op; $f.sel = sel; $f.v = v; $f.v_used = v_used; $f.w = w; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.assignVar = function(lhs, x) { return this.$val.assignVar(lhs, x); };
	Checker.ptr.prototype.initVars = function(lhs, rhs, returnPos) {
		var _i, _i$1, _i$2, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _ref$2, _tuple, a, check, commaOk, context$1, get, i, i$1, l, lhs, lhs$1, obj, r, returnPos, rhs, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; a = $f.a; check = $f.check; commaOk = $f.commaOk; context$1 = $f.context$1; get = $f.get; i = $f.i; i$1 = $f.i$1; l = $f.l; lhs = $f.lhs; lhs$1 = $f.lhs$1; obj = $f.obj; r = $f.r; returnPos = $f.returnPos; rhs = $f.rhs; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = [check];
		rhs = [rhs];
		x = [x];
		check[0] = this;
		l = lhs.$length;
		_r = unpack((function(check, rhs, x) { return function $b(x$1, i) {
			var i, x$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = check[0].multiExpr(x$1, ((i < 0 || i >= rhs[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : rhs[0].$array[rhs[0].$offset + i])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.i = i; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
		}; })(check, rhs, x), rhs[0].$length, (l === 2) && !new token.Pos(returnPos).IsValid()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		get = _tuple[0];
		r = _tuple[1];
		commaOk = _tuple[2];
		/* */ if (get === $throwNilPointerError || !((l === r))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (get === $throwNilPointerError || !((l === r))) { */ case 2:
			_ref = lhs;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				obj = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if ($interfaceIsEqual(obj.object.typ, $ifaceNil)) {
					obj.object.typ = (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]);
				}
				_i++;
			}
			if (get === $throwNilPointerError) {
				$s = -1; return;
			}
			$r = check[0].useGetter(get, r); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (new token.Pos(returnPos).IsValid()) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (new token.Pos(returnPos).IsValid()) { */ case 5:
				$r = check[0].errorf(returnPos, "wrong number of return values (want %d, got %d)", new sliceType$4([new $Int(l), new $Int(r)])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 6:
			_r$1 = (0 >= rhs[0].$length ? ($throwRuntimeError("index out of range"), undefined) : rhs[0].$array[rhs[0].$offset + 0]).Pos(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$r = check[0].errorf(_r$1, "cannot initialize %d variables with %d values", new sliceType$4([new $Int(l), new $Int(r)])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 3:
		context$1 = "assignment";
		if (new token.Pos(returnPos).IsValid()) {
			context$1 = "return statement";
		}
		x[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
		/* */ if (commaOk) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (commaOk) { */ case 10:
			a = arrayType$1.zero();
			_ref$1 = a;
			_i$1 = 0;
			/* while (true) { */ case 12:
				/* if (!(_i$1 < 2)) { break; } */ if(!(_i$1 < 2)) { $s = 13; continue; }
				i = _i$1;
				$r = get(x[0], i); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$2 = check[0].initVar(((i < 0 || i >= lhs.$length) ? ($throwRuntimeError("index out of range"), undefined) : lhs.$array[lhs.$offset + i]), x[0], context$1); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = _r$2);
				_i$1++;
			/* } */ $s = 12; continue; case 13:
			$r = check[0].recordCommaOkTypes((0 >= rhs[0].$length ? ($throwRuntimeError("index out of range"), undefined) : rhs[0].$array[rhs[0].$offset + 0]), $clone(a, arrayType$1)); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 11:
		_ref$2 = lhs;
		_i$2 = 0;
		/* while (true) { */ case 17:
			/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 18; continue; }
			i$1 = _i$2;
			lhs$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
			$r = get(x[0], i$1); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = check[0].initVar(lhs$1, x[0], context$1); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_i$2++;
		/* } */ $s = 17; continue; case 18:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.initVars }; } $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f.a = a; $f.check = check; $f.commaOk = commaOk; $f.context$1 = context$1; $f.get = get; $f.i = i; $f.i$1 = i$1; $f.l = l; $f.lhs = lhs; $f.lhs$1 = lhs$1; $f.obj = obj; $f.r = r; $f.returnPos = returnPos; $f.rhs = rhs; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.initVars = function(lhs, rhs, returnPos) { return this.$val.initVars(lhs, rhs, returnPos); };
	Checker.ptr.prototype.assignVars = function(lhs, rhs) {
		var _i, _i$1, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _tuple, a, check, commaOk, get, i, i$1, l, lhs, lhs$1, r, rhs, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; a = $f.a; check = $f.check; commaOk = $f.commaOk; get = $f.get; i = $f.i; i$1 = $f.i$1; l = $f.l; lhs = $f.lhs; lhs$1 = $f.lhs$1; r = $f.r; rhs = $f.rhs; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = [check];
		rhs = [rhs];
		x = [x];
		check[0] = this;
		l = lhs.$length;
		_r = unpack((function(check, rhs, x) { return function $b(x$1, i) {
			var i, x$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = check[0].multiExpr(x$1, ((i < 0 || i >= rhs[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : rhs[0].$array[rhs[0].$offset + i])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.i = i; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
		}; })(check, rhs, x), rhs[0].$length, l === 2); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		get = _tuple[0];
		r = _tuple[1];
		commaOk = _tuple[2];
		/* */ if (get === $throwNilPointerError) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (get === $throwNilPointerError) { */ case 2:
			$r = check[0].useLHS(lhs); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 3:
		/* */ if (!((l === r))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((l === r))) { */ case 5:
			$r = check[0].useGetter(get, r); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$1 = (0 >= rhs[0].$length ? ($throwRuntimeError("index out of range"), undefined) : rhs[0].$array[rhs[0].$offset + 0]).Pos(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$r = check[0].errorf(_r$1, "cannot assign %d values to %d variables", new sliceType$4([new $Int(r), new $Int(l)])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 6:
		x[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
		/* */ if (commaOk) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (commaOk) { */ case 10:
			a = arrayType$1.zero();
			_ref = a;
			_i = 0;
			/* while (true) { */ case 12:
				/* if (!(_i < 2)) { break; } */ if(!(_i < 2)) { $s = 13; continue; }
				i = _i;
				$r = get(x[0], i); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$2 = check[0].assignVar(((i < 0 || i >= lhs.$length) ? ($throwRuntimeError("index out of range"), undefined) : lhs.$array[lhs.$offset + i]), x[0]); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = _r$2);
				_i++;
			/* } */ $s = 12; continue; case 13:
			$r = check[0].recordCommaOkTypes((0 >= rhs[0].$length ? ($throwRuntimeError("index out of range"), undefined) : rhs[0].$array[rhs[0].$offset + 0]), $clone(a, arrayType$1)); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 11:
		_ref$1 = lhs;
		_i$1 = 0;
		/* while (true) { */ case 17:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 18; continue; }
			i$1 = _i$1;
			lhs$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			$r = get(x[0], i$1); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = check[0].assignVar(lhs$1, x[0]); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_i$1++;
		/* } */ $s = 17; continue; case 18:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.assignVars }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.a = a; $f.check = check; $f.commaOk = commaOk; $f.get = get; $f.i = i; $f.i$1 = i$1; $f.l = l; $f.lhs = lhs; $f.lhs$1 = lhs$1; $f.r = r; $f.rhs = rhs; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.assignVars = function(lhs, rhs) { return this.$val.assignVars(lhs, rhs); };
	Checker.ptr.prototype.shortVarDecl = function(pos, lhs, rhs) {
		var _i, _i$1, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _tuple, _tuple$1, alt, alt$1, check, i, ident, lhs, lhs$1, lhsVars, name, newVars, obj, obj$1, pos, rhs, scope, scopePos, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; alt = $f.alt; alt$1 = $f.alt$1; check = $f.check; i = $f.i; ident = $f.ident; lhs = $f.lhs; lhs$1 = $f.lhs$1; lhsVars = $f.lhsVars; name = $f.name; newVars = $f.newVars; obj = $f.obj; obj$1 = $f.obj$1; pos = $f.pos; rhs = $f.rhs; scope = $f.scope; scopePos = $f.scopePos; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		scope = check.context.scope;
		newVars = sliceType$6.nil;
		lhsVars = $makeSlice(sliceType$6, lhs.$length);
		_ref = lhs;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			lhs$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			obj = ptrType$10.nil;
			_tuple = $assertType(lhs$1, ptrType$7, true);
			ident = _tuple[0];
			/* */ if (!(ident === ptrType$7.nil)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(ident === ptrType$7.nil)) { */ case 3:
				name = ident.Name;
				alt = scope.Lookup(name);
				/* */ if (!($interfaceIsEqual(alt, $ifaceNil))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (!($interfaceIsEqual(alt, $ifaceNil))) { */ case 6:
					_tuple$1 = $assertType(alt, ptrType$10, true);
					alt$1 = _tuple$1[0];
					/* */ if (!(alt$1 === ptrType$10.nil)) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!(alt$1 === ptrType$10.nil)) { */ case 9:
						obj = alt$1;
						$s = 11; continue;
					/* } else { */ case 10:
						_r = lhs$1.Pos(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						$r = check.errorf(_r, "cannot assign to %s", new sliceType$4([lhs$1])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 11:
					check.recordUse(ident, alt);
					$s = 8; continue;
				/* } else { */ case 7:
					obj = NewVar(ident.Pos(), check.pkg, name, $ifaceNil);
					if (!(name === "_")) {
						newVars = $append(newVars, obj);
					}
					check.recordDef(ident, obj);
				/* } */ case 8:
				$s = 5; continue;
			/* } else { */ case 4:
				_r$1 = lhs$1.Pos(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = check.errorf(_r$1, "cannot declare %s", new sliceType$4([lhs$1])); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			/* */ if (obj === ptrType$10.nil) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (obj === ptrType$10.nil) { */ case 16:
				_r$2 = lhs$1.Pos(); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = NewVar(_r$2, check.pkg, "_", $ifaceNil); /* */ $s = 19; case 19: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				obj = _r$3;
			/* } */ case 17:
			((i < 0 || i >= lhsVars.$length) ? ($throwRuntimeError("index out of range"), undefined) : lhsVars.$array[lhsVars.$offset + i] = obj);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$r = check.initVars(lhsVars, rhs, 0); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (newVars.$length > 0) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (newVars.$length > 0) { */ case 21:
			_r$4 = (x = rhs.$length - 1 >> 0, ((x < 0 || x >= rhs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rhs.$array[rhs.$offset + x])).End(); /* */ $s = 24; case 24: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			scopePos = _r$4;
			_ref$1 = newVars;
			_i$1 = 0;
			/* while (true) { */ case 25:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 26; continue; }
				obj$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				$r = check.declare(scope, ptrType$7.nil, obj$1, scopePos); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i$1++;
			/* } */ $s = 25; continue; case 26:
			$s = 23; continue;
		/* } else { */ case 22:
			$r = check.softErrorf(pos, "no new variables on left side of :=", new sliceType$4([])); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 23:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.shortVarDecl }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.alt = alt; $f.alt$1 = alt$1; $f.check = check; $f.i = i; $f.ident = ident; $f.lhs = lhs; $f.lhs$1 = lhs$1; $f.lhsVars = lhsVars; $f.name = name; $f.newVars = newVars; $f.obj = obj; $f.obj$1 = obj$1; $f.pos = pos; $f.rhs = rhs; $f.scope = scope; $f.scopePos = scopePos; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.shortVarDecl = function(pos, lhs, rhs) { return this.$val.shortVarDecl(pos, lhs, rhs); };
	Checker.ptr.prototype.builtin = function(x, call, id) {
		var S, T, T$1, T$2, _, _1, _2, _3, _4, _5, _arg, _arg$1, _arg$10, _arg$11, _arg$12, _arg$13, _arg$14, _arg$15, _arg$16, _arg$17, _arg$18, _arg$19, _arg$2, _arg$20, _arg$21, _arg$22, _arg$23, _arg$24, _arg$25, _arg$26, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$4, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$5, _r$50, _r$51, _r$52, _r$53, _r$54, _r$55, _r$56, _r$57, _r$58, _r$59, _r$6, _r$60, _r$61, _r$62, _r$63, _r$64, _r$65, _r$66, _r$67, _r$68, _r$69, _r$7, _r$70, _r$71, _r$72, _r$73, _r$74, _r$75, _r$76, _r$77, _r$78, _r$79, _r$8, _r$80, _r$81, _r$82, _r$9, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _v, _v$1, alist, arg, arg$1, arg$2, arg0, arg0$1, base, bin, c, call, check, d, dst, i, id, index, indirect, m, min, mode, msg, nargs, obj, offs, ok, params, params$1, res, res$1, resTyp, resTyp$1, s, s$1, sel, selx, sig, sig$1, sizes, src, t, t$1, t$2, t$3, t$4, t$5, t$6, t$7, toFloat, typ, val, x, x$1, x$2, x$3, x$4, x$5, x$6, x1, y, y$1, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; S = $f.S; T = $f.T; T$1 = $f.T$1; T$2 = $f.T$2; _ = $f._; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$12 = $f._arg$12; _arg$13 = $f._arg$13; _arg$14 = $f._arg$14; _arg$15 = $f._arg$15; _arg$16 = $f._arg$16; _arg$17 = $f._arg$17; _arg$18 = $f._arg$18; _arg$19 = $f._arg$19; _arg$2 = $f._arg$2; _arg$20 = $f._arg$20; _arg$21 = $f._arg$21; _arg$22 = $f._arg$22; _arg$23 = $f._arg$23; _arg$24 = $f._arg$24; _arg$25 = $f._arg$25; _arg$26 = $f._arg$26; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$4 = $f._r$4; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$44 = $f._r$44; _r$45 = $f._r$45; _r$46 = $f._r$46; _r$47 = $f._r$47; _r$48 = $f._r$48; _r$49 = $f._r$49; _r$5 = $f._r$5; _r$50 = $f._r$50; _r$51 = $f._r$51; _r$52 = $f._r$52; _r$53 = $f._r$53; _r$54 = $f._r$54; _r$55 = $f._r$55; _r$56 = $f._r$56; _r$57 = $f._r$57; _r$58 = $f._r$58; _r$59 = $f._r$59; _r$6 = $f._r$6; _r$60 = $f._r$60; _r$61 = $f._r$61; _r$62 = $f._r$62; _r$63 = $f._r$63; _r$64 = $f._r$64; _r$65 = $f._r$65; _r$66 = $f._r$66; _r$67 = $f._r$67; _r$68 = $f._r$68; _r$69 = $f._r$69; _r$7 = $f._r$7; _r$70 = $f._r$70; _r$71 = $f._r$71; _r$72 = $f._r$72; _r$73 = $f._r$73; _r$74 = $f._r$74; _r$75 = $f._r$75; _r$76 = $f._r$76; _r$77 = $f._r$77; _r$78 = $f._r$78; _r$79 = $f._r$79; _r$8 = $f._r$8; _r$80 = $f._r$80; _r$81 = $f._r$81; _r$82 = $f._r$82; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _v = $f._v; _v$1 = $f._v$1; alist = $f.alist; arg = $f.arg; arg$1 = $f.arg$1; arg$2 = $f.arg$2; arg0 = $f.arg0; arg0$1 = $f.arg0$1; base = $f.base; bin = $f.bin; c = $f.c; call = $f.call; check = $f.check; d = $f.d; dst = $f.dst; i = $f.i; id = $f.id; index = $f.index; indirect = $f.indirect; m = $f.m; min = $f.min; mode = $f.mode; msg = $f.msg; nargs = $f.nargs; obj = $f.obj; offs = $f.offs; ok = $f.ok; params = $f.params; params$1 = $f.params$1; res = $f.res; res$1 = $f.res$1; resTyp = $f.resTyp; resTyp$1 = $f.resTyp$1; s = $f.s; s$1 = $f.s$1; sel = $f.sel; selx = $f.selx; sig = $f.sig; sig$1 = $f.sig$1; sizes = $f.sizes; src = $f.src; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; t$3 = $f.t$3; t$4 = $f.t$4; t$5 = $f.t$5; t$6 = $f.t$6; t$7 = $f.t$7; toFloat = $f.toFloat; typ = $f.typ; val = $f.val; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x1 = $f.x1; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		alist = [alist];
		arg = [arg];
		call = [call];
		check = [check];
		t = [t];
		y = [y];
		y$1 = [y$1];
		_ = false;
		check[0] = this;
		bin = $clone(((id < 0 || id >= predeclaredFuncs.length) ? ($throwRuntimeError("index out of range"), undefined) : predeclaredFuncs[id]), structType$1);
		/* */ if (new token.Pos(call[0].Ellipsis).IsValid() && !((id === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (new token.Pos(call[0].Ellipsis).IsValid() && !((id === 0))) { */ case 1:
			$r = check[0].invalidOp(call[0].Ellipsis, "invalid use of ... with built-in %s", new sliceType$4([new $String(bin.name)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = check[0].use(call[0].Args); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return _;
		/* } */ case 2:
		/* */ if ((id === 7) || (id === 1)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ((id === 7) || (id === 1)) { */ case 5:
			$deferred.push([(function(alist, arg, call, check, t, y, y$1) { return function(b) {
				var b;
				check[0].context.hasCallOrRecv = b;
			}; })(alist, arg, call, check, t, y, y$1), [check[0].context.hasCallOrRecv]]);
			check[0].context.hasCallOrRecv = false;
		/* } */ case 6:
		arg[0] = $throwNilPointerError;
		nargs = call[0].Args.$length;
			_1 = id;
			/* */ if ((_1 === (8)) || (_1 === (9)) || (_1 === (16)) || (_1 === (19))) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((_1 === (8)) || (_1 === (9)) || (_1 === (16)) || (_1 === (19))) { */ case 8:
				$s = 10; continue;
			/* } else { */ case 9:
				_r = unpack((function(alist, arg, call, check, t, y, y$1) { return function $b(x$1, i) {
					var i, x$1, x$2, $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					$r = check[0].multiExpr(x$1, (x$2 = call[0].Args, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i]))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
					/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.i = i; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
				}; })(alist, arg, call, check, t, y, y$1), nargs, false); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				arg[0] = _tuple[0];
				nargs = _tuple[1];
				if (arg[0] === $throwNilPointerError) {
					$s = -1; return _;
				}
				/* */ if (nargs > 0) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (nargs > 0) { */ case 12:
					$r = arg[0](x, 0); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (x.mode === 0) {
						$s = -1; return _;
					}
				/* } */ case 13:
			/* } */ case 10:
		case 7:
		msg = "";
		if (nargs < bin.nargs) {
			msg = "not enough";
		} else if (!bin.variadic && nargs > bin.nargs) {
			msg = "too many";
		}
		/* */ if (!(msg === "")) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (!(msg === "")) { */ case 15:
			$r = check[0].invalidOp(call[0].Rparen, "%s arguments for %s (expected %d, found %d)", new sliceType$4([new $String(msg), call[0], new $Int(bin.nargs), new $Int(nargs)])); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return _;
		/* } */ case 16:
			_2 = id;
			/* */ if (_2 === (0)) { $s = 19; continue; }
			/* */ if ((_2 === (1)) || (_2 === (7))) { $s = 20; continue; }
			/* */ if (_2 === (2)) { $s = 21; continue; }
			/* */ if (_2 === (3)) { $s = 22; continue; }
			/* */ if (_2 === (4)) { $s = 23; continue; }
			/* */ if (_2 === (5)) { $s = 24; continue; }
			/* */ if ((_2 === (6)) || (_2 === (13))) { $s = 25; continue; }
			/* */ if (_2 === (8)) { $s = 26; continue; }
			/* */ if (_2 === (9)) { $s = 27; continue; }
			/* */ if (_2 === (10)) { $s = 28; continue; }
			/* */ if ((_2 === (11)) || (_2 === (12))) { $s = 29; continue; }
			/* */ if (_2 === (14)) { $s = 30; continue; }
			/* */ if (_2 === (15)) { $s = 31; continue; }
			/* */ if (_2 === (16)) { $s = 32; continue; }
			/* */ if (_2 === (17)) { $s = 33; continue; }
			/* */ if (_2 === (18)) { $s = 34; continue; }
			/* */ if (_2 === (19)) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if (_2 === (0)) { */ case 19:
				S = x.typ;
				T = $ifaceNil;
				_r$1 = S.Underlying(); /* */ $s = 38; case 38: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = $assertType(_r$1, ptrType$12, true);
				s = _tuple$1[0];
				/* */ if (!(s === ptrType$12.nil)) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if (!(s === ptrType$12.nil)) { */ case 39:
					T = s.elem;
					$s = 41; continue;
				/* } else { */ case 40:
					_r$2 = x.pos(); /* */ $s = 42; case 42: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = check[0].invalidArg(_r$2, "%s is not a slice", new sliceType$4([x])); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return _;
				/* } */ case 41:
				alist[0] = new sliceType$7([$clone(x, operand)]);
				if (!((nargs === 2) && new token.Pos(call[0].Ellipsis).IsValid())) { _v = false; $s = 46; continue s; }
				_r$3 = x.assignableTo(check[0].conf, NewSlice(universeByte), ptrType$9.nil); /* */ $s = 47; case 47: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_v = _r$3; case 46:
				/* */ if (_v) { $s = 44; continue; }
				/* */ $s = 45; continue;
				/* if (_v) { */ case 44:
					$r = arg[0](x, 1); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (x.mode === 0) {
						$s = -1; return _;
					}
					_r$4 = isString(x.typ); /* */ $s = 51; case 51: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if (_r$4) { $s = 49; continue; }
					/* */ $s = 50; continue;
					/* if (_r$4) { */ case 49:
						/* */ if (!(check[0].Info.Types === false)) { $s = 52; continue; }
						/* */ $s = 53; continue;
						/* if (!(check[0].Info.Types === false)) { */ case 52:
							_r$5 = makeSig(S, new sliceType$8([S, x.typ])); /* */ $s = 54; case 54: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
							sig = _r$5;
							sig.variadic = true;
							$r = check[0].recordBuiltinType(call[0].Fun, sig); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 53:
						x.mode = 7;
						x.typ = S;
						/* break; */ $s = 18; continue;
					/* } */ case 50:
					alist[0] = $append(alist[0], x);
				/* } */ case 45:
				_r$6 = makeSig(S, new sliceType$8([S, NewSlice(T)])); /* */ $s = 56; case 56: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				sig$1 = _r$6;
				sig$1.variadic = true;
				_r$7 = check[0].arguments$(x, call[0], sig$1, (function(alist, arg, call, check, t, y, y$1) { return function $b(x$1, i) {
					var i, x$1, $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					if (i < alist[0].$length) {
						operand.copy(x$1, ((i < 0 || i >= alist[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : alist[0].$array[alist[0].$offset + i]));
						$s = -1; return;
					}
					$r = arg[0](x$1, i); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
					/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.i = i; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
				}; })(alist, arg, call, check, t, y, y$1), nargs); /* */ $s = 57; case 57: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
				x.mode = 7;
				x.typ = S;
				/* */ if (!(check[0].Info.Types === false)) { $s = 58; continue; }
				/* */ $s = 59; continue;
				/* if (!(check[0].Info.Types === false)) { */ case 58:
					$r = check[0].recordBuiltinType(call[0].Fun, sig$1); /* */ $s = 60; case 60: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 59:
				$s = 37; continue;
			/* } else if ((_2 === (1)) || (_2 === (7))) { */ case 20:
				mode = 0;
				typ = $ifaceNil;
				val = $ifaceNil;
				_r$8 = x.typ.Underlying(); /* */ $s = 61; case 61: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$9 = implicitArrayDeref(_r$8); /* */ $s = 62; case 62: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				typ = _r$9;
				_ref = typ;
				/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 63; continue; }
				/* */ if ($assertType(_ref, ptrType$13, true)[1]) { $s = 64; continue; }
				/* */ if ($assertType(_ref, ptrType$12, true)[1] || $assertType(_ref, ptrType$14, true)[1]) { $s = 65; continue; }
				/* */ if ($assertType(_ref, ptrType$15, true)[1]) { $s = 66; continue; }
				/* */ $s = 67; continue;
				/* if ($assertType(_ref, ptrType$4, true)[1]) { */ case 63:
					t$1 = _ref.$val;
					_r$10 = isString(t$1); /* */ $s = 70; case 70: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					/* */ if (_r$10 && (id === 7)) { $s = 68; continue; }
					/* */ $s = 69; continue;
					/* if (_r$10 && (id === 7)) { */ case 68:
						/* */ if (x.mode === 4) { $s = 71; continue; }
						/* */ $s = 72; continue;
						/* if (x.mode === 4) { */ case 71:
							mode = 4;
							_r$11 = constant.StringVal(x.val); /* */ $s = 74; case 74: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
							_r$12 = constant.MakeInt64((new $Int64(0, _r$11.length))); /* */ $s = 75; case 75: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
							val = _r$12;
							$s = 73; continue;
						/* } else { */ case 72:
							mode = 7;
						/* } */ case 73:
					/* } */ case 69:
					$s = 67; continue;
				/* } else if ($assertType(_ref, ptrType$13, true)[1]) { */ case 64:
					t$2 = _ref.$val;
					mode = 7;
					if (!check[0].context.hasCallOrRecv) {
						mode = 4;
						val = constant.MakeInt64(t$2.len);
					}
					$s = 67; continue;
				/* } else if ($assertType(_ref, ptrType$12, true)[1] || $assertType(_ref, ptrType$14, true)[1]) { */ case 65:
					t$3 = _ref;
					mode = 7;
					$s = 67; continue;
				/* } else if ($assertType(_ref, ptrType$15, true)[1]) { */ case 66:
					t$4 = _ref.$val;
					if (id === 7) {
						mode = 7;
					}
				/* } */ case 67:
				/* */ if (mode === 0) { $s = 76; continue; }
				/* */ $s = 77; continue;
				/* if (mode === 0) { */ case 76:
					_r$13 = x.pos(); /* */ $s = 78; case 78: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					$r = check[0].invalidArg(_r$13, "%s for %s", new sliceType$4([x, new $String(bin.name)])); /* */ $s = 79; case 79: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return _;
				/* } */ case 77:
				x.mode = mode;
				x.typ = (2 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 2]);
				x.val = val;
				/* */ if (!(check[0].Info.Types === false) && !((mode === 4))) { $s = 80; continue; }
				/* */ $s = 81; continue;
				/* if (!(check[0].Info.Types === false) && !((mode === 4))) { */ case 80:
					_arg = call[0].Fun;
					_r$14 = makeSig(x.typ, new sliceType$8([typ])); /* */ $s = 82; case 82: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_arg$1 = _r$14;
					$r = check[0].recordBuiltinType(_arg, _arg$1); /* */ $s = 83; case 83: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 81:
				$s = 37; continue;
			/* } else if (_2 === (2)) { */ case 21:
				_r$15 = x.typ.Underlying(); /* */ $s = 84; case 84: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_tuple$2 = $assertType(_r$15, ptrType$14, true);
				c = _tuple$2[0];
				/* */ if (c === ptrType$14.nil) { $s = 85; continue; }
				/* */ $s = 86; continue;
				/* if (c === ptrType$14.nil) { */ case 85:
					_r$16 = x.pos(); /* */ $s = 87; case 87: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					$r = check[0].invalidArg(_r$16, "%s is not a channel", new sliceType$4([x])); /* */ $s = 88; case 88: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return _;
				/* } */ case 86:
				/* */ if (c.dir === 2) { $s = 89; continue; }
				/* */ $s = 90; continue;
				/* if (c.dir === 2) { */ case 89:
					_r$17 = x.pos(); /* */ $s = 91; case 91: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					$r = check[0].invalidArg(_r$17, "%s must not be a receive-only channel", new sliceType$4([x])); /* */ $s = 92; case 92: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return _;
				/* } */ case 90:
				x.mode = 1;
				/* */ if (!(check[0].Info.Types === false)) { $s = 93; continue; }
				/* */ $s = 94; continue;
				/* if (!(check[0].Info.Types === false)) { */ case 93:
					_arg$2 = call[0].Fun;
					_r$18 = makeSig($ifaceNil, new sliceType$8([c])); /* */ $s = 95; case 95: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					_arg$3 = _r$18;
					$r = check[0].recordBuiltinType(_arg$2, _arg$3); /* */ $s = 96; case 96: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 94:
				$s = 37; continue;
			/* } else if (_2 === (3)) { */ case 22:
				y[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
				$r = arg[0](y[0], 1); /* */ $s = 97; case 97: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (y[0].mode === 0) {
					$s = -1; return _;
				}
				d = 0;
				_r$19 = isUntyped(x.typ); /* */ $s = 100; case 100: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				/* */ if (_r$19) { $s = 98; continue; }
				/* */ $s = 99; continue;
				/* if (_r$19) { */ case 98:
					d = d | (1);
				/* } */ case 99:
				_r$20 = isUntyped(y[0].typ); /* */ $s = 103; case 103: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				/* */ if (_r$20) { $s = 101; continue; }
				/* */ $s = 102; continue;
				/* if (_r$20) { */ case 101:
					d = d | (2);
				/* } */ case 102:
					_3 = d;
					/* */ if (_3 === (0)) { $s = 105; continue; }
					/* */ if (_3 === (1)) { $s = 106; continue; }
					/* */ if (_3 === (2)) { $s = 107; continue; }
					/* */ if (_3 === (3)) { $s = 108; continue; }
					/* */ $s = 109; continue;
					/* if (_3 === (0)) { */ case 105:
						$s = 109; continue;
					/* } else if (_3 === (1)) { */ case 106:
						$r = check[0].convertUntyped(x, y[0].typ); /* */ $s = 110; case 110: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 109; continue;
					/* } else if (_3 === (2)) { */ case 107:
						$r = check[0].convertUntyped(y[0], x.typ); /* */ $s = 111; case 111: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 109; continue;
					/* } else if (_3 === (3)) { */ case 108:
						/* */ if ((x.mode === 4) && (y[0].mode === 4)) { $s = 112; continue; }
						/* */ $s = 113; continue;
						/* if ((x.mode === 4) && (y[0].mode === 4)) { */ case 112:
							toFloat = (function(alist, arg, call, check, t, y, y$1) { return function $b(x$1) {
								var _r$21, _r$22, _r$23, _v$1, x$1, $s, $r;
								/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _v$1 = $f._v$1; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
								_r$21 = isNumeric(x$1.typ); /* */ $s = 4; case 4: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
								if (!(_r$21)) { _v$1 = false; $s = 3; continue s; }
								_r$22 = constant.Imag(x$1.val); /* */ $s = 5; case 5: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
								_r$23 = constant.Sign(_r$22); /* */ $s = 6; case 6: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
								_v$1 = _r$23 === 0; case 3:
								/* */ if (_v$1) { $s = 1; continue; }
								/* */ $s = 2; continue;
								/* if (_v$1) { */ case 1:
									x$1.typ = (22 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 22]);
								/* } */ case 2:
								$s = -1; return;
								/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._v$1 = _v$1; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
							}; })(alist, arg, call, check, t, y, y$1);
							$r = toFloat(x); /* */ $s = 115; case 115: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$r = toFloat(y[0]); /* */ $s = 116; case 116: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 114; continue;
						/* } else { */ case 113:
							$r = check[0].convertUntyped(x, (14 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 14])); /* */ $s = 117; case 117: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$r = check[0].convertUntyped(y[0], (14 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 14])); /* */ $s = 118; case 118: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 114:
					/* } */ case 109:
				case 104:
				if ((x.mode === 0) || (y[0].mode === 0)) {
					$s = -1; return _;
				}
				_r$21 = Identical(x.typ, y[0].typ); /* */ $s = 121; case 121: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				/* */ if (!_r$21) { $s = 119; continue; }
				/* */ $s = 120; continue;
				/* if (!_r$21) { */ case 119:
					_r$22 = x.pos(); /* */ $s = 122; case 122: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					$r = check[0].invalidArg(_r$22, "mismatched types %s and %s", new sliceType$4([x.typ, y[0].typ])); /* */ $s = 123; case 123: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return _;
				/* } */ case 120:
				_r$23 = isFloat(x.typ); /* */ $s = 126; case 126: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				/* */ if (!_r$23) { $s = 124; continue; }
				/* */ $s = 125; continue;
				/* if (!_r$23) { */ case 124:
					_r$24 = x.pos(); /* */ $s = 127; case 127: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
					$r = check[0].invalidArg(_r$24, "arguments have type %s, expected floating-point", new sliceType$4([x.typ])); /* */ $s = 128; case 128: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return _;
				/* } */ case 125:
				/* */ if ((x.mode === 4) && (y[0].mode === 4)) { $s = 129; continue; }
				/* */ $s = 130; continue;
				/* if ((x.mode === 4) && (y[0].mode === 4)) { */ case 129:
					_r$25 = constant.ToFloat(x.val); /* */ $s = 132; case 132: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					_arg$4 = _r$25;
					_r$26 = constant.ToFloat(y[0].val); /* */ $s = 133; case 133: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
					_r$27 = constant.MakeImag(_r$26); /* */ $s = 134; case 134: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					_arg$5 = _r$27;
					_r$28 = constant.BinaryOp(_arg$4, 12, _arg$5); /* */ $s = 135; case 135: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
					x.val = _r$28;
					$s = 131; continue;
				/* } else { */ case 130:
					x.mode = 7;
				/* } */ case 131:
				res = 0;
					_r$29 = x.typ.Underlying(); /* */ $s = 137; case 137: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
					_4 = $assertType(_r$29, ptrType$4).kind;
					if (_4 === (13)) {
						res = 15;
					} else if (_4 === (14)) {
						res = 16;
					} else if (_4 === (22)) {
						res = 23;
					} else {
						unreachable();
					}
				case 136:
				resTyp = ((res < 0 || res >= $pkg.Typ.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + res]);
				/* */ if (!(check[0].Info.Types === false) && !((x.mode === 4))) { $s = 138; continue; }
				/* */ $s = 139; continue;
				/* if (!(check[0].Info.Types === false) && !((x.mode === 4))) { */ case 138:
					_arg$6 = call[0].Fun;
					_r$30 = makeSig(resTyp, new sliceType$8([x.typ, x.typ])); /* */ $s = 140; case 140: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
					_arg$7 = _r$30;
					$r = check[0].recordBuiltinType(_arg$6, _arg$7); /* */ $s = 141; case 141: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 139:
				x.typ = resTyp;
				$s = 37; continue;
			/* } else if (_2 === (4)) { */ case 23:
				dst = $ifaceNil;
				_r$31 = x.typ.Underlying(); /* */ $s = 142; case 142: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				_tuple$3 = $assertType(_r$31, ptrType$12, true);
				t$5 = _tuple$3[0];
				if (!(t$5 === ptrType$12.nil)) {
					dst = t$5.elem;
				}
				y$1[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
				$r = arg[0](y$1[0], 1); /* */ $s = 143; case 143: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (y$1[0].mode === 0) {
					$s = -1; return _;
				}
				src = $ifaceNil;
				_r$32 = y$1[0].typ.Underlying(); /* */ $s = 144; case 144: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
				_ref$1 = _r$32;
				/* */ if ($assertType(_ref$1, ptrType$4, true)[1]) { $s = 145; continue; }
				/* */ if ($assertType(_ref$1, ptrType$12, true)[1]) { $s = 146; continue; }
				/* */ $s = 147; continue;
				/* if ($assertType(_ref$1, ptrType$4, true)[1]) { */ case 145:
					t$6 = _ref$1.$val;
					_r$33 = isString(y$1[0].typ); /* */ $s = 150; case 150: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
					/* */ if (_r$33) { $s = 148; continue; }
					/* */ $s = 149; continue;
					/* if (_r$33) { */ case 148:
						src = universeByte;
					/* } */ case 149:
					$s = 147; continue;
				/* } else if ($assertType(_ref$1, ptrType$12, true)[1]) { */ case 146:
					t$7 = _ref$1.$val;
					src = t$7.elem;
				/* } */ case 147:
				/* */ if ($interfaceIsEqual(dst, $ifaceNil) || $interfaceIsEqual(src, $ifaceNil)) { $s = 151; continue; }
				/* */ $s = 152; continue;
				/* if ($interfaceIsEqual(dst, $ifaceNil) || $interfaceIsEqual(src, $ifaceNil)) { */ case 151:
					_r$34 = x.pos(); /* */ $s = 153; case 153: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
					$r = check[0].invalidArg(_r$34, "copy expects slice arguments; found %s and %s", new sliceType$4([x, y$1[0]])); /* */ $s = 154; case 154: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return _;
				/* } */ case 152:
				_r$35 = Identical(dst, src); /* */ $s = 157; case 157: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
				/* */ if (!_r$35) { $s = 155; continue; }
				/* */ $s = 156; continue;
				/* if (!_r$35) { */ case 155:
					_r$36 = x.pos(); /* */ $s = 158; case 158: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
					$r = check[0].invalidArg(_r$36, "arguments to copy %s and %s have different element types %s and %s", new sliceType$4([x, y$1[0], dst, src])); /* */ $s = 159; case 159: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return _;
				/* } */ case 156:
				/* */ if (!(check[0].Info.Types === false)) { $s = 160; continue; }
				/* */ $s = 161; continue;
				/* if (!(check[0].Info.Types === false)) { */ case 160:
					_arg$8 = call[0].Fun;
					_r$37 = makeSig((2 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 2]), new sliceType$8([x.typ, y$1[0].typ])); /* */ $s = 162; case 162: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
					_arg$9 = _r$37;
					$r = check[0].recordBuiltinType(_arg$8, _arg$9); /* */ $s = 163; case 163: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 161:
				x.mode = 7;
				x.typ = (2 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 2]);
				$s = 37; continue;
			/* } else if (_2 === (5)) { */ case 24:
				_r$38 = x.typ.Underlying(); /* */ $s = 164; case 164: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
				_tuple$4 = $assertType(_r$38, ptrType$15, true);
				m = _tuple$4[0];
				/* */ if (m === ptrType$15.nil) { $s = 165; continue; }
				/* */ $s = 166; continue;
				/* if (m === ptrType$15.nil) { */ case 165:
					_r$39 = x.pos(); /* */ $s = 167; case 167: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
					$r = check[0].invalidArg(_r$39, "%s is not a map", new sliceType$4([x])); /* */ $s = 168; case 168: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return _;
				/* } */ case 166:
				$r = arg[0](x, 1); /* */ $s = 169; case 169: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (x.mode === 0) {
					$s = -1; return _;
				}
				_r$40 = x.assignableTo(check[0].conf, m.key, ptrType$9.nil); /* */ $s = 172; case 172: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
				/* */ if (!_r$40) { $s = 170; continue; }
				/* */ $s = 171; continue;
				/* if (!_r$40) { */ case 170:
					_r$41 = x.pos(); /* */ $s = 173; case 173: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
					$r = check[0].invalidArg(_r$41, "%s is not assignable to %s", new sliceType$4([x, m.key])); /* */ $s = 174; case 174: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return _;
				/* } */ case 171:
				x.mode = 1;
				/* */ if (!(check[0].Info.Types === false)) { $s = 175; continue; }
				/* */ $s = 176; continue;
				/* if (!(check[0].Info.Types === false)) { */ case 175:
					_arg$10 = call[0].Fun;
					_r$42 = makeSig($ifaceNil, new sliceType$8([m, m.key])); /* */ $s = 177; case 177: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
					_arg$11 = _r$42;
					$r = check[0].recordBuiltinType(_arg$10, _arg$11); /* */ $s = 178; case 178: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 176:
				$s = 37; continue;
			/* } else if ((_2 === (6)) || (_2 === (13))) { */ case 25:
				_r$43 = isUntyped(x.typ); /* */ $s = 181; case 181: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
				/* */ if (_r$43) { $s = 179; continue; }
				/* */ $s = 180; continue;
				/* if (_r$43) { */ case 179:
					/* */ if (x.mode === 4) { $s = 182; continue; }
					/* */ $s = 183; continue;
					/* if (x.mode === 4) { */ case 182:
						_r$44 = isNumeric(x.typ); /* */ $s = 187; case 187: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
						/* */ if (_r$44) { $s = 185; continue; }
						/* */ $s = 186; continue;
						/* if (_r$44) { */ case 185:
							x.typ = (23 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 23]);
						/* } */ case 186:
						$s = 184; continue;
					/* } else { */ case 183:
						$r = check[0].convertUntyped(x, (16 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 16])); /* */ $s = 188; case 188: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						if (x.mode === 0) {
							$s = -1; return _;
						}
					/* } */ case 184:
				/* } */ case 180:
				_r$45 = isComplex(x.typ); /* */ $s = 191; case 191: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
				/* */ if (!_r$45) { $s = 189; continue; }
				/* */ $s = 190; continue;
				/* if (!_r$45) { */ case 189:
					_r$46 = x.pos(); /* */ $s = 192; case 192: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
					$r = check[0].invalidArg(_r$46, "argument has type %s, expected complex type", new sliceType$4([x.typ])); /* */ $s = 193; case 193: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return _;
				/* } */ case 190:
				/* */ if (x.mode === 4) { $s = 194; continue; }
				/* */ $s = 195; continue;
				/* if (x.mode === 4) { */ case 194:
					/* */ if (id === 13) { $s = 197; continue; }
					/* */ $s = 198; continue;
					/* if (id === 13) { */ case 197:
						_r$47 = constant.Real(x.val); /* */ $s = 200; case 200: if($c) { $c = false; _r$47 = _r$47.$blk(); } if (_r$47 && _r$47.$blk !== undefined) { break s; }
						x.val = _r$47;
						$s = 199; continue;
					/* } else { */ case 198:
						_r$48 = constant.Imag(x.val); /* */ $s = 201; case 201: if($c) { $c = false; _r$48 = _r$48.$blk(); } if (_r$48 && _r$48.$blk !== undefined) { break s; }
						x.val = _r$48;
					/* } */ case 199:
					$s = 196; continue;
				/* } else { */ case 195:
					x.mode = 7;
				/* } */ case 196:
				res$1 = 0;
					_r$49 = x.typ.Underlying(); /* */ $s = 203; case 203: if($c) { $c = false; _r$49 = _r$49.$blk(); } if (_r$49 && _r$49.$blk !== undefined) { break s; }
					_5 = $assertType(_r$49, ptrType$4).kind;
					if (_5 === (15)) {
						res$1 = 13;
					} else if (_5 === (16)) {
						res$1 = 14;
					} else if (_5 === (23)) {
						res$1 = 22;
					} else {
						unreachable();
					}
				case 202:
				resTyp$1 = ((res$1 < 0 || res$1 >= $pkg.Typ.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + res$1]);
				/* */ if (!(check[0].Info.Types === false) && !((x.mode === 4))) { $s = 204; continue; }
				/* */ $s = 205; continue;
				/* if (!(check[0].Info.Types === false) && !((x.mode === 4))) { */ case 204:
					_arg$12 = call[0].Fun;
					_r$50 = makeSig(resTyp$1, new sliceType$8([x.typ])); /* */ $s = 206; case 206: if($c) { $c = false; _r$50 = _r$50.$blk(); } if (_r$50 && _r$50.$blk !== undefined) { break s; }
					_arg$13 = _r$50;
					$r = check[0].recordBuiltinType(_arg$12, _arg$13); /* */ $s = 207; case 207: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 205:
				x.typ = resTyp$1;
				$s = 37; continue;
			/* } else if (_2 === (8)) { */ case 26:
				arg0 = (x$1 = call[0].Args, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0]));
				_r$51 = check[0].typ(arg0); /* */ $s = 208; case 208: if($c) { $c = false; _r$51 = _r$51.$blk(); } if (_r$51 && _r$51.$blk !== undefined) { break s; }
				T$1 = _r$51;
				if ($interfaceIsEqual(T$1, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]))) {
					$s = -1; return _;
				}
				min = 0;
				_r$52 = T$1.Underlying(); /* */ $s = 209; case 209: if($c) { $c = false; _r$52 = _r$52.$blk(); } if (_r$52 && _r$52.$blk !== undefined) { break s; }
				_ref$2 = _r$52;
				/* */ if ($assertType(_ref$2, ptrType$12, true)[1]) { $s = 210; continue; }
				/* */ if ($assertType(_ref$2, ptrType$15, true)[1] || $assertType(_ref$2, ptrType$14, true)[1]) { $s = 211; continue; }
				/* */ $s = 212; continue;
				/* if ($assertType(_ref$2, ptrType$12, true)[1]) { */ case 210:
					min = 2;
					$s = 213; continue;
				/* } else if ($assertType(_ref$2, ptrType$15, true)[1] || $assertType(_ref$2, ptrType$14, true)[1]) { */ case 211:
					min = 1;
					$s = 213; continue;
				/* } else { */ case 212:
					_r$53 = arg0.Pos(); /* */ $s = 214; case 214: if($c) { $c = false; _r$53 = _r$53.$blk(); } if (_r$53 && _r$53.$blk !== undefined) { break s; }
					$r = check[0].invalidArg(_r$53, "cannot make %s; type must be slice, map, or channel", new sliceType$4([arg0])); /* */ $s = 215; case 215: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return _;
				/* } */ case 213:
				/* */ if (nargs < min || (min + 1 >> 0) < nargs) { $s = 216; continue; }
				/* */ $s = 217; continue;
				/* if (nargs < min || (min + 1 >> 0) < nargs) { */ case 216:
					_r$54 = call[0].Pos(); /* */ $s = 218; case 218: if($c) { $c = false; _r$54 = _r$54.$blk(); } if (_r$54 && _r$54.$blk !== undefined) { break s; }
					$r = check[0].errorf(_r$54, "%v expects %d or %d arguments; found %d", new sliceType$4([call[0], new $Int(min), new $Int((min + 1 >> 0)), new $Int(nargs)])); /* */ $s = 219; case 219: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return _;
				/* } */ case 217:
				sizes = sliceType$9.nil;
				_ref$3 = $subslice(call[0].Args, 1);
				_i = 0;
				/* while (true) { */ case 220:
					/* if (!(_i < _ref$3.$length)) { break; } */ if(!(_i < _ref$3.$length)) { $s = 221; continue; }
					arg$1 = ((_i < 0 || _i >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i]);
					_r$55 = check[0].index(arg$1, new $Int64(-1, 4294967295)); /* */ $s = 222; case 222: if($c) { $c = false; _r$55 = _r$55.$blk(); } if (_r$55 && _r$55.$blk !== undefined) { break s; }
					_tuple$5 = _r$55;
					s$1 = _tuple$5[0];
					ok = _tuple$5[1];
					if (ok && (s$1.$high > 0 || (s$1.$high === 0 && s$1.$low >= 0))) {
						sizes = $append(sizes, s$1);
					}
					_i++;
				/* } */ $s = 220; continue; case 221:
				/* */ if ((sizes.$length === 2) && (x$2 = (0 >= sizes.$length ? ($throwRuntimeError("index out of range"), undefined) : sizes.$array[sizes.$offset + 0]), x$3 = (1 >= sizes.$length ? ($throwRuntimeError("index out of range"), undefined) : sizes.$array[sizes.$offset + 1]), (x$2.$high > x$3.$high || (x$2.$high === x$3.$high && x$2.$low > x$3.$low)))) { $s = 223; continue; }
				/* */ $s = 224; continue;
				/* if ((sizes.$length === 2) && (x$2 = (0 >= sizes.$length ? ($throwRuntimeError("index out of range"), undefined) : sizes.$array[sizes.$offset + 0]), x$3 = (1 >= sizes.$length ? ($throwRuntimeError("index out of range"), undefined) : sizes.$array[sizes.$offset + 1]), (x$2.$high > x$3.$high || (x$2.$high === x$3.$high && x$2.$low > x$3.$low)))) { */ case 223:
					_r$56 = (x$4 = call[0].Args, (1 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 1])).Pos(); /* */ $s = 225; case 225: if($c) { $c = false; _r$56 = _r$56.$blk(); } if (_r$56 && _r$56.$blk !== undefined) { break s; }
					$r = check[0].invalidArg(_r$56, "length and capacity swapped", new sliceType$4([])); /* */ $s = 226; case 226: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 224:
				x.mode = 7;
				x.typ = T$1;
				/* */ if (!(check[0].Info.Types === false)) { $s = 227; continue; }
				/* */ $s = 228; continue;
				/* if (!(check[0].Info.Types === false)) { */ case 227:
					params = $toNativeArray($kindInterface, [T$1, (2 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 2]), (2 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 2])]);
					_arg$14 = call[0].Fun;
					_r$57 = makeSig(x.typ, $subslice(new sliceType$8(params), 0, (1 + sizes.$length >> 0))); /* */ $s = 229; case 229: if($c) { $c = false; _r$57 = _r$57.$blk(); } if (_r$57 && _r$57.$blk !== undefined) { break s; }
					_arg$15 = _r$57;
					$r = check[0].recordBuiltinType(_arg$14, _arg$15); /* */ $s = 230; case 230: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 228:
				$s = 37; continue;
			/* } else if (_2 === (9)) { */ case 27:
				_r$58 = check[0].typ((x$5 = call[0].Args, (0 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 0]))); /* */ $s = 231; case 231: if($c) { $c = false; _r$58 = _r$58.$blk(); } if (_r$58 && _r$58.$blk !== undefined) { break s; }
				T$2 = _r$58;
				if ($interfaceIsEqual(T$2, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]))) {
					$s = -1; return _;
				}
				x.mode = 7;
				x.typ = new Pointer.ptr(T$2);
				/* */ if (!(check[0].Info.Types === false)) { $s = 232; continue; }
				/* */ $s = 233; continue;
				/* if (!(check[0].Info.Types === false)) { */ case 232:
					_arg$16 = call[0].Fun;
					_r$59 = makeSig(x.typ, new sliceType$8([T$2])); /* */ $s = 234; case 234: if($c) { $c = false; _r$59 = _r$59.$blk(); } if (_r$59 && _r$59.$blk !== undefined) { break s; }
					_arg$17 = _r$59;
					$r = check[0].recordBuiltinType(_arg$16, _arg$17); /* */ $s = 235; case 235: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 233:
				$s = 37; continue;
			/* } else if (_2 === (10)) { */ case 28:
				$r = check[0].assignment(x, emptyInterface, "argument to panic"); /* */ $s = 236; case 236: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (x.mode === 0) {
					$s = -1; return _;
				}
				x.mode = 1;
				/* */ if (!(check[0].Info.Types === false)) { $s = 237; continue; }
				/* */ $s = 238; continue;
				/* if (!(check[0].Info.Types === false)) { */ case 237:
					_arg$18 = call[0].Fun;
					_r$60 = makeSig($ifaceNil, new sliceType$8([emptyInterface])); /* */ $s = 239; case 239: if($c) { $c = false; _r$60 = _r$60.$blk(); } if (_r$60 && _r$60.$blk !== undefined) { break s; }
					_arg$19 = _r$60;
					$r = check[0].recordBuiltinType(_arg$18, _arg$19); /* */ $s = 240; case 240: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 238:
				$s = 37; continue;
			/* } else if ((_2 === (11)) || (_2 === (12))) { */ case 29:
				params$1 = sliceType$8.nil;
				/* */ if (nargs > 0) { $s = 241; continue; }
				/* */ $s = 242; continue;
				/* if (nargs > 0) { */ case 241:
					params$1 = $makeSlice(sliceType$8, nargs);
					i = 0;
					/* while (true) { */ case 243:
						/* if (!(i < nargs)) { break; } */ if(!(i < nargs)) { $s = 244; continue; }
						/* */ if (i > 0) { $s = 245; continue; }
						/* */ $s = 246; continue;
						/* if (i > 0) { */ case 245:
							$r = arg[0](x, i); /* */ $s = 247; case 247: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 246:
						$r = check[0].assignment(x, $ifaceNil, "argument to " + ((id < 0 || id >= predeclaredFuncs.length) ? ($throwRuntimeError("index out of range"), undefined) : predeclaredFuncs[id]).name); /* */ $s = 248; case 248: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						if (x.mode === 0) {
							$s = -1; return _;
						}
						((i < 0 || i >= params$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : params$1.$array[params$1.$offset + i] = x.typ);
						i = i + (1) >> 0;
					/* } */ $s = 243; continue; case 244:
				/* } */ case 242:
				x.mode = 1;
				/* */ if (!(check[0].Info.Types === false)) { $s = 249; continue; }
				/* */ $s = 250; continue;
				/* if (!(check[0].Info.Types === false)) { */ case 249:
					_arg$20 = call[0].Fun;
					_r$61 = makeSig($ifaceNil, params$1); /* */ $s = 251; case 251: if($c) { $c = false; _r$61 = _r$61.$blk(); } if (_r$61 && _r$61.$blk !== undefined) { break s; }
					_arg$21 = _r$61;
					$r = check[0].recordBuiltinType(_arg$20, _arg$21); /* */ $s = 252; case 252: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 250:
				$s = 37; continue;
			/* } else if (_2 === (14)) { */ case 30:
				x.mode = 7;
				x.typ = emptyInterface;
				/* */ if (!(check[0].Info.Types === false)) { $s = 253; continue; }
				/* */ $s = 254; continue;
				/* if (!(check[0].Info.Types === false)) { */ case 253:
					_arg$22 = call[0].Fun;
					_r$62 = makeSig(x.typ, new sliceType$8([])); /* */ $s = 255; case 255: if($c) { $c = false; _r$62 = _r$62.$blk(); } if (_r$62 && _r$62.$blk !== undefined) { break s; }
					_arg$23 = _r$62;
					$r = check[0].recordBuiltinType(_arg$22, _arg$23); /* */ $s = 256; case 256: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 254:
				$s = 37; continue;
			/* } else if (_2 === (15)) { */ case 31:
				$r = check[0].assignment(x, $ifaceNil, "argument to unsafe.Alignof"); /* */ $s = 257; case 257: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (x.mode === 0) {
					$s = -1; return _;
				}
				x.mode = 4;
				_r$63 = check[0].conf.alignof(x.typ); /* */ $s = 258; case 258: if($c) { $c = false; _r$63 = _r$63.$blk(); } if (_r$63 && _r$63.$blk !== undefined) { break s; }
				_r$64 = constant.MakeInt64(_r$63); /* */ $s = 259; case 259: if($c) { $c = false; _r$64 = _r$64.$blk(); } if (_r$64 && _r$64.$blk !== undefined) { break s; }
				x.val = _r$64;
				x.typ = (12 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 12]);
				$s = 37; continue;
			/* } else if (_2 === (16)) { */ case 32:
				arg0$1 = (x$6 = call[0].Args, (0 >= x$6.$length ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + 0]));
				_tuple$6 = $assertType(unparen(arg0$1), ptrType$11, true);
				selx = _tuple$6[0];
				/* */ if (selx === ptrType$11.nil) { $s = 260; continue; }
				/* */ $s = 261; continue;
				/* if (selx === ptrType$11.nil) { */ case 260:
					_r$65 = arg0$1.Pos(); /* */ $s = 262; case 262: if($c) { $c = false; _r$65 = _r$65.$blk(); } if (_r$65 && _r$65.$blk !== undefined) { break s; }
					$r = check[0].invalidArg(_r$65, "%s is not a selector expression", new sliceType$4([arg0$1])); /* */ $s = 263; case 263: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = check[0].use(new sliceType$10([arg0$1])); /* */ $s = 264; case 264: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return _;
				/* } */ case 261:
				$r = check[0].expr(x, selx.X); /* */ $s = 265; case 265: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (x.mode === 0) {
					$s = -1; return _;
				}
				_r$66 = derefStructPtr(x.typ); /* */ $s = 266; case 266: if($c) { $c = false; _r$66 = _r$66.$blk(); } if (_r$66 && _r$66.$blk !== undefined) { break s; }
				base = _r$66;
				sel = selx.Sel.Name;
				_r$67 = LookupFieldOrMethod(base, false, check[0].pkg, sel); /* */ $s = 267; case 267: if($c) { $c = false; _r$67 = _r$67.$blk(); } if (_r$67 && _r$67.$blk !== undefined) { break s; }
				_tuple$7 = _r$67;
				obj = _tuple$7[0];
				index = _tuple$7[1];
				indirect = _tuple$7[2];
				_ref$4 = obj;
				/* */ if (_ref$4 === $ifaceNil) { $s = 268; continue; }
				/* */ if ($assertType(_ref$4, ptrType$5, true)[1]) { $s = 269; continue; }
				/* */ $s = 270; continue;
				/* if (_ref$4 === $ifaceNil) { */ case 268:
					_r$68 = x.pos(); /* */ $s = 271; case 271: if($c) { $c = false; _r$68 = _r$68.$blk(); } if (_r$68 && _r$68.$blk !== undefined) { break s; }
					$r = check[0].invalidArg(_r$68, "%s has no single field %s", new sliceType$4([base, new $String(sel)])); /* */ $s = 272; case 272: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return _;
				/* } else if ($assertType(_ref$4, ptrType$5, true)[1]) { */ case 269:
					_r$69 = arg0$1.Pos(); /* */ $s = 273; case 273: if($c) { $c = false; _r$69 = _r$69.$blk(); } if (_r$69 && _r$69.$blk !== undefined) { break s; }
					$r = check[0].invalidArg(_r$69, "%s is a method value", new sliceType$4([arg0$1])); /* */ $s = 274; case 274: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return _;
				/* } */ case 270:
				/* */ if (indirect) { $s = 275; continue; }
				/* */ $s = 276; continue;
				/* if (indirect) { */ case 275:
					_r$70 = x.pos(); /* */ $s = 277; case 277: if($c) { $c = false; _r$70 = _r$70.$blk(); } if (_r$70 && _r$70.$blk !== undefined) { break s; }
					$r = check[0].invalidArg(_r$70, "field %s is embedded via a pointer in %s", new sliceType$4([new $String(sel), base])); /* */ $s = 278; case 278: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return _;
				/* } */ case 276:
				check[0].recordSelection(selx, 0, base, obj, index, false);
				_r$71 = check[0].conf.offsetof(base, index); /* */ $s = 279; case 279: if($c) { $c = false; _r$71 = _r$71.$blk(); } if (_r$71 && _r$71.$blk !== undefined) { break s; }
				offs = _r$71;
				x.mode = 4;
				x.val = constant.MakeInt64(offs);
				x.typ = (12 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 12]);
				$s = 37; continue;
			/* } else if (_2 === (17)) { */ case 33:
				$r = check[0].assignment(x, $ifaceNil, "argument to unsafe.Sizeof"); /* */ $s = 280; case 280: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (x.mode === 0) {
					$s = -1; return _;
				}
				x.mode = 4;
				_r$72 = check[0].conf.sizeof(x.typ); /* */ $s = 281; case 281: if($c) { $c = false; _r$72 = _r$72.$blk(); } if (_r$72 && _r$72.$blk !== undefined) { break s; }
				_r$73 = constant.MakeInt64(_r$72); /* */ $s = 282; case 282: if($c) { $c = false; _r$73 = _r$73.$blk(); } if (_r$73 && _r$73.$blk !== undefined) { break s; }
				x.val = _r$73;
				x.typ = (12 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 12]);
				$s = 37; continue;
			/* } else if (_2 === (18)) { */ case 34:
				if (!((x.mode === 4))) { _v$1 = true; $s = 285; continue s; }
				_r$74 = isBoolean(x.typ); /* */ $s = 286; case 286: if($c) { $c = false; _r$74 = _r$74.$blk(); } if (_r$74 && _r$74.$blk !== undefined) { break s; }
				_v$1 = !_r$74; case 285:
				/* */ if (_v$1) { $s = 283; continue; }
				/* */ $s = 284; continue;
				/* if (_v$1) { */ case 283:
					_r$75 = x.pos(); /* */ $s = 287; case 287: if($c) { $c = false; _r$75 = _r$75.$blk(); } if (_r$75 && _r$75.$blk !== undefined) { break s; }
					$r = check[0].invalidArg(_r$75, "%s is not a boolean constant", new sliceType$4([x])); /* */ $s = 288; case 288: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return _;
				/* } */ case 284:
				_r$76 = x.val.Kind(); /* */ $s = 291; case 291: if($c) { $c = false; _r$76 = _r$76.$blk(); } if (_r$76 && _r$76.$blk !== undefined) { break s; }
				/* */ if (!((_r$76 === 1))) { $s = 289; continue; }
				/* */ $s = 290; continue;
				/* if (!((_r$76 === 1))) { */ case 289:
					_r$77 = x.pos(); /* */ $s = 292; case 292: if($c) { $c = false; _r$77 = _r$77.$blk(); } if (_r$77 && _r$77.$blk !== undefined) { break s; }
					$r = check[0].errorf(_r$77, "internal error: value of %s should be a boolean constant", new sliceType$4([x])); /* */ $s = 293; case 293: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return _;
				/* } */ case 290:
				_r$78 = constant.BoolVal(x.val); /* */ $s = 296; case 296: if($c) { $c = false; _r$78 = _r$78.$blk(); } if (_r$78 && _r$78.$blk !== undefined) { break s; }
				/* */ if (!_r$78) { $s = 294; continue; }
				/* */ $s = 295; continue;
				/* if (!_r$78) { */ case 294:
					_r$79 = call[0].Pos(); /* */ $s = 297; case 297: if($c) { $c = false; _r$79 = _r$79.$blk(); } if (_r$79 && _r$79.$blk !== undefined) { break s; }
					$r = check[0].errorf(_r$79, "%v failed", new sliceType$4([call[0]])); /* */ $s = 298; case 298: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 295:
				$s = 37; continue;
			/* } else if (_2 === (19)) { */ case 35:
				/* */ if (nargs === 0) { $s = 299; continue; }
				/* */ $s = 300; continue;
				/* if (nargs === 0) { */ case 299:
					_r$80 = call[0].Pos(); /* */ $s = 301; case 301: if($c) { $c = false; _r$80 = _r$80.$blk(); } if (_r$80 && _r$80.$blk !== undefined) { break s; }
					_arg$24 = new token.Pos(_r$80);
					$r = check[0].dump("%s: trace() without arguments", new sliceType$4([_arg$24])); /* */ $s = 302; case 302: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					x.mode = 1;
					/* break; */ $s = 18; continue;
				/* } */ case 300:
				t[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
				x1 = x;
				_ref$5 = call[0].Args;
				_i$1 = 0;
				/* while (true) { */ case 303:
					/* if (!(_i$1 < _ref$5.$length)) { break; } */ if(!(_i$1 < _ref$5.$length)) { $s = 304; continue; }
					arg$2 = ((_i$1 < 0 || _i$1 >= _ref$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$5.$array[_ref$5.$offset + _i$1]);
					_r$81 = check[0].rawExpr(x1, arg$2, $ifaceNil); /* */ $s = 305; case 305: if($c) { $c = false; _r$81 = _r$81.$blk(); } if (_r$81 && _r$81.$blk !== undefined) { break s; }
					_r$81;
					_r$82 = x1.pos(); /* */ $s = 306; case 306: if($c) { $c = false; _r$82 = _r$82.$blk(); } if (_r$82 && _r$82.$blk !== undefined) { break s; }
					_arg$25 = new token.Pos(_r$82);
					_arg$26 = x1;
					$r = check[0].dump("%s: %s", new sliceType$4([_arg$25, _arg$26])); /* */ $s = 307; case 307: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					x1 = t[0];
					_i$1++;
				/* } */ $s = 303; continue; case 304:
				$s = 37; continue;
			/* } else { */ case 36:
				unreachable();
			/* } */ case 37:
		case 18:
		_ = true;
		$s = -1; return _;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  _; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.builtin }; } $f.S = S; $f.T = T; $f.T$1 = T$1; $f.T$2 = T$2; $f._ = _; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$12 = _arg$12; $f._arg$13 = _arg$13; $f._arg$14 = _arg$14; $f._arg$15 = _arg$15; $f._arg$16 = _arg$16; $f._arg$17 = _arg$17; $f._arg$18 = _arg$18; $f._arg$19 = _arg$19; $f._arg$2 = _arg$2; $f._arg$20 = _arg$20; $f._arg$21 = _arg$21; $f._arg$22 = _arg$22; $f._arg$23 = _arg$23; $f._arg$24 = _arg$24; $f._arg$25 = _arg$25; $f._arg$26 = _arg$26; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$4 = _r$4; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$44 = _r$44; $f._r$45 = _r$45; $f._r$46 = _r$46; $f._r$47 = _r$47; $f._r$48 = _r$48; $f._r$49 = _r$49; $f._r$5 = _r$5; $f._r$50 = _r$50; $f._r$51 = _r$51; $f._r$52 = _r$52; $f._r$53 = _r$53; $f._r$54 = _r$54; $f._r$55 = _r$55; $f._r$56 = _r$56; $f._r$57 = _r$57; $f._r$58 = _r$58; $f._r$59 = _r$59; $f._r$6 = _r$6; $f._r$60 = _r$60; $f._r$61 = _r$61; $f._r$62 = _r$62; $f._r$63 = _r$63; $f._r$64 = _r$64; $f._r$65 = _r$65; $f._r$66 = _r$66; $f._r$67 = _r$67; $f._r$68 = _r$68; $f._r$69 = _r$69; $f._r$7 = _r$7; $f._r$70 = _r$70; $f._r$71 = _r$71; $f._r$72 = _r$72; $f._r$73 = _r$73; $f._r$74 = _r$74; $f._r$75 = _r$75; $f._r$76 = _r$76; $f._r$77 = _r$77; $f._r$78 = _r$78; $f._r$79 = _r$79; $f._r$8 = _r$8; $f._r$80 = _r$80; $f._r$81 = _r$81; $f._r$82 = _r$82; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._v = _v; $f._v$1 = _v$1; $f.alist = alist; $f.arg = arg; $f.arg$1 = arg$1; $f.arg$2 = arg$2; $f.arg0 = arg0; $f.arg0$1 = arg0$1; $f.base = base; $f.bin = bin; $f.c = c; $f.call = call; $f.check = check; $f.d = d; $f.dst = dst; $f.i = i; $f.id = id; $f.index = index; $f.indirect = indirect; $f.m = m; $f.min = min; $f.mode = mode; $f.msg = msg; $f.nargs = nargs; $f.obj = obj; $f.offs = offs; $f.ok = ok; $f.params = params; $f.params$1 = params$1; $f.res = res; $f.res$1 = res$1; $f.resTyp = resTyp; $f.resTyp$1 = resTyp$1; $f.s = s; $f.s$1 = s$1; $f.sel = sel; $f.selx = selx; $f.sig = sig; $f.sig$1 = sig$1; $f.sizes = sizes; $f.src = src; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.t$3 = t$3; $f.t$4 = t$4; $f.t$5 = t$5; $f.t$6 = t$6; $f.t$7 = t$7; $f.toFloat = toFloat; $f.typ = typ; $f.val = val; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x1 = x1; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Checker.prototype.builtin = function(x, call, id) { return this.$val.builtin(x, call, id); };
	makeSig = function(res, args) {
		var _i, _r, _ref, args, i, list, param, params, res, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; args = $f.args; i = $f.i; list = $f.list; param = $f.param; params = $f.params; res = $f.res; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		list = $makeSlice(sliceType$6, args.$length);
		_ref = args;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			param = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + i] = NewVar(0, ptrType$2.nil, "", Default(param)));
			_i++;
		}
		params = NewTuple(list);
		result = ptrType$16.nil;
		/* */ if (!($interfaceIsEqual(res, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(res, $ifaceNil))) { */ case 1:
			_r = isUntyped(res); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = assert(!_r); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			result = NewTuple(new sliceType$6([NewVar(0, ptrType$2.nil, "", res)]));
		/* } */ case 2:
		$s = -1; return new Signature.ptr(ptrType$1.nil, ptrType$10.nil, params, result, false);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeSig }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.args = args; $f.i = i; $f.list = list; $f.param = param; $f.params = params; $f.res = res; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	implicitArrayDeref = function(typ) {
		var _r, _tuple, _tuple$1, a, ok, ok$1, p, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(typ, ptrType$17, true);
		p = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = p.base.Underlying(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = $assertType(_r, ptrType$13, true);
			a = _tuple$1[0];
			ok$1 = _tuple$1[1];
			if (ok$1) {
				$s = -1; return a;
			}
		/* } */ case 2:
		$s = -1; return typ;
		/* */ } return; } if ($f === undefined) { $f = { $blk: implicitArrayDeref }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	unparen = function(e) {
		var _tuple, e, ok, p;
		while (true) {
			_tuple = $assertType(e, ptrType$18, true);
			p = _tuple[0];
			ok = _tuple[1];
			if (!ok) {
				return e;
			}
			e = p.X;
		}
	};
	substitute = function(where, what) {
		var _ref, what, where;
		_ref = where;
		if ($assertType(_ref, ptrType$17, true)[1]) {
			return NewPointer(substitute($assertType(where, ptrType$17).Elem(), what));
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			if ($assertType(where, ptrType$4).kind === 26) {
				return what;
			}
			return $assertType(where, ptrType$4);
		}
		return $ifaceNil;
	};
	Checker.ptr.prototype.call = function(x, e) {
		var T, _1, _2, _3, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, arg, check, e, id, n, n$1, ok, sig, wcard, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; _1 = $f._1; _2 = $f._2; _3 = $f._3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; arg = $f.arg; check = $f.check; e = $f.e; id = $f.id; n = $f.n; n$1 = $f.n$1; ok = $f.ok; sig = $f.sig; wcard = $f.wcard; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = [check];
		e = [e];
		check[0] = this;
		$r = check[0].exprOrType(x, e[0].Fun); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_1 = x.mode;
			/* */ if (_1 === (0)) { $s = 3; continue; }
			/* */ if (_1 === (3)) { $s = 4; continue; }
			/* */ if (_1 === (2)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (0)) { */ case 3:
				$r = check[0].use(e[0].Args); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				x.mode = 0;
				x.expr = e[0];
				$s = -1; return 2;
			/* } else if (_1 === (3)) { */ case 4:
				T = x.typ;
				x.mode = 0;
					n = e[0].Args.$length;
					_2 = n;
					/* */ if (_2 === (0)) { $s = 10; continue; }
					/* */ if (_2 === (1)) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (_2 === (0)) { */ case 10:
						$r = check[0].errorf(e[0].Rparen, "missing argument in conversion to %s", new sliceType$4([T])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 13; continue;
					/* } else if (_2 === (1)) { */ case 11:
						$r = check[0].expr(x, (x$1 = e[0].Args, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0]))); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* */ if (!((x.mode === 0))) { $s = 16; continue; }
						/* */ $s = 17; continue;
						/* if (!((x.mode === 0))) { */ case 16:
							$r = check[0].conversion(x, T); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 17:
						$s = 13; continue;
					/* } else { */ case 12:
						_r = (x$2 = e[0].Args, x$3 = n - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])).Pos(); /* */ $s = 19; case 19: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						$r = check[0].errorf(_r, "too many arguments in conversion to %s", new sliceType$4([T])); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 13:
				case 9:
				x.expr = e[0];
				$s = -1; return 0;
			/* } else if (_1 === (2)) { */ case 5:
				id = x.id;
				_r$1 = check[0].builtin(x, e[0], id); /* */ $s = 23; case 23: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (!_r$1) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (!_r$1) { */ case 21:
					x.mode = 0;
				/* } */ case 22:
				x.expr = e[0];
				if (!((x.mode === 0)) && !((x.mode === 4))) {
					check[0].context.hasCallOrRecv = true;
				}
				$s = -1; return ((id < 0 || id >= predeclaredFuncs.length) ? ($throwRuntimeError("index out of range"), undefined) : predeclaredFuncs[id]).kind;
			/* } else { */ case 6:
				_r$2 = x.typ.Underlying(); /* */ $s = 24; case 24: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = $assertType(_r$2, ptrType$19, true);
				sig = _tuple[0];
				/* */ if (sig === ptrType$19.nil) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (sig === ptrType$19.nil) { */ case 25:
					_r$3 = x.pos(); /* */ $s = 27; case 27: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$r = check[0].invalidOp(_r$3, "cannot call non-function %s", new sliceType$4([x])); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					x.mode = 0;
					x.expr = e[0];
					$s = -1; return 2;
				/* } */ case 26:
				_r$4 = unpack((function(check, e) { return function $b(x$4, i) {
					var i, x$4, x$5, $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					$r = check[0].multiExpr(x$4, (x$5 = e[0].Args, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i]))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
					/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.i = i; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
				}; })(check, e), e[0].Args.$length, false); /* */ $s = 29; case 29: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$1 = _r$4;
				arg = _tuple$1[0];
				n$1 = _tuple$1[1];
				wcard = $ifaceNil;
				/* */ if (!(arg === $throwNilPointerError)) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if (!(arg === $throwNilPointerError)) { */ case 30:
					_r$5 = check[0].arguments$(x, e[0], sig, arg, n$1); /* */ $s = 33; case 33: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					wcard = _r$5;
					$s = 32; continue;
				/* } else { */ case 31:
					x.mode = 0;
				/* } */ case 32:
				_3 = sig.results.Len();
				if (_3 === (0)) {
					x.mode = 1;
				} else if (_3 === (1)) {
					x.mode = 7;
					x.typ = (x$4 = sig.results.vars, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])).object.typ;
				} else {
					x.mode = 7;
					x.typ = sig.results;
				}
				if (!($interfaceIsEqual(wcard, $ifaceNil))) {
					_tuple$2 = $assertType(wcard, ptrType$4, true);
					ok = _tuple$2[1];
					if (!ok || !(($assertType(wcard, ptrType$4).kind === 26))) {
						x.typ = substitute(x.typ, wcard);
					}
				}
				x.expr = e[0];
				check[0].context.hasCallOrRecv = true;
				$s = -1; return 2;
			/* } */ case 7:
		case 2:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.call }; } $f.T = T; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.arg = arg; $f.check = check; $f.e = e; $f.id = id; $f.n = n; $f.n$1 = n$1; $f.ok = ok; $f.sig = sig; $f.wcard = wcard; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.call = function(x, e) { return this.$val.call(x, e); };
	Checker.ptr.prototype.use = function(arg) {
		var _i, _r, _ref, arg, check, e, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; arg = $f.arg; check = $f.check; e = $f.e; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = [x];
		check = this;
		x[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
		_ref = arg;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			e = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (!($interfaceIsEqual(e, $ifaceNil))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(e, $ifaceNil))) { */ case 3:
				_r = check.rawExpr(x[0], e, $ifaceNil); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.use }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.arg = arg; $f.check = check; $f.e = e; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.use = function(arg) { return this.$val.use(arg); };
	Checker.ptr.prototype.useLHS = function(arg) {
		var _i, _r, _r$1, _ref, _tuple, _tuple$1, _tuple$2, arg, check, e, ident, obj, v, v_used, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; arg = $f.arg; check = $f.check; e = $f.e; ident = $f.ident; obj = $f.obj; v = $f.v; v_used = $f.v_used; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = [x];
		check = this;
		x[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
		_ref = arg;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			e = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			v = ptrType$10.nil;
			v_used = false;
			_tuple = $assertType(unparen(e), ptrType$7, true);
			ident = _tuple[0];
			/* */ if (!(ident === ptrType$7.nil)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(ident === ptrType$7.nil)) { */ case 3:
				/* */ if (ident.Name === "_") { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (ident.Name === "_") { */ case 5:
					_i++;
					/* continue; */ $s = 1; continue;
				/* } */ case 6:
				_r = check.context.scope.LookupParent(ident.Name, 0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				obj = _tuple$1[1];
				if (!($interfaceIsEqual(obj, $ifaceNil))) {
					_tuple$2 = $assertType(obj, ptrType$10, true);
					w = _tuple$2[0];
					if (!(w === ptrType$10.nil) && w.object.pkg === check.pkg) {
						v = w;
						v_used = v.used;
					}
				}
			/* } */ case 4:
			_r$1 = check.rawExpr(x[0], e, $ifaceNil); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			if (!(v === ptrType$10.nil)) {
				v.used = v_used;
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.useLHS }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.arg = arg; $f.check = check; $f.e = e; $f.ident = ident; $f.obj = obj; $f.v = v; $f.v_used = v_used; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.useLHS = function(arg) { return this.$val.useLHS(arg); };
	Checker.ptr.prototype.useGetter = function(get, n) {
		var check, get, i, n, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; check = $f.check; get = $f.get; i = $f.i; n = $f.n; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = [x];
		check = this;
		x[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			$r = get(x[0], i); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.useGetter }; } $f.check = check; $f.get = get; $f.i = i; $f.n = n; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.useGetter = function(get, n) { return this.$val.useGetter(get, n); };
	unpack = function(get, n, allowCommaOk) {
		var _tuple, a, allowCommaOk, get, n, ok, t, x0, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; a = $f.a; allowCommaOk = $f.allowCommaOk; get = $f.get; n = $f.n; ok = $f.ok; t = $f.t; x0 = $f.x0; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		t = [t];
		x0 = [x0];
		if (!((n === 1))) {
			$s = -1; return [get, n, false];
		}
		x0[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
		$r = get(x0[0], 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (x0[0].mode === 0) {
			$s = -1; return [$throwNilPointerError, 0, false];
		}
		_tuple = $assertType(x0[0].typ, ptrType$16, true);
		t[0] = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			$s = -1; return [(function(a, t, x0) { return function(x, i) {
				var i, x;
				x.mode = 7;
				x.expr = x0[0].expr;
				x.typ = t[0].At(i).object.typ;
			}; })(a, t, x0), t[0].Len(), false];
		}
		if ((x0[0].mode === 6) || (x0[0].mode === 8)) {
			if (allowCommaOk) {
				a[0] = $toNativeArray($kindInterface, [x0[0].typ, (19 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 19])]);
				$s = -1; return [(function(a, t, x0) { return function(x, i) {
					var i, x;
					x.mode = 7;
					x.expr = x0[0].expr;
					x.typ = ((i < 0 || i >= a[0].length) ? ($throwRuntimeError("index out of range"), undefined) : a[0][i]);
				}; })(a, t, x0), 2, true];
			}
			x0[0].mode = 7;
		}
		$s = -1; return [(function(a, t, x0) { return function(x, i) {
			var i, x;
			if (!((i === 0))) {
				unreachable();
			}
			operand.copy(x, x0[0]);
		}; })(a, t, x0), 1, false];
		/* */ } return; } if ($f === undefined) { $f = { $blk: unpack }; } $f._tuple = _tuple; $f.a = a; $f.allowCommaOk = allowCommaOk; $f.get = get; $f.n = n; $f.ok = ok; $f.t = t; $f.x0 = x0; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.ptr.prototype.arguments$ = function(x, call, sig, arg, n) {
		var _r, arg, call, check, ellipsis, i, n, sig, wildc, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; arg = $f.arg; call = $f.call; check = $f.check; ellipsis = $f.ellipsis; i = $f.i; n = $f.n; sig = $f.sig; wildc = $f.wildc; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wildc = $ifaceNil;
		check = this;
		/* */ if (new token.Pos(call.Ellipsis).IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (new token.Pos(call.Ellipsis).IsValid()) { */ case 1:
			/* */ if (!sig.variadic) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!sig.variadic) { */ case 3:
				$r = check.errorf(call.Ellipsis, "cannot use ... in call to non-variadic %s", new sliceType$4([call.Fun])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = check.useGetter(arg, n); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				wildc = $ifaceNil;
				$s = -1; return wildc;
			/* } */ case 4:
			/* */ if ((call.Args.$length === 1) && n > 1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((call.Args.$length === 1) && n > 1) { */ case 7:
				$r = check.errorf(call.Ellipsis, "cannot use ... with %d-valued %s", new sliceType$4([new $Int(n), (x$1 = call.Args, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0]))])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = check.useGetter(arg, n); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				wildc = $ifaceNil;
				$s = -1; return wildc;
			/* } */ case 8:
		/* } */ case 2:
		i = 0;
		/* while (true) { */ case 11:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 12; continue; }
			$r = arg(x, i); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!((x.mode === 0))) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!((x.mode === 0))) { */ case 14:
				ellipsis = 0;
				if ((i === (n - 1 >> 0)) && new token.Pos(call.Ellipsis).IsValid()) {
					ellipsis = call.Ellipsis;
				}
				_r = check.argument(call.Fun, sig, i, x, ellipsis); /* */ $s = 16; case 16: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				wildc = _r;
			/* } */ case 15:
			i = i + (1) >> 0;
		/* } */ $s = 11; continue; case 12:
		if (sig.variadic) {
			n = n + (1) >> 0;
		}
		/* */ if (n < sig.params.Len()) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (n < sig.params.Len()) { */ case 17:
			$r = check.errorf(call.Rparen, "too few arguments in call to %s", new sliceType$4([call.Fun])); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 18:
		wildc = wildc;
		$s = -1; return wildc;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.arguments$ }; } $f._r = _r; $f.arg = arg; $f.call = call; $f.check = check; $f.ellipsis = ellipsis; $f.i = i; $f.n = n; $f.sig = sig; $f.wildc = wildc; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.arguments$ = function(x, call, sig, arg, n) { return this.$val.arguments$(x, call, sig, arg, n); };
	wildcard = function(a, b) {
		var _ref, a, b;
		_ref = b;
		if ($assertType(_ref, ptrType$17, true)[1]) {
			return wildcard($assertType(a, ptrType$17).Elem(), $assertType(b, ptrType$17).Elem());
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			return a;
		}
		return $ifaceNil;
	};
	Checker.ptr.prototype.argument = function(fun, sig, i, x, ellipsis) {
		var _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, check, ellipsis, fun, i, n, ok, ok$1, sig, typ, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; check = $f.check; ellipsis = $f.ellipsis; fun = $f.fun; i = $f.i; n = $f.n; ok = $f.ok; ok$1 = $f.ok$1; sig = $f.sig; typ = $f.typ; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		$r = check.singleValue(x); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (x.mode === 0) {
			$s = -1; return $ifaceNil;
		}
		n = sig.params.Len();
		typ = $ifaceNil;
			/* */ if (i < n) { $s = 3; continue; }
			/* */ if (sig.variadic) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i < n) { */ case 3:
				typ = (x$1 = sig.params.vars, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).object.typ;
				$s = 6; continue;
			/* } else if (sig.variadic) { */ case 4:
				typ = (x$2 = sig.params.vars, x$3 = n - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])).object.typ;
				/* */ if (false) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (false) { */ case 7:
					_tuple = $assertType(typ, ptrType$12, true);
					ok = _tuple[1];
					/* */ if (!ok) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!ok) { */ case 9:
						$r = check.dump("%s: expected unnamed slice type, got %s", new sliceType$4([new token.Pos((x$4 = sig.params.vars, x$5 = n - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])).object.Pos()), typ])); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 10:
				/* } */ case 8:
				$s = 6; continue;
			/* } else { */ case 5:
				_r = x.pos(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = check.errorf(_r, "too many arguments", new sliceType$4([])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return $ifaceNil;
			/* } */ case 6:
		case 2:
		/* */ if (new token.Pos(ellipsis).IsValid()) { $s = 14; continue; }
		/* */ if (sig.variadic && i >= (n - 1 >> 0)) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (new token.Pos(ellipsis).IsValid()) { */ case 14:
			/* */ if (!((i === (n - 1 >> 0)))) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (!((i === (n - 1 >> 0)))) { */ case 17:
				$r = check.errorf(ellipsis, "can only use ... with matching parameter", new sliceType$4([])); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return $ifaceNil;
			/* } */ case 18:
			_r$1 = x.typ.Underlying(); /* */ $s = 20; case 20: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = $assertType(_r$1, ptrType$12, true);
			ok$1 = _tuple$1[1];
			/* */ if (!ok$1 && !($interfaceIsEqual(x.typ, (25 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 25])))) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (!ok$1 && !($interfaceIsEqual(x.typ, (25 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 25])))) { */ case 21:
				_r$2 = x.pos(); /* */ $s = 23; case 23: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = check.errorf(_r$2, "cannot use %s as parameter of type %s", new sliceType$4([x, typ])); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return $ifaceNil;
			/* } */ case 22:
			$s = 16; continue;
		/* } else if (sig.variadic && i >= (n - 1 >> 0)) { */ case 15:
			typ = $assertType(typ, ptrType$12).elem;
		/* } */ case 16:
		_arg = x;
		_arg$1 = typ;
		_r$3 = check.sprintf("argument to %s", new sliceType$4([fun])); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$2 = _r$3;
		$r = check.assignment(_arg, _arg$1, _arg$2); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return wildcard(x.typ, typ);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.argument }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.check = check; $f.ellipsis = ellipsis; $f.fun = fun; $f.i = i; $f.n = n; $f.ok = ok; $f.ok$1 = ok$1; $f.sig = sig; $f.typ = typ; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.argument = function(fun, sig, i, x, ellipsis) { return this.$val.argument(fun, sig, i, x, ellipsis); };
	Checker.ptr.prototype.selector = function(x, e) {
		var _arg, _arg$1, _arg$2, _arg$3, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _v, check, e, exp, exp$1, exp$2, exp$3, exp$4, exp$5, exp$6, ident, index, indirect, m, m$1, mset, obj, obj$1, obj$2, obj$3, obj$4, ok, ok$1, params, pkg, pname, sel, sig, sig$1, typ, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _v = $f._v; check = $f.check; e = $f.e; exp = $f.exp; exp$1 = $f.exp$1; exp$2 = $f.exp$2; exp$3 = $f.exp$3; exp$4 = $f.exp$4; exp$5 = $f.exp$5; exp$6 = $f.exp$6; ident = $f.ident; index = $f.index; indirect = $f.indirect; m = $f.m; m$1 = $f.m$1; mset = $f.mset; obj = $f.obj; obj$1 = $f.obj$1; obj$2 = $f.obj$2; obj$3 = $f.obj$3; obj$4 = $f.obj$4; ok = $f.ok; ok$1 = $f.ok$1; params = $f.params; pkg = $f.pkg; pname = $f.pname; sel = $f.sel; sig = $f.sig; sig$1 = $f.sig$1; typ = $f.typ; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		sig = [sig];
		check = this;
		obj = $ifaceNil;
		index = sliceType$11.nil;
		indirect = false;
		sel = e.Sel.Name;
		_tuple = $assertType(e.X, ptrType$7, true);
		ident = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = check.context.scope.LookupParent(ident.Name, check.pos); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			obj$1 = _tuple$1[1];
			_tuple$2 = $assertType(obj$1, ptrType$20, true);
			pname = _tuple$2[0];
			/* */ if (!(pname === ptrType$20.nil)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!(pname === ptrType$20.nil)) { */ case 4:
				assert(pname.object.pkg === check.pkg);
				check.recordUse(ident, pname);
				pname.used = true;
				pkg = pname.imported;
				exp = pkg.scope.Lookup(sel);
				/* */ if ($interfaceIsEqual(exp, $ifaceNil)) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ($interfaceIsEqual(exp, $ifaceNil)) { */ case 6:
					/* */ if (!pkg.fake) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (!pkg.fake) { */ case 8:
						_r$1 = e.Pos(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$r = check.errorf(_r$1, "%s not declared by package %s", new sliceType$4([new $String(sel), new $String(pkg.name)])); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 9:
					/* goto Error */ $s = 12; continue;
				/* } */ case 7:
				_r$2 = exp.Exported(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if (!_r$2) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (!_r$2) { */ case 13:
					_r$3 = e.Pos(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$r = check.errorf(_r$3, "%s not exported by package %s", new sliceType$4([new $String(sel), new $String(pkg.name)])); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 14:
				check.recordUse(e.Sel, exp);
				_ref = exp;
				/* */ if ($assertType(_ref, ptrType$3, true)[1]) { $s = 18; continue; }
				/* */ if ($assertType(_ref, ptrType$21, true)[1]) { $s = 19; continue; }
				/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 20; continue; }
				/* */ if ($assertType(_ref, ptrType$5, true)[1]) { $s = 21; continue; }
				/* */ if ($assertType(_ref, ptrType$22, true)[1]) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if ($assertType(_ref, ptrType$3, true)[1]) { */ case 18:
					exp$1 = _ref.$val;
					assert(!($interfaceIsEqual(exp$1.Val(), $ifaceNil)));
					x.mode = 4;
					x.typ = exp$1.object.typ;
					x.val = exp$1.val;
					$s = 24; continue;
				/* } else if ($assertType(_ref, ptrType$21, true)[1]) { */ case 19:
					exp$2 = _ref.$val;
					x.mode = 3;
					x.typ = exp$2.object.typ;
					$s = 24; continue;
				/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 20:
					exp$3 = _ref.$val;
					x.mode = 5;
					x.typ = exp$3.object.typ;
					$s = 24; continue;
				/* } else if ($assertType(_ref, ptrType$5, true)[1]) { */ case 21:
					exp$4 = _ref.$val;
					x.mode = 7;
					x.typ = exp$4.object.typ;
					$s = 24; continue;
				/* } else if ($assertType(_ref, ptrType$22, true)[1]) { */ case 22:
					exp$5 = _ref.$val;
					x.mode = 2;
					x.typ = exp$5.object.typ;
					x.id = exp$5.id;
					$s = 24; continue;
				/* } else { */ case 23:
					exp$6 = _ref;
					$r = check.dump("unexpected object %v", new sliceType$4([exp$6])); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					unreachable();
				/* } */ case 24:
				x.expr = e;
				$s = -1; return;
			/* } */ case 5:
		/* } */ case 2:
		$r = check.exprOrType(x, e.X); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (x.mode === 0) { $s = 27; continue; }
		/* */ $s = 28; continue;
		/* if (x.mode === 0) { */ case 27:
			/* goto Error */ $s = 12; continue;
		/* } */ case 28:
		_r$4 = LookupFieldOrMethod(x.typ, x.mode === 5, check.pkg, sel); /* */ $s = 29; case 29: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$3 = _r$4;
		obj = _tuple$3[0];
		index = _tuple$3[1];
		indirect = _tuple$3[2];
		/* */ if ($interfaceIsEqual(obj, $ifaceNil)) { $s = 30; continue; }
		/* */ $s = 31; continue;
		/* if ($interfaceIsEqual(obj, $ifaceNil)) { */ case 30:
				/* */ if (!(index === sliceType$11.nil)) { $s = 33; continue; }
				/* */ if (indirect) { $s = 34; continue; }
				/* */ $s = 35; continue;
				/* if (!(index === sliceType$11.nil)) { */ case 33:
					_r$5 = e.Pos(); /* */ $s = 37; case 37: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$r = check.invalidOp(_r$5, "ambiguous selector %s", new sliceType$4([new $String(sel)])); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 36; continue;
				/* } else if (indirect) { */ case 34:
					_r$6 = e.Pos(); /* */ $s = 39; case 39: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$r = check.invalidOp(_r$6, "%s is not in method set of %s", new sliceType$4([new $String(sel), x.typ])); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 36; continue;
				/* } else { */ case 35:
					_r$7 = e.Pos(); /* */ $s = 41; case 41: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$r = check.invalidOp(_r$7, "%s has no field or method %s", new sliceType$4([x, new $String(sel)])); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 36:
			case 32:
			/* goto Error */ $s = 12; continue;
		/* } */ case 31:
		/* */ if (x.mode === 3) { $s = 43; continue; }
		/* */ $s = 44; continue;
		/* if (x.mode === 3) { */ case 43:
			_tuple$4 = $assertType(obj, ptrType$5, true);
			m = _tuple$4[0];
			/* */ if (m === ptrType$5.nil) { $s = 46; continue; }
			/* */ $s = 47; continue;
			/* if (m === ptrType$5.nil) { */ case 46:
				_r$8 = e.Pos(); /* */ $s = 48; case 48: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$r = check.invalidOp(_r$8, "%s has no method %s", new sliceType$4([x, new $String(sel)])); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* goto Error */ $s = 12; continue;
			/* } */ case 47:
			check.recordSelection(e, 2, x.typ, m, index, indirect);
			params = sliceType$6.nil;
			sig$1 = $assertType(m.object.typ, ptrType$19);
			if (!(sig$1.params === ptrType$16.nil)) {
				params = sig$1.params.vars;
			}
			x.mode = 7;
			x.typ = new Signature.ptr(ptrType$1.nil, ptrType$10.nil, NewTuple($appendSlice(new sliceType$6([NewVar(0, check.pkg, "", x.typ)]), params)), sig$1.results, sig$1.variadic);
			check.addDeclDep(m);
			$s = 45; continue;
		/* } else { */ case 44:
			_ref$1 = obj;
			/* */ if ($assertType(_ref$1, ptrType$10, true)[1]) { $s = 50; continue; }
			/* */ if ($assertType(_ref$1, ptrType$5, true)[1]) { $s = 51; continue; }
			/* */ $s = 52; continue;
			/* if ($assertType(_ref$1, ptrType$10, true)[1]) { */ case 50:
				obj$2 = _ref$1.$val;
				check.recordSelection(e, 0, x.typ, obj$2, index, indirect);
				if ((x.mode === 5) || indirect) {
					x.mode = 5;
				} else {
					x.mode = 7;
				}
				x.typ = obj$2.object.typ;
				$s = 53; continue;
			/* } else if ($assertType(_ref$1, ptrType$5, true)[1]) { */ case 51:
				obj$3 = _ref$1.$val;
				check.recordSelection(e, 1, x.typ, obj$3, index, indirect);
				/* */ if (false) { $s = 54; continue; }
				/* */ $s = 55; continue;
				/* if (false) { */ case 54:
					typ = x.typ;
					/* */ if (x.mode === 5) { $s = 56; continue; }
					/* */ $s = 57; continue;
					/* if (x.mode === 5) { */ case 56:
						_tuple$5 = $assertType(typ, ptrType$17, true);
						ok$1 = _tuple$5[1];
						if (!(!ok$1)) { _v = false; $s = 60; continue s; }
						_r$9 = IsInterface(typ); /* */ $s = 61; case 61: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_v = !_r$9; case 60:
						/* */ if (_v) { $s = 58; continue; }
						/* */ $s = 59; continue;
						/* if (_v) { */ case 58:
							typ = new Pointer.ptr(typ);
						/* } */ case 59:
					/* } */ case 57:
					_r$10 = NewMethodSet(typ); /* */ $s = 62; case 62: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					mset = _r$10;
					_r$11 = mset.Lookup(check.pkg, sel); /* */ $s = 63; case 63: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					m$1 = _r$11;
					/* */ if (m$1 === ptrType.nil || !($interfaceIsEqual(m$1.obj, obj$3))) { $s = 64; continue; }
					/* */ $s = 65; continue;
					/* if (m$1 === ptrType.nil || !($interfaceIsEqual(m$1.obj, obj$3))) { */ case 64:
						_r$12 = e.Pos(); /* */ $s = 66; case 66: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						_arg = new token.Pos(_r$12);
						_arg$1 = typ;
						_arg$2 = new $String(obj$3.object.name);
						_arg$3 = m$1;
						$r = check.dump("%s: (%s).%v -> %s", new sliceType$4([_arg, _arg$1, _arg$2, _arg$3])); /* */ $s = 67; case 67: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$r = check.dump("%s\n", new sliceType$4([mset])); /* */ $s = 68; case 68: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$panic(new $String("method sets and lookup don't agree"));
					/* } */ case 65:
				/* } */ case 55:
				x.mode = 7;
				sig[0] = $clone($assertType(obj$3.object.typ, ptrType$19), Signature);
				sig[0].recv = ptrType$10.nil;
				x.typ = sig[0];
				check.addDeclDep(obj$3);
				$s = 53; continue;
			/* } else { */ case 52:
				obj$4 = _ref$1;
				unreachable();
			/* } */ case 53:
		/* } */ case 45:
		x.expr = e;
		$s = -1; return;
		/* Error: */ case 12:
		x.mode = 0;
		x.expr = e;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.selector }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._v = _v; $f.check = check; $f.e = e; $f.exp = exp; $f.exp$1 = exp$1; $f.exp$2 = exp$2; $f.exp$3 = exp$3; $f.exp$4 = exp$4; $f.exp$5 = exp$5; $f.exp$6 = exp$6; $f.ident = ident; $f.index = index; $f.indirect = indirect; $f.m = m; $f.m$1 = m$1; $f.mset = mset; $f.obj = obj; $f.obj$1 = obj$1; $f.obj$2 = obj$2; $f.obj$3 = obj$3; $f.obj$4 = obj$4; $f.ok = ok; $f.ok$1 = ok$1; $f.params = params; $f.pkg = pkg; $f.pname = pname; $f.sel = sel; $f.sig = sig; $f.sig$1 = sig$1; $f.typ = typ; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.selector = function(x, e) { return this.$val.selector(x, e); };
	Checker.ptr.prototype.addUnusedDotImport = function(scope, pkg, pos) {
		var _entry, _key, _key$1, check, m, mm, pkg, pos, scope;
		check = this;
		mm = check.unusedDotImports;
		if (mm === false) {
			mm = {};
			check.unusedDotImports = mm;
		}
		m = (_entry = mm[ptrType$1.keyFor(scope)], _entry !== undefined ? _entry.v : false);
		if (m === false) {
			m = {};
			_key = scope; (mm || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: m };
		}
		_key$1 = pkg; (m || $throwRuntimeError("assignment to entry in nil map"))[ptrType$2.keyFor(_key$1)] = { k: _key$1, v: pos };
	};
	Checker.prototype.addUnusedDotImport = function(scope, pkg, pos) { return this.$val.addUnusedDotImport(scope, pkg, pos); };
	Checker.ptr.prototype.addDeclDep = function(to) {
		var _entry, _tuple, check, found, from, to;
		check = this;
		from = check.context.decl;
		if (from === ptrType$23.nil) {
			return;
		}
		_tuple = (_entry = check.objMap[Object.keyFor(to)], _entry !== undefined ? [_entry.v, true] : [ptrType$23.nil, false]);
		found = _tuple[1];
		if (!found) {
			return;
		}
		from.addDep(to);
	};
	Checker.prototype.addDeclDep = function(to) { return this.$val.addDeclDep(to); };
	Checker.ptr.prototype.assocMethod = function(tname, meth) {
		var _entry, _key, check, m, meth, tname;
		check = this;
		m = check.methods;
		if (m === false) {
			m = {};
			check.methods = m;
		}
		_key = tname; (m || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $append((_entry = m[$String.keyFor(tname)], _entry !== undefined ? _entry.v : sliceType$1.nil), meth) };
	};
	Checker.prototype.assocMethod = function(tname, meth) { return this.$val.assocMethod(tname, meth); };
	Checker.ptr.prototype.rememberUntyped = function(e, lhs, mode, typ, val) {
		var _key, check, e, lhs, m, mode, typ, val;
		check = this;
		m = check.untyped;
		if (m === false) {
			m = {};
			check.untyped = m;
		}
		_key = e; (m || $throwRuntimeError("assignment to entry in nil map"))[ast.Expr.keyFor(_key)] = { k: _key, v: new exprInfo.ptr(lhs, mode, typ, val) };
	};
	Checker.prototype.rememberUntyped = function(e, lhs, mode, typ, val) { return this.$val.rememberUntyped(e, lhs, mode, typ, val); };
	Checker.ptr.prototype.later = function(name, decl, sig, body) {
		var body, check, decl, name, sig;
		check = this;
		check.funcs = $append(check.funcs, new funcInfo.ptr(name, decl, sig, body));
	};
	Checker.prototype.later = function(name, decl, sig, body) { return this.$val.later(name, decl, sig, body); };
	Checker.ptr.prototype.delay = function(f) {
		var check, f;
		check = this;
		check.delayed = $append(check.delayed, f);
	};
	Checker.prototype.delay = function(f) { return this.$val.delay(f); };
	NewChecker = function(conf, fset, pkg, info) {
		var conf, fset, info, pkg;
		if (conf === ptrType$8.nil) {
			conf = new Config.ptr(false, false, $throwNilPointerError, $ifaceNil, $ifaceNil, false);
		}
		if (info === ptrType$24.nil) {
			info = new Info.ptr(false, false, false, false, false, false, sliceType$12.nil);
		}
		return new Checker.ptr(conf, fset, pkg, info, {}, {}, sliceType$13.nil, false, $ifaceNil, false, false, sliceType$14.nil, sliceType$15.nil, new context.ptr(ptrType$23.nil, ptrType$1.nil, $ifaceNil, ptrType$19.nil, false, false), 0, 0);
	};
	$pkg.NewChecker = NewChecker;
	Checker.ptr.prototype.initFiles = function(files) {
		var _1, _i, _ref, check, file, files, name, pkg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _ref = $f._ref; check = $f.check; file = $f.file; files = $f.files; name = $f.name; pkg = $f.pkg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		check.files = sliceType$13.nil;
		check.unusedDotImports = false;
		check.firstErr = $ifaceNil;
		check.methods = false;
		check.untyped = false;
		check.funcs = sliceType$14.nil;
		check.delayed = sliceType$15.nil;
		pkg = check.pkg;
		_ref = files;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			file = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				name = file.Name.Name;
				_1 = pkg.name;
				/* */ if (_1 === ("")) { $s = 4; continue; }
				/* */ if (_1 === (name)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_1 === ("")) { */ case 4:
					/* */ if (!(name === "_")) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (!(name === "_")) { */ case 8:
						pkg.name = name;
						$s = 10; continue;
					/* } else { */ case 9:
						$r = check.errorf(file.Name.Pos(), "invalid package name _", new sliceType$4([])); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 10:
					check.files = $append(check.files, file);
					$s = 7; continue;
				/* } else if (_1 === (name)) { */ case 5:
					check.files = $append(check.files, file);
					$s = 7; continue;
				/* } else { */ case 6:
					$r = check.errorf(file.Package, "package %s; expected %s", new sliceType$4([new $String(name), new $String(pkg.name)])); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 7:
			case 3:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.initFiles }; } $f._1 = _1; $f._i = _i; $f._ref = _ref; $f.check = check; $f.file = file; $f.files = files; $f.name = name; $f.pkg = pkg; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.initFiles = function(files) { return this.$val.initFiles(files); };
	Checker.ptr.prototype.handleBailout = function(err) {
		var _ref, check, err, p, p$1;
		check = this;
		_ref = $recover();
		if (_ref === $ifaceNil || $assertType(_ref, bailout, true)[1]) {
			p = _ref;
			err.$set(check.firstErr);
		} else {
			p$1 = _ref;
			$panic(p$1);
		}
	};
	Checker.prototype.handleBailout = function(err) { return this.$val.handleBailout(err); };
	Checker.ptr.prototype.Files = function(files) {
		var _r, check, files, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; check = $f.check; files = $f.files; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_r = check.checkFiles(files); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.Files }; } $f._r = _r; $f.check = check; $f.files = files; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.Files = function(files) { return this.$val.Files(files); };
	Checker.ptr.prototype.checkFiles = function(files) {
		var _i, _r, _ref, check, err, f, files, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; check = $f.check; err = $f.err; f = $f.f; files = $f.files; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		err[0] = $ifaceNil;
		check = this;
		$deferred.push([$methodVal(check, "handleBailout"), [(err.$ptr || (err.$ptr = new ptrType$28(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, err)))]]);
		$r = check.initFiles(files); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = check.collectObjects(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = check.resolveOrder(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = check.packageObjects(_r); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = check.functionBodies(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = check.initOrder(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!check.conf.DisableUnusedImportCheck) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!check.conf.DisableUnusedImportCheck) { */ case 7:
			$r = check.unusedImports(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		_ref = check.delayed;
		_i = 0;
		/* while (true) { */ case 10:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 11; continue; }
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = f(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 10; continue; case 11:
		$r = check.recordUntyped(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		check.pkg.complete = true;
		$s = -1; return err[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.checkFiles }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.check = check; $f.err = err; $f.f = f; $f.files = files; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Checker.prototype.checkFiles = function(files) { return this.$val.checkFiles(files); };
	Checker.ptr.prototype.recordUntyped = function() {
		var _arg, _arg$1, _arg$2, _entry, _i, _keys, _r, _r$1, _ref, _v, check, info, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _v = $f._v; check = $f.check; info = $f.info; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		if (true && check.Info.Types === false) {
			$s = -1; return;
		}
		_ref = check.untyped;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			x = _entry.k;
			info = $clone(_entry.v, exprInfo);
			if (!(false)) { _v = false; $s = 5; continue s; }
			_r = isTyped(info.typ); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				_r$1 = x.Pos(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_arg = new token.Pos(_r$1);
				_arg$1 = x;
				_arg$2 = info.typ;
				$r = check.dump("%s: %s (type %s) is typed", new sliceType$4([_arg, _arg$1, _arg$2])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				unreachable();
			/* } */ case 4:
			$r = check.recordTypeAndValue(x, info.mode, info.typ, info.val); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.recordUntyped }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._v = _v; $f.check = check; $f.info = info; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.recordUntyped = function() { return this.$val.recordUntyped(); };
	Checker.ptr.prototype.recordTypeAndValue = function(x, mode, typ, val) {
		var _key, _r, _v, check, m, mode, typ, val, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _key = $f._key; _r = $f._r; _v = $f._v; check = $f.check; m = $f.m; mode = $f.mode; typ = $f.typ; val = $f.val; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		assert(!($interfaceIsEqual(x, $ifaceNil)));
		assert(!($interfaceIsEqual(typ, $ifaceNil)));
		if (mode === 0) {
			$s = -1; return;
		}
		assert(!($interfaceIsEqual(typ, $ifaceNil)));
		/* */ if (mode === 4) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (mode === 4) { */ case 1:
			assert(!($interfaceIsEqual(val, $ifaceNil)));
			if ($interfaceIsEqual(typ, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]))) { _v = true; $s = 3; continue s; }
			_r = isConstType(typ); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 3:
			$r = assert(_v); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		m = check.Info.Types;
		if (!(m === false)) {
			_key = x; (m || $throwRuntimeError("assignment to entry in nil map"))[ast.Expr.keyFor(_key)] = { k: _key, v: new TypeAndValue.ptr(mode, typ, val) };
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.recordTypeAndValue }; } $f._key = _key; $f._r = _r; $f._v = _v; $f.check = check; $f.m = m; $f.mode = mode; $f.typ = typ; $f.val = val; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.recordTypeAndValue = function(x, mode, typ, val) { return this.$val.recordTypeAndValue(x, mode, typ, val); };
	Checker.ptr.prototype.recordBuiltinType = function(f, sig) {
		var _ref, check, f, p, p$1, p$2, sig, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _ref = $f._ref; check = $f.check; f = $f.f; p = $f.p; p$1 = $f.p$1; p$2 = $f.p$2; sig = $f.sig; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		/* while (true) { */ case 1:
			$r = check.recordTypeAndValue(f, 2, sig, $ifaceNil); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_ref = f;
			if ($assertType(_ref, ptrType$7, true)[1]) {
				p = _ref.$val;
				$s = -1; return;
			} else if ($assertType(_ref, ptrType$18, true)[1]) {
				p$1 = _ref.$val;
				f = p$1.X;
			} else {
				p$2 = _ref;
				unreachable();
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.recordBuiltinType }; } $f._ref = _ref; $f.check = check; $f.f = f; $f.p = p; $f.p$1 = p$1; $f.p$2 = p$2; $f.sig = sig; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.recordBuiltinType = function(f, sig) { return this.$val.recordBuiltinType(f, sig); };
	Checker.ptr.prototype.recordCommaOkTypes = function(x, a) {
		var _entry, _key, _r, _r$1, _r$2, _r$3, _tuple, _v, _v$1, a, check, m, p, pos, tv, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _v = $f._v; _v$1 = $f._v$1; a = $f.a; check = $f.check; m = $f.m; p = $f.p; pos = $f.pos; tv = $f.tv; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		assert(!($interfaceIsEqual(x, $ifaceNil)));
		if ($interfaceIsEqual(a[0], $ifaceNil) || $interfaceIsEqual(a[1], $ifaceNil)) {
			$s = -1; return;
		}
		_r = isTyped(a[0]); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r)) { _v$1 = false; $s = 2; continue s; }
		_r$1 = isTyped(a[1]); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v$1 = _r$1; case 2:
		if (!(_v$1)) { _v = false; $s = 1; continue s; }
		_r$2 = isBoolean(a[1]); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v = _r$2; case 1:
		$r = assert(_v); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		m = check.Info.Types;
		/* */ if (!(m === false)) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!(m === false)) { */ case 7:
			/* while (true) { */ case 9:
				tv = $clone((_entry = m[ast.Expr.keyFor(x)], _entry !== undefined ? _entry.v : new TypeAndValue.ptr(0, $ifaceNil, $ifaceNil)), TypeAndValue);
				assert(!($interfaceIsEqual(tv.Type, $ifaceNil)));
				_r$3 = x.Pos(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				pos = _r$3;
				tv.Type = NewTuple(new sliceType$6([NewVar(pos, check.pkg, "", a[0]), NewVar(pos, check.pkg, "", a[1])]));
				_key = x; (m || $throwRuntimeError("assignment to entry in nil map"))[ast.Expr.keyFor(_key)] = { k: _key, v: $clone(tv, TypeAndValue) };
				_tuple = $assertType(x, ptrType$18, true);
				p = _tuple[0];
				if (p === ptrType$18.nil) {
					/* break; */ $s = 10; continue;
				}
				x = p.X;
			/* } */ $s = 9; continue; case 10:
		/* } */ case 8:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.recordCommaOkTypes }; } $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._v = _v; $f._v$1 = _v$1; $f.a = a; $f.check = check; $f.m = m; $f.p = p; $f.pos = pos; $f.tv = tv; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.recordCommaOkTypes = function(x, a) { return this.$val.recordCommaOkTypes(x, a); };
	Checker.ptr.prototype.recordDef = function(id, obj) {
		var _key, check, id, m, obj;
		check = this;
		assert(!(id === ptrType$7.nil));
		m = check.Info.Defs;
		if (!(m === false)) {
			_key = id; (m || $throwRuntimeError("assignment to entry in nil map"))[ptrType$7.keyFor(_key)] = { k: _key, v: obj };
		}
	};
	Checker.prototype.recordDef = function(id, obj) { return this.$val.recordDef(id, obj); };
	Checker.ptr.prototype.recordUse = function(id, obj) {
		var _key, check, id, m, obj;
		check = this;
		assert(!(id === ptrType$7.nil));
		assert(!($interfaceIsEqual(obj, $ifaceNil)));
		m = check.Info.Uses;
		if (!(m === false)) {
			_key = id; (m || $throwRuntimeError("assignment to entry in nil map"))[ptrType$7.keyFor(_key)] = { k: _key, v: obj };
		}
	};
	Checker.prototype.recordUse = function(id, obj) { return this.$val.recordUse(id, obj); };
	Checker.ptr.prototype.recordImplicit = function(node, obj) {
		var _key, check, m, node, obj;
		check = this;
		assert(!($interfaceIsEqual(node, $ifaceNil)));
		assert(!($interfaceIsEqual(obj, $ifaceNil)));
		m = check.Info.Implicits;
		if (!(m === false)) {
			_key = node; (m || $throwRuntimeError("assignment to entry in nil map"))[ast.Node.keyFor(_key)] = { k: _key, v: obj };
		}
	};
	Checker.prototype.recordImplicit = function(node, obj) { return this.$val.recordImplicit(node, obj); };
	Checker.ptr.prototype.recordSelection = function(x, kind, recv, obj, index, indirect) {
		var _key, check, index, indirect, kind, m, obj, recv, x;
		check = this;
		assert(!($interfaceIsEqual(obj, $ifaceNil)) && ($interfaceIsEqual(recv, $ifaceNil) || index.$length > 0));
		check.recordUse(x.Sel, obj);
		m = check.Info.Selections;
		if (!(m === false)) {
			_key = x; (m || $throwRuntimeError("assignment to entry in nil map"))[ptrType$11.keyFor(_key)] = { k: _key, v: new Selection.ptr(kind, recv, obj, index, indirect) };
		}
	};
	Checker.prototype.recordSelection = function(x, kind, recv, obj, index, indirect) { return this.$val.recordSelection(x, kind, recv, obj, index, indirect); };
	Checker.ptr.prototype.recordScope = function(node, scope) {
		var _key, check, m, node, scope;
		check = this;
		assert(!($interfaceIsEqual(node, $ifaceNil)));
		assert(!(scope === ptrType$1.nil));
		m = check.Info.Scopes;
		if (!(m === false)) {
			_key = node; (m || $throwRuntimeError("assignment to entry in nil map"))[ast.Node.keyFor(_key)] = { k: _key, v: scope };
		}
	};
	Checker.prototype.recordScope = function(node, scope) { return this.$val.recordScope(node, scope); };
	Checker.ptr.prototype.conversion = function(x, T) {
		var T, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _v, _v$1, _v$2, _v$3, _v$4, check, codepoint, constArg, final$1, i, ok, ok$1, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; check = $f.check; codepoint = $f.codepoint; constArg = $f.constArg; final$1 = $f.final$1; i = $f.i; ok = $f.ok; ok$1 = $f.ok$1; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		constArg = x.mode === 4;
		ok = false;
			if (!(constArg)) { _v = false; $s = 5; continue s; }
			_r = isConstType(T); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 2; continue; }
			_r$1 = x.convertibleTo(check.conf, T); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 2:
					_r$2 = T.Underlying(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					t = $assertType(_r$2, ptrType$4);
					_r$3 = representableConst(x.val, check.conf, t, (x.$ptr_val || (x.$ptr_val = new ptrType$29(function() { return this.$target.val; }, function($v) { this.$target.val = $v; }, x)))); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (_r$3) { $s = 10; continue; }
					_r$4 = isInteger(x.typ); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					if (!(_r$4)) { _v$1 = false; $s = 14; continue s; }
					_r$5 = isString(t); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_v$1 = _r$5; case 14:
					/* */ if (_v$1) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (_r$3) { */ case 10:
						ok = true;
						$s = 12; continue;
					/* } else if (_v$1) { */ case 11:
						codepoint = new $Int64(-1, 4294967295);
						_r$6 = constant.Int64Val(x.val); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_tuple = _r$6;
						i = _tuple[0];
						ok$1 = _tuple[1];
						if (ok$1) {
							codepoint = i;
						}
						x.val = constant.MakeString(($encodeRune(codepoint.$low)));
						ok = true;
					/* } */ case 12:
				case 8:
				$s = 4; continue;
			/* } else if (_r$1) { */ case 3:
				x.mode = 7;
				ok = true;
			/* } */ case 4:
		case 1:
		/* */ if (!ok) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (!ok) { */ case 18:
			_r$7 = x.pos(); /* */ $s = 20; case 20: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$r = check.errorf(_r$7, "cannot convert %s to %s", new sliceType$4([x, T])); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			x.mode = 0;
			$s = -1; return;
		/* } */ case 19:
		_r$8 = isUntyped(x.typ); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		/* */ if (_r$8) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (_r$8) { */ case 22:
			final$1 = T;
			_r$9 = IsInterface(T); /* */ $s = 29; case 29: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			if (_r$9) { _v$2 = true; $s = 28; continue s; }
			if (!(constArg)) { _v$3 = false; $s = 30; continue s; }
			_r$10 = isConstType(T); /* */ $s = 31; case 31: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_v$3 = !_r$10; case 30:
			_v$2 = _v$3; case 28:
			/* */ if (_v$2) { $s = 25; continue; }
			_r$11 = isInteger(x.typ); /* */ $s = 33; case 33: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			if (!(_r$11)) { _v$4 = false; $s = 32; continue s; }
			_r$12 = isString(T); /* */ $s = 34; case 34: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_v$4 = _r$12; case 32:
			/* */ if (_v$4) { $s = 26; continue; }
			/* */ $s = 27; continue;
			/* if (_v$2) { */ case 25:
				final$1 = Default(x.typ);
				$s = 27; continue;
			/* } else if (_v$4) { */ case 26:
				final$1 = x.typ;
			/* } */ case 27:
			$r = check.updateExprType(x.expr, final$1, true); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 23:
		x.typ = T;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.conversion }; } $f.T = T; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f.check = check; $f.codepoint = codepoint; $f.constArg = constArg; $f.final$1 = final$1; $f.i = i; $f.ok = ok; $f.ok$1 = ok$1; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.conversion = function(x, T) { return this.$val.conversion(x, T); };
	operand.ptr.prototype.convertibleTo = function(conf, T) {
		var T, T$1, Tu, V, V$1, Vu, _arg, _arg$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _v, _v$1, _v$10, _v$2, _v$3, _v$4, _v$5, _v$6, _v$7, _v$8, _v$9, conf, ok, ok$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; T$1 = $f.T$1; Tu = $f.Tu; V = $f.V; V$1 = $f.V$1; Vu = $f.Vu; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; _v$1 = $f._v$1; _v$10 = $f._v$10; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; _v$5 = $f._v$5; _v$6 = $f._v$6; _v$7 = $f._v$7; _v$8 = $f._v$8; _v$9 = $f._v$9; conf = $f.conf; ok = $f.ok; ok$1 = $f.ok$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.assignableTo(conf, T, ptrType$9.nil); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$s = -1; return true;
		/* } */ case 2:
		V = x.typ;
		_r$1 = V.Underlying(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		Vu = _r$1;
		_r$2 = T.Underlying(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		Tu = _r$2;
		_r$3 = IdenticalIgnoreTags(Vu, Tu); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_r$3) { */ case 6:
			$s = -1; return true;
		/* } */ case 7:
		_tuple = $assertType(V, ptrType$17, true);
		V$1 = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (ok) { */ case 9:
			_tuple$1 = $assertType(T, ptrType$17, true);
			T$1 = _tuple$1[0];
			ok$1 = _tuple$1[1];
			/* */ if (ok$1) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (ok$1) { */ case 11:
				_r$4 = V$1.base.Underlying(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_arg = _r$4;
				_r$5 = T$1.base.Underlying(); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_arg$1 = _r$5;
				_r$6 = IdenticalIgnoreTags(_arg, _arg$1); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				/* */ if (_r$6) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (_r$6) { */ case 13:
					$s = -1; return true;
				/* } */ case 14:
			/* } */ case 12:
		/* } */ case 10:
		_r$7 = isInteger(V); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		if (_r$7) { _v$1 = true; $s = 21; continue s; }
		_r$8 = isFloat(V); /* */ $s = 23; case 23: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_v$1 = _r$8; case 21:
		if (!(_v$1)) { _v = false; $s = 20; continue s; }
		_r$9 = isInteger(T); /* */ $s = 25; case 25: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		if (_r$9) { _v$2 = true; $s = 24; continue s; }
		_r$10 = isFloat(T); /* */ $s = 26; case 26: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_v$2 = _r$10; case 24:
		_v = _v$2; case 20:
		/* */ if (_v) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (_v) { */ case 18:
			$s = -1; return true;
		/* } */ case 19:
		_r$11 = isComplex(V); /* */ $s = 30; case 30: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		if (!(_r$11)) { _v$3 = false; $s = 29; continue s; }
		_r$12 = isComplex(T); /* */ $s = 31; case 31: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_v$3 = _r$12; case 29:
		/* */ if (_v$3) { $s = 27; continue; }
		/* */ $s = 28; continue;
		/* if (_v$3) { */ case 27:
			$s = -1; return true;
		/* } */ case 28:
		_r$13 = isInteger(V); /* */ $s = 36; case 36: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		if (_r$13) { _v$5 = true; $s = 35; continue s; }
		_r$14 = isBytesOrRunes(Vu); /* */ $s = 37; case 37: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_v$5 = _r$14; case 35:
		if (!(_v$5)) { _v$4 = false; $s = 34; continue s; }
		_r$15 = isString(T); /* */ $s = 38; case 38: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_v$4 = _r$15; case 34:
		/* */ if (_v$4) { $s = 32; continue; }
		/* */ $s = 33; continue;
		/* if (_v$4) { */ case 32:
			$s = -1; return true;
		/* } */ case 33:
		_r$16 = isString(V); /* */ $s = 42; case 42: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		if (!(_r$16)) { _v$6 = false; $s = 41; continue s; }
		_r$17 = isBytesOrRunes(Tu); /* */ $s = 43; case 43: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_v$6 = _r$17; case 41:
		/* */ if (_v$6) { $s = 39; continue; }
		/* */ $s = 40; continue;
		/* if (_v$6) { */ case 39:
			$s = -1; return true;
		/* } */ case 40:
		_r$18 = isPointer(Vu); /* */ $s = 48; case 48: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		if (_r$18) { _v$8 = true; $s = 47; continue s; }
		_r$19 = isUintptr(Vu); /* */ $s = 49; case 49: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		_v$8 = _r$19; case 47:
		if (!(_v$8)) { _v$7 = false; $s = 46; continue s; }
		_r$20 = isUnsafePointer(T); /* */ $s = 50; case 50: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		_v$7 = _r$20; case 46:
		/* */ if (_v$7) { $s = 44; continue; }
		/* */ $s = 45; continue;
		/* if (_v$7) { */ case 44:
			$s = -1; return true;
		/* } */ case 45:
		_r$21 = isUnsafePointer(V); /* */ $s = 54; case 54: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		if (!(_r$21)) { _v$9 = false; $s = 53; continue s; }
		_r$22 = isPointer(Tu); /* */ $s = 56; case 56: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		if (_r$22) { _v$10 = true; $s = 55; continue s; }
		_r$23 = isUintptr(Tu); /* */ $s = 57; case 57: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		_v$10 = _r$23; case 55:
		_v$9 = _v$10; case 53:
		/* */ if (_v$9) { $s = 51; continue; }
		/* */ $s = 52; continue;
		/* if (_v$9) { */ case 51:
			$s = -1; return true;
		/* } */ case 52:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: operand.ptr.prototype.convertibleTo }; } $f.T = T; $f.T$1 = T$1; $f.Tu = Tu; $f.V = V; $f.V$1 = V$1; $f.Vu = Vu; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f._v$1 = _v$1; $f._v$10 = _v$10; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f._v$5 = _v$5; $f._v$6 = _v$6; $f._v$7 = _v$7; $f._v$8 = _v$8; $f._v$9 = _v$9; $f.conf = conf; $f.ok = ok; $f.ok$1 = ok$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	operand.prototype.convertibleTo = function(conf, T) { return this.$val.convertibleTo(conf, T); };
	isUintptr = function(typ) {
		var _r, _tuple, ok, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$4, true);
		t = _tuple[0];
		ok = _tuple[1];
		$s = -1; return ok && (t.kind === 12);
		/* */ } return; } if ($f === undefined) { $f = { $blk: isUintptr }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	isUnsafePointer = function(typ) {
		var _r, _tuple, ok, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$4, true);
		t = _tuple[0];
		ok = _tuple[1];
		$s = -1; return ok && (t.kind === 18);
		/* */ } return; } if ($f === undefined) { $f = { $blk: isUnsafePointer }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	isPointer = function(typ) {
		var _r, _tuple, ok, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$17, true);
		ok = _tuple[1];
		$s = -1; return ok;
		/* */ } return; } if ($f === undefined) { $f = { $blk: isPointer }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	isBytesOrRunes = function(typ) {
		var _r, _tuple, _tuple$1, ok, ok$1, s, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; ok = $f.ok; ok$1 = $f.ok$1; s = $f.s; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(typ, ptrType$12, true);
		s = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = s.elem.Underlying(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = $assertType(_r, ptrType$4, true);
			t = _tuple$1[0];
			ok$1 = _tuple$1[1];
			$s = -1; return ok$1 && ((t.kind === 8) || (t.kind === 5));
		/* } */ case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: isBytesOrRunes }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.ok = ok; $f.ok$1 = ok$1; $f.s = s; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.ptr.prototype.reportAltDecl = function(obj) {
		var _arg, _arg$1, _r, _r$1, check, obj, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; check = $f.check; obj = $f.obj; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_r = obj.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		pos = _r;
		/* */ if (new token.Pos(pos).IsValid()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (new token.Pos(pos).IsValid()) { */ case 2:
			_arg = pos;
			_r$1 = obj.Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$1);
			$r = check.errorf(_arg, "\tother declaration of %s", new sliceType$4([_arg$1])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.reportAltDecl }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f.check = check; $f.obj = obj; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.reportAltDecl = function(obj) { return this.$val.reportAltDecl(obj); };
	Checker.ptr.prototype.declare = function(scope, id, obj, pos) {
		var _arg, _arg$1, _r, _r$1, _r$2, _r$3, alt, check, id, obj, pos, scope, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; alt = $f.alt; check = $f.check; id = $f.id; obj = $f.obj; pos = $f.pos; scope = $f.scope; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_r = obj.Name(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!(_r === "_")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(_r === "_")) { */ case 1:
			_r$1 = scope.Insert(obj); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			alt = _r$1;
			/* */ if (!($interfaceIsEqual(alt, $ifaceNil))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!($interfaceIsEqual(alt, $ifaceNil))) { */ case 5:
				_r$2 = obj.Pos(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_arg = _r$2;
				_r$3 = obj.Name(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_arg$1 = new $String(_r$3);
				$r = check.errorf(_arg, "%s redeclared in this block", new sliceType$4([_arg$1])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = check.reportAltDecl(alt); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 6:
			$r = obj.setScopePos(pos); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (!(id === ptrType$7.nil)) {
			check.recordDef(id, obj);
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.declare }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.alt = alt; $f.check = check; $f.id = id; $f.obj = obj; $f.pos = pos; $f.scope = scope; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.declare = function(scope, id, obj, pos) { return this.$val.declare(scope, id, obj, pos); };
	Checker.ptr.prototype.objDecl = function(obj, def$1, path) {
		var _arg, _arg$1, _arg$2, _arg$3, _entry, _r, _r$1, _r$2, _r$3, _r$4, _ref, check, d, def$1, obj, obj$1, obj$2, obj$3, obj$4, obj$5, path, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; check = $f.check; d = $f.d; def$1 = $f.def$1; obj = $f.obj; obj$1 = $f.obj$1; obj$2 = $f.obj$2; obj$3 = $f.obj$3; obj$4 = $f.obj$4; obj$5 = $f.obj$5; path = $f.path; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		check = [check];
		obj = [obj];
		check[0] = this;
		_r = obj[0].Type(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!($interfaceIsEqual(_r, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(_r, $ifaceNil))) { */ case 1:
			$s = -1; return;
		/* } */ case 2:
		/* */ if (false) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (false) { */ case 4:
			_r$1 = obj[0].Pos(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_arg = _r$1;
			_r$2 = obj[0].Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$2);
			$r = check[0].trace(_arg, "-- declaring %s", new sliceType$4([_arg$1])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			check[0].indent = check[0].indent + (1) >> 0;
			$deferred.push([(function(check, obj) { return function $b() {
				var _r$3, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				check[0].indent = check[0].indent - (1) >> 0;
				_r$3 = obj[0].Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$r = check[0].trace(_r$3, "=> %s", new sliceType$4([obj[0]])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$3 = _r$3; $f.$s = $s; $f.$r = $r; return $f;
			}; })(check, obj), []]);
		/* } */ case 5:
		d = (_entry = check[0].objMap[Object.keyFor(obj[0])], _entry !== undefined ? _entry.v : ptrType$23.nil);
		/* */ if (d === ptrType$23.nil) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (d === ptrType$23.nil) { */ case 9:
			_r$3 = obj[0].Pos(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_arg$2 = new token.Pos(_r$3);
			_r$4 = obj[0].Name(); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_arg$3 = new $String(_r$4);
			$r = check[0].dump("%s: %s should have been declared", new sliceType$4([_arg$2, _arg$3])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			unreachable();
		/* } */ case 10:
		$deferred.push([(function(check, obj) { return function(ctxt) {
			var ctxt;
			context.copy(check[0].context, ctxt);
		}; })(check, obj), [$clone(check[0].context, context)]]);
		context.copy(check[0].context, new context.ptr(ptrType$23.nil, d.file, $ifaceNil, ptrType$19.nil, false, false));
		_ref = obj[0];
		/* */ if ($assertType(_ref, ptrType$3, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref, ptrType$21, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, ptrType$5, true)[1]) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if ($assertType(_ref, ptrType$3, true)[1]) { */ case 14:
			obj$1 = _ref.$val;
			check[0].context.decl = d;
			$r = check[0].constDecl(obj$1, d.typ, d.init); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 19; continue;
		/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 15:
			obj$2 = _ref.$val;
			check[0].context.decl = d;
			$r = check[0].varDecl(obj$2, d.lhs, d.typ, d.init); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 19; continue;
		/* } else if ($assertType(_ref, ptrType$21, true)[1]) { */ case 16:
			obj$3 = _ref.$val;
			$r = check[0].typeDecl(obj$3, d.typ, def$1, path, d.alias); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 19; continue;
		/* } else if ($assertType(_ref, ptrType$5, true)[1]) { */ case 17:
			obj$4 = _ref.$val;
			$r = check[0].funcDecl(obj$4, d); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 19; continue;
		/* } else { */ case 18:
			obj$5 = _ref;
			unreachable();
		/* } */ case 19:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.objDecl }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.check = check; $f.d = d; $f.def$1 = def$1; $f.obj = obj; $f.obj$1 = obj$1; $f.obj$2 = obj$2; $f.obj$3 = obj$3; $f.obj$4 = obj$4; $f.obj$5 = obj$5; $f.path = path; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Checker.prototype.objDecl = function(obj, def$1, path) { return this.$val.objDecl(obj, def$1, path); };
	Checker.ptr.prototype.constDecl = function(obj, typ, init$1) {
		var _r, _r$1, _r$2, _r$3, check, init$1, obj, t, typ, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; check = $f.check; init$1 = $f.init$1; obj = $f.obj; t = $f.t; typ = $f.typ; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		check = [check];
		x = [x];
		check[0] = this;
		assert($interfaceIsEqual(obj.object.typ, $ifaceNil));
		if (obj.visited) {
			obj.object.typ = (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]);
			$s = -1; return;
		}
		obj.visited = true;
		assert($interfaceIsEqual(check[0].context.iota, $ifaceNil));
		check[0].context.iota = obj.val;
		$deferred.push([(function(check, x) { return function() {
			check[0].context.iota = $ifaceNil;
		}; })(check, x), []]);
		obj.val = constant.MakeUnknown();
		/* */ if (!($interfaceIsEqual(typ, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(typ, $ifaceNil))) { */ case 1:
			_r = check[0].typ(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			t = _r;
			_r$1 = isConstType(t); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!_r$1) { */ case 4:
				_r$2 = t.Underlying(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if (!($interfaceIsEqual(_r$2, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0])))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!($interfaceIsEqual(_r$2, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0])))) { */ case 7:
					_r$3 = typ.Pos(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$r = check[0].errorf(_r$3, "invalid constant type %s", new sliceType$4([t])); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 8:
				obj.object.typ = (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]);
				$s = -1; return;
			/* } */ case 5:
			obj.object.typ = t;
		/* } */ case 2:
		x[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
		/* */ if (!($interfaceIsEqual(init$1, $ifaceNil))) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (!($interfaceIsEqual(init$1, $ifaceNil))) { */ case 12:
			$r = check[0].expr(x[0], init$1); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		$r = check[0].initConst(obj, x[0]); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.constDecl }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.check = check; $f.init$1 = init$1; $f.obj = obj; $f.t = t; $f.typ = typ; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Checker.prototype.constDecl = function(obj, typ, init$1) { return this.$val.constDecl(obj, typ, init$1); };
	Checker.ptr.prototype.varDecl = function(obj, lhs, typ, init$1) {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, check, found, init$1, lhs, lhs$1, lhs$2, obj, typ, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; check = $f.check; found = $f.found; init$1 = $f.init$1; lhs = $f.lhs; lhs$1 = $f.lhs$1; lhs$2 = $f.lhs$2; obj = $f.obj; typ = $f.typ; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = [x];
		check = this;
		assert($interfaceIsEqual(obj.object.typ, $ifaceNil));
		if (obj.visited) {
			obj.object.typ = (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]);
			$s = -1; return;
		}
		obj.visited = true;
		assert($interfaceIsEqual(check.context.iota, $ifaceNil));
		/* */ if (!($interfaceIsEqual(typ, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(typ, $ifaceNil))) { */ case 1:
			_r = check.typ(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			obj.object.typ = _r;
		/* } */ case 2:
		if ($interfaceIsEqual(init$1, $ifaceNil)) {
			if ($interfaceIsEqual(typ, $ifaceNil)) {
				obj.object.typ = (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]);
			}
			$s = -1; return;
		}
		/* */ if (lhs === sliceType$6.nil || (lhs.$length === 1)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (lhs === sliceType$6.nil || (lhs.$length === 1)) { */ case 4:
			assert(lhs === sliceType$6.nil || (0 >= lhs.$length ? ($throwRuntimeError("index out of range"), undefined) : lhs.$array[lhs.$offset + 0]) === obj);
			x[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
			$r = check.expr(x[0], init$1); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$1 = check.initVar(obj, x[0], "variable declaration"); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			$s = -1; return;
		/* } */ case 5:
		if (false) {
			found = false;
			_ref = lhs;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				lhs$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (obj === lhs$1) {
					found = true;
					break;
				}
				_i++;
			}
			if (!found) {
				$panic(new $String("inconsistent lhs"));
			}
		}
		if (!($interfaceIsEqual(typ, $ifaceNil))) {
			_ref$1 = lhs;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				lhs$2 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				lhs$2.object.typ = obj.object.typ;
				_i$1++;
			}
		}
		$r = check.initVars(lhs, new sliceType$10([init$1]), 0); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.varDecl }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.check = check; $f.found = found; $f.init$1 = init$1; $f.lhs = lhs; $f.lhs$1 = lhs$1; $f.lhs$2 = lhs$2; $f.obj = obj; $f.typ = typ; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.varDecl = function(obj, lhs, typ, init$1) { return this.$val.varDecl(obj, lhs, typ, init$1); };
	underlying = function(typ) {
		var _tuple, n, typ;
		while (true) {
			_tuple = $assertType(typ, ptrType$6, true);
			n = _tuple[0];
			if (n === ptrType$6.nil) {
				break;
			}
			typ = n.underlying;
		}
		return typ;
	};
	Named.ptr.prototype.setUnderlying = function(typ) {
		var n, typ;
		n = this;
		if (!(n === ptrType$6.nil)) {
			n.underlying = typ;
		}
	};
	Named.prototype.setUnderlying = function(typ) { return this.$val.setUnderlying(typ); };
	Checker.ptr.prototype.typeDecl = function(obj, typ, def$1, path, alias) {
		var _r, _r$1, alias, check, def$1, named, obj, path, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; alias = $f.alias; check = $f.check; def$1 = $f.def$1; named = $f.named; obj = $f.obj; path = $f.path; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		assert($interfaceIsEqual(obj.object.typ, $ifaceNil));
		assert($interfaceIsEqual(check.context.iota, $ifaceNil));
		/* */ if (alias) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (alias) { */ case 1:
			obj.object.typ = (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]);
			_r = check.typExpr(typ, ptrType$6.nil, $append(path, obj)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			obj.object.typ = _r;
			$s = 3; continue;
		/* } else { */ case 2:
			named = new Named.ptr(obj, $ifaceNil, sliceType$1.nil);
			def$1.setUnderlying(named);
			obj.object.typ = named;
			_r$1 = check.typExpr(typ, named, $append(path, obj)); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			named.underlying = underlying(named.underlying);
		/* } */ case 3:
		$r = check.addMethodDecls(obj); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.typeDecl }; } $f._r = _r; $f._r$1 = _r$1; $f.alias = alias; $f.check = check; $f.def$1 = def$1; $f.named = named; $f.obj = obj; $f.path = path; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.typeDecl = function(obj, typ, def$1, path, alias) { return this.$val.typeDecl(obj, typ, def$1, path, alias); };
	Checker.ptr.prototype.addMethodDecls = function(obj) {
		var _entry, _i, _i$1, _i$2, _r, _r$1, _r$2, _ref, _ref$1, _ref$2, _ref$3, _tuple, _tuple$1, alt, base, check, fld, m, m$1, methods, mset, mset$24ptr, obj, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; alt = $f.alt; base = $f.base; check = $f.check; fld = $f.fld; m = $f.m; m$1 = $f.m$1; methods = $f.methods; mset = $f.mset; mset$24ptr = $f.mset$24ptr; obj = $f.obj; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		methods = (_entry = check.methods[$String.keyFor(obj.object.name)], _entry !== undefined ? _entry.v : sliceType$1.nil);
		if (methods.$length === 0) {
			$s = -1; return;
		}
		delete check.methods[$String.keyFor(obj.object.name)];
		mset = false;
		_tuple = $assertType(obj.object.typ, ptrType$6, true);
		base = _tuple[0];
		/* */ if (!(base === ptrType$6.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(base === ptrType$6.nil)) { */ case 1:
			_tuple$1 = $assertType(base.underlying, ptrType$30, true);
			t = _tuple$1[0];
			/* */ if (!(t === ptrType$30.nil)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(t === ptrType$30.nil)) { */ case 3:
				_ref = t.fields;
				_i = 0;
				/* while (true) { */ case 5:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
					fld = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					/* */ if (!(fld.object.name === "_")) { $s = 7; continue; }
					/* */ $s = 8; continue;
					/* if (!(fld.object.name === "_")) { */ case 7:
						_r = (mset$24ptr || (mset$24ptr = new ptrType$31(function() { return mset; }, function($v) { mset = $v; }))).insert(fld); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						$r = assert($interfaceIsEqual(_r, $ifaceNil)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 8:
					_i++;
				/* } */ $s = 5; continue; case 6:
			/* } */ case 4:
			_ref$1 = base.methods;
			_i$1 = 0;
			/* while (true) { */ case 11:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 12; continue; }
				m = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				assert(!(m.object.name === "_"));
				_r$1 = (mset$24ptr || (mset$24ptr = new ptrType$31(function() { return mset; }, function($v) { mset = $v; }))).insert(m); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = assert($interfaceIsEqual(_r$1, $ifaceNil)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i$1++;
			/* } */ $s = 11; continue; case 12:
		/* } */ case 2:
		_ref$2 = methods;
		_i$2 = 0;
		/* while (true) { */ case 15:
			/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 16; continue; }
			m$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
			/* */ if (!(m$1.object.name === "_")) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (!(m$1.object.name === "_")) { */ case 17:
				_r$2 = (mset$24ptr || (mset$24ptr = new ptrType$31(function() { return mset; }, function($v) { mset = $v; }))).insert(m$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				alt = _r$2;
				/* */ if (!($interfaceIsEqual(alt, $ifaceNil))) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (!($interfaceIsEqual(alt, $ifaceNil))) { */ case 20:
					_ref$3 = alt;
					/* */ if ($assertType(_ref$3, ptrType$10, true)[1]) { $s = 22; continue; }
					/* */ if ($assertType(_ref$3, ptrType$5, true)[1]) { $s = 23; continue; }
					/* */ $s = 24; continue;
					/* if ($assertType(_ref$3, ptrType$10, true)[1]) { */ case 22:
						$r = check.errorf(m$1.object.pos, "field and method with the same name %s", new sliceType$4([new $String(m$1.object.name)])); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 25; continue;
					/* } else if ($assertType(_ref$3, ptrType$5, true)[1]) { */ case 23:
						$r = check.errorf(m$1.object.pos, "method %s already declared for %s", new sliceType$4([new $String(m$1.object.name), obj])); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 25; continue;
					/* } else { */ case 24:
						unreachable();
					/* } */ case 25:
					$r = check.reportAltDecl(alt); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$2++;
					/* continue; */ $s = 15; continue;
				/* } */ case 21:
			/* } */ case 18:
			$r = check.objDecl(m$1, ptrType$6.nil, sliceType$16.nil); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (!(base === ptrType$6.nil) && !(m$1.object.name === "_")) {
				base.methods = $append(base.methods, m$1);
			}
			_i$2++;
		/* } */ $s = 15; continue; case 16:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.addMethodDecls }; } $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.alt = alt; $f.base = base; $f.check = check; $f.fld = fld; $f.m = m; $f.m$1 = m$1; $f.methods = methods; $f.mset = mset; $f.mset$24ptr = mset$24ptr; $f.obj = obj; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.addMethodDecls = function(obj) { return this.$val.addMethodDecls(obj); };
	Checker.ptr.prototype.funcDecl = function(obj, decl) {
		var _r, check, decl, fdecl, obj, sig, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; check = $f.check; decl = $f.decl; fdecl = $f.fdecl; obj = $f.obj; sig = $f.sig; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		assert($interfaceIsEqual(obj.object.typ, $ifaceNil));
		assert($interfaceIsEqual(check.context.iota, $ifaceNil));
		sig = new Signature.ptr(ptrType$1.nil, ptrType$10.nil, ptrType$16.nil, ptrType$16.nil, false);
		obj.object.typ = sig;
		fdecl = decl.fdecl;
		$r = check.funcType(sig, fdecl.Recv, fdecl.Type); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (sig.recv === ptrType$10.nil && obj.object.name === "init" && (sig.params.Len() > 0 || sig.results.Len() > 0)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (sig.recv === ptrType$10.nil && obj.object.name === "init" && (sig.params.Len() > 0 || sig.results.Len() > 0)) { */ case 2:
			_r = fdecl.Pos(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = check.errorf(_r, "func init must have no arguments and no return values", new sliceType$4([])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		if (!check.conf.IgnoreFuncBodies && !(fdecl.Body === ptrType$32.nil)) {
			check.later(obj.object.name, decl, sig, fdecl.Body);
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.funcDecl }; } $f._r = _r; $f.check = check; $f.decl = decl; $f.fdecl = fdecl; $f.obj = obj; $f.sig = sig; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.funcDecl = function(obj, decl) { return this.$val.funcDecl(obj, decl); };
	Checker.ptr.prototype.declStmt = function(decl) {
		var _1, _2, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _i$6, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _ref$7, _ref$8, check, d, d$1, d$2, decl, i, i$1, i$2, i$3, i$4, init$1, init$2, iota, last, lhs, lhs$1, lhs0, name, name$1, name$2, name$3, obj, obj$1, obj$2, obj$3, pkg, s, s$1, s$2, scopePos, scopePos$1, scopePos$2, spec, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _i$6 = $f._i$6; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _ref$7 = $f._ref$7; _ref$8 = $f._ref$8; check = $f.check; d = $f.d; d$1 = $f.d$1; d$2 = $f.d$2; decl = $f.decl; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; init$1 = $f.init$1; init$2 = $f.init$2; iota = $f.iota; last = $f.last; lhs = $f.lhs; lhs$1 = $f.lhs$1; lhs0 = $f.lhs0; name = $f.name; name$1 = $f.name$1; name$2 = $f.name$2; name$3 = $f.name$3; obj = $f.obj; obj$1 = $f.obj$1; obj$2 = $f.obj$2; obj$3 = $f.obj$3; pkg = $f.pkg; s = $f.s; s$1 = $f.s$1; s$2 = $f.s$2; scopePos = $f.scopePos; scopePos$1 = $f.scopePos$1; scopePos$2 = $f.scopePos$2; spec = $f.spec; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		pkg = check.pkg;
		_ref = decl;
		/* */ if ($assertType(_ref, ptrType$33, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$34, true)[1]) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($assertType(_ref, ptrType$33, true)[1]) { */ case 1:
			d = _ref.$val;
			$s = 4; continue;
		/* } else if ($assertType(_ref, ptrType$34, true)[1]) { */ case 2:
			d$1 = _ref.$val;
			last = ptrType$35.nil;
			_ref$1 = d$1.Specs;
			_i = 0;
			/* while (true) { */ case 5:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 6; continue; }
				iota = _i;
				spec = ((_i < 0 || _i >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i]);
				_ref$2 = spec;
				/* */ if ($assertType(_ref$2, ptrType$35, true)[1]) { $s = 7; continue; }
				/* */ if ($assertType(_ref$2, ptrType$36, true)[1]) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if ($assertType(_ref$2, ptrType$35, true)[1]) { */ case 7:
					s = _ref$2.$val;
						_1 = d$1.Tok;
						/* */ if (_1 === (64)) { $s = 12; continue; }
						/* */ if (_1 === (85)) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (_1 === (64)) { */ case 12:
							if (!($interfaceIsEqual(s.Type, $ifaceNil)) || s.Values.$length > 0) {
								last = s;
							} else if (last === ptrType$35.nil) {
								last = new ast.ValueSpec.ptr(ptrType$37.nil, sliceType$17.nil, $ifaceNil, sliceType$10.nil, ptrType$37.nil);
							}
							lhs = $makeSlice(sliceType$18, s.Names.$length);
							_ref$3 = s.Names;
							_i$1 = 0;
							/* while (true) { */ case 16:
								/* if (!(_i$1 < _ref$3.$length)) { break; } */ if(!(_i$1 < _ref$3.$length)) { $s = 17; continue; }
								i = _i$1;
								name = ((_i$1 < 0 || _i$1 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$1]);
								obj = NewConst(name.Pos(), pkg, name.Name, $ifaceNil, constant.MakeInt64((new $Int64(0, iota))));
								((i < 0 || i >= lhs.$length) ? ($throwRuntimeError("index out of range"), undefined) : lhs.$array[lhs.$offset + i] = obj);
								init$1 = $ifaceNil;
								if (i < last.Values.$length) {
									init$1 = (x = last.Values, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
								}
								$r = check.constDecl(obj, last.Type, init$1); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								_i$1++;
							/* } */ $s = 16; continue; case 17:
							$r = check.arityMatch(s, last); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							_r = s.End(); /* */ $s = 20; case 20: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							scopePos = _r;
							_ref$4 = s.Names;
							_i$2 = 0;
							/* while (true) { */ case 21:
								/* if (!(_i$2 < _ref$4.$length)) { break; } */ if(!(_i$2 < _ref$4.$length)) { $s = 22; continue; }
								i$1 = _i$2;
								name$1 = ((_i$2 < 0 || _i$2 >= _ref$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$4.$array[_ref$4.$offset + _i$2]);
								$r = check.declare(check.context.scope, name$1, ((i$1 < 0 || i$1 >= lhs.$length) ? ($throwRuntimeError("index out of range"), undefined) : lhs.$array[lhs.$offset + i$1]), scopePos); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								_i$2++;
							/* } */ $s = 21; continue; case 22:
							$s = 15; continue;
						/* } else if (_1 === (85)) { */ case 13:
							lhs0 = $makeSlice(sliceType$6, s.Names.$length);
							_ref$5 = s.Names;
							_i$3 = 0;
							while (true) {
								if (!(_i$3 < _ref$5.$length)) { break; }
								i$2 = _i$3;
								name$2 = ((_i$3 < 0 || _i$3 >= _ref$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$5.$array[_ref$5.$offset + _i$3]);
								((i$2 < 0 || i$2 >= lhs0.$length) ? ($throwRuntimeError("index out of range"), undefined) : lhs0.$array[lhs0.$offset + i$2] = NewVar(name$2.Pos(), pkg, name$2.Name, $ifaceNil));
								_i$3++;
							}
							_ref$6 = lhs0;
							_i$4 = 0;
							/* while (true) { */ case 24:
								/* if (!(_i$4 < _ref$6.$length)) { break; } */ if(!(_i$4 < _ref$6.$length)) { $s = 25; continue; }
								i$3 = _i$4;
								obj$1 = ((_i$4 < 0 || _i$4 >= _ref$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$6.$array[_ref$6.$offset + _i$4]);
								lhs$1 = sliceType$6.nil;
								init$2 = $ifaceNil;
								_2 = s.Values.$length;
								if (_2 === (s.Names.$length)) {
									init$2 = (x$1 = s.Values, ((i$3 < 0 || i$3 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$3]));
								} else if (_2 === (1)) {
									lhs$1 = lhs0;
									init$2 = (x$2 = s.Values, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0]));
								} else if (i$3 < s.Values.$length) {
									init$2 = (x$3 = s.Values, ((i$3 < 0 || i$3 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$3]));
								}
								$r = check.varDecl(obj$1, lhs$1, s.Type, init$2); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								if (s.Values.$length === 1) {
									if (false) {
										_ref$7 = lhs0;
										_i$5 = 0;
										while (true) {
											if (!(_i$5 < _ref$7.$length)) { break; }
											obj$2 = ((_i$5 < 0 || _i$5 >= _ref$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$7.$array[_ref$7.$offset + _i$5]);
											assert(!($interfaceIsEqual(obj$2.object.typ, $ifaceNil)));
											_i$5++;
										}
									}
									/* break; */ $s = 25; continue;
								}
								_i$4++;
							/* } */ $s = 24; continue; case 25:
							$r = check.arityMatch(s, ptrType$35.nil); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							_r$1 = s.End(); /* */ $s = 28; case 28: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
							scopePos$1 = _r$1;
							_ref$8 = s.Names;
							_i$6 = 0;
							/* while (true) { */ case 29:
								/* if (!(_i$6 < _ref$8.$length)) { break; } */ if(!(_i$6 < _ref$8.$length)) { $s = 30; continue; }
								i$4 = _i$6;
								name$3 = ((_i$6 < 0 || _i$6 >= _ref$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$8.$array[_ref$8.$offset + _i$6]);
								$r = check.declare(check.context.scope, name$3, ((i$4 < 0 || i$4 >= lhs0.$length) ? ($throwRuntimeError("index out of range"), undefined) : lhs0.$array[lhs0.$offset + i$4]), scopePos$1); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								_i$6++;
							/* } */ $s = 29; continue; case 30:
							$s = 15; continue;
						/* } else { */ case 14:
							$r = check.invalidAST(s.Pos(), "invalid token %s", new sliceType$4([new token.Token(d$1.Tok)])); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 15:
					case 11:
					$s = 10; continue;
				/* } else if ($assertType(_ref$2, ptrType$36, true)[1]) { */ case 8:
					s$1 = _ref$2.$val;
					obj$3 = NewTypeName(s$1.Name.Pos(), pkg, s$1.Name.Name, $ifaceNil);
					scopePos$2 = s$1.Name.Pos();
					$r = check.declare(check.context.scope, s$1.Name, obj$3, scopePos$2); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = check.typeDecl(obj$3, s$1.Type, ptrType$6.nil, sliceType$16.nil, new token.Pos(s$1.Assign).IsValid()); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 10; continue;
				/* } else { */ case 9:
					s$2 = _ref$2;
					_r$2 = s$2.Pos(); /* */ $s = 35; case 35: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = check.invalidAST(_r$2, "const, type, or var declaration expected", new sliceType$4([])); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 10:
				_i++;
			/* } */ $s = 5; continue; case 6:
			$s = 4; continue;
		/* } else { */ case 3:
			d$2 = _ref;
			_r$3 = d$2.Pos(); /* */ $s = 37; case 37: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$r = check.invalidAST(_r$3, "unknown ast.Decl node %T", new sliceType$4([d$2])); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.declStmt }; } $f._1 = _1; $f._2 = _2; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._i$6 = _i$6; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._ref$7 = _ref$7; $f._ref$8 = _ref$8; $f.check = check; $f.d = d; $f.d$1 = d$1; $f.d$2 = d$2; $f.decl = decl; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.init$1 = init$1; $f.init$2 = init$2; $f.iota = iota; $f.last = last; $f.lhs = lhs; $f.lhs$1 = lhs$1; $f.lhs0 = lhs0; $f.name = name; $f.name$1 = name$1; $f.name$2 = name$2; $f.name$3 = name$3; $f.obj = obj; $f.obj$1 = obj$1; $f.obj$2 = obj$2; $f.obj$3 = obj$3; $f.pkg = pkg; $f.s = s; $f.s$1 = s$1; $f.s$2 = s$2; $f.scopePos = scopePos; $f.scopePos$1 = scopePos$1; $f.scopePos$2 = scopePos$2; $f.spec = spec; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.declStmt = function(decl) { return this.$val.declStmt(decl); };
	assert = function(p) {
		var p;
		if (!p) {
			$panic(new $String("assertion failed"));
		}
	};
	unreachable = function() {
		$panic(new $String("unreachable"));
	};
	Checker.ptr.prototype.qualifier = function(pkg) {
		var check, pkg;
		check = this;
		if (!(pkg === check.pkg)) {
			return pkg.path;
		}
		return "";
	};
	Checker.prototype.qualifier = function(pkg) { return this.$val.qualifier(pkg); };
	Checker.ptr.prototype.sprintf = function(format, args) {
		var _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _ref$1, a, a$1, a$2, a$3, a$4, a$5, a$6, arg, args, check, format, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _ref$1 = $f._ref$1; a = $f.a; a$1 = $f.a$1; a$2 = $f.a$2; a$3 = $f.a$3; a$4 = $f.a$4; a$5 = $f.a$5; a$6 = $f.a$6; arg = $f.arg; args = $f.args; check = $f.check; format = $f.format; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_ref = args;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_ref$1 = arg;
			/* */ if (_ref$1 === $ifaceNil) { $s = 3; continue; }
			/* */ if ($assertType(_ref$1, operand, true)[1]) { $s = 4; continue; }
			/* */ if ($assertType(_ref$1, ptrType$38, true)[1]) { $s = 5; continue; }
			/* */ if ($assertType(_ref$1, token.Pos, true)[1]) { $s = 6; continue; }
			/* */ if ($assertType(_ref$1, ast.Expr, true)[1]) { $s = 7; continue; }
			/* */ if ($assertType(_ref$1, Object, true)[1]) { $s = 8; continue; }
			/* */ if ($assertType(_ref$1, Type, true)[1]) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_ref$1 === $ifaceNil) { */ case 3:
				a = _ref$1;
				arg = new $String("<nil>");
				$s = 10; continue;
			/* } else if ($assertType(_ref$1, operand, true)[1]) { */ case 4:
				a$1 = $clone(_ref$1.$val, operand);
				$panic(new $String("internal error: should always pass *operand"));
				$s = 10; continue;
			/* } else if ($assertType(_ref$1, ptrType$38, true)[1]) { */ case 5:
				a$2 = _ref$1.$val;
				_r = operandString(a$2, $methodVal(check, "qualifier")); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				arg = new $String(_r);
				$s = 10; continue;
			/* } else if ($assertType(_ref$1, token.Pos, true)[1]) { */ case 6:
				a$3 = _ref$1.$val;
				_r$1 = check.fset.Position(a$3); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = $clone(_r$1, token.Position).String(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				arg = new $String(_r$2);
				$s = 10; continue;
			/* } else if ($assertType(_ref$1, ast.Expr, true)[1]) { */ case 7:
				a$4 = _ref$1;
				arg = new $String(ExprString(a$4));
				$s = 10; continue;
			/* } else if ($assertType(_ref$1, Object, true)[1]) { */ case 8:
				a$5 = _ref$1;
				_r$3 = ObjectString(a$5, $methodVal(check, "qualifier")); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				arg = new $String(_r$3);
				$s = 10; continue;
			/* } else if ($assertType(_ref$1, Type, true)[1]) { */ case 9:
				a$6 = _ref$1;
				_r$4 = TypeString(a$6, $methodVal(check, "qualifier")); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				arg = new $String(_r$4);
			/* } */ case 10:
			((i < 0 || i >= args.$length) ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + i] = arg);
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$5 = fmt.Sprintf(format, args); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return _r$5;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.sprintf }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._ref$1 = _ref$1; $f.a = a; $f.a$1 = a$1; $f.a$2 = a$2; $f.a$3 = a$3; $f.a$4 = a$4; $f.a$5 = a$5; $f.a$6 = a$6; $f.arg = arg; $f.args = args; $f.check = check; $f.format = format; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.sprintf = function(format, args) { return this.$val.sprintf(format, args); };
	Checker.ptr.prototype.trace = function(pos, format, args) {
		var _arg, _arg$1, _arg$2, _r, _r$1, _r$2, args, check, format, pos, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; args = $f.args; check = $f.check; format = $f.format; pos = $f.pos; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_r = check.fset.Position(pos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = (x = _r, new x.constructor.elem(x));
		_arg$1 = new $String(strings.Repeat(".  ", check.indent));
		_r$1 = check.sprintf(format, args); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$2 = new $String(_r$1);
		_r$2 = fmt.Printf("%s:\t%s%s\n", new sliceType$4([_arg, _arg$1, _arg$2])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.trace }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.args = args; $f.check = check; $f.format = format; $f.pos = pos; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.trace = function(pos, format, args) { return this.$val.trace(pos, format, args); };
	Checker.ptr.prototype.dump = function(format, args) {
		var _r, _r$1, args, check, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; args = $f.args; check = $f.check; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_r = check.sprintf(format, args); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = fmt.Println(new sliceType$4([new $String(_r)])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.dump }; } $f._r = _r; $f._r$1 = _r$1; $f.args = args; $f.check = check; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.dump = function(format, args) { return this.$val.dump(format, args); };
	Checker.ptr.prototype.err = function(pos, msg, soft) {
		var check, err, f, msg, pos, soft, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; check = $f.check; err = $f.err; f = $f.f; msg = $f.msg; pos = $f.pos; soft = $f.soft; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		err = new Error.ptr(check.fset, pos, msg, soft);
		if ($interfaceIsEqual(check.firstErr, $ifaceNil)) {
			check.firstErr = new err.constructor.elem(err);
		}
		f = check.conf.Error;
		if (f === $throwNilPointerError) {
			$panic((x = new bailout.ptr(), new x.constructor.elem(x)));
		}
		$r = f(new err.constructor.elem(err)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.err }; } $f.check = check; $f.err = err; $f.f = f; $f.msg = msg; $f.pos = pos; $f.soft = soft; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.err = function(pos, msg, soft) { return this.$val.err(pos, msg, soft); };
	Checker.ptr.prototype.error = function(pos, msg) {
		var check, msg, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; check = $f.check; msg = $f.msg; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		$r = check.err(pos, msg, false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.error }; } $f.check = check; $f.msg = msg; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.error = function(pos, msg) { return this.$val.error(pos, msg); };
	Checker.ptr.prototype.errorf = function(pos, format, args) {
		var _arg, _arg$1, _r, args, check, format, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; args = $f.args; check = $f.check; format = $f.format; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_arg = pos;
		_r = check.sprintf(format, args); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = _r;
		$r = check.err(_arg, _arg$1, false); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.errorf }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f.args = args; $f.check = check; $f.format = format; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.errorf = function(pos, format, args) { return this.$val.errorf(pos, format, args); };
	Checker.ptr.prototype.softErrorf = function(pos, format, args) {
		var _arg, _arg$1, _r, args, check, format, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; args = $f.args; check = $f.check; format = $f.format; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_arg = pos;
		_r = check.sprintf(format, args); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = _r;
		$r = check.err(_arg, _arg$1, true); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.softErrorf }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f.args = args; $f.check = check; $f.format = format; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.softErrorf = function(pos, format, args) { return this.$val.softErrorf(pos, format, args); };
	Checker.ptr.prototype.invalidAST = function(pos, format, args) {
		var args, check, format, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; args = $f.args; check = $f.check; format = $f.format; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		$r = check.errorf(pos, "invalid AST: " + format, args); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.invalidAST }; } $f.args = args; $f.check = check; $f.format = format; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.invalidAST = function(pos, format, args) { return this.$val.invalidAST(pos, format, args); };
	Checker.ptr.prototype.invalidArg = function(pos, format, args) {
		var args, check, format, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; args = $f.args; check = $f.check; format = $f.format; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		$r = check.errorf(pos, "invalid argument: " + format, args); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.invalidArg }; } $f.args = args; $f.check = check; $f.format = format; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.invalidArg = function(pos, format, args) { return this.$val.invalidArg(pos, format, args); };
	Checker.ptr.prototype.invalidOp = function(pos, format, args) {
		var args, check, format, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; args = $f.args; check = $f.check; format = $f.format; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		$r = check.errorf(pos, "invalid operation: " + format, args); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.invalidOp }; } $f.args = args; $f.check = check; $f.format = format; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.invalidOp = function(pos, format, args) { return this.$val.invalidOp(pos, format, args); };
	Checker.ptr.prototype.op = function(m, x, op) {
		var _entry, _r, _r$1, _r$2, check, m, op, pred, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; check = $f.check; m = $f.m; op = $f.op; pred = $f.pred; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		pred = (_entry = m[token.Token.keyFor(op)], _entry !== undefined ? _entry.v : $throwNilPointerError);
		/* */ if (!(pred === $throwNilPointerError)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(pred === $throwNilPointerError)) { */ case 1:
			_r = pred(x.typ); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!_r) { */ case 4:
				_r$1 = x.pos(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = check.invalidOp(_r$1, "operator %s not defined for %s", new sliceType$4([new token.Token(op), x])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return false;
			/* } */ case 5:
			$s = 3; continue;
		/* } else { */ case 2:
			_r$2 = x.pos(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$r = check.invalidAST(_r$2, "unknown operator %s", new sliceType$4([new token.Token(op)])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return false;
		/* } */ case 3:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.op }; } $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.check = check; $f.m = m; $f.op = op; $f.pred = pred; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.op = function(m, x, op) { return this.$val.op(m, x, op); };
	Checker.ptr.prototype.unary = function(x, e, op) {
		var _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tuple, check, e, ok, op, prec, typ, typ$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; check = $f.check; e = $f.e; ok = $f.ok; op = $f.op; prec = $f.prec; typ = $f.typ; typ$1 = $f.typ$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
			_1 = op;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (36)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (17)) { */ case 2:
				x.mode = 7;
				x.typ = new Pointer.ptr(x.typ);
				$s = -1; return;
			/* } else if (_1 === (36)) { */ case 3:
				_r = x.typ.Underlying(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = $assertType(_r, ptrType$14, true);
				typ = _tuple[0];
				ok = _tuple[1];
				/* */ if (!ok) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (!ok) { */ case 6:
					_r$1 = x.pos(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$r = check.invalidOp(_r$1, "cannot receive from non-channel %s", new sliceType$4([x])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					x.mode = 0;
					$s = -1; return;
				/* } */ case 7:
				/* */ if (typ.dir === 1) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (typ.dir === 1) { */ case 10:
					_r$2 = x.pos(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = check.invalidOp(_r$2, "cannot receive from send-only channel %s", new sliceType$4([x])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					x.mode = 0;
					$s = -1; return;
				/* } */ case 11:
				x.mode = 8;
				x.typ = typ.elem;
				check.context.hasCallOrRecv = true;
				$s = -1; return;
			/* } */ case 4:
		case 1:
		_r$3 = check.op(unaryOpPredicates, x, op); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!_r$3) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (!_r$3) { */ case 14:
			x.mode = 0;
			$s = -1; return;
		/* } */ case 15:
		/* */ if (x.mode === 4) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (x.mode === 4) { */ case 17:
			_r$4 = x.typ.Underlying(); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			typ$1 = $assertType(_r$4, ptrType$4);
			prec = 0;
			_r$5 = isUnsigned(typ$1); /* */ $s = 22; case 22: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (_r$5) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (_r$5) { */ case 20:
				_r$6 = check.conf.sizeof(typ$1); /* */ $s = 23; case 23: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				prec = (($mul64(_r$6, new $Int64(0, 8)).$low >>> 0));
			/* } */ case 21:
			_r$7 = constant.UnaryOp(op, x.val, prec); /* */ $s = 24; case 24: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			x.val = _r$7;
			_r$8 = isTyped(typ$1); /* */ $s = 27; case 27: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			/* */ if (_r$8) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (_r$8) { */ case 25:
				if (!(e === ptrType$39.nil)) {
					x.expr = e;
				}
				$r = check.representable(x, typ$1); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 26:
			$s = -1; return;
		/* } */ case 18:
		x.mode = 7;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.unary }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f.check = check; $f.e = e; $f.ok = ok; $f.op = op; $f.prec = prec; $f.typ = typ; $f.typ$1 = typ$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.unary = function(x, e, op) { return this.$val.unary(x, e, op); };
	isShift = function(op) {
		var op;
		return (op === 20) || (op === 21);
	};
	isComparison = function(op) {
		var _1, op;
		_1 = op;
		if ((_1 === (39)) || (_1 === (44)) || (_1 === (40)) || (_1 === (45)) || (_1 === (41)) || (_1 === (46))) {
			return true;
		}
		return false;
	};
	fitsFloat32 = function(x) {
		var _r, _tuple, f, f32, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; f = $f.f; f32 = $f.f32; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = constant.Float32Val(x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f32 = _tuple[0];
		f = (f32);
		$s = -1; return !math.IsInf(f, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: fitsFloat32 }; } $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.f32 = f32; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	roundFloat32 = function(x) {
		var _r, _r$1, _tuple, f, f32, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; f32 = $f.f32; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = constant.Float32Val(x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f32 = _tuple[0];
		f = (f32);
		/* */ if (!math.IsInf(f, 0)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!math.IsInf(f, 0)) { */ case 2:
			_r$1 = constant.MakeFloat64(f); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: roundFloat32 }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.f32 = f32; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	fitsFloat64 = function(x) {
		var _r, _tuple, f, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; f = $f.f; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = constant.Float64Val(x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = _tuple[0];
		$s = -1; return !math.IsInf(f, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: fitsFloat64 }; } $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	roundFloat64 = function(x) {
		var _r, _r$1, _tuple, f, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = constant.Float64Val(x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = _tuple[0];
		/* */ if (!math.IsInf(f, 0)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!math.IsInf(f, 0)) { */ case 2:
			_r$1 = constant.MakeFloat64(f); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: roundFloat64 }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	representableConst = function(x, conf, typ, rounded) {
		var _1, _2, _3, _4, _arg, _arg$1, _arg$2, _arg$3, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$4, _r$40, _r$41, _r$42, _r$43, _r$44, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _v, _v$1, conf, im, im$1, n, ok, r, r$1, re, re$1, rounded, s, s$1, s$2, typ, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$4 = $f._r$4; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$44 = $f._r$44; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _v = $f._v; _v$1 = $f._v$1; conf = $f.conf; im = $f.im; im$1 = $f.im$1; n = $f.n; ok = $f.ok; r = $f.r; r$1 = $f.r$1; re = $f.re; re$1 = $f.re$1; rounded = $f.rounded; s = $f.s; s$1 = $f.s$1; s$2 = $f.s$2; typ = $f.typ; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = x.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 0) { */ case 1:
			$s = -1; return true;
		/* } */ case 2:
			_r$1 = isInteger(typ); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 5; continue; }
			_r$2 = isFloat(typ); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 6; continue; }
			_r$3 = isComplex(typ); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3) { $s = 7; continue; }
			_r$4 = isString(typ); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4) { $s = 8; continue; }
			_r$5 = isBoolean(typ); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (_r$5) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r$1) { */ case 5:
				_r$6 = constant.ToInt(x); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				x$1 = _r$6;
				_r$7 = x$1.Kind(); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				/* */ if (!((_r$7 === 3))) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (!((_r$7 === 3))) { */ case 17:
					$s = -1; return false;
				/* } */ case 18:
				if (!(rounded === ptrType$29.nil)) {
					rounded.$set(x$1);
				}
				_r$8 = constant.Int64Val(x$1); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_tuple = _r$8;
				x$2 = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (ok) { */ case 21:
						_1 = typ.kind;
						/* */ if (_1 === (2)) { $s = 24; continue; }
						/* */ if (_1 === (3)) { $s = 25; continue; }
						/* */ if (_1 === (4)) { $s = 26; continue; }
						/* */ if (_1 === (5)) { $s = 27; continue; }
						/* */ if ((_1 === (6)) || (_1 === (20))) { $s = 28; continue; }
						/* */ if ((_1 === (7)) || (_1 === (12))) { $s = 29; continue; }
						/* */ if (_1 === (8)) { $s = 30; continue; }
						/* */ if (_1 === (9)) { $s = 31; continue; }
						/* */ if (_1 === (10)) { $s = 32; continue; }
						/* */ if (_1 === (11)) { $s = 33; continue; }
						/* */ $s = 34; continue;
						/* if (_1 === (2)) { */ case 24:
							_r$9 = conf.sizeof(typ); /* */ $s = 36; case 36: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
							s = ((_r$9.$low >>> 0)) * 8 >>> 0;
							$s = -1; return (x$3 = $shiftLeft64(new $Int64(-1, 4294967295), ((s - 1 >>> 0))), (x$3.$high < x$2.$high || (x$3.$high === x$2.$high && x$3.$low <= x$2.$low))) && (x$4 = (x$5 = $shiftLeft64(new $Int64(0, 1), ((s - 1 >>> 0))), new $Int64(x$5.$high - 0, x$5.$low - 1)), (x$2.$high < x$4.$high || (x$2.$high === x$4.$high && x$2.$low <= x$4.$low)));
						/* } else if (_1 === (3)) { */ case 25:
							$s = -1; return (-1 < x$2.$high || (-1 === x$2.$high && 4294967168 <= x$2.$low)) && (x$2.$high < 0 || (x$2.$high === 0 && x$2.$low <= 127));
						/* } else if (_1 === (4)) { */ case 26:
							$s = -1; return (-1 < x$2.$high || (-1 === x$2.$high && 4294934528 <= x$2.$low)) && (x$2.$high < 0 || (x$2.$high === 0 && x$2.$low <= 32767));
						/* } else if (_1 === (5)) { */ case 27:
							$s = -1; return (-1 < x$2.$high || (-1 === x$2.$high && 2147483648 <= x$2.$low)) && (x$2.$high < 0 || (x$2.$high === 0 && x$2.$low <= 2147483647));
						/* } else if ((_1 === (6)) || (_1 === (20))) { */ case 28:
							$s = -1; return true;
						/* } else if ((_1 === (7)) || (_1 === (12))) { */ case 29:
							_r$10 = conf.sizeof(typ); /* */ $s = 37; case 37: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
							s$1 = ((_r$10.$low >>> 0)) * 8 >>> 0;
							if (s$1 < 64) {
								$s = -1; return (0 < x$2.$high || (0 === x$2.$high && 0 <= x$2.$low)) && (x$6 = (x$7 = $shiftLeft64(new $Int64(0, 1), s$1), new $Int64(x$7.$high - 0, x$7.$low - 1)), (x$2.$high < x$6.$high || (x$2.$high === x$6.$high && x$2.$low <= x$6.$low)));
							}
							$s = -1; return (0 < x$2.$high || (0 === x$2.$high && 0 <= x$2.$low));
						/* } else if (_1 === (8)) { */ case 30:
							$s = -1; return (0 < x$2.$high || (0 === x$2.$high && 0 <= x$2.$low)) && (x$2.$high < 0 || (x$2.$high === 0 && x$2.$low <= 255));
						/* } else if (_1 === (9)) { */ case 31:
							$s = -1; return (0 < x$2.$high || (0 === x$2.$high && 0 <= x$2.$low)) && (x$2.$high < 0 || (x$2.$high === 0 && x$2.$low <= 65535));
						/* } else if (_1 === (10)) { */ case 32:
							$s = -1; return (0 < x$2.$high || (0 === x$2.$high && 0 <= x$2.$low)) && (x$2.$high < 0 || (x$2.$high === 0 && x$2.$low <= 4294967295));
						/* } else if (_1 === (11)) { */ case 33:
							$s = -1; return (0 < x$2.$high || (0 === x$2.$high && 0 <= x$2.$low));
						/* } else { */ case 34:
							unreachable();
						/* } */ case 35:
					case 23:
				/* } */ case 22:
					_r$11 = constant.BitLen(x$1); /* */ $s = 39; case 39: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					n = _r$11;
					_2 = typ.kind;
					/* */ if ((_2 === (7)) || (_2 === (12))) { $s = 40; continue; }
					/* */ if (_2 === (11)) { $s = 41; continue; }
					/* */ if (_2 === (20)) { $s = 42; continue; }
					/* */ $s = 43; continue;
					/* if ((_2 === (7)) || (_2 === (12))) { */ case 40:
						_r$12 = conf.sizeof(typ); /* */ $s = 44; case 44: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						s$2 = ((_r$12.$low >>> 0)) * 8 >>> 0;
						_r$13 = constant.Sign(x$1); /* */ $s = 45; case 45: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						$s = -1; return _r$13 >= 0 && n <= ((s$2 >> 0));
					/* } else if (_2 === (11)) { */ case 41:
						_r$14 = constant.Sign(x$1); /* */ $s = 46; case 46: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						$s = -1; return _r$14 >= 0 && n <= 64;
					/* } else if (_2 === (20)) { */ case 42:
						$s = -1; return true;
					/* } */ case 43:
				case 38:
				$s = 10; continue;
			/* } else if (_r$2) { */ case 6:
				_r$15 = constant.ToFloat(x); /* */ $s = 47; case 47: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				x$8 = _r$15;
				_r$16 = x$8.Kind(); /* */ $s = 50; case 50: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				/* */ if (!((_r$16 === 4))) { $s = 48; continue; }
				/* */ $s = 49; continue;
				/* if (!((_r$16 === 4))) { */ case 48:
					$s = -1; return false;
				/* } */ case 49:
					_3 = typ.kind;
					/* */ if (_3 === (13)) { $s = 52; continue; }
					/* */ if (_3 === (14)) { $s = 53; continue; }
					/* */ if (_3 === (22)) { $s = 54; continue; }
					/* */ $s = 55; continue;
					/* if (_3 === (13)) { */ case 52:
						/* */ if (rounded === ptrType$29.nil) { $s = 57; continue; }
						/* */ $s = 58; continue;
						/* if (rounded === ptrType$29.nil) { */ case 57:
							_r$17 = fitsFloat32(x$8); /* */ $s = 59; case 59: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
							$s = -1; return _r$17;
						/* } */ case 58:
						_r$18 = roundFloat32(x$8); /* */ $s = 60; case 60: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
						r = _r$18;
						if (!($interfaceIsEqual(r, $ifaceNil))) {
							rounded.$set(r);
							$s = -1; return true;
						}
						$s = 56; continue;
					/* } else if (_3 === (14)) { */ case 53:
						/* */ if (rounded === ptrType$29.nil) { $s = 61; continue; }
						/* */ $s = 62; continue;
						/* if (rounded === ptrType$29.nil) { */ case 61:
							_r$19 = fitsFloat64(x$8); /* */ $s = 63; case 63: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
							$s = -1; return _r$19;
						/* } */ case 62:
						_r$20 = roundFloat64(x$8); /* */ $s = 64; case 64: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
						r$1 = _r$20;
						if (!($interfaceIsEqual(r$1, $ifaceNil))) {
							rounded.$set(r$1);
							$s = -1; return true;
						}
						$s = 56; continue;
					/* } else if (_3 === (22)) { */ case 54:
						$s = -1; return true;
					/* } else { */ case 55:
						unreachable();
					/* } */ case 56:
				case 51:
				$s = 10; continue;
			/* } else if (_r$3) { */ case 7:
				_r$21 = constant.ToComplex(x); /* */ $s = 65; case 65: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				x$9 = _r$21;
				_r$22 = x$9.Kind(); /* */ $s = 68; case 68: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				/* */ if (!((_r$22 === 5))) { $s = 66; continue; }
				/* */ $s = 67; continue;
				/* if (!((_r$22 === 5))) { */ case 66:
					$s = -1; return false;
				/* } */ case 67:
					_4 = typ.kind;
					/* */ if (_4 === (15)) { $s = 70; continue; }
					/* */ if (_4 === (16)) { $s = 71; continue; }
					/* */ if (_4 === (23)) { $s = 72; continue; }
					/* */ $s = 73; continue;
					/* if (_4 === (15)) { */ case 70:
						/* */ if (rounded === ptrType$29.nil) { $s = 75; continue; }
						/* */ $s = 76; continue;
						/* if (rounded === ptrType$29.nil) { */ case 75:
							_r$23 = constant.Real(x$9); /* */ $s = 78; case 78: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
							_r$24 = fitsFloat32(_r$23); /* */ $s = 79; case 79: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
							if (!(_r$24)) { _v = false; $s = 77; continue s; }
							_r$25 = constant.Imag(x$9); /* */ $s = 80; case 80: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
							_r$26 = fitsFloat32(_r$25); /* */ $s = 81; case 81: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
							_v = _r$26; case 77:
							$s = -1; return _v;
						/* } */ case 76:
						_r$27 = constant.Real(x$9); /* */ $s = 82; case 82: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
						_r$28 = roundFloat32(_r$27); /* */ $s = 83; case 83: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
						re = _r$28;
						_r$29 = constant.Imag(x$9); /* */ $s = 84; case 84: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
						_r$30 = roundFloat32(_r$29); /* */ $s = 85; case 85: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
						im = _r$30;
						/* */ if (!($interfaceIsEqual(re, $ifaceNil)) && !($interfaceIsEqual(im, $ifaceNil))) { $s = 86; continue; }
						/* */ $s = 87; continue;
						/* if (!($interfaceIsEqual(re, $ifaceNil)) && !($interfaceIsEqual(im, $ifaceNil))) { */ case 86:
							_arg = re;
							_r$31 = constant.MakeImag(im); /* */ $s = 88; case 88: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
							_arg$1 = _r$31;
							_r$32 = constant.BinaryOp(_arg, 12, _arg$1); /* */ $s = 89; case 89: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
							rounded.$set(_r$32);
							$s = -1; return true;
						/* } */ case 87:
						$s = 74; continue;
					/* } else if (_4 === (16)) { */ case 71:
						/* */ if (rounded === ptrType$29.nil) { $s = 90; continue; }
						/* */ $s = 91; continue;
						/* if (rounded === ptrType$29.nil) { */ case 90:
							_r$33 = constant.Real(x$9); /* */ $s = 93; case 93: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
							_r$34 = fitsFloat64(_r$33); /* */ $s = 94; case 94: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
							if (!(_r$34)) { _v$1 = false; $s = 92; continue s; }
							_r$35 = constant.Imag(x$9); /* */ $s = 95; case 95: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
							_r$36 = fitsFloat64(_r$35); /* */ $s = 96; case 96: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
							_v$1 = _r$36; case 92:
							$s = -1; return _v$1;
						/* } */ case 91:
						_r$37 = constant.Real(x$9); /* */ $s = 97; case 97: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
						_r$38 = roundFloat64(_r$37); /* */ $s = 98; case 98: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
						re$1 = _r$38;
						_r$39 = constant.Imag(x$9); /* */ $s = 99; case 99: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
						_r$40 = roundFloat64(_r$39); /* */ $s = 100; case 100: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
						im$1 = _r$40;
						/* */ if (!($interfaceIsEqual(re$1, $ifaceNil)) && !($interfaceIsEqual(im$1, $ifaceNil))) { $s = 101; continue; }
						/* */ $s = 102; continue;
						/* if (!($interfaceIsEqual(re$1, $ifaceNil)) && !($interfaceIsEqual(im$1, $ifaceNil))) { */ case 101:
							_arg$2 = re$1;
							_r$41 = constant.MakeImag(im$1); /* */ $s = 103; case 103: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
							_arg$3 = _r$41;
							_r$42 = constant.BinaryOp(_arg$2, 12, _arg$3); /* */ $s = 104; case 104: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
							rounded.$set(_r$42);
							$s = -1; return true;
						/* } */ case 102:
						$s = 74; continue;
					/* } else if (_4 === (23)) { */ case 72:
						$s = -1; return true;
					/* } else { */ case 73:
						unreachable();
					/* } */ case 74:
				case 69:
				$s = 10; continue;
			/* } else if (_r$4) { */ case 8:
				_r$43 = x.Kind(); /* */ $s = 105; case 105: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
				$s = -1; return _r$43 === 2;
			/* } else if (_r$5) { */ case 9:
				_r$44 = x.Kind(); /* */ $s = 106; case 106: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
				$s = -1; return _r$44 === 1;
			/* } */ case 10:
		case 4:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: representableConst }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$4 = _r$4; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$44 = _r$44; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._v = _v; $f._v$1 = _v$1; $f.conf = conf; $f.im = im; $f.im$1 = im$1; $f.n = n; $f.ok = ok; $f.r = r; $f.r$1 = r$1; $f.re = re; $f.re$1 = re$1; $f.rounded = rounded; $f.s = s; $f.s$1 = s$1; $f.s$2 = s$2; $f.typ = typ; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.ptr.prototype.representable = function(x, typ) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, check, msg, typ, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; _v$1 = $f._v$1; check = $f.check; msg = $f.msg; typ = $f.typ; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		assert(x.mode === 4);
		_r = representableConst(x.val, check.conf, typ, (x.$ptr_val || (x.$ptr_val = new ptrType$29(function() { return this.$target.val; }, function($v) { this.$target.val = $v; }, x)))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			msg = "";
			_r$1 = isNumeric(x.typ); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			if (!(_r$1)) { _v = false; $s = 7; continue s; }
			_r$2 = isNumeric(typ); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_v = _r$2; case 7:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				_r$3 = isInteger(x.typ); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				if (!(!_r$3)) { _v$1 = false; $s = 13; continue s; }
				_r$4 = isInteger(typ); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_v$1 = _r$4; case 13:
				/* */ if (_v$1) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_v$1) { */ case 10:
					msg = "%s truncated to %s";
					$s = 12; continue;
				/* } else { */ case 11:
					msg = "%s overflows %s";
				/* } */ case 12:
				$s = 6; continue;
			/* } else { */ case 5:
				msg = "cannot convert %s to %s";
			/* } */ case 6:
			_r$5 = x.pos(); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$r = check.errorf(_r$5, msg, new sliceType$4([x, typ])); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			x.mode = 0;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.representable }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f._v$1 = _v$1; $f.check = check; $f.msg = msg; $f.typ = typ; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.representable = function(x, typ) { return this.$val.representable(x, typ); };
	Checker.ptr.prototype.updateExprType = function(x, typ, final$1) {
		var _arg, _arg$1, _arg$2, _arg$3, _entry, _key, _r, _r$1, _r$2, _r$3, _r$4, _ref, _tuple, _v, c, check, final$1, found, old, typ, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _tuple = $f._tuple; _v = $f._v; c = $f.c; check = $f.check; final$1 = $f.final$1; found = $f.found; old = $f.old; typ = $f.typ; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = [c];
		check = this;
		_tuple = (_entry = check.untyped[ast.Expr.keyFor(x)], _entry !== undefined ? [_entry.v, true] : [new exprInfo.ptr(false, 0, ptrType$4.nil, $ifaceNil), false]);
		old = $clone(_tuple[0], exprInfo);
		found = _tuple[1];
		if (!found) {
			$s = -1; return;
		}
		_ref = x;
		/* */ if ($assertType(_ref, ptrType$40, true)[1] || $assertType(_ref, ptrType$41, true)[1] || $assertType(_ref, ptrType$42, true)[1] || $assertType(_ref, ptrType$43, true)[1] || $assertType(_ref, ptrType$44, true)[1] || $assertType(_ref, ptrType$45, true)[1] || $assertType(_ref, ptrType$46, true)[1] || $assertType(_ref, ptrType$47, true)[1] || $assertType(_ref, ptrType$48, true)[1] || $assertType(_ref, ptrType$49, true)[1] || $assertType(_ref, ptrType$50, true)[1] || $assertType(_ref, ptrType$51, true)[1] || $assertType(_ref, ptrType$52, true)[1] || $assertType(_ref, ptrType$53, true)[1] || $assertType(_ref, ptrType$54, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$55, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$7, true)[1] || $assertType(_ref, ptrType$56, true)[1] || $assertType(_ref, ptrType$11, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$18, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$39, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$57, true)[1]) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* switch (0) { default: if ($assertType(_ref, ptrType$40, true)[1] || $assertType(_ref, ptrType$41, true)[1] || $assertType(_ref, ptrType$42, true)[1] || $assertType(_ref, ptrType$43, true)[1] || $assertType(_ref, ptrType$44, true)[1] || $assertType(_ref, ptrType$45, true)[1] || $assertType(_ref, ptrType$46, true)[1] || $assertType(_ref, ptrType$47, true)[1] || $assertType(_ref, ptrType$48, true)[1] || $assertType(_ref, ptrType$49, true)[1] || $assertType(_ref, ptrType$50, true)[1] || $assertType(_ref, ptrType$51, true)[1] || $assertType(_ref, ptrType$52, true)[1] || $assertType(_ref, ptrType$53, true)[1] || $assertType(_ref, ptrType$54, true)[1]) { */ case 1:
			x$1 = _ref;
			/* */ if (false) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (false) { */ case 9:
				_r = x$1.Pos(); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_arg = new token.Pos(_r);
				_arg$1 = x$1;
				_arg$2 = old.typ;
				_arg$3 = typ;
				$r = check.dump("%s: found old type(%s): %s (new: %s)", new sliceType$4([_arg, _arg$1, _arg$2, _arg$3])); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				unreachable();
			/* } */ case 10:
			$s = -1; return;
		/* } else if ($assertType(_ref, ptrType$55, true)[1]) { */ case 2:
			x$2 = _ref.$val;
			$s = 8; continue;
		/* } else if ($assertType(_ref, ptrType$7, true)[1] || $assertType(_ref, ptrType$56, true)[1] || $assertType(_ref, ptrType$11, true)[1]) { */ case 3:
			x$3 = _ref;
			$s = 8; continue;
		/* } else if ($assertType(_ref, ptrType$18, true)[1]) { */ case 4:
			x$4 = _ref.$val;
			$r = check.updateExprType(x$4.X, typ, final$1); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 8; continue;
		/* } else if ($assertType(_ref, ptrType$39, true)[1]) { */ case 5:
			x$5 = _ref.$val;
			if (!($interfaceIsEqual(old.val, $ifaceNil))) {
				/* break; */ $s = 8; continue;
			}
			$r = check.updateExprType(x$5.X, typ, final$1); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 8; continue;
		/* } else if ($assertType(_ref, ptrType$57, true)[1]) { */ case 6:
			x$6 = _ref.$val;
			if (!($interfaceIsEqual(old.val, $ifaceNil))) {
				/* break; */ $s = 8; continue;
			}
			/* */ if (isComparison(x$6.Op)) { $s = 15; continue; }
			/* */ if (isShift(x$6.Op)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (isComparison(x$6.Op)) { */ case 15:
				$s = 18; continue;
			/* } else if (isShift(x$6.Op)) { */ case 16:
				$r = check.updateExprType(x$6.X, typ, final$1); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 18; continue;
			/* } else { */ case 17:
				$r = check.updateExprType(x$6.X, typ, final$1); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = check.updateExprType(x$6.Y, typ, final$1); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 18:
			$s = 8; continue;
		/* } else { */ case 7:
			x$7 = _ref;
			unreachable();
		/* } } */ case 8:
		if (!(!final$1)) { _v = false; $s = 24; continue s; }
		_r$1 = isUntyped(typ); /* */ $s = 25; case 25: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = _r$1; case 24:
		/* */ if (_v) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (_v) { */ case 22:
			_r$2 = typ.Underlying(); /* */ $s = 26; case 26: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			old.typ = $assertType(_r$2, ptrType$4);
			_key = x; (check.untyped || $throwRuntimeError("assignment to entry in nil map"))[ast.Expr.keyFor(_key)] = { k: _key, v: $clone(old, exprInfo) };
			$s = -1; return;
		/* } */ case 23:
		delete check.untyped[ast.Expr.keyFor(x)];
		/* */ if (old.isLhs) { $s = 27; continue; }
		/* */ if (!($interfaceIsEqual(old.val, $ifaceNil))) { $s = 28; continue; }
		/* */ $s = 29; continue;
		/* if (old.isLhs) { */ case 27:
			_r$3 = isInteger(typ); /* */ $s = 32; case 32: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (!_r$3) { */ case 30:
				_r$4 = x.Pos(); /* */ $s = 33; case 33: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$r = check.invalidOp(_r$4, "shifted operand %s (type %s) must be integer", new sliceType$4([x, typ])); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 31:
			$s = 29; continue;
		/* } else if (!($interfaceIsEqual(old.val, $ifaceNil))) { */ case 28:
			c[0] = new operand.ptr(old.mode, x, old.typ, old.val, 0);
			$r = check.convertUntyped(c[0], typ); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (c[0].mode === 0) {
				$s = -1; return;
			}
		/* } */ case 29:
		$r = check.recordTypeAndValue(x, old.mode, typ, old.val); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.updateExprType }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._tuple = _tuple; $f._v = _v; $f.c = c; $f.check = check; $f.final$1 = final$1; $f.found = found; $f.old = old; $f.typ = typ; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.updateExprType = function(x, typ, final$1) { return this.$val.updateExprType(x, typ, final$1); };
	Checker.ptr.prototype.updateExprVal = function(x, val) {
		var _entry, _key, _tuple, check, info, ok, val, x;
		check = this;
		_tuple = (_entry = check.untyped[ast.Expr.keyFor(x)], _entry !== undefined ? [_entry.v, true] : [new exprInfo.ptr(false, 0, ptrType$4.nil, $ifaceNil), false]);
		info = $clone(_tuple[0], exprInfo);
		ok = _tuple[1];
		if (ok) {
			info.val = val;
			_key = x; (check.untyped || $throwRuntimeError("assignment to entry in nil map"))[ast.Expr.keyFor(_key)] = { k: _key, v: $clone(info, exprInfo) };
		}
	};
	Checker.prototype.updateExprVal = function(x, val) { return this.$val.updateExprVal(x, val); };
	Checker.ptr.prototype.convertUntyped = function(x, target) {
		var _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _v, _v$1, check, t, t$1, t$2, t$3, target, tkind, x, xkind, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _v = $f._v; _v$1 = $f._v$1; check = $f.check; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; t$3 = $f.t$3; target = $f.target; tkind = $f.tkind; x = $f.x; xkind = $f.xkind; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		if (x.mode === 0) { _v = true; $s = 3; continue s; }
		_r = isTyped(x.typ); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 3:
		/* */ if (_v || $interfaceIsEqual(target, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v || $interfaceIsEqual(target, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]))) { */ case 1:
			$s = -1; return;
		/* } */ case 2:
		_r$1 = isUntyped(target); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$1) { */ case 5:
			xkind = $assertType(x.typ, ptrType$4).kind;
			tkind = $assertType(target, ptrType$4).kind;
			_r$2 = isNumeric(x.typ); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			if (!(_r$2)) { _v$1 = false; $s = 11; continue s; }
			_r$3 = isNumeric(target); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_v$1 = _r$3; case 11:
			/* */ if (_v$1) { $s = 8; continue; }
			/* */ if (!((xkind === tkind))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_v$1) { */ case 8:
				/* */ if (xkind < tkind) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (xkind < tkind) { */ case 14:
					x.typ = target;
					$r = check.updateExprType(x.expr, target, false); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 15:
				$s = 10; continue;
			/* } else if (!((xkind === tkind))) { */ case 9:
				/* goto Error */ $s = 17; continue;
			/* } */ case 10:
			$s = -1; return;
		/* } */ case 6:
		_r$4 = target.Underlying(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_ref = _r$4;
		/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, ptrType$58, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, ptrType$17, true)[1] || $assertType(_ref, ptrType$19, true)[1] || $assertType(_ref, ptrType$12, true)[1] || $assertType(_ref, ptrType$15, true)[1] || $assertType(_ref, ptrType$14, true)[1]) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if ($assertType(_ref, ptrType$4, true)[1]) { */ case 19:
			t = _ref.$val;
			/* */ if (x.mode === 4) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (x.mode === 4) { */ case 24:
				$r = check.representable(x, t); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (x.mode === 0) {
					$s = -1; return;
				}
				check.updateExprVal(x.expr, x.val);
				$s = 26; continue;
			/* } else { */ case 25:
					_1 = $assertType(x.typ, ptrType$4).kind;
					/* */ if (_1 === (19)) { $s = 29; continue; }
					/* */ if ((_1 === (20)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23))) { $s = 30; continue; }
					/* */ if (_1 === (24)) { $s = 31; continue; }
					/* */ if (_1 === (25)) { $s = 32; continue; }
					/* */ $s = 33; continue;
					/* if (_1 === (19)) { */ case 29:
						_r$5 = isBoolean(target); /* */ $s = 37; case 37: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						/* */ if (!_r$5) { $s = 35; continue; }
						/* */ $s = 36; continue;
						/* if (!_r$5) { */ case 35:
							/* goto Error */ $s = 17; continue;
						/* } */ case 36:
						$s = 34; continue;
					/* } else if ((_1 === (20)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23))) { */ case 30:
						_r$6 = isNumeric(target); /* */ $s = 40; case 40: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						/* */ if (!_r$6) { $s = 38; continue; }
						/* */ $s = 39; continue;
						/* if (!_r$6) { */ case 38:
							/* goto Error */ $s = 17; continue;
						/* } */ case 39:
						$s = 34; continue;
					/* } else if (_1 === (24)) { */ case 31:
						unreachable();
						$s = 34; continue;
					/* } else if (_1 === (25)) { */ case 32:
						_r$7 = hasNil(target); /* */ $s = 43; case 43: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						/* */ if (!_r$7) { $s = 41; continue; }
						/* */ $s = 42; continue;
						/* if (!_r$7) { */ case 41:
							/* goto Error */ $s = 17; continue;
						/* } */ case 42:
						$s = 34; continue;
					/* } else { */ case 33:
						/* goto Error */ $s = 17; continue;
					/* } */ case 34:
				case 28:
			/* } */ case 26:
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$58, true)[1]) { */ case 20:
			t$1 = _ref.$val;
			/* */ if (!x.isNil() && !t$1.Empty()) { $s = 44; continue; }
			/* */ $s = 45; continue;
			/* if (!x.isNil() && !t$1.Empty()) { */ case 44:
				/* goto Error */ $s = 17; continue;
			/* } */ case 45:
			/* */ if (x.isNil()) { $s = 46; continue; }
			/* */ $s = 47; continue;
			/* if (x.isNil()) { */ case 46:
				target = (25 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 25]);
				$s = 48; continue;
			/* } else { */ case 47:
				/* */ if (!t$1.Empty()) { $s = 49; continue; }
				/* */ $s = 50; continue;
				/* if (!t$1.Empty()) { */ case 49:
					/* goto Error */ $s = 17; continue;
				/* } */ case 50:
				target = Default(x.typ);
			/* } */ case 48:
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$17, true)[1] || $assertType(_ref, ptrType$19, true)[1] || $assertType(_ref, ptrType$12, true)[1] || $assertType(_ref, ptrType$15, true)[1] || $assertType(_ref, ptrType$14, true)[1]) { */ case 21:
			t$2 = _ref;
			/* */ if (!x.isNil()) { $s = 51; continue; }
			/* */ $s = 52; continue;
			/* if (!x.isNil()) { */ case 51:
				/* goto Error */ $s = 17; continue;
			/* } */ case 52:
			target = (25 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 25]);
			$s = 23; continue;
		/* } else { */ case 22:
			t$3 = _ref;
			/* goto Error */ $s = 17; continue;
		/* } */ case 23:
		x.typ = target;
		$r = check.updateExprType(x.expr, target, true); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* Error: */ case 17:
		_r$8 = x.pos(); /* */ $s = 54; case 54: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$r = check.errorf(_r$8, "cannot convert %s to %s", new sliceType$4([x, target])); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		x.mode = 0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.convertUntyped }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._v = _v; $f._v$1 = _v$1; $f.check = check; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.t$3 = t$3; $f.target = target; $f.tkind = tkind; $f.x = x; $f.xkind = xkind; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.convertUntyped = function(x, target) { return this.$val.convertUntyped(x, target); };
	Checker.ptr.prototype.comparison = function(x, y, op) {
		var _1, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, _v$1, _v$2, _v$3, _v$4, check, defined, err, op, typ, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; check = $f.check; defined = $f.defined; err = $f.err; op = $f.op; typ = $f.typ; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		err = "";
		_r = x.assignableTo(check.conf, y.typ, ptrType$9.nil); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (_r) { _v = true; $s = 4; continue s; }
		_r$1 = y.assignableTo(check.conf, x.typ, ptrType$9.nil); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = _r$1; case 4:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			defined = false;
				_1 = op;
				/* */ if ((_1 === (39)) || (_1 === (44))) { $s = 8; continue; }
				/* */ if ((_1 === (40)) || (_1 === (45)) || (_1 === (41)) || (_1 === (46))) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if ((_1 === (39)) || (_1 === (44))) { */ case 8:
					_r$2 = Comparable(x.typ); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					if (_r$2) { _v$2 = true; $s = 13; continue s; }
					if (!(x.isNil())) { _v$3 = false; $s = 15; continue s; }
					_r$3 = hasNil(y.typ); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_v$3 = _r$3; case 15:
					_v$2 = _v$3; case 13:
					if (_v$2) { _v$1 = true; $s = 12; continue s; }
					if (!(y.isNil())) { _v$4 = false; $s = 17; continue s; }
					_r$4 = hasNil(x.typ); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_v$4 = _r$4; case 17:
					_v$1 = _v$4; case 12:
					defined = _v$1;
					$s = 11; continue;
				/* } else if ((_1 === (40)) || (_1 === (45)) || (_1 === (41)) || (_1 === (46))) { */ case 9:
					_r$5 = isOrdered(x.typ); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					defined = _r$5;
					$s = 11; continue;
				/* } else { */ case 10:
					unreachable();
				/* } */ case 11:
			case 7:
			/* */ if (!defined) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (!defined) { */ case 20:
				typ = x.typ;
				if (x.isNil()) {
					typ = y.typ;
				}
				_r$6 = check.sprintf("operator %s not defined for %s", new sliceType$4([new token.Token(op), typ])); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				err = _r$6;
			/* } */ case 21:
			$s = 3; continue;
		/* } else { */ case 2:
			_r$7 = check.sprintf("mismatched types %s and %s", new sliceType$4([x.typ, y.typ])); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			err = _r$7;
		/* } */ case 3:
		/* */ if (!(err === "")) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (!(err === "")) { */ case 24:
			_r$8 = x.pos(); /* */ $s = 26; case 26: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			$r = check.errorf(_r$8, "cannot compare %s %s %s (%s)", new sliceType$4([x.expr, new token.Token(op), y.expr, new $String(err)])); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			x.mode = 0;
			$s = -1; return;
		/* } */ case 25:
		/* */ if ((x.mode === 4) && (y.mode === 4)) { $s = 28; continue; }
		/* */ $s = 29; continue;
		/* if ((x.mode === 4) && (y.mode === 4)) { */ case 28:
			_r$9 = constant.Compare(x.val, op, y.val); /* */ $s = 31; case 31: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$10 = constant.MakeBool(_r$9); /* */ $s = 32; case 32: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			x.val = _r$10;
			$s = 30; continue;
		/* } else { */ case 29:
			x.mode = 7;
			$r = check.updateExprType(x.expr, Default(x.typ), true); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = check.updateExprType(y.expr, Default(y.typ), true); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 30:
		x.typ = (19 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 19]);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.comparison }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f.check = check; $f.defined = defined; $f.err = err; $f.op = op; $f.typ = typ; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.comparison = function(x, y, op) { return this.$val.comparison(x, y, op); };
	Checker.ptr.prototype.shift = function(x, y, e, op) {
		var _arg, _arg$1, _entry, _key, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _v, _v$1, _v$2, check, e, found, info, ok, op, s, untypedx, x, xval, y, yval, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; check = $f.check; e = $f.e; found = $f.found; info = $f.info; ok = $f.ok; op = $f.op; s = $f.s; untypedx = $f.untypedx; x = $f.x; xval = $f.xval; y = $f.y; yval = $f.yval; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_r = isUntyped(x.typ); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		untypedx = _r;
		xval = $ifaceNil;
		/* */ if (x.mode === 4) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (x.mode === 4) { */ case 2:
			_r$1 = constant.ToInt(x.val); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			xval = _r$1;
		/* } */ case 3:
		_r$2 = isInteger(x.typ); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		if (_r$2) { _v = true; $s = 8; continue s; }
		if (!(untypedx && !($interfaceIsEqual(xval, $ifaceNil)))) { _v$1 = false; $s = 10; continue s; }
		_r$3 = xval.Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v$1 = _r$3 === 3; case 10:
		_v = _v$1; case 8:
		/* */ if (_v) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_v) { */ case 5:
			$s = 7; continue;
		/* } else { */ case 6:
			_r$4 = x.pos(); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$r = check.invalidOp(_r$4, "shifted operand %s must be integer", new sliceType$4([x])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			x.mode = 0;
			$s = -1; return;
		/* } */ case 7:
			_r$5 = isUnsigned(y.typ); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (_r$5) { $s = 15; continue; }
			_r$6 = isUntyped(y.typ); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			/* */ if (_r$6) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (_r$5) { */ case 15:
				$s = 18; continue;
			/* } else if (_r$6) { */ case 16:
				$r = check.convertUntyped(y, (7 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 7])); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (y.mode === 0) {
					x.mode = 0;
					$s = -1; return;
				}
				$s = 18; continue;
			/* } else { */ case 17:
				_r$7 = y.pos(); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$r = check.invalidOp(_r$7, "shift count %s must be unsigned integer", new sliceType$4([y])); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				x.mode = 0;
				$s = -1; return;
			/* } */ case 18:
		case 14:
		/* */ if (x.mode === 4) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (x.mode === 4) { */ case 24:
			/* */ if (y.mode === 4) { $s = 26; continue; }
			/* */ $s = 27; continue;
			/* if (y.mode === 4) { */ case 26:
				_r$8 = constant.ToInt(y.val); /* */ $s = 28; case 28: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				yval = _r$8;
				_r$9 = yval.Kind(); /* */ $s = 31; case 31: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				/* */ if (!((_r$9 === 3))) { $s = 29; continue; }
				/* */ $s = 30; continue;
				/* if (!((_r$9 === 3))) { */ case 29:
					_r$10 = y.pos(); /* */ $s = 32; case 32: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					$r = check.invalidOp(_r$10, "shift count %s must be unsigned integer", new sliceType$4([y])); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					x.mode = 0;
					$s = -1; return;
				/* } */ case 30:
				_r$11 = constant.Uint64Val(yval); /* */ $s = 34; case 34: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_tuple = _r$11;
				s = _tuple[0];
				ok = _tuple[1];
				/* */ if (!ok || (s.$high > 0 || (s.$high === 0 && s.$low > 1074))) { $s = 35; continue; }
				/* */ $s = 36; continue;
				/* if (!ok || (s.$high > 0 || (s.$high === 0 && s.$low > 1074))) { */ case 35:
					_r$12 = y.pos(); /* */ $s = 37; case 37: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					$r = check.invalidOp(_r$12, "invalid shift count %s", new sliceType$4([y])); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					x.mode = 0;
					$s = -1; return;
				/* } */ case 36:
				_r$13 = isInteger(x.typ); /* */ $s = 41; case 41: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				/* */ if (!_r$13) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if (!_r$13) { */ case 39:
					x.typ = (20 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 20]);
				/* } */ case 40:
				_r$14 = constant.Shift(xval, op, ((s.$low >>> 0))); /* */ $s = 42; case 42: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				x.val = _r$14;
				_r$15 = isTyped(x.typ); /* */ $s = 45; case 45: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				/* */ if (_r$15) { $s = 43; continue; }
				/* */ $s = 44; continue;
				/* if (_r$15) { */ case 43:
					if (!(e === ptrType$57.nil)) {
						x.expr = e;
					}
					_arg = x;
					_r$16 = x.typ.Underlying(); /* */ $s = 46; case 46: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					_arg$1 = $assertType(_r$16, ptrType$4);
					$r = check.representable(_arg, _arg$1); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 44:
				$s = -1; return;
			/* } */ case 27:
			if (untypedx) {
				_tuple$1 = (_entry = check.untyped[ast.Expr.keyFor(x.expr)], _entry !== undefined ? [_entry.v, true] : [new exprInfo.ptr(false, 0, ptrType$4.nil, $ifaceNil), false]);
				info = $clone(_tuple$1[0], exprInfo);
				found = _tuple$1[1];
				if (found) {
					info.isLhs = true;
					_key = x.expr; (check.untyped || $throwRuntimeError("assignment to entry in nil map"))[ast.Expr.keyFor(_key)] = { k: _key, v: $clone(info, exprInfo) };
				}
				x.mode = 7;
				$s = -1; return;
			}
		/* } */ case 25:
		if (!(y.mode === 4)) { _v$2 = false; $s = 50; continue s; }
		_r$17 = constant.Sign(y.val); /* */ $s = 51; case 51: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_v$2 = _r$17 < 0; case 50:
		/* */ if (_v$2) { $s = 48; continue; }
		/* */ $s = 49; continue;
		/* if (_v$2) { */ case 48:
			_r$18 = y.pos(); /* */ $s = 52; case 52: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			$r = check.invalidOp(_r$18, "shift count %s must not be negative", new sliceType$4([y])); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 49:
		_r$19 = isInteger(x.typ); /* */ $s = 56; case 56: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		/* */ if (!_r$19) { $s = 54; continue; }
		/* */ $s = 55; continue;
		/* if (!_r$19) { */ case 54:
			_r$20 = x.pos(); /* */ $s = 57; case 57: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			$r = check.invalidOp(_r$20, "shifted operand %s must be integer", new sliceType$4([x])); /* */ $s = 58; case 58: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			x.mode = 0;
			$s = -1; return;
		/* } */ case 55:
		x.mode = 7;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.shift }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.check = check; $f.e = e; $f.found = found; $f.info = info; $f.ok = ok; $f.op = op; $f.s = s; $f.untypedx = untypedx; $f.x = x; $f.xval = xval; $f.y = y; $f.yval = yval; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.shift = function(x, y, e, op) { return this.$val.shift(x, y, e, op); };
	Checker.ptr.prototype.binary = function(x, e, lhs, rhs, op) {
		var _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$2, _tmp$3, _v, _v$1, _v$2, _v$3, _v$4, check, e, im, im2, lhs, op, re, re2, rhs, typ, x, xval, y, yval, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; check = $f.check; e = $f.e; im = $f.im; im2 = $f.im2; lhs = $f.lhs; op = $f.op; re = $f.re; re2 = $f.re2; rhs = $f.rhs; typ = $f.typ; x = $f.x; xval = $f.xval; y = $f.y; yval = $f.yval; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		y = [y];
		check = this;
		y[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
		$r = check.expr(x, lhs); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = check.expr(y[0], rhs); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (x.mode === 0) {
			$s = -1; return;
		}
		if (y[0].mode === 0) {
			x.mode = 0;
			x.expr = y[0].expr;
			$s = -1; return;
		}
		/* */ if (isShift(op)) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (isShift(op)) { */ case 3:
			$r = check.shift(x, y[0], e, op); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 4:
		$r = check.convertUntyped(x, y[0].typ); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (x.mode === 0) {
			$s = -1; return;
		}
		$r = check.convertUntyped(y[0], x.typ); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (y[0].mode === 0) {
			x.mode = 0;
			$s = -1; return;
		}
		/* */ if (isComparison(op)) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (isComparison(op)) { */ case 8:
			$r = check.comparison(x, y[0], op); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 9:
		_r = Identical(x.typ, y[0].typ); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (!_r) { */ case 11:
			/* */ if (!($interfaceIsEqual(x.typ, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]))) && !($interfaceIsEqual(y[0].typ, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0])))) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!($interfaceIsEqual(x.typ, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]))) && !($interfaceIsEqual(y[0].typ, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0])))) { */ case 14:
				_r$1 = x.pos(); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = check.invalidOp(_r$1, "mismatched types %s and %s", new sliceType$4([x.typ, y[0].typ])); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 15:
			x.mode = 0;
			$s = -1; return;
		/* } */ case 12:
		_r$2 = check.op(binaryOpPredicates, x, op); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (!_r$2) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (!_r$2) { */ case 18:
			x.mode = 0;
			$s = -1; return;
		/* } */ case 19:
		/* */ if ((op === 15) || (op === 16)) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if ((op === 15) || (op === 16)) { */ case 21:
			if (x.mode === 4) { _v$1 = true; $s = 26; continue s; }
			_r$3 = isInteger(x.typ); /* */ $s = 27; case 27: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_v$1 = _r$3; case 26:
			if (!((_v$1) && (y[0].mode === 4))) { _v = false; $s = 25; continue s; }
			_r$4 = constant.Sign(y[0].val); /* */ $s = 28; case 28: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_v = _r$4 === 0; case 25:
			/* */ if (_v) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (_v) { */ case 23:
				_r$5 = y[0].pos(); /* */ $s = 29; case 29: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$r = check.invalidOp(_r$5, "division by zero", new sliceType$4([])); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				x.mode = 0;
				$s = -1; return;
			/* } */ case 24:
			if (!((x.mode === 4) && (y[0].mode === 4))) { _v$2 = false; $s = 33; continue s; }
			_r$6 = isComplex(x.typ); /* */ $s = 34; case 34: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_v$2 = _r$6; case 33:
			/* */ if (_v$2) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (_v$2) { */ case 31:
				_r$7 = constant.Real(y[0].val); /* */ $s = 35; case 35: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_tmp = _r$7;
				_r$8 = constant.Imag(y[0].val); /* */ $s = 36; case 36: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_tmp$1 = _r$8;
				re = _tmp;
				im = _tmp$1;
				_r$9 = constant.BinaryOp(re, 14, re); /* */ $s = 37; case 37: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_tmp$2 = _r$9;
				_r$10 = constant.BinaryOp(im, 14, im); /* */ $s = 38; case 38: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_tmp$3 = _r$10;
				re2 = _tmp$2;
				im2 = _tmp$3;
				_r$11 = constant.Sign(re2); /* */ $s = 42; case 42: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				if (!(_r$11 === 0)) { _v$3 = false; $s = 41; continue s; }
				_r$12 = constant.Sign(im2); /* */ $s = 43; case 43: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_v$3 = _r$12 === 0; case 41:
				/* */ if (_v$3) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if (_v$3) { */ case 39:
					_r$13 = y[0].pos(); /* */ $s = 44; case 44: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					$r = check.invalidOp(_r$13, "division by zero", new sliceType$4([])); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					x.mode = 0;
					$s = -1; return;
				/* } */ case 40:
			/* } */ case 32:
		/* } */ case 22:
		/* */ if ((x.mode === 4) && (y[0].mode === 4)) { $s = 46; continue; }
		/* */ $s = 47; continue;
		/* if ((x.mode === 4) && (y[0].mode === 4)) { */ case 46:
			xval = x.val;
			yval = y[0].val;
			_r$14 = x.typ.Underlying(); /* */ $s = 48; case 48: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			typ = $assertType(_r$14, ptrType$4);
			if (!(op === 15)) { _v$4 = false; $s = 51; continue s; }
			_r$15 = isInteger(typ); /* */ $s = 52; case 52: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_v$4 = _r$15; case 51:
			/* */ if (_v$4) { $s = 49; continue; }
			/* */ $s = 50; continue;
			/* if (_v$4) { */ case 49:
				op = 26;
			/* } */ case 50:
			_r$16 = constant.BinaryOp(xval, op, yval); /* */ $s = 53; case 53: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			x.val = _r$16;
			_r$17 = isTyped(typ); /* */ $s = 56; case 56: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ if (_r$17) { $s = 54; continue; }
			/* */ $s = 55; continue;
			/* if (_r$17) { */ case 54:
				if (!(e === ptrType$57.nil)) {
					x.expr = e;
				}
				$r = check.representable(x, typ); /* */ $s = 57; case 57: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 55:
			$s = -1; return;
		/* } */ case 47:
		x.mode = 7;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.binary }; } $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f.check = check; $f.e = e; $f.im = im; $f.im2 = im2; $f.lhs = lhs; $f.op = op; $f.re = re; $f.re2 = re2; $f.rhs = rhs; $f.typ = typ; $f.x = x; $f.xval = xval; $f.y = y; $f.yval = yval; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.binary = function(x, e, lhs, rhs, op) { return this.$val.binary(x, e, lhs, rhs, op); };
	Checker.ptr.prototype.index = function(index, max) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, check, i, index, max, valid, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; check = $f.check; i = $f.i; index = $f.index; max = $f.max; valid = $f.valid; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = [x];
		i = new $Int64(0, 0);
		valid = false;
		check = this;
		x[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
		$r = check.expr(x[0], index); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (x[0].mode === 0) {
			$s = -1; return [i, valid];
		}
		$r = check.convertUntyped(x[0], (2 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 2])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (x[0].mode === 0) {
			$s = -1; return [i, valid];
		}
		_r = isInteger(x[0].typ); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!_r) { */ case 3:
			_r$1 = x[0].pos(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$r = check.invalidArg(_r$1, "index %s must be integer", new sliceType$4([x[0]])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return [i, valid];
		/* } */ case 4:
		/* */ if (x[0].mode === 4) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (x[0].mode === 4) { */ case 8:
			_r$2 = constant.Sign(x[0].val); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2 < 0) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_r$2 < 0) { */ case 10:
				_r$3 = x[0].pos(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$r = check.invalidArg(_r$3, "index %s must not be negative", new sliceType$4([x[0]])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return [i, valid];
			/* } */ case 11:
			_r$4 = constant.ToInt(x[0].val); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = constant.Int64Val(_r$4); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple = _r$5;
			i = _tuple[0];
			valid = _tuple[1];
			/* */ if (!valid || (max.$high > 0 || (max.$high === 0 && max.$low >= 0)) && (i.$high > max.$high || (i.$high === max.$high && i.$low >= max.$low))) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (!valid || (max.$high > 0 || (max.$high === 0 && max.$low >= 0)) && (i.$high > max.$high || (i.$high === max.$high && i.$low >= max.$low))) { */ case 17:
				_r$6 = x[0].pos(); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$r = check.errorf(_r$6, "index %s is out of bounds", new sliceType$4([x[0]])); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_tmp = i;
				_tmp$1 = false;
				i = _tmp;
				valid = _tmp$1;
				$s = -1; return [i, valid];
			/* } */ case 18:
			_tmp$2 = i;
			_tmp$3 = true;
			i = _tmp$2;
			valid = _tmp$3;
			$s = -1; return [i, valid];
		/* } */ case 9:
		_tmp$4 = new $Int64(-1, 4294967295);
		_tmp$5 = true;
		i = _tmp$4;
		valid = _tmp$5;
		$s = -1; return [i, valid];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.index }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.check = check; $f.i = i; $f.index = index; $f.max = max; $f.valid = valid; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.index = function(index, max) { return this.$val.index(index, max); };
	Checker.ptr.prototype.indexedElts = function(elts, typ, length) {
		var _entry, _i, _key, _r, _r$1, _r$2, _r$3, _ref, _tmp, _tmp$1, _tuple, _tuple$1, check, e, elts, eval$1, i, index, kv, length, max, ok, typ, validIndex, visited, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; check = $f.check; e = $f.e; elts = $f.elts; eval$1 = $f.eval$1; i = $f.i; index = $f.index; kv = $f.kv; length = $f.length; max = $f.max; ok = $f.ok; typ = $f.typ; validIndex = $f.validIndex; visited = $f.visited; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		visited = (x = elts.$length, ((x < 0 || x > 2147483647) ? $throwRuntimeError("makemap: size out of range") : {}));
		_tmp = new $Int64(0, 0);
		_tmp$1 = new $Int64(0, 0);
		index = _tmp;
		max = _tmp$1;
		_ref = elts;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			x$1 = [x$1];
			e = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			validIndex = false;
			eval$1 = e;
			_tuple = $assertType(e, ptrType$47, true);
			kv = _tuple[0];
			/* */ if (!(kv === ptrType$47.nil)) { $s = 3; continue; }
			/* */ if ((length.$high > 0 || (length.$high === 0 && length.$low >= 0)) && (index.$high > length.$high || (index.$high === length.$high && index.$low >= length.$low))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!(kv === ptrType$47.nil)) { */ case 3:
				_r = check.index(kv.Key, length); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				i = _tuple$1[0];
				ok = _tuple$1[1];
				/* */ if (ok) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (ok) { */ case 8:
					/* */ if ((i.$high > 0 || (i.$high === 0 && i.$low >= 0))) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if ((i.$high > 0 || (i.$high === 0 && i.$low >= 0))) { */ case 10:
						index = i;
						validIndex = true;
						$s = 12; continue;
					/* } else { */ case 11:
						_r$1 = e.Pos(); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$r = check.errorf(_r$1, "index %s must be integer constant", new sliceType$4([kv.Key])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 12:
				/* } */ case 9:
				eval$1 = kv.Value;
				$s = 6; continue;
			/* } else if ((length.$high > 0 || (length.$high === 0 && length.$low >= 0)) && (index.$high > length.$high || (index.$high === length.$high && index.$low >= length.$low))) { */ case 4:
				_r$2 = e.Pos(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = check.errorf(_r$2, "index %d is out of bounds (>= %d)", new sliceType$4([index, length])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else { */ case 5:
				validIndex = true;
			/* } */ case 6:
			/* */ if (validIndex) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (validIndex) { */ case 17:
				/* */ if ((_entry = visited[$Int64.keyFor(index)], _entry !== undefined ? _entry.v : false)) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if ((_entry = visited[$Int64.keyFor(index)], _entry !== undefined ? _entry.v : false)) { */ case 19:
					_r$3 = e.Pos(); /* */ $s = 21; case 21: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$r = check.errorf(_r$3, "duplicate index %d in array or slice literal", new sliceType$4([index])); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 20:
				_key = index; (visited || $throwRuntimeError("assignment to entry in nil map"))[$Int64.keyFor(_key)] = { k: _key, v: true };
			/* } */ case 18:
			index = (x$2 = new $Int64(0, 1), new $Int64(index.$high + x$2.$high, index.$low + x$2.$low));
			if ((index.$high > max.$high || (index.$high === max.$high && index.$low > max.$low))) {
				max = index;
			}
			x$1[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
			$r = check.exprWithHint(x$1[0], eval$1, typ); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = check.assignment(x$1[0], typ, "array or slice literal"); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return max;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.indexedElts }; } $f._entry = _entry; $f._i = _i; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.check = check; $f.e = e; $f.elts = elts; $f.eval$1 = eval$1; $f.i = i; $f.index = index; $f.kv = kv; $f.length = length; $f.max = max; $f.ok = ok; $f.typ = typ; $f.validIndex = validIndex; $f.visited = visited; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.indexedElts = function(elts, typ, length) { return this.$val.indexedElts(elts, typ, length); };
	Checker.ptr.prototype.rawExpr = function(x, e, hint) {
		var _1, _r, _r$1, _r$2, check, e, hint, kind, typ, val, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; check = $f.check; e = $f.e; hint = $f.hint; kind = $f.kind; typ = $f.typ; val = $f.val; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		check = [check];
		e = [e];
		x = [x];
		check[0] = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			_r = e[0].Pos(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = check[0].trace(_r, "%s", new sliceType$4([e[0]])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			check[0].indent = check[0].indent + (1) >> 0;
			$deferred.push([(function(check, e, x) { return function $b() {
				var _r$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				check[0].indent = check[0].indent - (1) >> 0;
				_r$1 = e[0].Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = check[0].trace(_r$1, "=> %s", new sliceType$4([x[0]])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$1 = _r$1; $f.$s = $s; $f.$r = $r; return $f;
			}; })(check, e, x), []]);
		/* } */ case 2:
		_r$1 = check[0].exprInternal(x[0], e[0], hint); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		kind = _r$1;
		typ = $ifaceNil;
		val = $ifaceNil;
		_1 = x[0].mode;
		if (_1 === (0)) {
			typ = (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]);
		} else if (_1 === (1)) {
			typ = (ptrType$16.nil);
		} else if (_1 === (4)) {
			typ = x[0].typ;
			val = x[0].val;
		} else {
			typ = x[0].typ;
		}
		assert(!($interfaceIsEqual(x[0].expr, $ifaceNil)) && !($interfaceIsEqual(typ, $ifaceNil)));
		_r$2 = isUntyped(typ); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_r$2) { */ case 6:
			check[0].rememberUntyped(x[0].expr, false, x[0].mode, $assertType(typ, ptrType$4), val);
			$s = 8; continue;
		/* } else { */ case 7:
			$r = check[0].recordTypeAndValue(e[0], x[0].mode, typ, val); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		$s = -1; return kind;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return 0; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.rawExpr }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.check = check; $f.e = e; $f.hint = hint; $f.kind = kind; $f.typ = typ; $f.val = val; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Checker.prototype.rawExpr = function(x, e, hint) { return this.$val.rawExpr(x, e, hint); };
	Checker.ptr.prototype.exprInternal = function(x, e, hint) {
		var T, _1, _arg, _arg$1, _entry, _entry$1, _entry$2, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _i$6, _i$7, _key, _key$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$4, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$5, _r$50, _r$51, _r$52, _r$53, _r$54, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$10, _ref$11, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _ref$7, _ref$8, _ref$9, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, atyp, base, check, duplicate, e, e$1, e$10, e$11, e$12, e$13, e$14, e$15, e$16, e$17, e$18, e$19, e$2, e$20, e$21, e$22, e$23, e$3, e$4, e$5, e$6, e$7, e$8, e$9, ellip, etyp, etyp$1, expr, fields, fld, fld$1, hint, i, i$1, i$2, i$3, ind, key, key$1, kind, kv, kv$1, kv$2, kv$3, length, length$1, max, n, ok, ok$1, ok$2, ok$3, ok$4, sig, t, typ, typ$1, typ$10, typ$11, typ$12, typ$2, typ$3, typ$4, typ$5, typ$6, typ$7, typ$8, typ$9, utyp, utyp$1, utyp$2, utyp$3, utyp$4, valid, valid$1, visited, visited$1, vtyp, x, x$1, x$2, x$3, x$4, x$5, x$6, xkey, xtyp, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _i$6 = $f._i$6; _i$7 = $f._i$7; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$4 = $f._r$4; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$44 = $f._r$44; _r$45 = $f._r$45; _r$46 = $f._r$46; _r$47 = $f._r$47; _r$48 = $f._r$48; _r$49 = $f._r$49; _r$5 = $f._r$5; _r$50 = $f._r$50; _r$51 = $f._r$51; _r$52 = $f._r$52; _r$53 = $f._r$53; _r$54 = $f._r$54; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$10 = $f._ref$10; _ref$11 = $f._ref$11; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _ref$7 = $f._ref$7; _ref$8 = $f._ref$8; _ref$9 = $f._ref$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; atyp = $f.atyp; base = $f.base; check = $f.check; duplicate = $f.duplicate; e = $f.e; e$1 = $f.e$1; e$10 = $f.e$10; e$11 = $f.e$11; e$12 = $f.e$12; e$13 = $f.e$13; e$14 = $f.e$14; e$15 = $f.e$15; e$16 = $f.e$16; e$17 = $f.e$17; e$18 = $f.e$18; e$19 = $f.e$19; e$2 = $f.e$2; e$20 = $f.e$20; e$21 = $f.e$21; e$22 = $f.e$22; e$23 = $f.e$23; e$3 = $f.e$3; e$4 = $f.e$4; e$5 = $f.e$5; e$6 = $f.e$6; e$7 = $f.e$7; e$8 = $f.e$8; e$9 = $f.e$9; ellip = $f.ellip; etyp = $f.etyp; etyp$1 = $f.etyp$1; expr = $f.expr; fields = $f.fields; fld = $f.fld; fld$1 = $f.fld$1; hint = $f.hint; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; ind = $f.ind; key = $f.key; key$1 = $f.key$1; kind = $f.kind; kv = $f.kv; kv$1 = $f.kv$1; kv$2 = $f.kv$2; kv$3 = $f.kv$3; length = $f.length; length$1 = $f.length$1; max = $f.max; n = $f.n; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; ok$4 = $f.ok$4; sig = $f.sig; t = $f.t; typ = $f.typ; typ$1 = $f.typ$1; typ$10 = $f.typ$10; typ$11 = $f.typ$11; typ$12 = $f.typ$12; typ$2 = $f.typ$2; typ$3 = $f.typ$3; typ$4 = $f.typ$4; typ$5 = $f.typ$5; typ$6 = $f.typ$6; typ$7 = $f.typ$7; typ$8 = $f.typ$8; typ$9 = $f.typ$9; utyp = $f.utyp; utyp$1 = $f.utyp$1; utyp$2 = $f.utyp$2; utyp$3 = $f.utyp$3; utyp$4 = $f.utyp$4; valid = $f.valid; valid$1 = $f.valid$1; visited = $f.visited; visited$1 = $f.visited$1; vtyp = $f.vtyp; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; xkey = $f.xkey; xtyp = $f.xtyp; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		key = [key];
		check = this;
		x.mode = 0;
		x.typ = (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]);
		_ref = e;
		/* */ if ($assertType(_ref, ptrType$53, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$40, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$7, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$59, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$56, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$41, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$42, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$18, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$11, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref, ptrType$43, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref, ptrType$44, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref, ptrType$45, true)[1]) { $s = 12; continue; }
		/* */ if ($assertType(_ref, ptrType$55, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref, ptrType$46, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref, ptrType$39, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref, ptrType$57, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, ptrType$47, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, ptrType$48, true)[1] || $assertType(_ref, ptrType$49, true)[1] || $assertType(_ref, ptrType$50, true)[1] || $assertType(_ref, ptrType$51, true)[1] || $assertType(_ref, ptrType$52, true)[1] || $assertType(_ref, ptrType$54, true)[1]) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if ($assertType(_ref, ptrType$53, true)[1]) { */ case 1:
			e$1 = _ref.$val;
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType$40, true)[1]) { */ case 2:
			e$2 = _ref.$val;
			/* goto Error */ $s = 21; continue;
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType$7, true)[1]) { */ case 3:
			e$3 = _ref.$val;
			$r = check.ident(x, e$3, ptrType$6.nil, sliceType$16.nil); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType$59, true)[1]) { */ case 4:
			e$4 = _ref.$val;
			$r = check.error(e$4.Pos(), "invalid use of '...'"); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* goto Error */ $s = 21; continue;
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType$56, true)[1]) { */ case 5:
			e$5 = _ref.$val;
			$r = x.setConst(e$5.Kind, e$5.Value); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (x.mode === 0) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (x.mode === 0) { */ case 25:
				$r = check.invalidAST(e$5.Pos(), "invalid literal %v", new sliceType$4([new $String(e$5.Value)])); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* goto Error */ $s = 21; continue;
			/* } */ case 26:
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType$41, true)[1]) { */ case 6:
			e$6 = _ref.$val;
			_r = check.typ(e$6.Type); /* */ $s = 28; case 28: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = $assertType(_r, ptrType$19, true);
			sig = _tuple[0];
			ok = _tuple[1];
			/* */ if (ok) { $s = 29; continue; }
			/* */ $s = 30; continue;
			/* if (ok) { */ case 29:
				$r = check.funcBody(check.context.decl, "", sig, e$6.Body); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				x.mode = 7;
				x.typ = sig;
				$s = 31; continue;
			/* } else { */ case 30:
				_r$1 = e$6.Pos(); /* */ $s = 33; case 33: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = check.invalidAST(_r$1, "invalid function literal %s", new sliceType$4([e$6])); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* goto Error */ $s = 21; continue;
			/* } */ case 31:
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType$42, true)[1]) { */ case 7:
			e$7 = _ref.$val;
			_tmp = $ifaceNil;
			_tmp$1 = $ifaceNil;
			typ = _tmp;
			base = _tmp$1;
				/* */ if (!($interfaceIsEqual(e$7.Type, $ifaceNil))) { $s = 36; continue; }
				/* */ if (!($interfaceIsEqual(hint, $ifaceNil))) { $s = 37; continue; }
				/* */ $s = 38; continue;
				/* if (!($interfaceIsEqual(e$7.Type, $ifaceNil))) { */ case 36:
					_tuple$1 = $assertType(e$7.Type, ptrType$48, true);
					atyp = _tuple$1[0];
					/* */ if (!(atyp === ptrType$48.nil) && !($interfaceIsEqual(atyp.Len, $ifaceNil))) { $s = 40; continue; }
					/* */ $s = 41; continue;
					/* if (!(atyp === ptrType$48.nil) && !($interfaceIsEqual(atyp.Len, $ifaceNil))) { */ case 40:
						_tuple$2 = $assertType(atyp.Len, ptrType$59, true);
						ellip = _tuple$2[0];
						/* */ if (!(ellip === ptrType$59.nil) && $interfaceIsEqual(ellip.Elt, $ifaceNil)) { $s = 42; continue; }
						/* */ $s = 43; continue;
						/* if (!(ellip === ptrType$59.nil) && $interfaceIsEqual(ellip.Elt, $ifaceNil)) { */ case 42:
							_r$2 = check.typ(atyp.Elt); /* */ $s = 44; case 44: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
							typ = new Array.ptr(new $Int64(-1, 4294967295), _r$2);
							base = typ;
							/* break; */ $s = 35; continue;
						/* } */ case 43:
					/* } */ case 41:
					_r$3 = check.typ(e$7.Type); /* */ $s = 45; case 45: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					typ = _r$3;
					base = typ;
					$s = 39; continue;
				/* } else if (!($interfaceIsEqual(hint, $ifaceNil))) { */ case 37:
					typ = hint;
					_r$4 = typ.Underlying(); /* */ $s = 46; case 46: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$5 = deref(_r$4); /* */ $s = 47; case 47: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$3 = _r$5;
					base = _tuple$3[0];
					$s = 39; continue;
				/* } else { */ case 38:
					_r$6 = e$7.Pos(); /* */ $s = 48; case 48: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$r = check.error(_r$6, "missing type in composite literal"); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* goto Error */ $s = 21; continue;
				/* } */ case 39:
			case 35:
			_r$7 = base.Underlying(); /* */ $s = 50; case 50: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_ref$1 = _r$7;
			/* */ if ($assertType(_ref$1, ptrType$30, true)[1]) { $s = 51; continue; }
			/* */ if ($assertType(_ref$1, ptrType$13, true)[1]) { $s = 52; continue; }
			/* */ if ($assertType(_ref$1, ptrType$12, true)[1]) { $s = 53; continue; }
			/* */ if ($assertType(_ref$1, ptrType$15, true)[1]) { $s = 54; continue; }
			/* */ $s = 55; continue;
			/* switch (0) { default: if ($assertType(_ref$1, ptrType$30, true)[1]) { */ case 51:
				utyp = _ref$1.$val;
				if (e$7.Elts.$length === 0) {
					/* break; */ $s = 56; continue;
				}
				fields = utyp.fields;
				_tuple$4 = $assertType((x$1 = e$7.Elts, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])), ptrType$47, true);
				ok$1 = _tuple$4[1];
				/* */ if (ok$1) { $s = 57; continue; }
				/* */ $s = 58; continue;
				/* if (ok$1) { */ case 57:
					visited = $makeSlice(sliceType$19, fields.$length);
					_ref$2 = e$7.Elts;
					_i = 0;
					/* while (true) { */ case 60:
						/* if (!(_i < _ref$2.$length)) { break; } */ if(!(_i < _ref$2.$length)) { $s = 61; continue; }
						e$20 = ((_i < 0 || _i >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i]);
						_tuple$5 = $assertType(e$20, ptrType$47, true);
						kv = _tuple$5[0];
						/* */ if (kv === ptrType$47.nil) { $s = 62; continue; }
						/* */ $s = 63; continue;
						/* if (kv === ptrType$47.nil) { */ case 62:
							_r$8 = e$20.Pos(); /* */ $s = 64; case 64: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
							$r = check.error(_r$8, "mixture of field:value and value elements in struct literal"); /* */ $s = 65; case 65: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							_i++;
							/* continue; */ $s = 60; continue;
						/* } */ case 63:
						_tuple$6 = $assertType(kv.Key, ptrType$7, true);
						key$1 = _tuple$6[0];
						/* */ if (key$1 === ptrType$7.nil) { $s = 66; continue; }
						/* */ $s = 67; continue;
						/* if (key$1 === ptrType$7.nil) { */ case 66:
							_r$9 = kv.Pos(); /* */ $s = 68; case 68: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
							$r = check.errorf(_r$9, "invalid field name %s in struct literal", new sliceType$4([kv.Key])); /* */ $s = 69; case 69: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							_i++;
							/* continue; */ $s = 60; continue;
						/* } */ case 67:
						i = fieldIndex(utyp.fields, check.pkg, key$1.Name);
						/* */ if (i < 0) { $s = 70; continue; }
						/* */ $s = 71; continue;
						/* if (i < 0) { */ case 70:
							_r$10 = kv.Pos(); /* */ $s = 72; case 72: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
							$r = check.errorf(_r$10, "unknown field %s in struct literal", new sliceType$4([new $String(key$1.Name)])); /* */ $s = 73; case 73: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							_i++;
							/* continue; */ $s = 60; continue;
						/* } */ case 71:
						fld = ((i < 0 || i >= fields.$length) ? ($throwRuntimeError("index out of range"), undefined) : fields.$array[fields.$offset + i]);
						check.recordUse(key$1, fld);
						/* */ if (((i < 0 || i >= visited.$length) ? ($throwRuntimeError("index out of range"), undefined) : visited.$array[visited.$offset + i])) { $s = 74; continue; }
						/* */ $s = 75; continue;
						/* if (((i < 0 || i >= visited.$length) ? ($throwRuntimeError("index out of range"), undefined) : visited.$array[visited.$offset + i])) { */ case 74:
							_r$11 = kv.Pos(); /* */ $s = 76; case 76: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
							$r = check.errorf(_r$11, "duplicate field name %s in struct literal", new sliceType$4([new $String(key$1.Name)])); /* */ $s = 77; case 77: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							_i++;
							/* continue; */ $s = 60; continue;
						/* } */ case 75:
						((i < 0 || i >= visited.$length) ? ($throwRuntimeError("index out of range"), undefined) : visited.$array[visited.$offset + i] = true);
						$r = check.expr(x, kv.Value); /* */ $s = 78; case 78: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						etyp = fld.object.typ;
						$r = check.assignment(x, etyp, "struct literal"); /* */ $s = 79; case 79: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i++;
					/* } */ $s = 60; continue; case 61:
					$s = 59; continue;
				/* } else { */ case 58:
					_ref$3 = e$7.Elts;
					_i$1 = 0;
					/* while (true) { */ case 80:
						/* if (!(_i$1 < _ref$3.$length)) { break; } */ if(!(_i$1 < _ref$3.$length)) { $s = 81; continue; }
						i$1 = _i$1;
						e$21 = ((_i$1 < 0 || _i$1 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$1]);
						_tuple$7 = $assertType(e$21, ptrType$47, true);
						kv$1 = _tuple$7[0];
						/* */ if (!(kv$1 === ptrType$47.nil)) { $s = 82; continue; }
						/* */ $s = 83; continue;
						/* if (!(kv$1 === ptrType$47.nil)) { */ case 82:
							_r$12 = kv$1.Pos(); /* */ $s = 84; case 84: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
							$r = check.error(_r$12, "mixture of field:value and value elements in struct literal"); /* */ $s = 85; case 85: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							_i$1++;
							/* continue; */ $s = 80; continue;
						/* } */ case 83:
						$r = check.expr(x, e$21); /* */ $s = 86; case 86: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* */ if (i$1 >= fields.$length) { $s = 87; continue; }
						/* */ $s = 88; continue;
						/* if (i$1 >= fields.$length) { */ case 87:
							_r$13 = x.pos(); /* */ $s = 89; case 89: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
							$r = check.error(_r$13, "too many values in struct literal"); /* */ $s = 90; case 90: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* break; */ $s = 81; continue;
						/* } */ case 88:
						fld$1 = ((i$1 < 0 || i$1 >= fields.$length) ? ($throwRuntimeError("index out of range"), undefined) : fields.$array[fields.$offset + i$1]);
						/* */ if (!fld$1.object.Exported() && !(fld$1.object.pkg === check.pkg)) { $s = 91; continue; }
						/* */ $s = 92; continue;
						/* if (!fld$1.object.Exported() && !(fld$1.object.pkg === check.pkg)) { */ case 91:
							_r$14 = x.pos(); /* */ $s = 93; case 93: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
							$r = check.errorf(_r$14, "implicit assignment to unexported field %s in %s literal", new sliceType$4([new $String(fld$1.object.name), typ])); /* */ $s = 94; case 94: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							_i$1++;
							/* continue; */ $s = 80; continue;
						/* } */ case 92:
						etyp$1 = fld$1.object.typ;
						$r = check.assignment(x, etyp$1, "struct literal"); /* */ $s = 95; case 95: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i$1++;
					/* } */ $s = 80; continue; case 81:
					/* */ if (e$7.Elts.$length < fields.$length) { $s = 96; continue; }
					/* */ $s = 97; continue;
					/* if (e$7.Elts.$length < fields.$length) { */ case 96:
						$r = check.error(e$7.Rbrace, "too few values in struct literal"); /* */ $s = 98; case 98: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 97:
				/* } */ case 59:
				$s = 56; continue;
			/* } else if ($assertType(_ref$1, ptrType$13, true)[1]) { */ case 52:
				utyp$1 = _ref$1.$val;
				/* */ if ($interfaceIsEqual(utyp$1.elem, $ifaceNil)) { $s = 99; continue; }
				/* */ $s = 100; continue;
				/* if ($interfaceIsEqual(utyp$1.elem, $ifaceNil)) { */ case 99:
					_r$15 = e$7.Pos(); /* */ $s = 101; case 101: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					$r = check.error(_r$15, "illegal cycle in type declaration"); /* */ $s = 102; case 102: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* goto Error */ $s = 21; continue;
				/* } */ case 100:
				_r$16 = check.indexedElts(e$7.Elts, utyp$1.elem, utyp$1.len); /* */ $s = 103; case 103: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				n = _r$16;
				/* */ if ((x$2 = utyp$1.len, (x$2.$high < 0 || (x$2.$high === 0 && x$2.$low < 0)))) { $s = 104; continue; }
				/* */ $s = 105; continue;
				/* if ((x$2 = utyp$1.len, (x$2.$high < 0 || (x$2.$high === 0 && x$2.$low < 0)))) { */ case 104:
					utyp$1.len = n;
					$r = check.recordTypeAndValue(e$7.Type, 3, utyp$1, $ifaceNil); /* */ $s = 106; case 106: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 105:
				$s = 56; continue;
			/* } else if ($assertType(_ref$1, ptrType$12, true)[1]) { */ case 53:
				utyp$2 = _ref$1.$val;
				/* */ if ($interfaceIsEqual(utyp$2.elem, $ifaceNil)) { $s = 107; continue; }
				/* */ $s = 108; continue;
				/* if ($interfaceIsEqual(utyp$2.elem, $ifaceNil)) { */ case 107:
					_r$17 = e$7.Pos(); /* */ $s = 109; case 109: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					$r = check.error(_r$17, "illegal cycle in type declaration"); /* */ $s = 110; case 110: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* goto Error */ $s = 21; continue;
				/* } */ case 108:
				_r$18 = check.indexedElts(e$7.Elts, utyp$2.elem, new $Int64(-1, 4294967295)); /* */ $s = 111; case 111: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				_r$18;
				$s = 56; continue;
			/* } else if ($assertType(_ref$1, ptrType$15, true)[1]) { */ case 54:
				utyp$3 = _ref$1.$val;
				/* */ if ($interfaceIsEqual(utyp$3.key, $ifaceNil) || $interfaceIsEqual(utyp$3.elem, $ifaceNil)) { $s = 112; continue; }
				/* */ $s = 113; continue;
				/* if ($interfaceIsEqual(utyp$3.key, $ifaceNil) || $interfaceIsEqual(utyp$3.elem, $ifaceNil)) { */ case 112:
					_r$19 = e$7.Pos(); /* */ $s = 114; case 114: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					$r = check.error(_r$19, "illegal cycle in type declaration"); /* */ $s = 115; case 115: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* goto Error */ $s = 21; continue;
				/* } */ case 113:
				visited$1 = (x$3 = e$7.Elts.$length, ((x$3 < 0 || x$3 > 2147483647) ? $throwRuntimeError("makemap: size out of range") : {}));
				_ref$4 = e$7.Elts;
				_i$2 = 0;
				/* while (true) { */ case 116:
					/* if (!(_i$2 < _ref$4.$length)) { break; } */ if(!(_i$2 < _ref$4.$length)) { $s = 117; continue; }
					e$22 = ((_i$2 < 0 || _i$2 >= _ref$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$4.$array[_ref$4.$offset + _i$2]);
					_tuple$8 = $assertType(e$22, ptrType$47, true);
					kv$2 = _tuple$8[0];
					/* */ if (kv$2 === ptrType$47.nil) { $s = 118; continue; }
					/* */ $s = 119; continue;
					/* if (kv$2 === ptrType$47.nil) { */ case 118:
						_r$20 = e$22.Pos(); /* */ $s = 120; case 120: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
						$r = check.error(_r$20, "missing key in map literal"); /* */ $s = 121; case 121: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i$2++;
						/* continue; */ $s = 116; continue;
					/* } */ case 119:
					$r = check.exprWithHint(x, kv$2.Key, utyp$3.key); /* */ $s = 122; case 122: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = check.assignment(x, utyp$3.key, "map literal"); /* */ $s = 123; case 123: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* */ if (x.mode === 0) { $s = 124; continue; }
					/* */ $s = 125; continue;
					/* if (x.mode === 0) { */ case 124:
						_i$2++;
						/* continue; */ $s = 116; continue;
					/* } */ case 125:
					/* */ if (x.mode === 4) { $s = 126; continue; }
					/* */ $s = 127; continue;
					/* if (x.mode === 4) { */ case 126:
						duplicate = false;
						_r$21 = keyVal(x.val); /* */ $s = 128; case 128: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
						xkey = _r$21;
						_r$22 = utyp$3.key.Underlying(); /* */ $s = 129; case 129: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
						_tuple$9 = $assertType(_r$22, ptrType$58, true);
						ok$2 = _tuple$9[1];
						/* */ if (ok$2) { $s = 130; continue; }
						/* */ $s = 131; continue;
						/* if (ok$2) { */ case 130:
							_ref$5 = (_entry = visited$1[$emptyInterface.keyFor(xkey)], _entry !== undefined ? _entry.v : sliceType$8.nil);
							_i$3 = 0;
							/* while (true) { */ case 133:
								/* if (!(_i$3 < _ref$5.$length)) { break; } */ if(!(_i$3 < _ref$5.$length)) { $s = 134; continue; }
								vtyp = ((_i$3 < 0 || _i$3 >= _ref$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$5.$array[_ref$5.$offset + _i$3]);
								_r$23 = Identical(vtyp, x.typ); /* */ $s = 137; case 137: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
								/* */ if (_r$23) { $s = 135; continue; }
								/* */ $s = 136; continue;
								/* if (_r$23) { */ case 135:
									duplicate = true;
									/* break; */ $s = 134; continue;
								/* } */ case 136:
								_i$3++;
							/* } */ $s = 133; continue; case 134:
							_key = xkey; (visited$1 || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: $append((_entry$1 = visited$1[$emptyInterface.keyFor(xkey)], _entry$1 !== undefined ? _entry$1.v : sliceType$8.nil), x.typ) };
							$s = 132; continue;
						/* } else { */ case 131:
							_tuple$10 = (_entry$2 = visited$1[$emptyInterface.keyFor(xkey)], _entry$2 !== undefined ? [_entry$2.v, true] : [sliceType$8.nil, false]);
							duplicate = _tuple$10[1];
							_key$1 = xkey; (visited$1 || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key$1)] = { k: _key$1, v: sliceType$8.nil };
						/* } */ case 132:
						/* */ if (duplicate) { $s = 138; continue; }
						/* */ $s = 139; continue;
						/* if (duplicate) { */ case 138:
							_r$24 = x.pos(); /* */ $s = 140; case 140: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
							$r = check.errorf(_r$24, "duplicate key %s in map literal", new sliceType$4([x.val])); /* */ $s = 141; case 141: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							_i$2++;
							/* continue; */ $s = 116; continue;
						/* } */ case 139:
					/* } */ case 127:
					$r = check.exprWithHint(x, kv$2.Value, utyp$3.elem); /* */ $s = 142; case 142: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = check.assignment(x, utyp$3.elem, "map literal"); /* */ $s = 143; case 143: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$2++;
				/* } */ $s = 116; continue; case 117:
				$s = 56; continue;
			/* } else { */ case 55:
				utyp$4 = _ref$1;
				_ref$6 = e$7.Elts;
				_i$4 = 0;
				/* while (true) { */ case 144:
					/* if (!(_i$4 < _ref$6.$length)) { break; } */ if(!(_i$4 < _ref$6.$length)) { $s = 145; continue; }
					e$23 = ((_i$4 < 0 || _i$4 >= _ref$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$6.$array[_ref$6.$offset + _i$4]);
					_tuple$11 = $assertType(e$23, ptrType$47, true);
					kv$3 = _tuple$11[0];
					if (!(kv$3 === ptrType$47.nil)) {
						e$23 = kv$3.Value;
					}
					$r = check.use(new sliceType$10([e$23])); /* */ $s = 146; case 146: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$4++;
				/* } */ $s = 144; continue; case 145:
				/* */ if (!($interfaceIsEqual(utyp$4, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0])))) { $s = 147; continue; }
				/* */ $s = 148; continue;
				/* if (!($interfaceIsEqual(utyp$4, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0])))) { */ case 147:
					_r$25 = e$7.Pos(); /* */ $s = 149; case 149: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					$r = check.errorf(_r$25, "invalid composite literal type %s", new sliceType$4([typ])); /* */ $s = 150; case 150: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* goto Error */ $s = 21; continue;
				/* } */ case 148:
			/* } } */ case 56:
			x.mode = 7;
			x.typ = typ;
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType$18, true)[1]) { */ case 8:
			e$8 = _ref.$val;
			_r$26 = check.rawExpr(x, e$8.X, $ifaceNil); /* */ $s = 151; case 151: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			kind = _r$26;
			x.expr = e$8;
			$s = -1; return kind;
		/* } else if ($assertType(_ref, ptrType$11, true)[1]) { */ case 9:
			e$9 = _ref.$val;
			$r = check.selector(x, e$9); /* */ $s = 152; case 152: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType$43, true)[1]) { */ case 10:
			e$10 = _ref.$val;
			$r = check.expr(x, e$10.X); /* */ $s = 153; case 153: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (x.mode === 0) { $s = 154; continue; }
			/* */ $s = 155; continue;
			/* if (x.mode === 0) { */ case 154:
				$r = check.use(new sliceType$10([e$10.Index])); /* */ $s = 156; case 156: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* goto Error */ $s = 21; continue;
			/* } */ case 155:
			valid = false;
			length = new $Int64(-1, 4294967295);
			_r$27 = x.typ.Underlying(); /* */ $s = 157; case 157: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
			_ref$7 = _r$27;
			/* */ if ($assertType(_ref$7, ptrType$4, true)[1]) { $s = 158; continue; }
			/* */ if ($assertType(_ref$7, ptrType$13, true)[1]) { $s = 159; continue; }
			/* */ if ($assertType(_ref$7, ptrType$17, true)[1]) { $s = 160; continue; }
			/* */ if ($assertType(_ref$7, ptrType$12, true)[1]) { $s = 161; continue; }
			/* */ if ($assertType(_ref$7, ptrType$15, true)[1]) { $s = 162; continue; }
			/* */ $s = 163; continue;
			/* if ($assertType(_ref$7, ptrType$4, true)[1]) { */ case 158:
				typ$1 = _ref$7.$val;
				_r$28 = isString(typ$1); /* */ $s = 166; case 166: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				/* */ if (_r$28) { $s = 164; continue; }
				/* */ $s = 165; continue;
				/* if (_r$28) { */ case 164:
					valid = true;
					/* */ if (x.mode === 4) { $s = 167; continue; }
					/* */ $s = 168; continue;
					/* if (x.mode === 4) { */ case 167:
						_r$29 = constant.StringVal(x.val); /* */ $s = 169; case 169: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
						length = (new $Int64(0, _r$29.length));
					/* } */ case 168:
					x.mode = 7;
					x.typ = universeByte;
				/* } */ case 165:
				$s = 163; continue;
			/* } else if ($assertType(_ref$7, ptrType$13, true)[1]) { */ case 159:
				typ$2 = _ref$7.$val;
				valid = true;
				length = typ$2.len;
				if (!((x.mode === 5))) {
					x.mode = 7;
				}
				x.typ = typ$2.elem;
				$s = 163; continue;
			/* } else if ($assertType(_ref$7, ptrType$17, true)[1]) { */ case 160:
				typ$3 = _ref$7.$val;
				_r$30 = typ$3.base.Underlying(); /* */ $s = 170; case 170: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				_tuple$12 = $assertType(_r$30, ptrType$13, true);
				typ$6 = _tuple$12[0];
				if (!(typ$6 === ptrType$13.nil)) {
					valid = true;
					length = typ$6.len;
					x.mode = 5;
					x.typ = typ$6.elem;
				}
				$s = 163; continue;
			/* } else if ($assertType(_ref$7, ptrType$12, true)[1]) { */ case 161:
				typ$4 = _ref$7.$val;
				valid = true;
				x.mode = 5;
				x.typ = typ$4.elem;
				$s = 163; continue;
			/* } else if ($assertType(_ref$7, ptrType$15, true)[1]) { */ case 162:
				typ$5 = _ref$7.$val;
				key[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
				$r = check.expr(key[0], e$10.Index); /* */ $s = 171; case 171: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = check.assignment(key[0], typ$5.key, "map index"); /* */ $s = 172; case 172: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (x.mode === 0) { $s = 173; continue; }
				/* */ $s = 174; continue;
				/* if (x.mode === 0) { */ case 173:
					/* goto Error */ $s = 21; continue;
				/* } */ case 174:
				x.mode = 6;
				x.typ = typ$5.elem;
				x.expr = e$10;
				$s = -1; return 1;
			/* } */ case 163:
			/* */ if (!valid) { $s = 175; continue; }
			/* */ $s = 176; continue;
			/* if (!valid) { */ case 175:
				_r$31 = x.pos(); /* */ $s = 177; case 177: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				$r = check.invalidOp(_r$31, "cannot index %s", new sliceType$4([x])); /* */ $s = 178; case 178: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* goto Error */ $s = 21; continue;
			/* } */ case 176:
			/* */ if ($interfaceIsEqual(e$10.Index, $ifaceNil)) { $s = 179; continue; }
			/* */ $s = 180; continue;
			/* if ($interfaceIsEqual(e$10.Index, $ifaceNil)) { */ case 179:
				_r$32 = e$10.Pos(); /* */ $s = 181; case 181: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
				$r = check.invalidAST(_r$32, "missing index for %s", new sliceType$4([x])); /* */ $s = 182; case 182: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* goto Error */ $s = 21; continue;
			/* } */ case 180:
			_r$33 = check.index(e$10.Index, length); /* */ $s = 183; case 183: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			_r$33;
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType$44, true)[1]) { */ case 11:
			e$11 = _ref.$val;
			$r = check.expr(x, e$11.X); /* */ $s = 184; case 184: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (x.mode === 0) { $s = 185; continue; }
			/* */ $s = 186; continue;
			/* if (x.mode === 0) { */ case 185:
				$r = check.use(new sliceType$10([e$11.Low, e$11.High, e$11.Max])); /* */ $s = 187; case 187: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* goto Error */ $s = 21; continue;
			/* } */ case 186:
			valid$1 = false;
			length$1 = new $Int64(-1, 4294967295);
			_r$34 = x.typ.Underlying(); /* */ $s = 188; case 188: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
			_ref$8 = _r$34;
			/* */ if ($assertType(_ref$8, ptrType$4, true)[1]) { $s = 189; continue; }
			/* */ if ($assertType(_ref$8, ptrType$13, true)[1]) { $s = 190; continue; }
			/* */ if ($assertType(_ref$8, ptrType$17, true)[1]) { $s = 191; continue; }
			/* */ if ($assertType(_ref$8, ptrType$12, true)[1]) { $s = 192; continue; }
			/* */ $s = 193; continue;
			/* if ($assertType(_ref$8, ptrType$4, true)[1]) { */ case 189:
				typ$7 = _ref$8.$val;
				_r$35 = isString(typ$7); /* */ $s = 196; case 196: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
				/* */ if (_r$35) { $s = 194; continue; }
				/* */ $s = 195; continue;
				/* if (_r$35) { */ case 194:
					/* */ if (e$11.Slice3) { $s = 197; continue; }
					/* */ $s = 198; continue;
					/* if (e$11.Slice3) { */ case 197:
						_r$36 = x.pos(); /* */ $s = 199; case 199: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
						$r = check.invalidOp(_r$36, "3-index slice of string", new sliceType$4([])); /* */ $s = 200; case 200: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* goto Error */ $s = 21; continue;
					/* } */ case 198:
					valid$1 = true;
					/* */ if (x.mode === 4) { $s = 201; continue; }
					/* */ $s = 202; continue;
					/* if (x.mode === 4) { */ case 201:
						_r$37 = constant.StringVal(x.val); /* */ $s = 203; case 203: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
						length$1 = (new $Int64(0, _r$37.length));
					/* } */ case 202:
					if (typ$7.kind === 24) {
						x.typ = (17 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 17]);
					}
				/* } */ case 195:
				$s = 193; continue;
			/* } else if ($assertType(_ref$8, ptrType$13, true)[1]) { */ case 190:
				typ$8 = _ref$8.$val;
				valid$1 = true;
				length$1 = typ$8.len;
				/* */ if (!((x.mode === 5))) { $s = 204; continue; }
				/* */ $s = 205; continue;
				/* if (!((x.mode === 5))) { */ case 204:
					_r$38 = x.pos(); /* */ $s = 206; case 206: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
					$r = check.invalidOp(_r$38, "cannot slice %s (value not addressable)", new sliceType$4([x])); /* */ $s = 207; case 207: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* goto Error */ $s = 21; continue;
				/* } */ case 205:
				x.typ = new Slice.ptr(typ$8.elem);
				$s = 193; continue;
			/* } else if ($assertType(_ref$8, ptrType$17, true)[1]) { */ case 191:
				typ$9 = _ref$8.$val;
				_r$39 = typ$9.base.Underlying(); /* */ $s = 208; case 208: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
				_tuple$13 = $assertType(_r$39, ptrType$13, true);
				typ$11 = _tuple$13[0];
				if (!(typ$11 === ptrType$13.nil)) {
					valid$1 = true;
					length$1 = typ$11.len;
					x.typ = new Slice.ptr(typ$11.elem);
				}
				$s = 193; continue;
			/* } else if ($assertType(_ref$8, ptrType$12, true)[1]) { */ case 192:
				typ$10 = _ref$8.$val;
				valid$1 = true;
			/* } */ case 193:
			/* */ if (!valid$1) { $s = 209; continue; }
			/* */ $s = 210; continue;
			/* if (!valid$1) { */ case 209:
				_r$40 = x.pos(); /* */ $s = 211; case 211: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
				$r = check.invalidOp(_r$40, "cannot slice %s", new sliceType$4([x])); /* */ $s = 212; case 212: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* goto Error */ $s = 21; continue;
			/* } */ case 210:
			x.mode = 7;
			/* */ if (e$11.Slice3 && ($interfaceIsEqual(e$11.High, $ifaceNil) || $interfaceIsEqual(e$11.Max, $ifaceNil))) { $s = 213; continue; }
			/* */ $s = 214; continue;
			/* if (e$11.Slice3 && ($interfaceIsEqual(e$11.High, $ifaceNil) || $interfaceIsEqual(e$11.Max, $ifaceNil))) { */ case 213:
				$r = check.error(e$11.Rbrack, "2nd and 3rd index required in 3-index slice"); /* */ $s = 215; case 215: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* goto Error */ $s = 21; continue;
			/* } */ case 214:
			ind = arrayType$2.zero();
			_ref$9 = new sliceType$10([e$11.Low, e$11.High, e$11.Max]);
			_i$5 = 0;
			/* while (true) { */ case 216:
				/* if (!(_i$5 < _ref$9.$length)) { break; } */ if(!(_i$5 < _ref$9.$length)) { $s = 217; continue; }
				i$2 = _i$5;
				expr = ((_i$5 < 0 || _i$5 >= _ref$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$9.$array[_ref$9.$offset + _i$5]);
				x$4 = new $Int64(-1, 4294967295);
					/* */ if (!($interfaceIsEqual(expr, $ifaceNil))) { $s = 219; continue; }
					/* */ if ((i$2 === 0)) { $s = 220; continue; }
					/* */ if ((length$1.$high > 0 || (length$1.$high === 0 && length$1.$low >= 0))) { $s = 221; continue; }
					/* */ $s = 222; continue;
					/* if (!($interfaceIsEqual(expr, $ifaceNil))) { */ case 219:
						max = new $Int64(-1, 4294967295);
						if ((length$1.$high > 0 || (length$1.$high === 0 && length$1.$low >= 0))) {
							max = new $Int64(length$1.$high + 0, length$1.$low + 1);
						}
						_r$41 = check.index(expr, max); /* */ $s = 223; case 223: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
						_tuple$14 = _r$41;
						t = _tuple$14[0];
						ok$3 = _tuple$14[1];
						if (ok$3 && (t.$high > 0 || (t.$high === 0 && t.$low >= 0))) {
							x$4 = t;
						}
						$s = 222; continue;
					/* } else if ((i$2 === 0)) { */ case 220:
						x$4 = new $Int64(0, 0);
						$s = 222; continue;
					/* } else if ((length$1.$high > 0 || (length$1.$high === 0 && length$1.$low >= 0))) { */ case 221:
						x$4 = length$1;
					/* } */ case 222:
				case 218:
				((i$2 < 0 || i$2 >= ind.length) ? ($throwRuntimeError("index out of range"), undefined) : ind[i$2] = x$4);
				_i$5++;
			/* } */ $s = 216; continue; case 217:
			_ref$10 = $subslice(new sliceType$9(ind), 0, 2);
			_i$6 = 0;
			/* while (true) { */ case 224:
				/* if (!(_i$6 < _ref$10.$length)) { break; } */ if(!(_i$6 < _ref$10.$length)) { $s = 225; continue; }
				i$3 = _i$6;
				x$5 = ((_i$6 < 0 || _i$6 >= _ref$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$10.$array[_ref$10.$offset + _i$6]);
				/* */ if ((x$5.$high > 0 || (x$5.$high === 0 && x$5.$low > 0))) { $s = 226; continue; }
				/* */ $s = 227; continue;
				/* if ((x$5.$high > 0 || (x$5.$high === 0 && x$5.$low > 0))) { */ case 226:
					_ref$11 = $subslice(new sliceType$9(ind), (i$3 + 1 >> 0));
					_i$7 = 0;
					/* while (true) { */ case 228:
						/* if (!(_i$7 < _ref$11.$length)) { break; } */ if(!(_i$7 < _ref$11.$length)) { $s = 229; continue; }
						y = ((_i$7 < 0 || _i$7 >= _ref$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$11.$array[_ref$11.$offset + _i$7]);
						/* */ if ((y.$high > 0 || (y.$high === 0 && y.$low >= 0)) && (x$5.$high > y.$high || (x$5.$high === y.$high && x$5.$low > y.$low))) { $s = 230; continue; }
						/* */ $s = 231; continue;
						/* if ((y.$high > 0 || (y.$high === 0 && y.$low >= 0)) && (x$5.$high > y.$high || (x$5.$high === y.$high && x$5.$low > y.$low))) { */ case 230:
							$r = check.errorf(e$11.Rbrack, "invalid slice indices: %d > %d", new sliceType$4([x$5, y])); /* */ $s = 232; case 232: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* break L; */ $s = 225; continue s;
						/* } */ case 231:
						_i$7++;
					/* } */ $s = 228; continue; case 229:
				/* } */ case 227:
				_i$6++;
			/* } */ $s = 224; continue; case 225:
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType$45, true)[1]) { */ case 12:
			e$12 = _ref.$val;
			$r = check.expr(x, e$12.X); /* */ $s = 233; case 233: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (x.mode === 0) { $s = 234; continue; }
			/* */ $s = 235; continue;
			/* if (x.mode === 0) { */ case 234:
				/* goto Error */ $s = 21; continue;
			/* } */ case 235:
			_r$42 = x.typ.Underlying(); /* */ $s = 236; case 236: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
			_tuple$15 = $assertType(_r$42, ptrType$58, true);
			xtyp = _tuple$15[0];
			/* */ if (xtyp === ptrType$58.nil) { $s = 237; continue; }
			/* */ $s = 238; continue;
			/* if (xtyp === ptrType$58.nil) { */ case 237:
				_r$43 = x.pos(); /* */ $s = 239; case 239: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
				$r = check.invalidOp(_r$43, "%s is not an interface", new sliceType$4([x])); /* */ $s = 240; case 240: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* goto Error */ $s = 21; continue;
			/* } */ case 238:
			/* */ if ($interfaceIsEqual(e$12.Type, $ifaceNil)) { $s = 241; continue; }
			/* */ $s = 242; continue;
			/* if ($interfaceIsEqual(e$12.Type, $ifaceNil)) { */ case 241:
				_r$44 = e$12.Pos(); /* */ $s = 243; case 243: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
				$r = check.invalidAST(_r$44, "use of .(type) outside type switch", new sliceType$4([])); /* */ $s = 244; case 244: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* goto Error */ $s = 21; continue;
			/* } */ case 242:
			_r$45 = check.typ(e$12.Type); /* */ $s = 245; case 245: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
			T = _r$45;
			/* */ if ($interfaceIsEqual(T, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]))) { $s = 246; continue; }
			/* */ $s = 247; continue;
			/* if ($interfaceIsEqual(T, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]))) { */ case 246:
				/* goto Error */ $s = 21; continue;
			/* } */ case 247:
			_r$46 = x.pos(); /* */ $s = 248; case 248: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
			$r = check.typeAssertion(_r$46, x, xtyp, T); /* */ $s = 249; case 249: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			x.mode = 8;
			x.typ = T;
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType$55, true)[1]) { */ case 13:
			e$13 = _ref.$val;
			_r$47 = check.call(x, e$13); /* */ $s = 250; case 250: if($c) { $c = false; _r$47 = _r$47.$blk(); } if (_r$47 && _r$47.$blk !== undefined) { break s; }
			$s = -1; return _r$47;
		/* } else if ($assertType(_ref, ptrType$46, true)[1]) { */ case 14:
			e$14 = _ref.$val;
			$r = check.exprOrType(x, e$14.X); /* */ $s = 251; case 251: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_1 = x.mode;
				/* */ if (_1 === (0)) { $s = 253; continue; }
				/* */ if (_1 === (3)) { $s = 254; continue; }
				/* */ $s = 255; continue;
				/* if (_1 === (0)) { */ case 253:
					/* goto Error */ $s = 21; continue;
					$s = 256; continue;
				/* } else if (_1 === (3)) { */ case 254:
					x.typ = new Pointer.ptr(x.typ);
					$s = 256; continue;
				/* } else { */ case 255:
					_r$48 = x.typ.Underlying(); /* */ $s = 257; case 257: if($c) { $c = false; _r$48 = _r$48.$blk(); } if (_r$48 && _r$48.$blk !== undefined) { break s; }
					_tuple$16 = $assertType(_r$48, ptrType$17, true);
					typ$12 = _tuple$16[0];
					ok$4 = _tuple$16[1];
					/* */ if (ok$4) { $s = 258; continue; }
					/* */ $s = 259; continue;
					/* if (ok$4) { */ case 258:
						x.mode = 5;
						x.typ = typ$12.base;
						$s = 260; continue;
					/* } else { */ case 259:
						_r$49 = x.pos(); /* */ $s = 261; case 261: if($c) { $c = false; _r$49 = _r$49.$blk(); } if (_r$49 && _r$49.$blk !== undefined) { break s; }
						$r = check.invalidOp(_r$49, "cannot indirect %s", new sliceType$4([x])); /* */ $s = 262; case 262: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* goto Error */ $s = 21; continue;
					/* } */ case 260:
				/* } */ case 256:
			case 252:
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType$39, true)[1]) { */ case 15:
			e$15 = _ref.$val;
			$r = check.expr(x, e$15.X); /* */ $s = 263; case 263: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (x.mode === 0) { $s = 264; continue; }
			/* */ $s = 265; continue;
			/* if (x.mode === 0) { */ case 264:
				/* goto Error */ $s = 21; continue;
			/* } */ case 265:
			$r = check.unary(x, e$15, e$15.Op); /* */ $s = 266; case 266: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (x.mode === 0) { $s = 267; continue; }
			/* */ $s = 268; continue;
			/* if (x.mode === 0) { */ case 267:
				/* goto Error */ $s = 21; continue;
			/* } */ case 268:
			if (e$15.Op === 36) {
				x.expr = e$15;
				$s = -1; return 2;
			}
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType$57, true)[1]) { */ case 16:
			e$16 = _ref.$val;
			$r = check.binary(x, e$16, e$16.X, e$16.Y, e$16.Op); /* */ $s = 269; case 269: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (x.mode === 0) { $s = 270; continue; }
			/* */ $s = 271; continue;
			/* if (x.mode === 0) { */ case 270:
				/* goto Error */ $s = 21; continue;
			/* } */ case 271:
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType$47, true)[1]) { */ case 17:
			e$17 = _ref.$val;
			_r$50 = e$17.Pos(); /* */ $s = 272; case 272: if($c) { $c = false; _r$50 = _r$50.$blk(); } if (_r$50 && _r$50.$blk !== undefined) { break s; }
			$r = check.invalidAST(_r$50, "no key:value expected", new sliceType$4([])); /* */ $s = 273; case 273: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* goto Error */ $s = 21; continue;
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType$48, true)[1] || $assertType(_ref, ptrType$49, true)[1] || $assertType(_ref, ptrType$50, true)[1] || $assertType(_ref, ptrType$51, true)[1] || $assertType(_ref, ptrType$52, true)[1] || $assertType(_ref, ptrType$54, true)[1]) { */ case 18:
			e$18 = _ref;
			x.mode = 3;
			_r$51 = check.typ(e$18); /* */ $s = 274; case 274: if($c) { $c = false; _r$51 = _r$51.$blk(); } if (_r$51 && _r$51.$blk !== undefined) { break s; }
			x.typ = _r$51;
			$s = 20; continue;
		/* } else { */ case 19:
			e$19 = _ref;
			_r$52 = e$19.Pos(); /* */ $s = 275; case 275: if($c) { $c = false; _r$52 = _r$52.$blk(); } if (_r$52 && _r$52.$blk !== undefined) { break s; }
			_r$53 = check.fset.Position(_r$52); /* */ $s = 276; case 276: if($c) { $c = false; _r$53 = _r$53.$blk(); } if (_r$53 && _r$53.$blk !== undefined) { break s; }
			_arg = (x$6 = _r$53, new x$6.constructor.elem(x$6));
			_arg$1 = e$19;
			_r$54 = fmt.Sprintf("%s: unknown expression type %T", new sliceType$4([_arg, _arg$1])); /* */ $s = 277; case 277: if($c) { $c = false; _r$54 = _r$54.$blk(); } if (_r$54 && _r$54.$blk !== undefined) { break s; }
			$panic(new $String(_r$54));
		/* } */ case 20:
		x.expr = e;
		$s = -1; return 1;
		/* Error: */ case 21:
		x.mode = 0;
		x.expr = e;
		$s = -1; return 2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.exprInternal }; } $f.T = T; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._i$6 = _i$6; $f._i$7 = _i$7; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$4 = _r$4; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$44 = _r$44; $f._r$45 = _r$45; $f._r$46 = _r$46; $f._r$47 = _r$47; $f._r$48 = _r$48; $f._r$49 = _r$49; $f._r$5 = _r$5; $f._r$50 = _r$50; $f._r$51 = _r$51; $f._r$52 = _r$52; $f._r$53 = _r$53; $f._r$54 = _r$54; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$10 = _ref$10; $f._ref$11 = _ref$11; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._ref$7 = _ref$7; $f._ref$8 = _ref$8; $f._ref$9 = _ref$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.atyp = atyp; $f.base = base; $f.check = check; $f.duplicate = duplicate; $f.e = e; $f.e$1 = e$1; $f.e$10 = e$10; $f.e$11 = e$11; $f.e$12 = e$12; $f.e$13 = e$13; $f.e$14 = e$14; $f.e$15 = e$15; $f.e$16 = e$16; $f.e$17 = e$17; $f.e$18 = e$18; $f.e$19 = e$19; $f.e$2 = e$2; $f.e$20 = e$20; $f.e$21 = e$21; $f.e$22 = e$22; $f.e$23 = e$23; $f.e$3 = e$3; $f.e$4 = e$4; $f.e$5 = e$5; $f.e$6 = e$6; $f.e$7 = e$7; $f.e$8 = e$8; $f.e$9 = e$9; $f.ellip = ellip; $f.etyp = etyp; $f.etyp$1 = etyp$1; $f.expr = expr; $f.fields = fields; $f.fld = fld; $f.fld$1 = fld$1; $f.hint = hint; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.ind = ind; $f.key = key; $f.key$1 = key$1; $f.kind = kind; $f.kv = kv; $f.kv$1 = kv$1; $f.kv$2 = kv$2; $f.kv$3 = kv$3; $f.length = length; $f.length$1 = length$1; $f.max = max; $f.n = n; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.ok$4 = ok$4; $f.sig = sig; $f.t = t; $f.typ = typ; $f.typ$1 = typ$1; $f.typ$10 = typ$10; $f.typ$11 = typ$11; $f.typ$12 = typ$12; $f.typ$2 = typ$2; $f.typ$3 = typ$3; $f.typ$4 = typ$4; $f.typ$5 = typ$5; $f.typ$6 = typ$6; $f.typ$7 = typ$7; $f.typ$8 = typ$8; $f.typ$9 = typ$9; $f.utyp = utyp; $f.utyp$1 = utyp$1; $f.utyp$2 = utyp$2; $f.utyp$3 = utyp$3; $f.utyp$4 = utyp$4; $f.valid = valid; $f.valid$1 = valid$1; $f.visited = visited; $f.visited$1 = visited$1; $f.vtyp = vtyp; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.xkey = xkey; $f.xtyp = xtyp; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.exprInternal = function(x, e, hint) { return this.$val.exprInternal(x, e, hint); };
	keyVal = function(x) {
		var _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, i, ok, ok$1, r, v, v$1, v$2, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; i = $f.i; ok = $f.ok; ok$1 = $f.ok$1; r = $f.r; v = $f.v; v$1 = $f.v$1; v$2 = $f.v$2; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = x.Kind(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_1 = _r;
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (3)) { $s = 5; continue; }
			/* */ if (_1 === (4)) { $s = 6; continue; }
			/* */ if (_1 === (5)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_1 === (1)) { */ case 3:
				_r$1 = constant.BoolVal(x); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return new $Bool(_r$1);
			/* } else if (_1 === (2)) { */ case 4:
				_r$2 = constant.StringVal(x); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return new $String(_r$2);
			/* } else if (_1 === (3)) { */ case 5:
				_r$3 = constant.Int64Val(x); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple = _r$3;
				v = _tuple[0];
				ok = _tuple[1];
				if (ok) {
					$s = -1; return v;
				}
				_r$4 = constant.Uint64Val(x); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$1 = _r$4;
				v$1 = _tuple$1[0];
				ok$1 = _tuple$1[1];
				if (ok$1) {
					$s = -1; return v$1;
				}
				$s = 8; continue;
			/* } else if (_1 === (4)) { */ case 6:
				_r$5 = constant.Float64Val(x); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple$2 = _r$5;
				v$2 = _tuple$2[0];
				$s = -1; return new $Float64(v$2);
			/* } else if (_1 === (5)) { */ case 7:
				_r$6 = constant.Real(x); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$7 = constant.Float64Val(_r$6); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_tuple$3 = _r$7;
				r = _tuple$3[0];
				_r$8 = constant.Imag(x); /* */ $s = 16; case 16: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$9 = constant.Float64Val(_r$8); /* */ $s = 17; case 17: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_tuple$4 = _r$9;
				i = _tuple$4[0];
				$s = -1; return new $Complex128(r, i);
			/* } */ case 8:
		case 1:
		$s = -1; return x;
		/* */ } return; } if ($f === undefined) { $f = { $blk: keyVal }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.i = i; $f.ok = ok; $f.ok$1 = ok$1; $f.r = r; $f.v = v; $f.v$1 = v$1; $f.v$2 = v$2; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.ptr.prototype.typeAssertion = function(pos, x, xtyp, T) {
		var T, _r, _tuple, check, method, msg, pos, wrongType, x, xtyp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; _r = $f._r; _tuple = $f._tuple; check = $f.check; method = $f.method; msg = $f.msg; pos = $f.pos; wrongType = $f.wrongType; x = $f.x; xtyp = $f.xtyp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_r = assertableTo(xtyp, T); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		method = _tuple[0];
		wrongType = _tuple[1];
		if (method === ptrType$5.nil) {
			$s = -1; return;
		}
		msg = "";
		if (wrongType) {
			msg = "wrong type for method";
		} else {
			msg = "missing method";
		}
		$r = check.errorf(pos, "%s cannot have dynamic type %s (%s %s)", new sliceType$4([x, T, new $String(msg), new $String(method.object.name)])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.typeAssertion }; } $f.T = T; $f._r = _r; $f._tuple = _tuple; $f.check = check; $f.method = method; $f.msg = msg; $f.pos = pos; $f.wrongType = wrongType; $f.x = x; $f.xtyp = xtyp; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.typeAssertion = function(pos, x, xtyp, T) { return this.$val.typeAssertion(pos, x, xtyp, T); };
	Checker.ptr.prototype.singleValue = function(x) {
		var _r, _tuple, check, ok, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; check = $f.check; ok = $f.ok; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		/* */ if (x.mode === 7) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.mode === 7) { */ case 1:
			_tuple = $assertType(x.typ, ptrType$16, true);
			t = _tuple[0];
			ok = _tuple[1];
			/* */ if (ok) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (ok) { */ case 3:
				assert(!((t.Len() === 1)));
				_r = x.pos(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = check.errorf(_r, "%d-valued %s where single value is expected", new sliceType$4([new $Int(t.Len()), x])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				x.mode = 0;
			/* } */ case 4:
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.singleValue }; } $f._r = _r; $f._tuple = _tuple; $f.check = check; $f.ok = ok; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.singleValue = function(x) { return this.$val.singleValue(x); };
	Checker.ptr.prototype.expr = function(x, e) {
		var check, e, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; check = $f.check; e = $f.e; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		$r = check.multiExpr(x, e); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = check.singleValue(x); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.expr }; } $f.check = check; $f.e = e; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.expr = function(x, e) { return this.$val.expr(x, e); };
	Checker.ptr.prototype.multiExpr = function(x, e) {
		var _1, _r, _r$1, check, e, msg, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; check = $f.check; e = $f.e; msg = $f.msg; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_r = check.rawExpr(x, e, $ifaceNil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		msg = "";
		_1 = x.mode;
		if (_1 === (1)) {
			msg = "%s used as value";
		} else if (_1 === (2)) {
			msg = "%s must be called";
		} else if (_1 === (3)) {
			msg = "%s is not an expression";
		} else {
			$s = -1; return;
		}
		_r$1 = x.pos(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$r = check.errorf(_r$1, msg, new sliceType$4([x])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		x.mode = 0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.multiExpr }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.check = check; $f.e = e; $f.msg = msg; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.multiExpr = function(x, e) { return this.$val.multiExpr(x, e); };
	Checker.ptr.prototype.exprWithHint = function(x, e, hint) {
		var _1, _r, _r$1, check, e, hint, msg, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; check = $f.check; e = $f.e; hint = $f.hint; msg = $f.msg; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		assert(!($interfaceIsEqual(hint, $ifaceNil)));
		_r = check.rawExpr(x, e, hint); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$r = check.singleValue(x); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		msg = "";
		_1 = x.mode;
		if (_1 === (1)) {
			msg = "%s used as value";
		} else if (_1 === (2)) {
			msg = "%s must be called";
		} else if (_1 === (3)) {
			msg = "%s is not an expression";
		} else {
			$s = -1; return;
		}
		_r$1 = x.pos(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$r = check.errorf(_r$1, msg, new sliceType$4([x])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		x.mode = 0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.exprWithHint }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.check = check; $f.e = e; $f.hint = hint; $f.msg = msg; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.exprWithHint = function(x, e, hint) { return this.$val.exprWithHint(x, e, hint); };
	Checker.ptr.prototype.exprOrType = function(x, e) {
		var _r, _r$1, check, e, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; check = $f.check; e = $f.e; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_r = check.rawExpr(x, e, $ifaceNil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$r = check.singleValue(x); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (x.mode === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (x.mode === 1) { */ case 3:
			_r$1 = x.pos(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$r = check.errorf(_r$1, "%s used as value or type", new sliceType$4([x])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			x.mode = 0;
		/* } */ case 4:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.exprOrType }; } $f._r = _r; $f._r$1 = _r$1; $f.check = check; $f.e = e; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.exprOrType = function(x, e) { return this.$val.exprOrType(x, e); };
	ExprString = function(x) {
		var buf, x;
		buf = new bytes.Buffer.ptr(sliceType$5.nil, 0, arrayType.zero(), 0);
		WriteExpr(buf, x);
		return buf.String();
	};
	$pkg.ExprString = ExprString;
	WriteExpr = function(buf, x) {
		var _1, _i, _ref, _ref$1, arg, buf, i, s, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_ref = x;
		if ($assertType(_ref, ptrType$53, true)[1]) {
			x$2 = _ref.$val;
			buf.WriteString("(void)");
		} else if ($assertType(_ref, ptrType$7, true)[1]) {
			x$3 = _ref.$val;
			buf.WriteString(x$3.Name);
		} else if ($assertType(_ref, ptrType$59, true)[1]) {
			x$4 = _ref.$val;
			buf.WriteString("...");
			if (!($interfaceIsEqual(x$4.Elt, $ifaceNil))) {
				WriteExpr(buf, x$4.Elt);
			}
		} else if ($assertType(_ref, ptrType$56, true)[1]) {
			x$5 = _ref.$val;
			buf.WriteString(x$5.Value);
		} else if ($assertType(_ref, ptrType$41, true)[1]) {
			x$6 = _ref.$val;
			buf.WriteByte(40);
			WriteExpr(buf, x$6.Type);
			buf.WriteString(" literal)");
		} else if ($assertType(_ref, ptrType$42, true)[1]) {
			x$7 = _ref.$val;
			buf.WriteByte(40);
			WriteExpr(buf, x$7.Type);
			buf.WriteString(" literal)");
		} else if ($assertType(_ref, ptrType$18, true)[1]) {
			x$8 = _ref.$val;
			buf.WriteByte(40);
			WriteExpr(buf, x$8.X);
			buf.WriteByte(41);
		} else if ($assertType(_ref, ptrType$11, true)[1]) {
			x$9 = _ref.$val;
			WriteExpr(buf, x$9.X);
			buf.WriteByte(46);
			buf.WriteString(x$9.Sel.Name);
		} else if ($assertType(_ref, ptrType$43, true)[1]) {
			x$10 = _ref.$val;
			WriteExpr(buf, x$10.X);
			buf.WriteByte(91);
			WriteExpr(buf, x$10.Index);
			buf.WriteByte(93);
		} else if ($assertType(_ref, ptrType$44, true)[1]) {
			x$11 = _ref.$val;
			WriteExpr(buf, x$11.X);
			buf.WriteByte(91);
			if (!($interfaceIsEqual(x$11.Low, $ifaceNil))) {
				WriteExpr(buf, x$11.Low);
			}
			buf.WriteByte(58);
			if (!($interfaceIsEqual(x$11.High, $ifaceNil))) {
				WriteExpr(buf, x$11.High);
			}
			if (x$11.Slice3) {
				buf.WriteByte(58);
				if (!($interfaceIsEqual(x$11.Max, $ifaceNil))) {
					WriteExpr(buf, x$11.Max);
				}
			}
			buf.WriteByte(93);
		} else if ($assertType(_ref, ptrType$45, true)[1]) {
			x$12 = _ref.$val;
			WriteExpr(buf, x$12.X);
			buf.WriteString(".(");
			WriteExpr(buf, x$12.Type);
			buf.WriteByte(41);
		} else if ($assertType(_ref, ptrType$55, true)[1]) {
			x$13 = _ref.$val;
			WriteExpr(buf, x$13.Fun);
			buf.WriteByte(40);
			_ref$1 = x$13.Args;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				i = _i;
				arg = ((_i < 0 || _i >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i]);
				if (i > 0) {
					buf.WriteString(", ");
				}
				WriteExpr(buf, arg);
				_i++;
			}
			if (new token.Pos(x$13.Ellipsis).IsValid()) {
				buf.WriteString("...");
			}
			buf.WriteByte(41);
		} else if ($assertType(_ref, ptrType$46, true)[1]) {
			x$14 = _ref.$val;
			buf.WriteByte(42);
			WriteExpr(buf, x$14.X);
		} else if ($assertType(_ref, ptrType$39, true)[1]) {
			x$15 = _ref.$val;
			buf.WriteString(new token.Token(x$15.Op).String());
			WriteExpr(buf, x$15.X);
		} else if ($assertType(_ref, ptrType$57, true)[1]) {
			x$16 = _ref.$val;
			WriteExpr(buf, x$16.X);
			buf.WriteByte(32);
			buf.WriteString(new token.Token(x$16.Op).String());
			buf.WriteByte(32);
			WriteExpr(buf, x$16.Y);
		} else if ($assertType(_ref, ptrType$48, true)[1]) {
			x$17 = _ref.$val;
			buf.WriteByte(91);
			if (!($interfaceIsEqual(x$17.Len, $ifaceNil))) {
				WriteExpr(buf, x$17.Len);
			}
			buf.WriteByte(93);
			WriteExpr(buf, x$17.Elt);
		} else if ($assertType(_ref, ptrType$49, true)[1]) {
			x$18 = _ref.$val;
			buf.WriteString("struct{");
			writeFieldList(buf, x$18.Fields, "; ", false);
			buf.WriteByte(125);
		} else if ($assertType(_ref, ptrType$50, true)[1]) {
			x$19 = _ref.$val;
			buf.WriteString("func");
			writeSigExpr(buf, x$19);
		} else if ($assertType(_ref, ptrType$51, true)[1]) {
			x$20 = _ref.$val;
			buf.WriteString("interface{");
			writeFieldList(buf, x$20.Methods, "; ", true);
			buf.WriteByte(125);
		} else if ($assertType(_ref, ptrType$52, true)[1]) {
			x$21 = _ref.$val;
			buf.WriteString("map[");
			WriteExpr(buf, x$21.Key);
			buf.WriteByte(93);
			WriteExpr(buf, x$21.Value);
		} else if ($assertType(_ref, ptrType$54, true)[1]) {
			x$22 = _ref.$val;
			s = "";
			_1 = x$22.Dir;
			if (_1 === (1)) {
				s = "chan<- ";
			} else if (_1 === (2)) {
				s = "<-chan ";
			} else {
				s = "chan ";
			}
			buf.WriteString(s);
			WriteExpr(buf, x$22.Value);
		} else {
			x$1 = _ref;
			buf.WriteString("(bad expr)");
		}
	};
	$pkg.WriteExpr = WriteExpr;
	writeSigExpr = function(buf, sig) {
		var buf, n, res, sig, x, x$1;
		buf.WriteByte(40);
		writeFieldList(buf, sig.Params, ", ", false);
		buf.WriteByte(41);
		res = sig.Results;
		n = res.NumFields();
		if (n === 0) {
			return;
		}
		buf.WriteByte(32);
		if ((n === 1) && ((x = res.List, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).Names.$length === 0)) {
			WriteExpr(buf, (x$1 = res.List, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])).Type);
			return;
		}
		buf.WriteByte(40);
		writeFieldList(buf, res, ", ", false);
		buf.WriteByte(41);
	};
	writeFieldList = function(buf, fields, sep, iface) {
		var _i, _i$1, _ref, _ref$1, _tuple, buf, f, fields, i, i$1, iface, name, sep, sig;
		_ref = fields.List;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				buf.WriteString(sep);
			}
			_ref$1 = f.Names;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i$1 = _i$1;
				name = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (i$1 > 0) {
					buf.WriteString(", ");
				}
				buf.WriteString(name.Name);
				_i$1++;
			}
			_tuple = $assertType(f.Type, ptrType$50, true);
			sig = _tuple[0];
			if (!(sig === ptrType$50.nil) && iface) {
				writeSigExpr(buf, sig);
				_i++;
				continue;
			}
			if (f.Names.$length > 0) {
				buf.WriteByte(32);
			}
			WriteExpr(buf, f.Type);
			_i++;
		}
	};
	Checker.ptr.prototype.initOrder = function() {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _key, _keys, _keys$1, _keys$2, _keys$3, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _tuple, _tuple$1, check, cycle, d, dep, emitted, info, infoLhs, init$1, init$2, n, n$1, obj, obj$1, p, p$1, pq, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _key = $f._key; _keys = $f._keys; _keys$1 = $f._keys$1; _keys$2 = $f._keys$2; _keys$3 = $f._keys$3; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; check = $f.check; cycle = $f.cycle; d = $f.d; dep = $f.dep; emitted = $f.emitted; info = $f.info; infoLhs = $f.infoLhs; init$1 = $f.init$1; init$2 = $f.init$2; n = $f.n; n$1 = $f.n$1; obj = $f.obj; obj$1 = $f.obj$1; p = $f.p; p$1 = $f.p$1; pq = $f.pq; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pq = [pq];
		check = this;
		check.Info.InitOrder = $subslice(check.Info.InitOrder, 0, 0);
		pq[0] = ((x = dependencyGraph(check.objMap), $subslice(new nodeQueue(x.$array), x.$offset, x.$offset + x.$length)));
		$r = heap.Init((pq.$ptr || (pq.$ptr = new ptrType$60(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, pq)))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (false) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (false) { */ case 2:
			_r = fmt.Printf("Computing initialization order for %s\n\n", new sliceType$4([check.pkg])); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			_r$1 = fmt.Println(new sliceType$4([new $String("Object dependency graph:")])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			_ref = check.objMap;
			_i = 0;
			_keys = $keys(_ref);
			/* while (true) { */ case 6:
				/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 7; continue; }
				_entry = _ref[_keys[_i]];
				if (_entry === undefined) {
					_i++;
					/* continue; */ $s = 6; continue;
				}
				obj = _entry.k;
				d = _entry.v;
				_tuple = $assertType(obj, dependency, true);
				obj$1 = _tuple[0];
				/* */ if (!($interfaceIsEqual(obj$1, $ifaceNil))) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!($interfaceIsEqual(obj$1, $ifaceNil))) { */ case 8:
					/* */ if ($keys(d.deps).length > 0) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if ($keys(d.deps).length > 0) { */ case 10:
						_r$2 = obj$1.Name(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_arg = new $String(_r$2);
						_r$3 = fmt.Printf("\t%s depends on\n", new sliceType$4([_arg])); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$3;
						_ref$1 = d.deps;
						_i$1 = 0;
						_keys$1 = $keys(_ref$1);
						/* while (true) { */ case 15:
							/* if (!(_i$1 < _keys$1.length)) { break; } */ if(!(_i$1 < _keys$1.length)) { $s = 16; continue; }
							_entry$1 = _ref$1[_keys$1[_i$1]];
							if (_entry$1 === undefined) {
								_i$1++;
								/* continue; */ $s = 15; continue;
							}
							dep = _entry$1.k;
							_r$4 = dep.Name(); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
							_arg$1 = new $String(_r$4);
							_r$5 = fmt.Printf("\t\t%s\n", new sliceType$4([_arg$1])); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
							_r$5;
							_i$1++;
						/* } */ $s = 15; continue; case 16:
						$s = 12; continue;
					/* } else { */ case 11:
						_r$6 = obj$1.Name(); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_arg$2 = new $String(_r$6);
						_r$7 = fmt.Printf("\t%s has no dependencies\n", new sliceType$4([_arg$2])); /* */ $s = 20; case 20: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						_r$7;
					/* } */ case 12:
				/* } */ case 9:
				_i++;
			/* } */ $s = 6; continue; case 7:
			_r$8 = fmt.Println(new sliceType$4([])); /* */ $s = 21; case 21: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$8;
			_r$9 = fmt.Println(new sliceType$4([new $String("Transposed object dependency graph (functions eliminated):")])); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
			_ref$2 = pq[0];
			_i$2 = 0;
			/* while (true) { */ case 23:
				/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 24; continue; }
				n = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
				_r$10 = n.obj.Name(); /* */ $s = 25; case 25: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_arg$3 = new $String(_r$10);
				_arg$4 = new $Int(n.ndeps);
				_r$11 = fmt.Printf("\t%s depends on %d nodes\n", new sliceType$4([_arg$3, _arg$4])); /* */ $s = 26; case 26: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$11;
				_ref$3 = n.pred;
				_i$3 = 0;
				_keys$2 = $keys(_ref$3);
				/* while (true) { */ case 27:
					/* if (!(_i$3 < _keys$2.length)) { break; } */ if(!(_i$3 < _keys$2.length)) { $s = 28; continue; }
					_entry$2 = _ref$3[_keys$2[_i$3]];
					if (_entry$2 === undefined) {
						_i$3++;
						/* continue; */ $s = 27; continue;
					}
					p = _entry$2.k;
					_r$12 = p.obj.Name(); /* */ $s = 29; case 29: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_arg$5 = new $String(_r$12);
					_r$13 = fmt.Printf("\t\t%s is dependent\n", new sliceType$4([_arg$5])); /* */ $s = 30; case 30: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_r$13;
					_i$3++;
				/* } */ $s = 27; continue; case 28:
				_i$2++;
			/* } */ $s = 23; continue; case 24:
			_r$14 = fmt.Println(new sliceType$4([])); /* */ $s = 31; case 31: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$14;
			_r$15 = fmt.Println(new sliceType$4([new $String("Processing nodes:")])); /* */ $s = 32; case 32: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$15;
		/* } */ case 3:
		emitted = {};
		/* while (true) { */ case 33:
			/* if (!(pq[0].$length > 0)) { break; } */ if(!(pq[0].$length > 0)) { $s = 34; continue; }
			_r$16 = heap.Pop((pq.$ptr || (pq.$ptr = new ptrType$60(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, pq)))); /* */ $s = 35; case 35: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			n$1 = $assertType(_r$16, ptrType$61);
			/* */ if (false) { $s = 36; continue; }
			/* */ $s = 37; continue;
			/* if (false) { */ case 36:
				_r$17 = n$1.obj.Name(); /* */ $s = 38; case 38: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_arg$6 = new $String(_r$17);
				_r$18 = n$1.obj.order(); /* */ $s = 39; case 39: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				_arg$7 = new $Uint32(_r$18);
				_arg$8 = new $Int(n$1.ndeps);
				_r$19 = fmt.Printf("\t%s (src pos %d) depends on %d nodes now\n", new sliceType$4([_arg$6, _arg$7, _arg$8])); /* */ $s = 40; case 40: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				_r$19;
			/* } */ case 37:
			/* */ if (n$1.ndeps > 0) { $s = 41; continue; }
			/* */ $s = 42; continue;
			/* if (n$1.ndeps > 0) { */ case 41:
				cycle = findPath(check.objMap, n$1.obj, n$1.obj, {});
				/* */ if (!(cycle === sliceType$20.nil)) { $s = 43; continue; }
				/* */ $s = 44; continue;
				/* if (!(cycle === sliceType$20.nil)) { */ case 43:
					$r = check.reportCycle(cycle); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 44:
			/* } */ case 42:
			_ref$4 = n$1.pred;
			_i$4 = 0;
			_keys$3 = $keys(_ref$4);
			/* while (true) { */ case 46:
				/* if (!(_i$4 < _keys$3.length)) { break; } */ if(!(_i$4 < _keys$3.length)) { $s = 47; continue; }
				_entry$3 = _ref$4[_keys$3[_i$4]];
				if (_entry$3 === undefined) {
					_i$4++;
					/* continue; */ $s = 46; continue;
				}
				p$1 = _entry$3.k;
				p$1.ndeps = p$1.ndeps - (1) >> 0;
				$r = heap.Fix((pq.$ptr || (pq.$ptr = new ptrType$60(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, pq))), p$1.index); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i$4++;
			/* } */ $s = 46; continue; case 47:
			_tuple$1 = $assertType(n$1.obj, ptrType$10, true);
			v = _tuple$1[0];
			info = (_entry$4 = check.objMap[Object.keyFor(v)], _entry$4 !== undefined ? _entry$4.v : ptrType$23.nil);
			if (v === ptrType$10.nil || !info.hasInitializer()) {
				/* continue; */ $s = 33; continue;
			}
			if ((_entry$5 = emitted[ptrType$23.keyFor(info)], _entry$5 !== undefined ? _entry$5.v : false)) {
				/* continue; */ $s = 33; continue;
			}
			_key = info; (emitted || $throwRuntimeError("assignment to entry in nil map"))[ptrType$23.keyFor(_key)] = { k: _key, v: true };
			infoLhs = info.lhs;
			if (infoLhs === sliceType$6.nil) {
				infoLhs = new sliceType$6([v]);
			}
			init$1 = new Initializer.ptr(infoLhs, info.init);
			check.Info.InitOrder = $append(check.Info.InitOrder, init$1);
		/* } */ $s = 33; continue; case 34:
		/* */ if (false) { $s = 49; continue; }
		/* */ $s = 50; continue;
		/* if (false) { */ case 49:
			_r$20 = fmt.Println(new sliceType$4([])); /* */ $s = 51; case 51: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			_r$20;
			_r$21 = fmt.Println(new sliceType$4([new $String("Initialization order:")])); /* */ $s = 52; case 52: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			_r$21;
			_ref$5 = check.Info.InitOrder;
			_i$5 = 0;
			/* while (true) { */ case 53:
				/* if (!(_i$5 < _ref$5.$length)) { break; } */ if(!(_i$5 < _ref$5.$length)) { $s = 54; continue; }
				init$2 = ((_i$5 < 0 || _i$5 >= _ref$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$5.$array[_ref$5.$offset + _i$5]);
				_r$22 = fmt.Printf("\t%s\n", new sliceType$4([init$2])); /* */ $s = 55; case 55: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				_r$22;
				_i$5++;
			/* } */ $s = 53; continue; case 54:
			_r$23 = fmt.Println(new sliceType$4([])); /* */ $s = 56; case 56: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_r$23;
		/* } */ case 50:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.initOrder }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._key = _key; $f._keys = _keys; $f._keys$1 = _keys$1; $f._keys$2 = _keys$2; $f._keys$3 = _keys$3; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.check = check; $f.cycle = cycle; $f.d = d; $f.dep = dep; $f.emitted = emitted; $f.info = info; $f.infoLhs = infoLhs; $f.init$1 = init$1; $f.init$2 = init$2; $f.n = n; $f.n$1 = n$1; $f.obj = obj; $f.obj$1 = obj$1; $f.p = p; $f.p$1 = p$1; $f.pq = pq; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.initOrder = function() { return this.$val.initOrder(); };
	findPath = function(objMap, from, to, visited) {
		var P, _entry, _entry$1, _entry$2, _i, _key, _keys, _ref, d, from, objMap, to, visited;
		if ((_entry = visited[Object.keyFor(from)], _entry !== undefined ? _entry.v : false)) {
			return sliceType$20.nil;
		}
		_key = from; (visited || $throwRuntimeError("assignment to entry in nil map"))[Object.keyFor(_key)] = { k: _key, v: true };
		_ref = (_entry$1 = objMap[Object.keyFor(from)], _entry$1 !== undefined ? _entry$1.v : ptrType$23.nil).deps;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry$2 = _ref[_keys[_i]];
			if (_entry$2 === undefined) {
				_i++;
				continue;
			}
			d = _entry$2.k;
			if ($interfaceIsEqual(d, to)) {
				return new sliceType$20([d]);
			}
			P = findPath(objMap, d, to, visited);
			if (!(P === sliceType$20.nil)) {
				return $append(P, d);
			}
			_i++;
		}
		return sliceType$20.nil;
	};
	Checker.ptr.prototype.reportCycle = function(cycle) {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _r, _r$1, _r$2, _r$3, _r$4, _r$5, check, cycle, i, obj, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; check = $f.check; cycle = $f.cycle; i = $f.i; obj = $f.obj; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		obj = (0 >= cycle.$length ? ($throwRuntimeError("index out of range"), undefined) : cycle.$array[cycle.$offset + 0]);
		_r = obj.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = obj.Name(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$1 = new $String(_r$1);
		$r = check.errorf(_arg, "initialization cycle for %s", new sliceType$4([_arg$1])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		i = cycle.$length - 1 >> 0;
		/* while (true) { */ case 4:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 5; continue; }
			_r$2 = obj.Pos(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg$2 = _r$2;
			_r$3 = obj.Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_arg$3 = new $String(_r$3);
			$r = check.errorf(_arg$2, "\t%s refers to", new sliceType$4([_arg$3])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			obj = ((i < 0 || i >= cycle.$length) ? ($throwRuntimeError("index out of range"), undefined) : cycle.$array[cycle.$offset + i]);
			i = i - (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		_r$4 = obj.Pos(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg$4 = _r$4;
		_r$5 = obj.Name(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$5 = new $String(_r$5);
		$r = check.errorf(_arg$4, "\t%s", new sliceType$4([_arg$5])); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.reportCycle }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.check = check; $f.cycle = cycle; $f.i = i; $f.obj = obj; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.reportCycle = function(cycle) { return this.$val.reportCycle(cycle); };
	$ptrType(nodeSet).prototype.add = function(p) {
		var _key, p, s;
		s = this;
		if (s.$get() === false) {
			s.$set({});
		}
		_key = p; (s.$get() || $throwRuntimeError("assignment to entry in nil map"))[ptrType$61.keyFor(_key)] = { k: _key, v: true };
	};
	dependencyGraph = function(objMap) {
		var G, M, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _i$6, _key, _keys, _keys$1, _keys$2, _keys$3, _keys$4, _keys$5, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _tuple, _tuple$1, _tuple$2, d, d$1, d$2, i, n, n$1, n$2, obj, obj$1, obj$2, obj$3, objMap, ok, p, s;
		M = {};
		_ref = objMap;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			obj = _entry.k;
			_tuple = $assertType(obj, dependency, true);
			obj$1 = _tuple[0];
			if (!($interfaceIsEqual(obj$1, $ifaceNil))) {
				_key = obj$1; (M || $throwRuntimeError("assignment to entry in nil map"))[dependency.keyFor(_key)] = { k: _key, v: new graphNode.ptr(obj$1, false, false, 0, 0) };
			}
			_i++;
		}
		_ref$1 = M;
		_i$1 = 0;
		_keys$1 = $keys(_ref$1);
		while (true) {
			if (!(_i$1 < _keys$1.length)) { break; }
			_entry$1 = _ref$1[_keys$1[_i$1]];
			if (_entry$1 === undefined) {
				_i$1++;
				continue;
			}
			obj$2 = _entry$1.k;
			n = _entry$1.v;
			_ref$2 = (_entry$2 = objMap[Object.keyFor(obj$2)], _entry$2 !== undefined ? _entry$2.v : ptrType$23.nil).deps;
			_i$2 = 0;
			_keys$2 = $keys(_ref$2);
			while (true) {
				if (!(_i$2 < _keys$2.length)) { break; }
				_entry$3 = _ref$2[_keys$2[_i$2]];
				if (_entry$3 === undefined) {
					_i$2++;
					continue;
				}
				d = _entry$3.k;
				_tuple$1 = $assertType(d, dependency, true);
				d$1 = _tuple$1[0];
				if (!($interfaceIsEqual(d$1, $ifaceNil))) {
					d$2 = (_entry$4 = M[dependency.keyFor(d$1)], _entry$4 !== undefined ? _entry$4.v : ptrType$61.nil);
					(n.$ptr_succ || (n.$ptr_succ = new ptrType$62(function() { return this.$target.succ; }, function($v) { this.$target.succ = $v; }, n))).add(d$2);
					(d$2.$ptr_pred || (d$2.$ptr_pred = new ptrType$62(function() { return this.$target.pred; }, function($v) { this.$target.pred = $v; }, d$2))).add(n);
				}
				_i$2++;
			}
			_i$1++;
		}
		G = sliceType$21.nil;
		_ref$3 = M;
		_i$3 = 0;
		_keys$3 = $keys(_ref$3);
		while (true) {
			if (!(_i$3 < _keys$3.length)) { break; }
			_entry$5 = _ref$3[_keys$3[_i$3]];
			if (_entry$5 === undefined) {
				_i$3++;
				continue;
			}
			obj$3 = _entry$5.k;
			n$1 = _entry$5.v;
			_tuple$2 = $assertType(obj$3, ptrType$5, true);
			ok = _tuple$2[1];
			if (ok) {
				_ref$4 = n$1.pred;
				_i$4 = 0;
				_keys$4 = $keys(_ref$4);
				while (true) {
					if (!(_i$4 < _keys$4.length)) { break; }
					_entry$6 = _ref$4[_keys$4[_i$4]];
					if (_entry$6 === undefined) {
						_i$4++;
						continue;
					}
					p = _entry$6.k;
					if (!(p === n$1)) {
						_ref$5 = n$1.succ;
						_i$5 = 0;
						_keys$5 = $keys(_ref$5);
						while (true) {
							if (!(_i$5 < _keys$5.length)) { break; }
							_entry$7 = _ref$5[_keys$5[_i$5]];
							if (_entry$7 === undefined) {
								_i$5++;
								continue;
							}
							s = _entry$7.k;
							if (!(s === n$1)) {
								(p.$ptr_succ || (p.$ptr_succ = new ptrType$62(function() { return this.$target.succ; }, function($v) { this.$target.succ = $v; }, p))).add(s);
								(s.$ptr_pred || (s.$ptr_pred = new ptrType$62(function() { return this.$target.pred; }, function($v) { this.$target.pred = $v; }, s))).add(p);
								delete s.pred[ptrType$61.keyFor(n$1)];
							}
							_i$5++;
						}
						delete p.succ[ptrType$61.keyFor(n$1)];
					}
					_i$4++;
				}
			} else {
				G = $append(G, n$1);
			}
			_i$3++;
		}
		_ref$6 = G;
		_i$6 = 0;
		while (true) {
			if (!(_i$6 < _ref$6.$length)) { break; }
			i = _i$6;
			n$2 = ((_i$6 < 0 || _i$6 >= _ref$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$6.$array[_ref$6.$offset + _i$6]);
			n$2.index = i;
			n$2.ndeps = $keys(n$2.succ).length;
			_i$6++;
		}
		return G;
	};
	nodeQueue.prototype.Len = function() {
		var a;
		a = this;
		return a.$length;
	};
	$ptrType(nodeQueue).prototype.Len = function() { return this.$get().Len(); };
	nodeQueue.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a, i, j, x, y;
		a = this;
		_tmp = ((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]);
		_tmp$1 = ((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j]);
		x = _tmp;
		y = _tmp$1;
		_tmp$2 = y;
		_tmp$3 = x;
		((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = _tmp$2);
		((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j] = _tmp$3);
		_tmp$4 = j;
		_tmp$5 = i;
		x.index = _tmp$4;
		y.index = _tmp$5;
	};
	$ptrType(nodeQueue).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	nodeQueue.prototype.Less = function(i, j) {
		var _r, _r$1, _tmp, _tmp$1, _v, _v$1, a, i, j, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _v = $f._v; _v$1 = $f._v$1; a = $f.a; i = $f.i; j = $f.j; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_tmp = ((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]);
		_tmp$1 = ((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j]);
		x = _tmp;
		y = _tmp$1;
		if (x.ndeps < y.ndeps) { _v = true; $s = 1; continue s; }
		if (!(x.ndeps === y.ndeps)) { _v$1 = false; $s = 2; continue s; }
		_r = x.obj.order(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = y.obj.order(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v$1 = _r < _r$1; case 2:
		_v = _v$1; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: nodeQueue.prototype.Less }; } $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._v = _v; $f._v$1 = _v$1; $f.a = a; $f.i = i; $f.j = j; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nodeQueue).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	$ptrType(nodeQueue).prototype.Push = function(x) {
		var a, x;
		a = this;
		$panic(new $String("unreachable"));
	};
	$ptrType(nodeQueue).prototype.Pop = function() {
		var a, n, x, x$1, x$2;
		a = this;
		n = a.$get().$length;
		x$2 = (x = a.$get(), x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		x$2.index = -1;
		a.$set($subslice((a.$get()), 0, (n - 1 >> 0)));
		return x$2;
	};
	Checker.ptr.prototype.labels = function(body) {
		var _entry, _i, _i$1, _keys, _r, _ref, _ref$1, all, alt, body, check, fwdJumps, jmp, lbl, msg, name, obj, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _keys = $f._keys; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; all = $f.all; alt = $f.alt; body = $f.body; check = $f.check; fwdJumps = $f.fwdJumps; jmp = $f.jmp; lbl = $f.lbl; msg = $f.msg; name = $f.name; obj = $f.obj; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		all = NewScope(ptrType$1.nil, body.Pos(), body.End(), "label");
		_r = check.blockBranches(all, ptrType$63.nil, ptrType$64.nil, body.List); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		fwdJumps = _r;
		_ref = fwdJumps;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			jmp = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			msg = "";
			name = jmp.Label.Name;
			alt = all.Lookup(name);
			if (!($interfaceIsEqual(alt, $ifaceNil))) {
				msg = "goto %s jumps into block";
				$assertType(alt, ptrType$65).used = true;
			} else {
				msg = "label %s not declared";
			}
			$r = check.errorf(jmp.Label.Pos(), msg, new sliceType$4([new $String(name)])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 2; continue; case 3:
		_ref$1 = all.elems;
		_i$1 = 0;
		_keys = $keys(_ref$1);
		/* while (true) { */ case 5:
			/* if (!(_i$1 < _keys.length)) { break; } */ if(!(_i$1 < _keys.length)) { $s = 6; continue; }
			_entry = _ref$1[_keys[_i$1]];
			if (_entry === undefined) {
				_i$1++;
				/* continue; */ $s = 5; continue;
			}
			obj = _entry.v;
			lbl = $assertType(obj, ptrType$65);
			/* */ if (!lbl.used) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!lbl.used) { */ case 7:
				$r = check.softErrorf(lbl.object.pos, "label %s declared but not used", new sliceType$4([new $String(lbl.object.name)])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
			_i$1++;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.labels }; } $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._keys = _keys; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.all = all; $f.alt = alt; $f.body = body; $f.check = check; $f.fwdJumps = fwdJumps; $f.jmp = jmp; $f.lbl = lbl; $f.msg = msg; $f.name = name; $f.obj = obj; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.labels = function(body) { return this.$val.labels(body); };
	block.ptr.prototype.insert = function(s) {
		var _key, b, labels, name, s;
		b = this;
		name = s.Label.Name;
		if (false) {
			assert(b.gotoTarget(name) === ptrType$64.nil);
		}
		labels = b.labels;
		if (labels === false) {
			labels = {};
			b.labels = labels;
		}
		_key = name; (labels || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: s };
	};
	block.prototype.insert = function(s) { return this.$val.insert(s); };
	block.ptr.prototype.gotoTarget = function(name) {
		var _entry, b, name, s, t;
		b = this;
		s = b;
		while (true) {
			if (!(!(s === ptrType$63.nil))) { break; }
			t = (_entry = s.labels[$String.keyFor(name)], _entry !== undefined ? _entry.v : ptrType$64.nil);
			if (!(t === ptrType$64.nil)) {
				return t;
			}
			s = s.parent;
		}
		return ptrType$64.nil;
	};
	block.prototype.gotoTarget = function(name) { return this.$val.gotoTarget(name); };
	block.ptr.prototype.enclosingTarget = function(name) {
		var b, name, s, t;
		b = this;
		s = b;
		while (true) {
			if (!(!(s === ptrType$63.nil))) { break; }
			t = s.lstmt;
			if (!(t === ptrType$64.nil) && t.Label.Name === name) {
				return t;
			}
			s = s.parent;
		}
		return ptrType$64.nil;
	};
	block.prototype.enclosingTarget = function(name) { return this.$val.enclosingTarget(name); };
	Checker.ptr.prototype.blockBranches = function(all, parent, lstmt, list) {
		var _i, _ref, _tmp, _tmp$1, all, b, badJumps, blockBranches, check, fwdJumps, jumpsOverVarDecl, list, lstmt, parent, recordVarDecl, s, stmtBranches, varDeclPos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; all = $f.all; b = $f.b; badJumps = $f.badJumps; blockBranches = $f.blockBranches; check = $f.check; fwdJumps = $f.fwdJumps; jumpsOverVarDecl = $f.jumpsOverVarDecl; list = $f.list; lstmt = $f.lstmt; parent = $f.parent; recordVarDecl = $f.recordVarDecl; s = $f.s; stmtBranches = $f.stmtBranches; varDeclPos = $f.varDeclPos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		all = [all];
		b = [b];
		badJumps = [badJumps];
		blockBranches = [blockBranches];
		check = [check];
		fwdJumps = [fwdJumps];
		jumpsOverVarDecl = [jumpsOverVarDecl];
		lstmt = [lstmt];
		recordVarDecl = [recordVarDecl];
		stmtBranches = [stmtBranches];
		varDeclPos = [varDeclPos];
		check[0] = this;
		b[0] = new block.ptr(parent, lstmt[0], false);
		varDeclPos[0] = 0;
		_tmp = sliceType$22.nil;
		_tmp$1 = sliceType$22.nil;
		fwdJumps[0] = _tmp;
		badJumps[0] = _tmp$1;
		recordVarDecl[0] = (function(all, b, badJumps, blockBranches, check, fwdJumps, jumpsOverVarDecl, lstmt, recordVarDecl, stmtBranches, varDeclPos) { return function(pos) {
			var pos;
			varDeclPos[0] = pos;
			badJumps[0] = $appendSlice($subslice(badJumps[0], 0, 0), fwdJumps[0]);
		}; })(all, b, badJumps, blockBranches, check, fwdJumps, jumpsOverVarDecl, lstmt, recordVarDecl, stmtBranches, varDeclPos);
		jumpsOverVarDecl[0] = (function(all, b, badJumps, blockBranches, check, fwdJumps, jumpsOverVarDecl, lstmt, recordVarDecl, stmtBranches, varDeclPos) { return function(jmp) {
			var _i, _ref, bad, jmp;
			if (new token.Pos(varDeclPos[0]).IsValid()) {
				_ref = badJumps[0];
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					bad = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					if (jmp === bad) {
						return true;
					}
					_i++;
				}
			}
			return false;
		}; })(all, b, badJumps, blockBranches, check, fwdJumps, jumpsOverVarDecl, lstmt, recordVarDecl, stmtBranches, varDeclPos);
		blockBranches[0] = (function(all, b, badJumps, blockBranches, check, fwdJumps, jumpsOverVarDecl, lstmt, recordVarDecl, stmtBranches, varDeclPos) { return function $b(lstmt$1, list$1) {
			var _arg, _arg$1, _r, list$1, lstmt$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; list$1 = $f.list$1; lstmt$1 = $f.lstmt$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_arg = fwdJumps[0];
			_r = check[0].blockBranches(all[0], b[0], lstmt$1, list$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg$1 = _r;
			fwdJumps[0] = $appendSlice(_arg, _arg$1);
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f.list$1 = list$1; $f.lstmt$1 = lstmt$1; $f.$s = $s; $f.$r = $r; return $f;
		}; })(all, b, badJumps, blockBranches, check, fwdJumps, jumpsOverVarDecl, lstmt, recordVarDecl, stmtBranches, varDeclPos);
		stmtBranches[0] = $throwNilPointerError;
		stmtBranches[0] = (function(all, b, badJumps, blockBranches, check, fwdJumps, jumpsOverVarDecl, lstmt, recordVarDecl, stmtBranches, varDeclPos) { return function $b(s) {
			var _1, _arg, _arg$1, _arg$2, _i, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _ref$2, _ref$3, _tuple, alt, d, i, jmp, lbl, name, name$1, obj, s, s$1, s$10, s$11, s$12, s$13, s$2, s$3, s$4, s$5, s$6, s$7, s$8, s$9, t, t$1, valid, valid$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tuple = $f._tuple; alt = $f.alt; d = $f.d; i = $f.i; jmp = $f.jmp; lbl = $f.lbl; name = $f.name; name$1 = $f.name$1; obj = $f.obj; s = $f.s; s$1 = $f.s$1; s$10 = $f.s$10; s$11 = $f.s$11; s$12 = $f.s$12; s$13 = $f.s$13; s$2 = $f.s$2; s$3 = $f.s$3; s$4 = $f.s$4; s$5 = $f.s$5; s$6 = $f.s$6; s$7 = $f.s$7; s$8 = $f.s$8; s$9 = $f.s$9; t = $f.t; t$1 = $f.t$1; valid = $f.valid; valid$1 = $f.valid$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_ref = s;
			/* */ if ($assertType(_ref, ptrType$67, true)[1]) { $s = 1; continue; }
			/* */ if ($assertType(_ref, ptrType$64, true)[1]) { $s = 2; continue; }
			/* */ if ($assertType(_ref, ptrType$66, true)[1]) { $s = 3; continue; }
			/* */ if ($assertType(_ref, ptrType$68, true)[1]) { $s = 4; continue; }
			/* */ if ($assertType(_ref, ptrType$32, true)[1]) { $s = 5; continue; }
			/* */ if ($assertType(_ref, ptrType$69, true)[1]) { $s = 6; continue; }
			/* */ if ($assertType(_ref, ptrType$70, true)[1]) { $s = 7; continue; }
			/* */ if ($assertType(_ref, ptrType$71, true)[1]) { $s = 8; continue; }
			/* */ if ($assertType(_ref, ptrType$72, true)[1]) { $s = 9; continue; }
			/* */ if ($assertType(_ref, ptrType$73, true)[1]) { $s = 10; continue; }
			/* */ if ($assertType(_ref, ptrType$74, true)[1]) { $s = 11; continue; }
			/* */ if ($assertType(_ref, ptrType$75, true)[1]) { $s = 12; continue; }
			/* */ if ($assertType(_ref, ptrType$76, true)[1]) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if ($assertType(_ref, ptrType$67, true)[1]) { */ case 1:
				s$1 = _ref.$val;
				_tuple = $assertType(s$1.Decl, ptrType$34, true);
				d = _tuple[0];
				/* */ if (!(d === ptrType$34.nil) && (d.Tok === 85)) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (!(d === ptrType$34.nil) && (d.Tok === 85)) { */ case 15:
					$r = recordVarDecl[0](d.Pos()); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 16:
				$s = 14; continue;
			/* } else if ($assertType(_ref, ptrType$64, true)[1]) { */ case 2:
				s$2 = _ref.$val;
				name = s$2.Label.Name;
				/* */ if (!(name === "_")) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (!(name === "_")) { */ case 18:
					lbl = NewLabel(s$2.Label.Pos(), check[0].pkg, name);
					_r = all[0].Insert(lbl); /* */ $s = 20; case 20: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					alt = _r;
					/* */ if (!($interfaceIsEqual(alt, $ifaceNil))) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (!($interfaceIsEqual(alt, $ifaceNil))) { */ case 21:
						$r = check[0].softErrorf(lbl.object.pos, "label %s already declared", new sliceType$4([new $String(name)])); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$r = check[0].reportAltDecl(alt); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 23; continue;
					/* } else { */ case 22:
						b[0].insert(s$2);
						check[0].recordDef(s$2.Label, lbl);
					/* } */ case 23:
					i = 0;
					_ref$1 = fwdJumps[0];
					_i = 0;
					/* while (true) { */ case 26:
						/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 27; continue; }
						jmp = ((_i < 0 || _i >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i]);
						/* */ if (jmp.Label.Name === name) { $s = 28; continue; }
						/* */ $s = 29; continue;
						/* if (jmp.Label.Name === name) { */ case 28:
							lbl.used = true;
							check[0].recordUse(jmp.Label, lbl);
							_r$1 = jumpsOverVarDecl[0](jmp); /* */ $s = 33; case 33: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
							/* */ if (_r$1) { $s = 31; continue; }
							/* */ $s = 32; continue;
							/* if (_r$1) { */ case 31:
								_arg = jmp.Label.Pos();
								_arg$1 = new $String(name);
								_r$2 = check[0].fset.Position(varDeclPos[0]); /* */ $s = 34; case 34: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
								_arg$2 = new $Int(_r$2.Line);
								$r = check[0].softErrorf(_arg, "goto %s jumps over variable declaration at line %d", new sliceType$4([_arg$1, _arg$2])); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 32:
							$s = 30; continue;
						/* } else { */ case 29:
							((i < 0 || i >= fwdJumps[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : fwdJumps[0].$array[fwdJumps[0].$offset + i] = jmp);
							i = i + (1) >> 0;
						/* } */ case 30:
						_i++;
					/* } */ $s = 26; continue; case 27:
					fwdJumps[0] = $subslice(fwdJumps[0], 0, i);
					lstmt[0] = s$2;
				/* } */ case 19:
				$r = stmtBranches[0](s$2.Stmt); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 14; continue;
			/* } else if ($assertType(_ref, ptrType$66, true)[1]) { */ case 3:
				s$3 = _ref.$val;
				if (s$3.Label === ptrType$7.nil) {
					$s = -1; return;
				}
				name$1 = s$3.Label.Name;
					_1 = s$3.Tok;
					/* */ if (_1 === (61)) { $s = 38; continue; }
					/* */ if (_1 === (65)) { $s = 39; continue; }
					/* */ if (_1 === (73)) { $s = 40; continue; }
					/* */ $s = 41; continue;
					/* if (_1 === (61)) { */ case 38:
						valid = false;
						t = b[0].enclosingTarget(name$1);
						if (!(t === ptrType$64.nil)) {
							_ref$2 = t.Stmt;
							if ($assertType(_ref$2, ptrType$71, true)[1] || $assertType(_ref$2, ptrType$72, true)[1] || $assertType(_ref$2, ptrType$74, true)[1] || $assertType(_ref$2, ptrType$75, true)[1] || $assertType(_ref$2, ptrType$76, true)[1]) {
								valid = true;
							}
						}
						/* */ if (!valid) { $s = 43; continue; }
						/* */ $s = 44; continue;
						/* if (!valid) { */ case 43:
							$r = check[0].errorf(s$3.Label.Pos(), "invalid break label %s", new sliceType$4([new $String(name$1)])); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 44:
						$s = 42; continue;
					/* } else if (_1 === (65)) { */ case 39:
						valid$1 = false;
						t$1 = b[0].enclosingTarget(name$1);
						if (!(t$1 === ptrType$64.nil)) {
							_ref$3 = t$1.Stmt;
							if ($assertType(_ref$3, ptrType$75, true)[1] || $assertType(_ref$3, ptrType$76, true)[1]) {
								valid$1 = true;
							}
						}
						/* */ if (!valid$1) { $s = 46; continue; }
						/* */ $s = 47; continue;
						/* if (!valid$1) { */ case 46:
							$r = check[0].errorf(s$3.Label.Pos(), "invalid continue label %s", new sliceType$4([new $String(name$1)])); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 47:
						$s = 42; continue;
					/* } else if (_1 === (73)) { */ case 40:
						if (b[0].gotoTarget(name$1) === ptrType$64.nil) {
							fwdJumps[0] = $append(fwdJumps[0], s$3);
							$s = -1; return;
						}
						$s = 42; continue;
					/* } else { */ case 41:
						$r = check[0].invalidAST(s$3.Pos(), "branch statement: %s %s", new sliceType$4([new token.Token(s$3.Tok), new $String(name$1)])); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
					/* } */ case 42:
				case 37:
				obj = all[0].Lookup(name$1);
				$assertType(obj, ptrType$65).used = true;
				check[0].recordUse(s$3.Label, obj);
				$s = 14; continue;
			/* } else if ($assertType(_ref, ptrType$68, true)[1]) { */ case 4:
				s$4 = _ref.$val;
				/* */ if (s$4.Tok === 47) { $s = 50; continue; }
				/* */ $s = 51; continue;
				/* if (s$4.Tok === 47) { */ case 50:
					_r$3 = s$4.Pos(); /* */ $s = 52; case 52: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$r = recordVarDecl[0](_r$3); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 51:
				$s = 14; continue;
			/* } else if ($assertType(_ref, ptrType$32, true)[1]) { */ case 5:
				s$5 = _ref.$val;
				$r = blockBranches[0](lstmt[0], s$5.List); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 14; continue;
			/* } else if ($assertType(_ref, ptrType$69, true)[1]) { */ case 6:
				s$6 = _ref.$val;
				$r = stmtBranches[0](s$6.Body); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (!($interfaceIsEqual(s$6.Else, $ifaceNil))) { $s = 56; continue; }
				/* */ $s = 57; continue;
				/* if (!($interfaceIsEqual(s$6.Else, $ifaceNil))) { */ case 56:
					$r = stmtBranches[0](s$6.Else); /* */ $s = 58; case 58: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 57:
				$s = 14; continue;
			/* } else if ($assertType(_ref, ptrType$70, true)[1]) { */ case 7:
				s$7 = _ref.$val;
				$r = blockBranches[0](ptrType$64.nil, s$7.Body); /* */ $s = 59; case 59: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 14; continue;
			/* } else if ($assertType(_ref, ptrType$71, true)[1]) { */ case 8:
				s$8 = _ref.$val;
				$r = stmtBranches[0](s$8.Body); /* */ $s = 60; case 60: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 14; continue;
			/* } else if ($assertType(_ref, ptrType$72, true)[1]) { */ case 9:
				s$9 = _ref.$val;
				$r = stmtBranches[0](s$9.Body); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 14; continue;
			/* } else if ($assertType(_ref, ptrType$73, true)[1]) { */ case 10:
				s$10 = _ref.$val;
				$r = blockBranches[0](ptrType$64.nil, s$10.Body); /* */ $s = 62; case 62: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 14; continue;
			/* } else if ($assertType(_ref, ptrType$74, true)[1]) { */ case 11:
				s$11 = _ref.$val;
				$r = stmtBranches[0](s$11.Body); /* */ $s = 63; case 63: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 14; continue;
			/* } else if ($assertType(_ref, ptrType$75, true)[1]) { */ case 12:
				s$12 = _ref.$val;
				$r = stmtBranches[0](s$12.Body); /* */ $s = 64; case 64: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 14; continue;
			/* } else if ($assertType(_ref, ptrType$76, true)[1]) { */ case 13:
				s$13 = _ref.$val;
				$r = stmtBranches[0](s$13.Body); /* */ $s = 65; case 65: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 14:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tuple = _tuple; $f.alt = alt; $f.d = d; $f.i = i; $f.jmp = jmp; $f.lbl = lbl; $f.name = name; $f.name$1 = name$1; $f.obj = obj; $f.s = s; $f.s$1 = s$1; $f.s$10 = s$10; $f.s$11 = s$11; $f.s$12 = s$12; $f.s$13 = s$13; $f.s$2 = s$2; $f.s$3 = s$3; $f.s$4 = s$4; $f.s$5 = s$5; $f.s$6 = s$6; $f.s$7 = s$7; $f.s$8 = s$8; $f.s$9 = s$9; $f.t = t; $f.t$1 = t$1; $f.valid = valid; $f.valid$1 = valid$1; $f.$s = $s; $f.$r = $r; return $f;
		}; })(all, b, badJumps, blockBranches, check, fwdJumps, jumpsOverVarDecl, lstmt, recordVarDecl, stmtBranches, varDeclPos);
		_ref = list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = stmtBranches[0](s); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return fwdJumps[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.blockBranches }; } $f._i = _i; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.all = all; $f.b = b; $f.badJumps = badJumps; $f.blockBranches = blockBranches; $f.check = check; $f.fwdJumps = fwdJumps; $f.jumpsOverVarDecl = jumpsOverVarDecl; $f.list = list; $f.lstmt = lstmt; $f.parent = parent; $f.recordVarDecl = recordVarDecl; $f.s = s; $f.stmtBranches = stmtBranches; $f.varDeclPos = varDeclPos; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.blockBranches = function(all, parent, lstmt, list) { return this.$val.blockBranches(all, parent, lstmt, list); };
	LookupFieldOrMethod = function(T, addressable, pkg, name) {
		var T, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, addressable, index, indirect, name, obj, ok, p, pkg, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; addressable = $f.addressable; index = $f.index; indirect = $f.indirect; name = $f.name; obj = $f.obj; ok = $f.ok; p = $f.p; pkg = $f.pkg; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		obj = $ifaceNil;
		index = sliceType$11.nil;
		indirect = false;
		_tuple = $assertType(T, ptrType$6, true);
		t = _tuple[0];
		/* */ if (!(t === ptrType$6.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(t === ptrType$6.nil)) { */ case 1:
			_tuple$1 = $assertType(t.underlying, ptrType$17, true);
			p = _tuple$1[0];
			/* */ if (!(p === ptrType$17.nil)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p === ptrType$17.nil)) { */ case 3:
				_r = lookupFieldOrMethod(p, false, pkg, name); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$2 = _r;
				obj = _tuple$2[0];
				index = _tuple$2[1];
				indirect = _tuple$2[2];
				_tuple$3 = $assertType(obj, ptrType$5, true);
				ok = _tuple$3[1];
				if (ok) {
					_tmp = $ifaceNil;
					_tmp$1 = sliceType$11.nil;
					_tmp$2 = false;
					obj = _tmp;
					index = _tmp$1;
					indirect = _tmp$2;
					$s = -1; return [obj, index, indirect];
				}
				$s = -1; return [obj, index, indirect];
			/* } */ case 4:
		/* } */ case 2:
		_r$1 = lookupFieldOrMethod(T, addressable, pkg, name); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$4 = _r$1;
		obj = _tuple$4[0];
		index = _tuple$4[1];
		indirect = _tuple$4[2];
		$s = -1; return [obj, index, indirect];
		/* */ } return; } if ($f === undefined) { $f = { $blk: LookupFieldOrMethod }; } $f.T = T; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.addressable = addressable; $f.index = index; $f.indirect = indirect; $f.name = name; $f.obj = obj; $f.ok = ok; $f.p = p; $f.pkg = pkg; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.LookupFieldOrMethod = LookupFieldOrMethod;
	lookupFieldOrMethod = function(T, addressable, pkg, name) {
		var T, _entry, _i, _i$1, _key, _r, _r$1, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _v, addressable, current, e, f, f$1, i, i$1, i$2, index, indirect, isPtr, isPtr$1, m, m$1, name, named, next, obj, pkg, seen, t, t$1, typ, typ$1, typ$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _v = $f._v; addressable = $f.addressable; current = $f.current; e = $f.e; f = $f.f; f$1 = $f.f$1; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; index = $f.index; indirect = $f.indirect; isPtr = $f.isPtr; isPtr$1 = $f.isPtr$1; m = $f.m; m$1 = $f.m$1; name = $f.name; named = $f.named; next = $f.next; obj = $f.obj; pkg = $f.pkg; seen = $f.seen; t = $f.t; t$1 = $f.t$1; typ = $f.typ; typ$1 = $f.typ$1; typ$2 = $f.typ$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		obj = $ifaceNil;
		index = sliceType$11.nil;
		indirect = false;
		if (name === "_") {
			$s = -1; return [obj, index, indirect];
		}
		_tuple = deref(T);
		typ = _tuple[0];
		isPtr = _tuple[1];
		if (!(isPtr)) { _v = false; $s = 3; continue s; }
		_r = IsInterface(typ); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return [obj, index, indirect];
		/* } */ case 2:
		current = new sliceType$23([new embeddedType.ptr(typ, sliceType$11.nil, isPtr, false)]);
		seen = false;
		/* while (true) { */ case 5:
			/* if (!(current.$length > 0)) { break; } */ if(!(current.$length > 0)) { $s = 6; continue; }
			next = sliceType$23.nil;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 7:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
				e = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), embeddedType);
				typ$1 = e.typ;
				_tuple$1 = $assertType(typ$1, ptrType$6, true);
				named = _tuple$1[0];
				if (!(named === ptrType$6.nil)) {
					if ((_entry = seen[ptrType$6.keyFor(named)], _entry !== undefined ? _entry.v : false)) {
						_i++;
						/* continue; */ $s = 7; continue;
					}
					if (seen === false) {
						seen = {};
					}
					_key = named; (seen || $throwRuntimeError("assignment to entry in nil map"))[ptrType$6.keyFor(_key)] = { k: _key, v: true };
					_tuple$2 = lookupMethod(named.methods, pkg, name);
					i = _tuple$2[0];
					m = _tuple$2[1];
					if (!(m === ptrType$5.nil)) {
						assert(!($interfaceIsEqual(m.object.typ, $ifaceNil)));
						index = concat(e.index, i);
						if (!($interfaceIsEqual(obj, $ifaceNil)) || e.multiples) {
							_tmp = $ifaceNil;
							_tmp$1 = index;
							_tmp$2 = false;
							obj = _tmp;
							index = _tmp$1;
							indirect = _tmp$2;
							$s = -1; return [obj, index, indirect];
						}
						obj = m;
						indirect = e.indirect;
						_i++;
						/* continue; */ $s = 7; continue;
					}
					typ$1 = named.underlying;
				}
				_ref$1 = typ$1;
				if ($assertType(_ref$1, ptrType$30, true)[1]) {
					t = _ref$1.$val;
					_ref$2 = t.fields;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$2.$length)) { break; }
						i$1 = _i$1;
						f = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$1]);
						if (f.object.sameId(pkg, name)) {
							assert(!($interfaceIsEqual(f.object.typ, $ifaceNil)));
							index = concat(e.index, i$1);
							if (!($interfaceIsEqual(obj, $ifaceNil)) || e.multiples) {
								_tmp$3 = $ifaceNil;
								_tmp$4 = index;
								_tmp$5 = false;
								obj = _tmp$3;
								index = _tmp$4;
								indirect = _tmp$5;
								$s = -1; return [obj, index, indirect];
							}
							obj = f;
							indirect = e.indirect;
							_i$1++;
							continue;
						}
						if ($interfaceIsEqual(obj, $ifaceNil) && f.anonymous) {
							_tuple$3 = deref(f.object.typ);
							typ$2 = _tuple$3[0];
							isPtr$1 = _tuple$3[1];
							next = $append(next, new embeddedType.ptr(typ$2, concat(e.index, i$1), e.indirect || isPtr$1, e.multiples));
						}
						_i$1++;
					}
				} else if ($assertType(_ref$1, ptrType$58, true)[1]) {
					t$1 = _ref$1.$val;
					_tuple$4 = lookupMethod(t$1.allMethods, pkg, name);
					i$2 = _tuple$4[0];
					m$1 = _tuple$4[1];
					if (!(m$1 === ptrType$5.nil)) {
						assert(!($interfaceIsEqual(m$1.object.typ, $ifaceNil)));
						index = concat(e.index, i$2);
						if (!($interfaceIsEqual(obj, $ifaceNil)) || e.multiples) {
							_tmp$6 = $ifaceNil;
							_tmp$7 = index;
							_tmp$8 = false;
							obj = _tmp$6;
							index = _tmp$7;
							indirect = _tmp$8;
							$s = -1; return [obj, index, indirect];
						}
						obj = m$1;
						indirect = e.indirect;
					}
				}
				_i++;
			/* } */ $s = 7; continue; case 8:
			if (!($interfaceIsEqual(obj, $ifaceNil))) {
				_tuple$5 = $assertType(obj, ptrType$5, true);
				f$1 = _tuple$5[0];
				if (!(f$1 === ptrType$5.nil) && ptrRecv(f$1) && !indirect && !addressable) {
					_tmp$9 = $ifaceNil;
					_tmp$10 = sliceType$11.nil;
					_tmp$11 = true;
					obj = _tmp$9;
					index = _tmp$10;
					indirect = _tmp$11;
					$s = -1; return [obj, index, indirect];
				}
				$s = -1; return [obj, index, indirect];
			}
			_r$1 = consolidateMultiples(next); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			current = _r$1;
		/* } */ $s = 5; continue; case 6:
		_tmp$12 = $ifaceNil;
		_tmp$13 = sliceType$11.nil;
		_tmp$14 = false;
		obj = _tmp$12;
		index = _tmp$13;
		indirect = _tmp$14;
		$s = -1; return [obj, index, indirect];
		/* */ } return; } if ($f === undefined) { $f = { $blk: lookupFieldOrMethod }; } $f.T = T; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._v = _v; $f.addressable = addressable; $f.current = current; $f.e = e; $f.f = f; $f.f$1 = f$1; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.index = index; $f.indirect = indirect; $f.isPtr = isPtr; $f.isPtr$1 = isPtr$1; $f.m = m; $f.m$1 = m$1; $f.name = name; $f.named = named; $f.next = next; $f.obj = obj; $f.pkg = pkg; $f.seen = seen; $f.t = t; $f.t$1 = t$1; $f.typ = typ; $f.typ$1 = typ$1; $f.typ$2 = typ$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	consolidateMultiples = function(list) {
		var _i, _key, _r, _ref, _tuple, e, found, i, list, n, prev, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _key = $f._key; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; e = $f.e; found = $f.found; i = $f.i; list = $f.list; n = $f.n; prev = $f.prev; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (list.$length <= 1) {
			$s = -1; return list;
		}
		n = 0;
		prev = {};
		_ref = list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			e = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), embeddedType);
			_r = lookupType(prev, e.typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			i = _tuple[0];
			found = _tuple[1];
			if (found) {
				((i < 0 || i >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + i]).multiples = true;
			} else {
				_key = e.typ; (prev || $throwRuntimeError("assignment to entry in nil map"))[Type.keyFor(_key)] = { k: _key, v: n };
				embeddedType.copy(((n < 0 || n >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + n]), e);
				n = n + (1) >> 0;
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $subslice(list, 0, n);
		/* */ } return; } if ($f === undefined) { $f = { $blk: consolidateMultiples }; } $f._i = _i; $f._key = _key; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.e = e; $f.found = found; $f.i = i; $f.list = list; $f.n = n; $f.prev = prev; $f.$s = $s; $f.$r = $r; return $f;
	};
	lookupType = function(m, typ) {
		var _entry, _entry$1, _i, _keys, _r, _ref, _tuple, found, i, i$1, m, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _keys = $f._keys; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; found = $f.found; i = $f.i; i$1 = $f.i$1; m = $f.m; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = (_entry = m[Type.keyFor(typ)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		i = _tuple[0];
		found = _tuple[1];
		if (found) {
			$s = -1; return [i, true];
		}
		_ref = m;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry$1 = _ref[_keys[_i]];
			if (_entry$1 === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			t = _entry$1.k;
			i$1 = _entry$1.v;
			_r = Identical(t, typ); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r) { */ case 3:
				$s = -1; return [i$1, true];
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, false];
		/* */ } return; } if ($f === undefined) { $f = { $blk: lookupType }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.found = found; $f.i = i; $f.i$1 = i$1; $f.m = m; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	MissingMethod = function(V, T, static$1) {
		var T, V, _i, _i$1, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, f, ityp, m, m$1, method, obj, obj$1, static$1, wrongType, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; V = $f.V; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; f = $f.f; ityp = $f.ityp; m = $f.m; m$1 = $f.m$1; method = $f.method; obj = $f.obj; obj$1 = $f.obj$1; static$1 = $f.static$1; wrongType = $f.wrongType; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		method = ptrType$5.nil;
		wrongType = false;
		if (T.Empty()) {
			$s = -1; return [method, wrongType];
		}
		_r = V.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$58, true);
		ityp = _tuple[0];
		/* */ if (!(ityp === ptrType$58.nil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(ityp === ptrType$58.nil)) { */ case 2:
			_ref = T.allMethods;
			_i = 0;
			/* while (true) { */ case 4:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
				m = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				_tuple$1 = lookupMethod(ityp.allMethods, m.object.pkg, m.object.name);
				obj = _tuple$1[1];
					/* */ if (obj === ptrType$5.nil) { $s = 7; continue; }
					_r$1 = Identical(obj.object.Type(), m.object.typ); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (!_r$1) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (obj === ptrType$5.nil) { */ case 7:
						if (static$1) {
							_tmp = m;
							_tmp$1 = false;
							method = _tmp;
							wrongType = _tmp$1;
							$s = -1; return [method, wrongType];
						}
						$s = 9; continue;
					/* } else if (!_r$1) { */ case 8:
						_tmp$2 = m;
						_tmp$3 = true;
						method = _tmp$2;
						wrongType = _tmp$3;
						$s = -1; return [method, wrongType];
					/* } */ case 9:
				case 6:
				_i++;
			/* } */ $s = 4; continue; case 5:
			$s = -1; return [method, wrongType];
		/* } */ case 3:
		_ref$1 = T.allMethods;
		_i$1 = 0;
		/* while (true) { */ case 11:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 12; continue; }
			m$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			_r$2 = lookupFieldOrMethod(V, false, m$1.object.pkg, m$1.object.name); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2;
			obj$1 = _tuple$2[0];
			_tuple$3 = $assertType(obj$1, ptrType$5, true);
			f = _tuple$3[0];
			if (f === ptrType$5.nil) {
				_tmp$4 = m$1;
				_tmp$5 = false;
				method = _tmp$4;
				wrongType = _tmp$5;
				$s = -1; return [method, wrongType];
			}
			_r$3 = Identical(f.object.typ, m$1.object.typ); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!_r$3) { */ case 14:
				_tmp$6 = m$1;
				_tmp$7 = true;
				method = _tmp$6;
				wrongType = _tmp$7;
				$s = -1; return [method, wrongType];
			/* } */ case 15:
			_i$1++;
		/* } */ $s = 11; continue; case 12:
		$s = -1; return [method, wrongType];
		/* */ } return; } if ($f === undefined) { $f = { $blk: MissingMethod }; } $f.T = T; $f.V = V; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.f = f; $f.ityp = ityp; $f.m = m; $f.m$1 = m$1; $f.method = method; $f.obj = obj; $f.obj$1 = obj$1; $f.static$1 = static$1; $f.wrongType = wrongType; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MissingMethod = MissingMethod;
	assertableTo = function(V, T) {
		var T, V, _r, _r$1, _tuple, _tuple$1, method, ok, wrongType, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; V = $f.V; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; method = $f.method; ok = $f.ok; wrongType = $f.wrongType; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		method = ptrType$5.nil;
		wrongType = false;
		_r = T.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$58, true);
		ok = _tuple[1];
		if (ok && true) {
			$s = -1; return [method, wrongType];
		}
		_r$1 = MissingMethod(T, V, false); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		method = _tuple$1[0];
		wrongType = _tuple$1[1];
		$s = -1; return [method, wrongType];
		/* */ } return; } if ($f === undefined) { $f = { $blk: assertableTo }; } $f.T = T; $f.V = V; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.method = method; $f.ok = ok; $f.wrongType = wrongType; $f.$s = $s; $f.$r = $r; return $f;
	};
	deref = function(typ) {
		var _tuple, p, typ;
		_tuple = $assertType(typ, ptrType$17, true);
		p = _tuple[0];
		if (!(p === ptrType$17.nil)) {
			return [p.base, true];
		}
		return [typ, false];
	};
	derefStructPtr = function(typ) {
		var _r, _r$1, _tuple, _tuple$1, ok, p, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; ok = $f.ok; p = $f.p; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$17, true);
		p = _tuple[0];
		/* */ if (!(p === ptrType$17.nil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(p === ptrType$17.nil)) { */ case 2:
			_r$1 = p.base.Underlying(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = $assertType(_r$1, ptrType$30, true);
			ok = _tuple$1[1];
			if (ok) {
				$s = -1; return p.base;
			}
		/* } */ case 3:
		$s = -1; return typ;
		/* */ } return; } if ($f === undefined) { $f = { $blk: derefStructPtr }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.ok = ok; $f.p = p; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	concat = function(list, i) {
		var i, list, t;
		t = sliceType$11.nil;
		t = $appendSlice(t, list);
		return $append(t, i);
	};
	fieldIndex = function(fields, pkg, name) {
		var _i, _ref, f, fields, i, name, pkg;
		if (!(name === "_")) {
			_ref = fields;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (f.object.sameId(pkg, name)) {
					return i;
				}
				_i++;
			}
		}
		return -1;
	};
	lookupMethod = function(methods, pkg, name) {
		var _i, _ref, i, m, methods, name, pkg;
		if (!(name === "_")) {
			_ref = methods;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				m = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (m.object.sameId(pkg, name)) {
					return [i, m];
				}
				_i++;
			}
		}
		return [-1, ptrType$5.nil];
	};
	MethodSet.ptr.prototype.String = function() {
		var _i, _r, _r$1, _r$2, _ref, buf, f, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buf = $f.buf; f = $f.f; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		s = this;
		if (s.Len() === 0) {
			$s = -1; return "MethodSet {}";
		}
		buf[0] = new bytes.Buffer.ptr(sliceType$5.nil, 0, arrayType.zero(), 0);
		_r = fmt.Fprintln(buf[0], new sliceType$4([new $String("MethodSet {")])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		_ref = s.list;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$1 = fmt.Fprintf(buf[0], "\t%s\n", new sliceType$4([f])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			_i++;
		/* } */ $s = 2; continue; case 3:
		_r$2 = fmt.Fprintln(buf[0], new sliceType$4([new $String("}")])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		$s = -1; return buf[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: MethodSet.ptr.prototype.String }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buf = buf; $f.f = f; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	MethodSet.prototype.String = function() { return this.$val.String(); };
	MethodSet.ptr.prototype.Len = function() {
		var s;
		s = this;
		return s.list.$length;
	};
	MethodSet.prototype.Len = function() { return this.$val.Len(); };
	MethodSet.ptr.prototype.At = function(i) {
		var i, s, x;
		s = this;
		return (x = s.list, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
	};
	MethodSet.prototype.At = function(i) { return this.$val.At(i); };
	MethodSet.ptr.prototype.Lookup = function(pkg, name) {
		var _r, _r$1, i, key, m, name, pkg, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; i = $f.i; key = $f.key; m = $f.m; name = $f.name; pkg = $f.pkg; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		key = [key];
		s = [s];
		s[0] = this;
		if (s[0].Len() === 0) {
			$s = -1; return ptrType.nil;
		}
		key[0] = Id(pkg, name);
		_r = sort.Search(s[0].list.$length, (function(key, s) { return function $b(i) {
			var _r, i, m, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; m = $f.m; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			m = (x = s[0].list, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			_r = m.obj.Id(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r >= key[0];
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f.i = i; $f.m = m; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		}; })(key, s)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		/* */ if (i < s[0].list.$length) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (i < s[0].list.$length) { */ case 2:
			m = (x = s[0].list, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			_r$1 = m.obj.Id(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1 === key[0]) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1 === key[0]) { */ case 4:
				$s = -1; return m;
			/* } */ case 5:
		/* } */ case 3:
		$s = -1; return ptrType.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MethodSet.ptr.prototype.Lookup }; } $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.key = key; $f.m = m; $f.name = name; $f.pkg = pkg; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	MethodSet.prototype.Lookup = function(pkg, name) { return this.$val.Lookup(pkg, name); };
	NewMethodSet = function(T) {
		var T, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _i, _i$1, _i$2, _i$3, _i$4, _key, _key$1, _key$2, _keys, _keys$1, _keys$2, _r, _r$1, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _v, base, current, e, f, f$1, found, found$1, found$2, fset, i, isPtr, isPtr$1, k, k$1, list, m, m$1, mset, named, next, seen, t, t$1, typ, typ$1, typ$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _keys = $f._keys; _keys$1 = $f._keys$1; _keys$2 = $f._keys$2; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _v = $f._v; base = $f.base; current = $f.current; e = $f.e; f = $f.f; f$1 = $f.f$1; found = $f.found; found$1 = $f.found$1; found$2 = $f.found$2; fset = $f.fset; i = $f.i; isPtr = $f.isPtr; isPtr$1 = $f.isPtr$1; k = $f.k; k$1 = $f.k$1; list = $f.list; m = $f.m; m$1 = $f.m$1; mset = $f.mset; named = $f.named; next = $f.next; seen = $f.seen; t = $f.t; t$1 = $f.t$1; typ = $f.typ; typ$1 = $f.typ$1; typ$2 = $f.typ$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		list = [list];
		base = false;
		_tuple = deref(T);
		typ = _tuple[0];
		isPtr = _tuple[1];
		if (!(isPtr)) { _v = false; $s = 3; continue s; }
		_r = IsInterface(typ); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return emptyMethodSet;
		/* } */ case 2:
		current = new sliceType$23([new embeddedType.ptr(typ, sliceType$11.nil, isPtr, false)]);
		seen = false;
		/* while (true) { */ case 5:
			/* if (!(current.$length > 0)) { break; } */ if(!(current.$length > 0)) { $s = 6; continue; }
			next = sliceType$23.nil;
			fset = false;
			mset = false;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 7:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
				e = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), embeddedType);
				typ$1 = e.typ;
				_tuple$1 = $assertType(typ$1, ptrType$6, true);
				named = _tuple$1[0];
				if (!(named === ptrType$6.nil)) {
					if ((_entry = seen[ptrType$6.keyFor(named)], _entry !== undefined ? _entry.v : false)) {
						_i++;
						/* continue; */ $s = 7; continue;
					}
					if (seen === false) {
						seen = {};
					}
					_key = named; (seen || $throwRuntimeError("assignment to entry in nil map"))[ptrType$6.keyFor(_key)] = { k: _key, v: true };
					mset = new methodSet(mset).add(named.methods, e.index, e.indirect, e.multiples);
					typ$1 = named.underlying;
				}
				_ref$1 = typ$1;
				if ($assertType(_ref$1, ptrType$30, true)[1]) {
					t = _ref$1.$val;
					_ref$2 = t.fields;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$2.$length)) { break; }
						i = _i$1;
						f = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$1]);
						fset = new fieldSet(fset).add(f, e.multiples);
						if (f.anonymous) {
							_tuple$2 = deref(f.object.typ);
							typ$2 = _tuple$2[0];
							isPtr$1 = _tuple$2[1];
							next = $append(next, new embeddedType.ptr(typ$2, concat(e.index, i), e.indirect || isPtr$1, e.multiples));
						}
						_i$1++;
					}
				} else if ($assertType(_ref$1, ptrType$58, true)[1]) {
					t$1 = _ref$1.$val;
					mset = new methodSet(mset).add(t$1.allMethods, e.index, true, e.multiples);
				}
				_i++;
			/* } */ $s = 7; continue; case 8:
			_ref$3 = mset;
			_i$2 = 0;
			_keys = $keys(_ref$3);
			while (true) {
				if (!(_i$2 < _keys.length)) { break; }
				_entry$1 = _ref$3[_keys[_i$2]];
				if (_entry$1 === undefined) {
					_i$2++;
					continue;
				}
				k = _entry$1.k;
				m = _entry$1.v;
				_tuple$3 = (_entry$2 = base[$String.keyFor(k)], _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType.nil, false]);
				found = _tuple$3[1];
				if (!found) {
					_tuple$4 = (_entry$3 = fset[$String.keyFor(k)], _entry$3 !== undefined ? [_entry$3.v, true] : [ptrType$10.nil, false]);
					found$1 = _tuple$4[1];
					if (found$1) {
						m = ptrType.nil;
					}
					if (base === false) {
						base = {};
					}
					_key$1 = k; (base || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: m };
				}
				_i$2++;
			}
			_ref$4 = fset;
			_i$3 = 0;
			_keys$1 = $keys(_ref$4);
			while (true) {
				if (!(_i$3 < _keys$1.length)) { break; }
				_entry$4 = _ref$4[_keys$1[_i$3]];
				if (_entry$4 === undefined) {
					_i$3++;
					continue;
				}
				k$1 = _entry$4.k;
				f$1 = _entry$4.v;
				if (f$1 === ptrType$10.nil) {
					_tuple$5 = (_entry$5 = base[$String.keyFor(k$1)], _entry$5 !== undefined ? [_entry$5.v, true] : [ptrType.nil, false]);
					found$2 = _tuple$5[1];
					if (!found$2) {
						if (base === false) {
							base = {};
						}
						_key$2 = k$1; (base || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$2)] = { k: _key$2, v: ptrType.nil };
					}
				}
				_i$3++;
			}
			_r$1 = consolidateMultiples(next); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			current = _r$1;
		/* } */ $s = 5; continue; case 6:
		if ($keys(base).length === 0) {
			$s = -1; return emptyMethodSet;
		}
		list[0] = sliceType.nil;
		_ref$5 = base;
		_i$4 = 0;
		_keys$2 = $keys(_ref$5);
		while (true) {
			if (!(_i$4 < _keys$2.length)) { break; }
			_entry$6 = _ref$5[_keys$2[_i$4]];
			if (_entry$6 === undefined) {
				_i$4++;
				continue;
			}
			m$1 = _entry$6.v;
			if (!(m$1 === ptrType.nil)) {
				m$1.recv = T;
				list[0] = $append(list[0], m$1);
			}
			_i$4++;
		}
		$r = sort.Slice(list[0], (function(list) { return function $b(i$1, j) {
			var _r$2, _r$3, i$1, j, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; i$1 = $f.i$1; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$2 = ((i$1 < 0 || i$1 >= list[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : list[0].$array[list[0].$offset + i$1]).obj.Id(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = ((j < 0 || j >= list[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : list[0].$array[list[0].$offset + j]).obj.Id(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$2 < _r$3;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i$1 = i$1; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
		}; })(list)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return new MethodSet.ptr(list[0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewMethodSet }; } $f.T = T; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._keys = _keys; $f._keys$1 = _keys$1; $f._keys$2 = _keys$2; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._v = _v; $f.base = base; $f.current = current; $f.e = e; $f.f = f; $f.f$1 = f$1; $f.found = found; $f.found$1 = found$1; $f.found$2 = found$2; $f.fset = fset; $f.i = i; $f.isPtr = isPtr; $f.isPtr$1 = isPtr$1; $f.k = k; $f.k$1 = k$1; $f.list = list; $f.m = m; $f.m$1 = m$1; $f.mset = mset; $f.named = named; $f.next = next; $f.seen = seen; $f.t = t; $f.t$1 = t$1; $f.typ = typ; $f.typ$1 = typ$1; $f.typ$2 = typ$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewMethodSet = NewMethodSet;
	fieldSet.prototype.add = function(f, multiples) {
		var _entry, _key, _key$1, _tuple, f, found, key, multiples, s;
		s = this.$val;
		if (s === false) {
			s = {};
		}
		key = f.object.Id();
		if (!multiples) {
			_tuple = (_entry = s[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$10.nil, false]);
			found = _tuple[1];
			if (!found) {
				_key = key; (s || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: f };
				return s;
			}
		}
		_key$1 = key; (s || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: ptrType$10.nil };
		return s;
	};
	$ptrType(fieldSet).prototype.add = function(f, multiples) { return new fieldSet(this.$get()).add(f, multiples); };
	methodSet.prototype.add = function(list, index, indirect, multiples) {
		var _entry, _i, _key, _key$1, _ref, _tuple, f, found, i, index, indirect, key, list, multiples, s;
		s = this.$val;
		if (list.$length === 0) {
			return s;
		}
		if (s === false) {
			s = {};
		}
		_ref = list;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			key = f.object.Id();
			if (!multiples) {
				_tuple = (_entry = s[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType.nil, false]);
				found = _tuple[1];
				if (!found && (indirect || !ptrRecv(f))) {
					_key = key; (s || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: new Selection.ptr(1, $ifaceNil, f, concat(index, i), indirect) };
					_i++;
					continue;
				}
			}
			_key$1 = key; (s || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: ptrType.nil };
			_i++;
		}
		return s;
	};
	$ptrType(methodSet).prototype.add = function(list, index, indirect, multiples) { return new methodSet(this.$get()).add(list, index, indirect, multiples); };
	ptrRecv = function(f) {
		var _tuple, f, isPtr;
		_tuple = deref($assertType(f.object.typ, ptrType$19).recv.object.typ);
		isPtr = _tuple[1];
		return isPtr;
	};
	Id = function(pkg, name) {
		var name, path, pkg;
		if (ast.IsExported(name)) {
			return name;
		}
		path = "_";
		if (!(pkg === ptrType$2.nil) && !(pkg.path === "")) {
			path = pkg.path;
		}
		return path + "." + name;
	};
	$pkg.Id = Id;
	object.ptr.prototype.Parent = function() {
		var obj;
		obj = this;
		return obj.parent;
	};
	object.prototype.Parent = function() { return this.$val.Parent(); };
	object.ptr.prototype.Pos = function() {
		var obj;
		obj = this;
		return obj.pos;
	};
	object.prototype.Pos = function() { return this.$val.Pos(); };
	object.ptr.prototype.Pkg = function() {
		var obj;
		obj = this;
		return obj.pkg;
	};
	object.prototype.Pkg = function() { return this.$val.Pkg(); };
	object.ptr.prototype.Name = function() {
		var obj;
		obj = this;
		return obj.name;
	};
	object.prototype.Name = function() { return this.$val.Name(); };
	object.ptr.prototype.Type = function() {
		var obj;
		obj = this;
		return obj.typ;
	};
	object.prototype.Type = function() { return this.$val.Type(); };
	object.ptr.prototype.Exported = function() {
		var obj;
		obj = this;
		return ast.IsExported(obj.name);
	};
	object.prototype.Exported = function() { return this.$val.Exported(); };
	object.ptr.prototype.Id = function() {
		var obj;
		obj = this;
		return Id(obj.pkg, obj.name);
	};
	object.prototype.Id = function() { return this.$val.Id(); };
	object.ptr.prototype.String = function() {
		var obj;
		obj = this;
		$panic(new $String("abstract"));
	};
	object.prototype.String = function() { return this.$val.String(); };
	object.ptr.prototype.order = function() {
		var obj;
		obj = this;
		return obj.order_;
	};
	object.prototype.order = function() { return this.$val.order(); };
	object.ptr.prototype.scopePos = function() {
		var obj;
		obj = this;
		return obj.scopePos_;
	};
	object.prototype.scopePos = function() { return this.$val.scopePos(); };
	object.ptr.prototype.setParent = function(parent) {
		var obj, parent;
		obj = this;
		obj.parent = parent;
	};
	object.prototype.setParent = function(parent) { return this.$val.setParent(parent); };
	object.ptr.prototype.setOrder = function(order) {
		var obj, order;
		obj = this;
		assert(order > 0);
		obj.order_ = order;
	};
	object.prototype.setOrder = function(order) { return this.$val.setOrder(order); };
	object.ptr.prototype.setScopePos = function(pos) {
		var obj, pos;
		obj = this;
		obj.scopePos_ = pos;
	};
	object.prototype.setScopePos = function(pos) { return this.$val.setScopePos(pos); };
	object.ptr.prototype.sameId = function(pkg, name) {
		var name, obj, pkg;
		obj = this;
		if (!(name === obj.name)) {
			return false;
		}
		if (obj.Exported()) {
			return true;
		}
		if (pkg === ptrType$2.nil || obj.pkg === ptrType$2.nil) {
			return pkg === obj.pkg;
		}
		return pkg.path === obj.pkg.path;
	};
	object.prototype.sameId = function(pkg, name) { return this.$val.sameId(pkg, name); };
	NewPkgName = function(pos, pkg, name, imported) {
		var imported, name, pkg, pos;
		return new PkgName.ptr(new object.ptr(ptrType$1.nil, pos, pkg, name, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]), 0, 0), imported, false);
	};
	$pkg.NewPkgName = NewPkgName;
	PkgName.ptr.prototype.Imported = function() {
		var obj;
		obj = this;
		return obj.imported;
	};
	PkgName.prototype.Imported = function() { return this.$val.Imported(); };
	NewConst = function(pos, pkg, name, typ, val) {
		var name, pkg, pos, typ, val;
		return new Const.ptr(new object.ptr(ptrType$1.nil, pos, pkg, name, typ, 0, 0), val, false);
	};
	$pkg.NewConst = NewConst;
	Const.ptr.prototype.Val = function() {
		var obj;
		obj = this;
		return obj.val;
	};
	Const.prototype.Val = function() { return this.$val.Val(); };
	NewTypeName = function(pos, pkg, name, typ) {
		var name, pkg, pos, typ;
		return new TypeName.ptr(new object.ptr(ptrType$1.nil, pos, pkg, name, typ, 0, 0));
	};
	$pkg.NewTypeName = NewTypeName;
	TypeName.ptr.prototype.IsAlias = function() {
		var _ref, obj, t, t$1, t$2, t$3;
		obj = this;
		_ref = obj.object.typ;
		if (_ref === $ifaceNil) {
			t = _ref;
			return false;
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			t$1 = _ref.$val;
			if (obj.object.pkg === $pkg.Unsafe) {
				return false;
			}
			return !(obj.object.pkg === ptrType$2.nil) || !(t$1.name === obj.object.name) || t$1 === universeByte || t$1 === universeRune;
		} else if ($assertType(_ref, ptrType$6, true)[1]) {
			t$2 = _ref.$val;
			return !(obj === t$2.obj);
		} else {
			t$3 = _ref;
			return true;
		}
	};
	TypeName.prototype.IsAlias = function() { return this.$val.IsAlias(); };
	NewVar = function(pos, pkg, name, typ) {
		var name, pkg, pos, typ;
		return new Var.ptr(new object.ptr(ptrType$1.nil, pos, pkg, name, typ, 0, 0), false, false, false, false);
	};
	$pkg.NewVar = NewVar;
	NewParam = function(pos, pkg, name, typ) {
		var name, pkg, pos, typ;
		return new Var.ptr(new object.ptr(ptrType$1.nil, pos, pkg, name, typ, 0, 0), false, false, false, true);
	};
	$pkg.NewParam = NewParam;
	NewField = function(pos, pkg, name, typ, anonymous) {
		var anonymous, name, pkg, pos, typ;
		return new Var.ptr(new object.ptr(ptrType$1.nil, pos, pkg, name, typ, 0, 0), anonymous, false, true, false);
	};
	$pkg.NewField = NewField;
	Var.ptr.prototype.Anonymous = function() {
		var obj;
		obj = this;
		return obj.anonymous;
	};
	Var.prototype.Anonymous = function() { return this.$val.Anonymous(); };
	Var.ptr.prototype.IsField = function() {
		var obj;
		obj = this;
		return obj.isField;
	};
	Var.prototype.IsField = function() { return this.$val.IsField(); };
	NewFunc = function(pos, pkg, name, sig) {
		var name, pkg, pos, sig, typ;
		typ = $ifaceNil;
		if (!(sig === ptrType$19.nil)) {
			typ = sig;
		}
		return new Func.ptr(new object.ptr(ptrType$1.nil, pos, pkg, name, typ, 0, 0));
	};
	$pkg.NewFunc = NewFunc;
	Func.ptr.prototype.FullName = function() {
		var buf, obj, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; buf = $f.buf; obj = $f.obj; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		obj = this;
		buf[0] = new bytes.Buffer.ptr(sliceType$5.nil, 0, arrayType.zero(), 0);
		$r = writeFuncName(buf[0], obj, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return buf[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Func.ptr.prototype.FullName }; } $f.buf = buf; $f.obj = obj; $f.$s = $s; $f.$r = $r; return $f;
	};
	Func.prototype.FullName = function() { return this.$val.FullName(); };
	Func.ptr.prototype.Scope = function() {
		var obj;
		obj = this;
		return $assertType(obj.object.typ, ptrType$19).scope;
	};
	Func.prototype.Scope = function() { return this.$val.Scope(); };
	NewLabel = function(pos, pkg, name) {
		var name, pkg, pos;
		return new Label.ptr(new object.ptr(ptrType$1.nil, pos, pkg, name, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]), 0, 0), false);
	};
	$pkg.NewLabel = NewLabel;
	newBuiltin = function(id) {
		var id;
		return new Builtin.ptr(new object.ptr(ptrType$1.nil, 0, ptrType$2.nil, ((id < 0 || id >= predeclaredFuncs.length) ? ($throwRuntimeError("index out of range"), undefined) : predeclaredFuncs[id]).name, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]), 0, 0), id);
	};
	writeObject = function(buf, obj, qf) {
		var _arg, _arg$1, _arg$2, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _v, buf, obj, obj$1, obj$2, obj$3, obj$4, obj$5, obj$6, obj$7, obj$8, obj$9, ok, path, qf, tname, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _v = $f._v; buf = $f.buf; obj = $f.obj; obj$1 = $f.obj$1; obj$2 = $f.obj$2; obj$3 = $f.obj$3; obj$4 = $f.obj$4; obj$5 = $f.obj$5; obj$6 = $f.obj$6; obj$7 = $f.obj$7; obj$8 = $f.obj$8; obj$9 = $f.obj$9; ok = $f.ok; path = $f.path; qf = $f.qf; tname = $f.tname; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		tname = ptrType$21.nil;
		_r = obj.Type(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		_ref = obj;
		/* */ if ($assertType(_ref, ptrType$20, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$3, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$21, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$5, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$65, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$22, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$77, true)[1]) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ($assertType(_ref, ptrType$20, true)[1]) { */ case 2:
			obj$1 = _ref.$val;
			_r$1 = fmt.Fprintf(buf, "package %s", new sliceType$4([new $String(obj$1.object.Name())])); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			path = obj$1.imported.path;
			/* */ if (!(path === "") && !(path === obj$1.object.name)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (!(path === "") && !(path === obj$1.object.name)) { */ case 13:
				_r$2 = fmt.Fprintf(buf, " (%q)", new sliceType$4([new $String(path)])); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
			/* } */ case 14:
			$s = -1; return;
		/* } else if ($assertType(_ref, ptrType$3, true)[1]) { */ case 3:
			obj$2 = _ref.$val;
			buf.WriteString("const");
			$s = 11; continue;
		/* } else if ($assertType(_ref, ptrType$21, true)[1]) { */ case 4:
			obj$3 = _ref.$val;
			tname = obj$3;
			buf.WriteString("type");
			$s = 11; continue;
		/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 5:
			obj$4 = _ref.$val;
			if (obj$4.isField) {
				buf.WriteString("field");
			} else {
				buf.WriteString("var");
			}
			$s = 11; continue;
		/* } else if ($assertType(_ref, ptrType$5, true)[1]) { */ case 6:
			obj$5 = _ref.$val;
			buf.WriteString("func ");
			$r = writeFuncName(buf, obj$5, qf); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(typ, $ifaceNil))) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (!($interfaceIsEqual(typ, $ifaceNil))) { */ case 17:
				$r = WriteSignature(buf, $assertType(typ, ptrType$19), qf); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 18:
			$s = -1; return;
		/* } else if ($assertType(_ref, ptrType$65, true)[1]) { */ case 7:
			obj$6 = _ref.$val;
			buf.WriteString("label");
			typ = $ifaceNil;
			$s = 11; continue;
		/* } else if ($assertType(_ref, ptrType$22, true)[1]) { */ case 8:
			obj$7 = _ref.$val;
			buf.WriteString("builtin");
			typ = $ifaceNil;
			$s = 11; continue;
		/* } else if ($assertType(_ref, ptrType$77, true)[1]) { */ case 9:
			obj$8 = _ref.$val;
			buf.WriteString("nil");
			$s = -1; return;
		/* } else { */ case 10:
			obj$9 = _ref;
			_r$3 = fmt.Sprintf("writeObject(%T)", new sliceType$4([obj$9])); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String(_r$3));
		/* } */ case 11:
		buf.WriteByte(32);
		_r$4 = obj.Pkg(); /* */ $s = 24; case 24: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		if (!(!(_r$4 === ptrType$2.nil))) { _v = false; $s = 23; continue s; }
		_r$5 = obj.Pkg(); /* */ $s = 25; case 25: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$6 = obj.Name(); /* */ $s = 26; case 26: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = _r$5.scope.Lookup(_r$6); /* */ $s = 27; case 27: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_v = $interfaceIsEqual(_r$7, obj); case 23:
		/* */ if (_v) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (_v) { */ case 21:
			_arg = buf;
			_r$8 = obj.Pkg(); /* */ $s = 28; case 28: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_arg$1 = _r$8;
			_arg$2 = qf;
			$r = writePackage(_arg, _arg$1, _arg$2); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 22:
		_r$9 = obj.Name(); /* */ $s = 30; case 30: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_r$10 = buf.WriteString(_r$9); /* */ $s = 31; case 31: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_r$10;
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$s = -1; return;
		}
		/* */ if (!(tname === ptrType$21.nil)) { $s = 32; continue; }
		/* */ $s = 33; continue;
		/* if (!(tname === ptrType$21.nil)) { */ case 32:
			_tuple = $assertType(typ, ptrType$4, true);
			ok = _tuple[1];
			if (ok) {
				$s = -1; return;
			}
			/* */ if (tname.IsAlias()) { $s = 34; continue; }
			/* */ $s = 35; continue;
			/* if (tname.IsAlias()) { */ case 34:
				buf.WriteString(" =");
				$s = 36; continue;
			/* } else { */ case 35:
				_r$11 = typ.Underlying(); /* */ $s = 37; case 37: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				typ = _r$11;
			/* } */ case 36:
		/* } */ case 33:
		buf.WriteByte(32);
		$r = WriteType(buf, typ, qf); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: writeObject }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._v = _v; $f.buf = buf; $f.obj = obj; $f.obj$1 = obj$1; $f.obj$2 = obj$2; $f.obj$3 = obj$3; $f.obj$4 = obj$4; $f.obj$5 = obj$5; $f.obj$6 = obj$6; $f.obj$7 = obj$7; $f.obj$8 = obj$8; $f.obj$9 = obj$9; $f.ok = ok; $f.path = path; $f.qf = qf; $f.tname = tname; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	writePackage = function(buf, pkg, qf) {
		var _r, buf, pkg, qf, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; buf = $f.buf; pkg = $f.pkg; qf = $f.qf; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (pkg === ptrType$2.nil) {
			$s = -1; return;
		}
		s = "";
		/* */ if (!(qf === $throwNilPointerError)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(qf === $throwNilPointerError)) { */ case 1:
			_r = qf(pkg); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			s = _r;
			$s = 3; continue;
		/* } else { */ case 2:
			s = pkg.Path();
		/* } */ case 3:
		if (!(s === "")) {
			buf.WriteString(s);
			buf.WriteByte(46);
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: writePackage }; } $f._r = _r; $f.buf = buf; $f.pkg = pkg; $f.qf = qf; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ObjectString = function(obj, qf) {
		var buf, obj, qf, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; buf = $f.buf; obj = $f.obj; qf = $f.qf; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		buf[0] = new bytes.Buffer.ptr(sliceType$5.nil, 0, arrayType.zero(), 0);
		$r = writeObject(buf[0], obj, qf); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return buf[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: ObjectString }; } $f.buf = buf; $f.obj = obj; $f.qf = qf; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ObjectString = ObjectString;
	PkgName.ptr.prototype.String = function() {
		var _r, obj, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; obj = $f.obj; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		obj = this;
		_r = ObjectString(obj, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PkgName.ptr.prototype.String }; } $f._r = _r; $f.obj = obj; $f.$s = $s; $f.$r = $r; return $f;
	};
	PkgName.prototype.String = function() { return this.$val.String(); };
	Const.ptr.prototype.String = function() {
		var _r, obj, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; obj = $f.obj; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		obj = this;
		_r = ObjectString(obj, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Const.ptr.prototype.String }; } $f._r = _r; $f.obj = obj; $f.$s = $s; $f.$r = $r; return $f;
	};
	Const.prototype.String = function() { return this.$val.String(); };
	TypeName.ptr.prototype.String = function() {
		var _r, obj, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; obj = $f.obj; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		obj = this;
		_r = ObjectString(obj, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TypeName.ptr.prototype.String }; } $f._r = _r; $f.obj = obj; $f.$s = $s; $f.$r = $r; return $f;
	};
	TypeName.prototype.String = function() { return this.$val.String(); };
	Var.ptr.prototype.String = function() {
		var _r, obj, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; obj = $f.obj; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		obj = this;
		_r = ObjectString(obj, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Var.ptr.prototype.String }; } $f._r = _r; $f.obj = obj; $f.$s = $s; $f.$r = $r; return $f;
	};
	Var.prototype.String = function() { return this.$val.String(); };
	Func.ptr.prototype.String = function() {
		var _r, obj, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; obj = $f.obj; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		obj = this;
		_r = ObjectString(obj, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Func.ptr.prototype.String }; } $f._r = _r; $f.obj = obj; $f.$s = $s; $f.$r = $r; return $f;
	};
	Func.prototype.String = function() { return this.$val.String(); };
	Label.ptr.prototype.String = function() {
		var _r, obj, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; obj = $f.obj; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		obj = this;
		_r = ObjectString(obj, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Label.ptr.prototype.String }; } $f._r = _r; $f.obj = obj; $f.$s = $s; $f.$r = $r; return $f;
	};
	Label.prototype.String = function() { return this.$val.String(); };
	Builtin.ptr.prototype.String = function() {
		var _r, obj, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; obj = $f.obj; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		obj = this;
		_r = ObjectString(obj, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Builtin.ptr.prototype.String }; } $f._r = _r; $f.obj = obj; $f.$s = $s; $f.$r = $r; return $f;
	};
	Builtin.prototype.String = function() { return this.$val.String(); };
	Nil.ptr.prototype.String = function() {
		var _r, obj, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; obj = $f.obj; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		obj = this;
		_r = ObjectString(obj, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Nil.ptr.prototype.String }; } $f._r = _r; $f.obj = obj; $f.$s = $s; $f.$r = $r; return $f;
	};
	Nil.prototype.String = function() { return this.$val.String(); };
	writeFuncName = function(buf, f, qf) {
		var _tuple, buf, f, ok, qf, recv, sig, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; buf = $f.buf; f = $f.f; ok = $f.ok; qf = $f.qf; recv = $f.recv; sig = $f.sig; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!($interfaceIsEqual(f.object.typ, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(f.object.typ, $ifaceNil))) { */ case 1:
			sig = $assertType(f.object.typ, ptrType$19);
			recv = sig.Recv();
			/* */ if (!(recv === ptrType$10.nil)) { $s = 3; continue; }
			/* */ if (!(f.object.pkg === ptrType$2.nil)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!(recv === ptrType$10.nil)) { */ case 3:
				buf.WriteByte(40);
				_tuple = $assertType(recv.object.Type(), ptrType$58, true);
				ok = _tuple[1];
				/* */ if (ok) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (ok) { */ case 6:
					buf.WriteString("interface");
					$s = 8; continue;
				/* } else { */ case 7:
					$r = WriteType(buf, recv.object.Type(), qf); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 8:
				buf.WriteByte(41);
				buf.WriteByte(46);
				$s = 5; continue;
			/* } else if (!(f.object.pkg === ptrType$2.nil)) { */ case 4:
				$r = writePackage(buf, f.object.pkg, qf); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
		/* } */ case 2:
		buf.WriteString(f.object.name);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: writeFuncName }; } $f._tuple = _tuple; $f.buf = buf; $f.f = f; $f.ok = ok; $f.qf = qf; $f.recv = recv; $f.sig = sig; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(objset).prototype.insert = function(obj) {
		var _entry, _key, _r, alt, id, obj, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _r = $f._r; alt = $f.alt; id = $f.id; obj = $f.obj; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = obj.Id(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		id = _r;
		alt = (_entry = (s.$get())[$String.keyFor(id)], _entry !== undefined ? _entry.v : $ifaceNil);
		if (!($interfaceIsEqual(alt, $ifaceNil))) {
			$s = -1; return alt;
		}
		if (s.$get() === false) {
			s.$set({});
		}
		_key = id; (s.$get() || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: obj };
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(objset).prototype.insert }; } $f._entry = _entry; $f._key = _key; $f._r = _r; $f.alt = alt; $f.id = id; $f.obj = obj; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	operand.ptr.prototype.pos = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if ($interfaceIsEqual(x.expr, $ifaceNil)) {
			$s = -1; return 0;
		}
		_r = x.expr.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: operand.ptr.prototype.pos }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	operand.prototype.pos = function() { return this.$val.pos(); };
	operandString = function(x, qf) {
		var _1, _2, _r, _r$1, _r$2, _r$3, buf, expr, hasType, qf, s, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; buf = $f.buf; expr = $f.expr; hasType = $f.hasType; qf = $f.qf; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		buf[0] = new bytes.Buffer.ptr(sliceType$5.nil, 0, arrayType.zero(), 0);
		expr = "";
		/* */ if (!($interfaceIsEqual(x.expr, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(x.expr, $ifaceNil))) { */ case 1:
			expr = ExprString(x.expr);
			$s = 3; continue;
		/* } else { */ case 2:
				_1 = x.mode;
				/* */ if (_1 === (2)) { $s = 5; continue; }
				/* */ if (_1 === (3)) { $s = 6; continue; }
				/* */ if (_1 === (4)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (2)) { */ case 5:
					expr = (x$1 = x.id, ((x$1 < 0 || x$1 >= predeclaredFuncs.length) ? ($throwRuntimeError("index out of range"), undefined) : predeclaredFuncs[x$1])).name;
					$s = 8; continue;
				/* } else if (_1 === (3)) { */ case 6:
					_r = TypeString(x.typ, qf); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					expr = _r;
					$s = 8; continue;
				/* } else if (_1 === (4)) { */ case 7:
					_r$1 = x.val.String(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					expr = _r$1;
				/* } */ case 8:
			case 4:
		/* } */ case 3:
		if (!(expr === "")) {
			buf[0].WriteString(expr);
			buf[0].WriteString(" (");
		}
		hasType = false;
			_2 = x.mode;
			/* */ if ((_2 === (0)) || (_2 === (1)) || (_2 === (2)) || (_2 === (3))) { $s = 12; continue; }
			/* */ if (!($interfaceIsEqual(x.typ, $ifaceNil))) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if ((_2 === (0)) || (_2 === (1)) || (_2 === (2)) || (_2 === (3))) { */ case 12:
				$s = 14; continue;
			/* } else if (!($interfaceIsEqual(x.typ, $ifaceNil))) { */ case 13:
				_r$2 = isUntyped(x.typ); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if (_r$2) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (_r$2) { */ case 15:
					buf[0].WriteString($assertType(x.typ, ptrType$4).name);
					buf[0].WriteByte(32);
					/* break; */ $s = 11; continue;
				/* } */ case 16:
				hasType = true;
			/* } */ case 14:
		case 11:
		buf[0].WriteString((x$2 = x.mode, ((x$2 < 0 || x$2 >= operandModeString.length) ? ($throwRuntimeError("index out of range"), undefined) : operandModeString[x$2])));
		/* */ if (x.mode === 4) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (x.mode === 4) { */ case 18:
			_r$3 = x.val.String(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			s = _r$3;
			if (!(s === expr)) {
				buf[0].WriteByte(32);
				buf[0].WriteString(s);
			}
		/* } */ case 19:
		/* */ if (hasType) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (hasType) { */ case 21:
			/* */ if (!($interfaceIsEqual(x.typ, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0])))) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (!($interfaceIsEqual(x.typ, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0])))) { */ case 23:
				buf[0].WriteString(" of type ");
				$r = WriteType(buf[0], x.typ, qf); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 25; continue;
			/* } else { */ case 24:
				buf[0].WriteString(" with invalid type");
			/* } */ case 25:
		/* } */ case 22:
		if (!(expr === "")) {
			buf[0].WriteByte(41);
		}
		$s = -1; return buf[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: operandString }; } $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.buf = buf; $f.expr = expr; $f.hasType = hasType; $f.qf = qf; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	operand.ptr.prototype.String = function() {
		var _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = operandString(x, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: operand.ptr.prototype.String }; } $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	operand.prototype.String = function() { return this.$val.String(); };
	operand.ptr.prototype.setConst = function(tok, lit) {
		var _1, _r, kind, lit, tok, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; kind = $f.kind; lit = $f.lit; tok = $f.tok; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		kind = 0;
		_1 = tok;
		if (_1 === (5)) {
			kind = 20;
		} else if (_1 === (6)) {
			kind = 22;
		} else if (_1 === (7)) {
			kind = 23;
		} else if (_1 === (8)) {
			kind = 21;
		} else if (_1 === (9)) {
			kind = 24;
		} else {
			unreachable();
		}
		x.mode = 4;
		x.typ = ((kind < 0 || kind >= $pkg.Typ.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + kind]);
		_r = constant.MakeFromLiteral(lit, tok, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x.val = _r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: operand.ptr.prototype.setConst }; } $f._1 = _1; $f._r = _r; $f.kind = kind; $f.lit = lit; $f.tok = tok; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	operand.prototype.setConst = function(tok, lit) { return this.$val.setConst(tok, lit); };
	operand.ptr.prototype.isNil = function() {
		var x;
		x = this;
		return (x.mode === 7) && $interfaceIsEqual(x.typ, (25 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 25]));
	};
	operand.prototype.isNil = function() { return this.$val.isNil(); };
	operand.ptr.prototype.assignableTo = function(conf, T, reason) {
		var T, Tc, Ti, Tu, V, Vb, Vc, Vu, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _v, _v$1, conf, m, ok, ok$1, ok$2, reason, t, t$1, t$2, wrongType, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; Tc = $f.Tc; Ti = $f.Ti; Tu = $f.Tu; V = $f.V; Vb = $f.Vb; Vc = $f.Vc; Vu = $f.Vu; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _v = $f._v; _v$1 = $f._v$1; conf = $f.conf; m = $f.m; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; reason = $f.reason; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; wrongType = $f.wrongType; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if ((x.mode === 0) || $interfaceIsEqual(T, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]))) {
			$s = -1; return true;
		}
		V = x.typ;
		_r = Identical(V, T); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$s = -1; return true;
		/* } */ case 2:
		_r$1 = V.Underlying(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		Vu = _r$1;
		_r$2 = T.Underlying(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		Tu = _r$2;
		_r$3 = isUntyped(Vu); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_r$3) { */ case 6:
			_ref = Tu;
			/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 9; continue; }
			/* */ if ($assertType(_ref, ptrType$58, true)[1]) { $s = 10; continue; }
			/* */ if ($assertType(_ref, ptrType$17, true)[1] || $assertType(_ref, ptrType$19, true)[1] || $assertType(_ref, ptrType$12, true)[1] || $assertType(_ref, ptrType$15, true)[1] || $assertType(_ref, ptrType$14, true)[1]) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if ($assertType(_ref, ptrType$4, true)[1]) { */ case 9:
				t = _ref.$val;
				if (x.isNil() && (t.kind === 18)) {
					$s = -1; return true;
				}
				/* */ if (x.mode === 4) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (x.mode === 4) { */ case 13:
					_r$4 = representableConst(x.val, conf, t, ptrType$29.nil); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					$s = -1; return _r$4;
				/* } */ case 14:
				_tuple = $assertType(Vu, ptrType$4, true);
				Vb = _tuple[0];
				/* */ if (!(Vb === ptrType$4.nil)) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (!(Vb === ptrType$4.nil)) { */ case 16:
					if (!(Vb.kind === 19)) { _v = false; $s = 18; continue s; }
					_r$5 = isBoolean(Tu); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_v = _r$5; case 18:
					$s = -1; return _v;
				/* } */ case 17:
				$s = 12; continue;
			/* } else if ($assertType(_ref, ptrType$58, true)[1]) { */ case 10:
				t$1 = _ref.$val;
				$s = -1; return x.isNil() || t$1.Empty();
			/* } else if ($assertType(_ref, ptrType$17, true)[1] || $assertType(_ref, ptrType$19, true)[1] || $assertType(_ref, ptrType$12, true)[1] || $assertType(_ref, ptrType$15, true)[1] || $assertType(_ref, ptrType$14, true)[1]) { */ case 11:
				t$2 = _ref;
				$s = -1; return x.isNil();
			/* } */ case 12:
		/* } */ case 7:
		_r$6 = Identical(Vu, Tu); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ if (_r$6 && (!isNamed(V) || !isNamed(T))) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if (_r$6 && (!isNamed(V) || !isNamed(T))) { */ case 20:
			$s = -1; return true;
		/* } */ case 21:
		_tuple$1 = $assertType(Tu, ptrType$58, true);
		Ti = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (ok) { $s = 23; continue; }
		/* */ $s = 24; continue;
		/* if (ok) { */ case 23:
			_r$7 = MissingMethod(x.typ, Ti, true); /* */ $s = 25; case 25: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_tuple$2 = _r$7;
			m = _tuple$2[0];
			wrongType = _tuple$2[1];
			if (!(m === ptrType$5.nil)) {
				if (!(reason === ptrType$9.nil)) {
					if (wrongType) {
						reason.$set("wrong type for method " + m.object.Name());
					} else {
						reason.$set("missing method " + m.object.Name());
					}
				}
				$s = -1; return false;
			}
			$s = -1; return true;
		/* } */ case 24:
		_tuple$3 = $assertType(Vu, ptrType$14, true);
		Vc = _tuple$3[0];
		ok$1 = _tuple$3[1];
		/* */ if (ok$1 && (Vc.dir === 0)) { $s = 26; continue; }
		/* */ $s = 27; continue;
		/* if (ok$1 && (Vc.dir === 0)) { */ case 26:
			_tuple$4 = $assertType(Tu, ptrType$14, true);
			Tc = _tuple$4[0];
			ok$2 = _tuple$4[1];
			if (!(ok$2)) { _v$1 = false; $s = 30; continue s; }
			_r$8 = Identical(Vc.elem, Tc.elem); /* */ $s = 31; case 31: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_v$1 = _r$8; case 30:
			/* */ if (_v$1) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (_v$1) { */ case 28:
				$s = -1; return !isNamed(V) || !isNamed(T);
			/* } */ case 29:
		/* } */ case 27:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: operand.ptr.prototype.assignableTo }; } $f.T = T; $f.Tc = Tc; $f.Ti = Ti; $f.Tu = Tu; $f.V = V; $f.Vb = Vb; $f.Vc = Vc; $f.Vu = Vu; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._v = _v; $f._v$1 = _v$1; $f.conf = conf; $f.m = m; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.reason = reason; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.wrongType = wrongType; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	operand.prototype.assignableTo = function(conf, T, reason) { return this.$val.assignableTo(conf, T, reason); };
	Checker.ptr.prototype.resolveOrder = function() {
		var _entry, _entry$1, _i, _i$1, _i$2, _keys, _r, _r$1, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tuple, check, embedded, f, ident, ifaces, ityp, obj, obj$1, order, others, visited, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; check = $f.check; embedded = $f.embedded; f = $f.f; ident = $f.ident; ifaces = $f.ifaces; ityp = $f.ityp; obj = $f.obj; obj$1 = $f.obj$1; order = $f.order; others = $f.others; visited = $f.visited; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		order = [order];
		check = this;
		_tmp = sliceType$20.nil;
		_tmp$1 = sliceType$20.nil;
		ifaces = _tmp;
		others = _tmp$1;
		_ref = check.objMap;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			obj = _entry.k;
			_r = check.interfaceFor(obj); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ityp = _r;
			/* */ if (!(ityp === ptrType$51.nil)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!(ityp === ptrType$51.nil)) { */ case 4:
				ifaces = $append(ifaces, obj);
				_ref$1 = ityp.Methods.List;
				_i$1 = 0;
				/* while (true) { */ case 7:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }
					f = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
					/* */ if (f.Names.$length === 0) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (f.Names.$length === 0) { */ case 9:
						_tuple = $assertType(f.Type, ptrType$7, true);
						ident = _tuple[0];
						/* */ if (!(ident === ptrType$7.nil)) { $s = 11; continue; }
						/* */ $s = 12; continue;
						/* if (!(ident === ptrType$7.nil)) { */ case 11:
							embedded = check.pkg.scope.Lookup(ident.Name);
							_r$1 = check.interfaceFor(embedded); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
							/* */ if (!(_r$1 === ptrType$51.nil)) { $s = 13; continue; }
							/* */ $s = 14; continue;
							/* if (!(_r$1 === ptrType$51.nil)) { */ case 13:
								(_entry$1 = check.objMap[Object.keyFor(obj)], _entry$1 !== undefined ? _entry$1.v : ptrType$23.nil).addDep(embedded);
							/* } */ case 14:
						/* } */ case 12:
					/* } */ case 10:
					_i$1++;
				/* } */ $s = 7; continue; case 8:
				$s = 6; continue;
			/* } else { */ case 5:
				others = $append(others, obj);
			/* } */ case 6:
			_i++;
		/* } */ $s = 1; continue; case 2:
		order[0] = sliceType$20.nil;
		$r = sort.Sort(($subslice(new inSourceOrder(ifaces.$array), ifaces.$offset, ifaces.$offset + ifaces.$length))); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		visited = {};
		_ref$2 = ifaces;
		_i$2 = 0;
		/* while (true) { */ case 17:
			/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 18; continue; }
			obj$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
			$r = check.appendInPostOrder((order.$ptr || (order.$ptr = new ptrType$78(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, order))), obj$1, visited); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i$2++;
		/* } */ $s = 17; continue; case 18:
		$r = sort.Sort(($subslice(new inSourceOrder(others.$array), others.$offset, others.$offset + others.$length))); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $appendSlice(order[0], others);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.resolveOrder }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.check = check; $f.embedded = embedded; $f.f = f; $f.ident = ident; $f.ifaces = ifaces; $f.ityp = ityp; $f.obj = obj; $f.obj$1 = obj$1; $f.order = order; $f.others = others; $f.visited = visited; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.resolveOrder = function() { return this.$val.resolveOrder(); };
	Checker.ptr.prototype.interfaceFor = function(obj) {
		var _arg, _arg$1, _entry, _r, _r$1, _tuple, _tuple$1, check, d, ityp, obj, tname, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; check = $f.check; d = $f.d; ityp = $f.ityp; obj = $f.obj; tname = $f.tname; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_tuple = $assertType(obj, ptrType$21, true);
		tname = _tuple[0];
		if (tname === ptrType$21.nil) {
			$s = -1; return ptrType$51.nil;
		}
		d = (_entry = check.objMap[Object.keyFor(obj)], _entry !== undefined ? _entry.v : ptrType$23.nil);
		/* */ if (d === ptrType$23.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d === ptrType$23.nil) { */ case 1:
			_r = obj.Pos(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg = new token.Pos(_r);
			_r$1 = obj.Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$1);
			$r = check.dump("%s: %s should have been declared", new sliceType$4([_arg, _arg$1])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			unreachable();
		/* } */ case 2:
		if ($interfaceIsEqual(d.typ, $ifaceNil)) {
			$s = -1; return ptrType$51.nil;
		}
		_tuple$1 = $assertType(d.typ, ptrType$51, true);
		ityp = _tuple$1[0];
		$s = -1; return ityp;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.interfaceFor }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.check = check; $f.d = d; $f.ityp = ityp; $f.obj = obj; $f.tname = tname; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.interfaceFor = function(obj) { return this.$val.interfaceFor(obj); };
	Checker.ptr.prototype.appendInPostOrder = function(order, obj, visited) {
		var _entry, _entry$1, _i, _key, _r, _ref, check, d, obj, obj$1, order, visited, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _key = $f._key; _r = $f._r; _ref = $f._ref; check = $f.check; d = $f.d; obj = $f.obj; obj$1 = $f.obj$1; order = $f.order; visited = $f.visited; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		if ((_entry = visited[Object.keyFor(obj)], _entry !== undefined ? _entry.v : false)) {
			$s = -1; return;
		}
		_key = obj; (visited || $throwRuntimeError("assignment to entry in nil map"))[Object.keyFor(_key)] = { k: _key, v: true };
		d = (_entry$1 = check.objMap[Object.keyFor(obj)], _entry$1 !== undefined ? _entry$1.v : ptrType$23.nil);
		_r = orderedSetObjects(d.deps); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_ref = _r;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			obj$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = check.appendInPostOrder(order, obj$1, visited); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 2; continue; case 3:
		order.$set($append(order.$get(), obj));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.appendInPostOrder }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._key = _key; $f._r = _r; $f._ref = _ref; $f.check = check; $f.d = d; $f.obj = obj; $f.obj$1 = obj$1; $f.order = order; $f.visited = visited; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.appendInPostOrder = function(order, obj, visited) { return this.$val.appendInPostOrder(order, obj, visited); };
	orderedSetObjects = function(set) {
		var _entry, _i, _keys, _ref, i, list, obj, set, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _ref = $f._ref; i = $f.i; list = $f.list; obj = $f.obj; set = $f.set; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		list = $makeSlice(sliceType$20, $keys(set).length);
		i = 0;
		_ref = set;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			obj = _entry.k;
			((i < 0 || i >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + i] = obj);
			i = i + (1) >> 0;
			_i++;
		}
		$r = sort.Sort(($subslice(new inSourceOrder(list.$array), list.$offset, list.$offset + list.$length))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return list;
		/* */ } return; } if ($f === undefined) { $f = { $blk: orderedSetObjects }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._ref = _ref; $f.i = i; $f.list = list; $f.obj = obj; $f.set = set; $f.$s = $s; $f.$r = $r; return $f;
	};
	inSourceOrder.prototype.Len = function() {
		var a;
		a = this;
		return a.$length;
	};
	$ptrType(inSourceOrder).prototype.Len = function() { return this.$get().Len(); };
	inSourceOrder.prototype.Less = function(i, j) {
		var _r, _r$1, a, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; a = $f.a; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_r = ((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]).order(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = ((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j]).order(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r < _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: inSourceOrder.prototype.Less }; } $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(inSourceOrder).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	inSourceOrder.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, a, i, j;
		a = this;
		_tmp = ((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j]);
		_tmp$1 = ((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]);
		((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = _tmp);
		((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j] = _tmp$1);
	};
	$ptrType(inSourceOrder).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	NewPackage = function(path, name) {
		var _arg, _arg$1, _r, _r$1, name, path, scope, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; name = $f.name; path = $f.path; scope = $f.scope; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = $pkg.Universe;
		_r = fmt.Sprintf("package %q", new sliceType$4([new $String(path)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = _r;
		_r$1 = NewScope(_arg, 0, 0, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		scope = _r$1;
		$s = -1; return new Package.ptr(path, name, scope, false, sliceType$24.nil, false);
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewPackage }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f.name = name; $f.path = path; $f.scope = scope; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewPackage = NewPackage;
	Package.ptr.prototype.Path = function() {
		var pkg;
		pkg = this;
		return pkg.path;
	};
	Package.prototype.Path = function() { return this.$val.Path(); };
	Package.ptr.prototype.Name = function() {
		var pkg;
		pkg = this;
		return pkg.name;
	};
	Package.prototype.Name = function() { return this.$val.Name(); };
	Package.ptr.prototype.SetName = function(name) {
		var name, pkg;
		pkg = this;
		pkg.name = name;
	};
	Package.prototype.SetName = function(name) { return this.$val.SetName(name); };
	Package.ptr.prototype.Scope = function() {
		var pkg;
		pkg = this;
		return pkg.scope;
	};
	Package.prototype.Scope = function() { return this.$val.Scope(); };
	Package.ptr.prototype.Complete = function() {
		var pkg;
		pkg = this;
		return pkg.complete;
	};
	Package.prototype.Complete = function() { return this.$val.Complete(); };
	Package.ptr.prototype.MarkComplete = function() {
		var pkg;
		pkg = this;
		pkg.complete = true;
	};
	Package.prototype.MarkComplete = function() { return this.$val.MarkComplete(); };
	Package.ptr.prototype.Imports = function() {
		var pkg;
		pkg = this;
		return pkg.imports;
	};
	Package.prototype.Imports = function() { return this.$val.Imports(); };
	Package.ptr.prototype.SetImports = function(list) {
		var list, pkg;
		pkg = this;
		pkg.imports = list;
	};
	Package.prototype.SetImports = function(list) { return this.$val.SetImports(list); };
	Package.ptr.prototype.String = function() {
		var _r, pkg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; pkg = $f.pkg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pkg = this;
		_r = fmt.Sprintf("package %s (%q)", new sliceType$4([new $String(pkg.name), new $String(pkg.path)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Package.ptr.prototype.String }; } $f._r = _r; $f.pkg = pkg; $f.$s = $s; $f.$r = $r; return $f;
	};
	Package.prototype.String = function() { return this.$val.String(); };
	isNamed = function(typ) {
		var _tuple, _tuple$1, ok, ok$1, typ;
		_tuple = $assertType(typ, ptrType$4, true);
		ok = _tuple[1];
		if (ok) {
			return ok;
		}
		_tuple$1 = $assertType(typ, ptrType$6, true);
		ok$1 = _tuple$1[1];
		return ok$1;
	};
	isBoolean = function(typ) {
		var _r, _tuple, ok, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$4, true);
		t = _tuple[0];
		ok = _tuple[1];
		$s = -1; return ok && !(((t.info & 1) === 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: isBoolean }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	isInteger = function(typ) {
		var _r, _tuple, ok, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$4, true);
		t = _tuple[0];
		ok = _tuple[1];
		$s = -1; return ok && !(((t.info & 2) === 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: isInteger }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	isUnsigned = function(typ) {
		var _r, _tuple, ok, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$4, true);
		t = _tuple[0];
		ok = _tuple[1];
		$s = -1; return ok && !(((t.info & 4) === 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: isUnsigned }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	isFloat = function(typ) {
		var _r, _tuple, ok, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$4, true);
		t = _tuple[0];
		ok = _tuple[1];
		$s = -1; return ok && !(((t.info & 8) === 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: isFloat }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	isComplex = function(typ) {
		var _r, _tuple, ok, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$4, true);
		t = _tuple[0];
		ok = _tuple[1];
		$s = -1; return ok && !(((t.info & 16) === 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: isComplex }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	isNumeric = function(typ) {
		var _r, _tuple, ok, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$4, true);
		t = _tuple[0];
		ok = _tuple[1];
		$s = -1; return ok && !(((t.info & 26) === 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: isNumeric }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	isString = function(typ) {
		var _r, _tuple, ok, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$4, true);
		t = _tuple[0];
		ok = _tuple[1];
		$s = -1; return ok && !(((t.info & 32) === 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: isString }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	isTyped = function(typ) {
		var _r, _tuple, ok, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$4, true);
		t = _tuple[0];
		ok = _tuple[1];
		$s = -1; return !ok || ((t.info & 64) === 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: isTyped }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	isUntyped = function(typ) {
		var _r, _tuple, ok, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$4, true);
		t = _tuple[0];
		ok = _tuple[1];
		$s = -1; return ok && !(((t.info & 64) === 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: isUntyped }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	isOrdered = function(typ) {
		var _r, _tuple, ok, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$4, true);
		t = _tuple[0];
		ok = _tuple[1];
		$s = -1; return ok && !(((t.info & 42) === 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: isOrdered }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	isConstType = function(typ) {
		var _r, _tuple, ok, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$4, true);
		t = _tuple[0];
		ok = _tuple[1];
		$s = -1; return ok && !(((t.info & 59) === 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: isConstType }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	IsInterface = function(typ) {
		var _r, _tuple, ok, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$58, true);
		ok = _tuple[1];
		$s = -1; return ok;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IsInterface }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.IsInterface = IsInterface;
	Comparable = function(T) {
		var T, _i, _r, _r$1, _r$2, _ref, _ref$1, f, t, t$1, t$2, t$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; f = $f.f; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; t$3 = $f.t$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = T.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_ref = _r;
		/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$17, true)[1] || $assertType(_ref, ptrType$58, true)[1] || $assertType(_ref, ptrType$14, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$30, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$13, true)[1]) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ($assertType(_ref, ptrType$4, true)[1]) { */ case 2:
			t = _ref.$val;
			$s = -1; return !((t.kind === 25));
		/* } else if ($assertType(_ref, ptrType$17, true)[1] || $assertType(_ref, ptrType$58, true)[1] || $assertType(_ref, ptrType$14, true)[1]) { */ case 3:
			t$1 = _ref;
			$s = -1; return true;
		/* } else if ($assertType(_ref, ptrType$30, true)[1]) { */ case 4:
			t$2 = _ref.$val;
			_ref$1 = t$2.fields;
			_i = 0;
			/* while (true) { */ case 7:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 8; continue; }
				f = ((_i < 0 || _i >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i]);
				_r$1 = Comparable(f.object.typ); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (!_r$1) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (!_r$1) { */ case 9:
					$s = -1; return false;
				/* } */ case 10:
				_i++;
			/* } */ $s = 7; continue; case 8:
			$s = -1; return true;
		/* } else if ($assertType(_ref, ptrType$13, true)[1]) { */ case 5:
			t$3 = _ref.$val;
			_r$2 = Comparable(t$3.elem); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } */ case 6:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Comparable }; } $f.T = T; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f.f = f; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.t$3 = t$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Comparable = Comparable;
	hasNil = function(typ) {
		var _r, _ref, t, t$1, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _ref = $f._ref; t = $f.t; t$1 = $f.t$1; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_ref = _r;
		/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$12, true)[1] || $assertType(_ref, ptrType$17, true)[1] || $assertType(_ref, ptrType$19, true)[1] || $assertType(_ref, ptrType$58, true)[1] || $assertType(_ref, ptrType$15, true)[1] || $assertType(_ref, ptrType$14, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, ptrType$4, true)[1]) { */ case 2:
			t = _ref.$val;
			$s = -1; return t.kind === 18;
		/* } else if ($assertType(_ref, ptrType$12, true)[1] || $assertType(_ref, ptrType$17, true)[1] || $assertType(_ref, ptrType$19, true)[1] || $assertType(_ref, ptrType$58, true)[1] || $assertType(_ref, ptrType$15, true)[1] || $assertType(_ref, ptrType$14, true)[1]) { */ case 3:
			t$1 = _ref;
			$s = -1; return true;
		/* } */ case 4:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: hasNil }; } $f._r = _r; $f._ref = _ref; $f.t = t; $f.t$1 = t$1; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	Identical = function(x, y) {
		var _r, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = identical(x, y, true, ptrType$79.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Identical }; } $f._r = _r; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Identical = Identical;
	IdenticalIgnoreTags = function(x, y) {
		var _r, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = identical(x, y, false, ptrType$79.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IdenticalIgnoreTags }; } $f._r = _r; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.IdenticalIgnoreTags = IdenticalIgnoreTags;
	ifacePair.ptr.prototype.identical = function(q) {
		var p, q;
		p = this;
		return p.x === q.x && p.y === q.y || p.x === q.y && p.y === q.x;
	};
	ifacePair.prototype.identical = function(q) { return this.$val.identical(q); };
	identical = function(x, y, cmpTags, p) {
		var _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _tuple, _tuple$1, _tuple$10, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _v, _v$1, _v$2, _v$3, _v$4, _v$5, _v$6, a, b, cmpTags, f, f$1, g, g$1, i, i$1, i$2, ok, ok$1, ok$10, ok$2, ok$3, ok$4, ok$5, ok$6, ok$7, ok$8, ok$9, p, q, v, w, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$10, y$11, y$2, y$3, y$4, y$5, y$6, y$7, y$8, y$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; _v$5 = $f._v$5; _v$6 = $f._v$6; a = $f.a; b = $f.b; cmpTags = $f.cmpTags; f = $f.f; f$1 = $f.f$1; g = $f.g; g$1 = $f.g$1; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; ok = $f.ok; ok$1 = $f.ok$1; ok$10 = $f.ok$10; ok$2 = $f.ok$2; ok$3 = $f.ok$3; ok$4 = $f.ok$4; ok$5 = $f.ok$5; ok$6 = $f.ok$6; ok$7 = $f.ok$7; ok$8 = $f.ok$8; ok$9 = $f.ok$9; p = $f.p; q = $f.q; v = $f.v; w = $f.w; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; y$1 = $f.y$1; y$10 = $f.y$10; y$11 = $f.y$11; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; y$5 = $f.y$5; y$6 = $f.y$6; y$7 = $f.y$7; y$8 = $f.y$8; y$9 = $f.y$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(x, y)) {
			$s = -1; return true;
		}
		_ref = x;
		/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$13, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$12, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$30, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$17, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$16, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$19, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$58, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$15, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref, ptrType$14, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref, ptrType$6, true)[1]) { $s = 11; continue; }
		/* */ if (_ref === $ifaceNil) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ($assertType(_ref, ptrType$4, true)[1]) { */ case 1:
			x$1 = _ref.$val;
			_tuple = $assertType(y, ptrType$4, true);
			y$1 = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				$s = -1; return x$1.kind === y$1.kind;
			}
			$s = 14; continue;
		/* } else if ($assertType(_ref, ptrType$13, true)[1]) { */ case 2:
			x$2 = _ref.$val;
			_tuple$1 = $assertType(y, ptrType$13, true);
			y$2 = _tuple$1[0];
			ok$1 = _tuple$1[1];
			/* */ if (ok$1) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (ok$1) { */ case 15:
				if (!((x$14 = x$2.len, x$15 = y$2.len, (x$14.$high === x$15.$high && x$14.$low === x$15.$low)))) { _v = false; $s = 17; continue s; }
				_r = identical(x$2.elem, y$2.elem, cmpTags, p); /* */ $s = 18; case 18: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 17:
				$s = -1; return _v;
			/* } */ case 16:
			$s = 14; continue;
		/* } else if ($assertType(_ref, ptrType$12, true)[1]) { */ case 3:
			x$3 = _ref.$val;
			_tuple$2 = $assertType(y, ptrType$12, true);
			y$3 = _tuple$2[0];
			ok$2 = _tuple$2[1];
			/* */ if (ok$2) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if (ok$2) { */ case 19:
				_r$1 = identical(x$3.elem, y$3.elem, cmpTags, p); /* */ $s = 21; case 21: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } */ case 20:
			$s = 14; continue;
		/* } else if ($assertType(_ref, ptrType$30, true)[1]) { */ case 4:
			x$4 = _ref.$val;
			_tuple$3 = $assertType(y, ptrType$30, true);
			y$4 = _tuple$3[0];
			ok$3 = _tuple$3[1];
			/* */ if (ok$3) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (ok$3) { */ case 22:
				/* */ if (x$4.NumFields() === y$4.NumFields()) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (x$4.NumFields() === y$4.NumFields()) { */ case 24:
					_ref$1 = x$4.fields;
					_i = 0;
					/* while (true) { */ case 26:
						/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 27; continue; }
						i = _i;
						f = ((_i < 0 || _i >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i]);
						g = (x$16 = y$4.fields, ((i < 0 || i >= x$16.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$16.$array[x$16.$offset + i]));
						if (!(f.anonymous === g.anonymous) || cmpTags && !(x$4.Tag(i) === y$4.Tag(i)) || !f.object.sameId(g.object.pkg, g.object.name)) { _v$1 = true; $s = 30; continue s; }
						_r$2 = identical(f.object.typ, g.object.typ, cmpTags, p); /* */ $s = 31; case 31: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_v$1 = !_r$2; case 30:
						/* */ if (_v$1) { $s = 28; continue; }
						/* */ $s = 29; continue;
						/* if (_v$1) { */ case 28:
							$s = -1; return false;
						/* } */ case 29:
						_i++;
					/* } */ $s = 26; continue; case 27:
					$s = -1; return true;
				/* } */ case 25:
			/* } */ case 23:
			$s = 14; continue;
		/* } else if ($assertType(_ref, ptrType$17, true)[1]) { */ case 5:
			x$5 = _ref.$val;
			_tuple$4 = $assertType(y, ptrType$17, true);
			y$5 = _tuple$4[0];
			ok$4 = _tuple$4[1];
			/* */ if (ok$4) { $s = 32; continue; }
			/* */ $s = 33; continue;
			/* if (ok$4) { */ case 32:
				_r$3 = identical(x$5.base, y$5.base, cmpTags, p); /* */ $s = 34; case 34: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$s = -1; return _r$3;
			/* } */ case 33:
			$s = 14; continue;
		/* } else if ($assertType(_ref, ptrType$16, true)[1]) { */ case 6:
			x$6 = _ref.$val;
			_tuple$5 = $assertType(y, ptrType$16, true);
			y$6 = _tuple$5[0];
			ok$5 = _tuple$5[1];
			/* */ if (ok$5) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if (ok$5) { */ case 35:
				/* */ if (x$6.Len() === y$6.Len()) { $s = 37; continue; }
				/* */ $s = 38; continue;
				/* if (x$6.Len() === y$6.Len()) { */ case 37:
					/* */ if (!(x$6 === ptrType$16.nil)) { $s = 39; continue; }
					/* */ $s = 40; continue;
					/* if (!(x$6 === ptrType$16.nil)) { */ case 39:
						_ref$2 = x$6.vars;
						_i$1 = 0;
						/* while (true) { */ case 41:
							/* if (!(_i$1 < _ref$2.$length)) { break; } */ if(!(_i$1 < _ref$2.$length)) { $s = 42; continue; }
							i$1 = _i$1;
							v = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$1]);
							w = (x$17 = y$6.vars, ((i$1 < 0 || i$1 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + i$1]));
							_r$4 = identical(v.object.typ, w.object.typ, cmpTags, p); /* */ $s = 45; case 45: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
							/* */ if (!_r$4) { $s = 43; continue; }
							/* */ $s = 44; continue;
							/* if (!_r$4) { */ case 43:
								$s = -1; return false;
							/* } */ case 44:
							_i$1++;
						/* } */ $s = 41; continue; case 42:
					/* } */ case 40:
					$s = -1; return true;
				/* } */ case 38:
			/* } */ case 36:
			$s = 14; continue;
		/* } else if ($assertType(_ref, ptrType$19, true)[1]) { */ case 7:
			x$7 = _ref.$val;
			_tuple$6 = $assertType(y, ptrType$19, true);
			y$7 = _tuple$6[0];
			ok$6 = _tuple$6[1];
			/* */ if (ok$6) { $s = 46; continue; }
			/* */ $s = 47; continue;
			/* if (ok$6) { */ case 46:
				if (!(x$7.variadic === y$7.variadic)) { _v$3 = false; $s = 49; continue s; }
				_r$5 = identical(x$7.params, y$7.params, cmpTags, p); /* */ $s = 50; case 50: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_v$3 = _r$5; case 49:
				if (!(_v$3)) { _v$2 = false; $s = 48; continue s; }
				_r$6 = identical(x$7.results, y$7.results, cmpTags, p); /* */ $s = 51; case 51: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_v$2 = _r$6; case 48:
				$s = -1; return _v$2;
			/* } */ case 47:
			$s = 14; continue;
		/* } else if ($assertType(_ref, ptrType$58, true)[1]) { */ case 8:
			x$8 = _ref.$val;
			_tuple$7 = $assertType(y, ptrType$58, true);
			y$8 = _tuple$7[0];
			ok$7 = _tuple$7[1];
			/* */ if (ok$7) { $s = 52; continue; }
			/* */ $s = 53; continue;
			/* if (ok$7) { */ case 52:
				a = x$8.allMethods;
				b = y$8.allMethods;
				/* */ if (a.$length === b.$length) { $s = 54; continue; }
				/* */ $s = 55; continue;
				/* if (a.$length === b.$length) { */ case 54:
					q = new ifacePair.ptr(x$8, y$8, p);
					while (true) {
						if (!(!(p === ptrType$79.nil))) { break; }
						if (p.identical(q)) {
							$s = -1; return true;
						}
						p = p.prev;
					}
					/* */ if (false) { $s = 56; continue; }
					/* */ $s = 57; continue;
					/* if (false) { */ case 56:
						_r$7 = sort.IsSorted(($subslice(new byUniqueMethodName(a.$array), a.$offset, a.$offset + a.$length))); /* */ $s = 58; case 58: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						$r = assert(_r$7); /* */ $s = 59; case 59: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_r$8 = sort.IsSorted(($subslice(new byUniqueMethodName(b.$array), b.$offset, b.$offset + b.$length))); /* */ $s = 60; case 60: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						$r = assert(_r$8); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 57:
					_ref$3 = a;
					_i$2 = 0;
					/* while (true) { */ case 62:
						/* if (!(_i$2 < _ref$3.$length)) { break; } */ if(!(_i$2 < _ref$3.$length)) { $s = 63; continue; }
						i$2 = _i$2;
						f$1 = ((_i$2 < 0 || _i$2 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$2]);
						g$1 = ((i$2 < 0 || i$2 >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i$2]);
						if (!(f$1.object.Id() === g$1.object.Id())) { _v$4 = true; $s = 66; continue s; }
						_r$9 = identical(f$1.object.typ, g$1.object.typ, cmpTags, q); /* */ $s = 67; case 67: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_v$4 = !_r$9; case 66:
						/* */ if (_v$4) { $s = 64; continue; }
						/* */ $s = 65; continue;
						/* if (_v$4) { */ case 64:
							$s = -1; return false;
						/* } */ case 65:
						_i$2++;
					/* } */ $s = 62; continue; case 63:
					$s = -1; return true;
				/* } */ case 55:
			/* } */ case 53:
			$s = 14; continue;
		/* } else if ($assertType(_ref, ptrType$15, true)[1]) { */ case 9:
			x$9 = _ref.$val;
			_tuple$8 = $assertType(y, ptrType$15, true);
			y$9 = _tuple$8[0];
			ok$8 = _tuple$8[1];
			/* */ if (ok$8) { $s = 68; continue; }
			/* */ $s = 69; continue;
			/* if (ok$8) { */ case 68:
				_r$10 = identical(x$9.key, y$9.key, cmpTags, p); /* */ $s = 71; case 71: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				if (!(_r$10)) { _v$5 = false; $s = 70; continue s; }
				_r$11 = identical(x$9.elem, y$9.elem, cmpTags, p); /* */ $s = 72; case 72: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_v$5 = _r$11; case 70:
				$s = -1; return _v$5;
			/* } */ case 69:
			$s = 14; continue;
		/* } else if ($assertType(_ref, ptrType$14, true)[1]) { */ case 10:
			x$10 = _ref.$val;
			_tuple$9 = $assertType(y, ptrType$14, true);
			y$10 = _tuple$9[0];
			ok$9 = _tuple$9[1];
			/* */ if (ok$9) { $s = 73; continue; }
			/* */ $s = 74; continue;
			/* if (ok$9) { */ case 73:
				if (!(x$10.dir === y$10.dir)) { _v$6 = false; $s = 75; continue s; }
				_r$12 = identical(x$10.elem, y$10.elem, cmpTags, p); /* */ $s = 76; case 76: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_v$6 = _r$12; case 75:
				$s = -1; return _v$6;
			/* } */ case 74:
			$s = 14; continue;
		/* } else if ($assertType(_ref, ptrType$6, true)[1]) { */ case 11:
			x$11 = _ref.$val;
			_tuple$10 = $assertType(y, ptrType$6, true);
			y$11 = _tuple$10[0];
			ok$10 = _tuple$10[1];
			if (ok$10) {
				$s = -1; return x$11.obj === y$11.obj;
			}
			$s = 14; continue;
		/* } else if (_ref === $ifaceNil) { */ case 12:
			x$12 = _ref;
			$s = 14; continue;
		/* } else { */ case 13:
			x$13 = _ref;
			unreachable();
		/* } */ case 14:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: identical }; } $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f._v$5 = _v$5; $f._v$6 = _v$6; $f.a = a; $f.b = b; $f.cmpTags = cmpTags; $f.f = f; $f.f$1 = f$1; $f.g = g; $f.g$1 = g$1; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$10 = ok$10; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.ok$4 = ok$4; $f.ok$5 = ok$5; $f.ok$6 = ok$6; $f.ok$7 = ok$7; $f.ok$8 = ok$8; $f.ok$9 = ok$9; $f.p = p; $f.q = q; $f.v = v; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.y$1 = y$1; $f.y$10 = y$10; $f.y$11 = y$11; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.y$5 = y$5; $f.y$6 = y$6; $f.y$7 = y$7; $f.y$8 = y$8; $f.y$9 = y$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Default = function(typ) {
		var _1, _tuple, ok, t, typ;
		_tuple = $assertType(typ, ptrType$4, true);
		t = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			_1 = t.kind;
			if (_1 === (19)) {
				return (1 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 1]);
			} else if (_1 === (20)) {
				return (2 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 2]);
			} else if (_1 === (21)) {
				return universeRune;
			} else if (_1 === (22)) {
				return (14 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 14]);
			} else if (_1 === (23)) {
				return (16 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 16]);
			} else if (_1 === (24)) {
				return (17 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 17]);
			}
		}
		return typ;
	};
	$pkg.Default = Default;
	declInfo.ptr.prototype.hasInitializer = function() {
		var d;
		d = this;
		return !($interfaceIsEqual(d.init, $ifaceNil)) || !(d.fdecl === ptrType$80.nil) && !(d.fdecl.Body === ptrType$32.nil);
	};
	declInfo.prototype.hasInitializer = function() { return this.$val.hasInitializer(); };
	declInfo.ptr.prototype.addDep = function(obj) {
		var _key, d, m, obj;
		d = this;
		m = d.deps;
		if (m === false) {
			m = {};
			d.deps = m;
		}
		_key = obj; (m || $throwRuntimeError("assignment to entry in nil map"))[Object.keyFor(_key)] = { k: _key, v: true };
	};
	declInfo.prototype.addDep = function(obj) { return this.$val.addDep(obj); };
	Checker.ptr.prototype.arityMatch = function(s, init$1) {
		var _arg, _arg$1, _r, _r$1, check, init$1, l, n, n$1, r, s, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; check = $f.check; init$1 = $f.init$1; l = $f.l; n = $f.n; n$1 = $f.n$1; r = $f.r; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		l = s.Names.$length;
		r = s.Values.$length;
		if (!(init$1 === ptrType$35.nil)) {
			r = init$1.Values.$length;
		}
			/* */ if (init$1 === ptrType$35.nil && (r === 0)) { $s = 2; continue; }
			/* */ if (l < r) { $s = 3; continue; }
			/* */ if (l > r && (!(init$1 === ptrType$35.nil) || !((r === 1)))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (init$1 === ptrType$35.nil && (r === 0)) { */ case 2:
				/* */ if ($interfaceIsEqual(s.Type, $ifaceNil)) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ($interfaceIsEqual(s.Type, $ifaceNil)) { */ case 6:
					$r = check.errorf(s.Pos(), "missing type or init expr", new sliceType$4([])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 7:
				$s = 5; continue;
			/* } else if (l < r) { */ case 3:
				/* */ if (l < s.Values.$length) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (l < s.Values.$length) { */ case 9:
					n = (x = s.Values, ((l < 0 || l >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + l]));
					_r = n.Pos(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$r = check.errorf(_r, "extra init expr %s", new sliceType$4([n])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 11; continue;
				/* } else { */ case 10:
					_arg = s.Pos();
					_r$1 = check.fset.Position(init$1.Pos()); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_arg$1 = (x$1 = _r$1, new x$1.constructor.elem(x$1));
					$r = check.errorf(_arg, "extra init expr at %s", new sliceType$4([_arg$1])); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 11:
				$s = 5; continue;
			/* } else if (l > r && (!(init$1 === ptrType$35.nil) || !((r === 1)))) { */ case 4:
				n$1 = (x$2 = s.Names, ((r < 0 || r >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + r]));
				$r = check.errorf(n$1.Pos(), "missing init expr for %s", new sliceType$4([n$1])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.arityMatch }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f.check = check; $f.init$1 = init$1; $f.l = l; $f.n = n; $f.n$1 = n$1; $f.r = r; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.arityMatch = function(s, init$1) { return this.$val.arityMatch(s, init$1); };
	validatedImportPath = function(path) {
		var _i, _r, _r$1, _ref, _rune, _tuple, err, path, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _rune = $f._rune; _tuple = $f._tuple; err = $f.err; path = $f.path; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = strconv.Unquote(path);
		s = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		/* */ if (s === "") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s === "") { */ case 1:
			_r = fmt.Errorf("empty string", new sliceType$4([])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return ["", _r];
		/* } */ case 2:
		_ref = s;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 5; continue; }
			_rune = $decodeRune(_ref, _i);
			r = _rune[0];
			/* */ if (!unicode.IsGraphic(r) || unicode.IsSpace(r) || strings.ContainsRune("!\"#$%&'()*,:;<=>?[\\]^{|}`\xEF\xBF\xBD", r)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!unicode.IsGraphic(r) || unicode.IsSpace(r) || strings.ContainsRune("!\"#$%&'()*,:;<=>?[\\]^{|}`\xEF\xBF\xBD", r)) { */ case 6:
				_r$1 = fmt.Errorf("invalid character %#U", new sliceType$4([new $Int32(r)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return [s, _r$1];
			/* } */ case 7:
			_i += _rune[1];
		/* } */ $s = 4; continue; case 5:
		$s = -1; return [s, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: validatedImportPath }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._rune = _rune; $f._tuple = _tuple; $f.err = err; $f.path = path; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.ptr.prototype.declarePkgObj = function(ident, obj, d) {
		var _key, _r, check, d, ident, obj, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _key = $f._key; _r = $f._r; check = $f.check; d = $f.d; ident = $f.ident; obj = $f.obj; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_r = obj.Name(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = assert(ident.Name === _r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (ident.Name === "init") { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (ident.Name === "init") { */ case 3:
			$r = check.errorf(ident.Pos(), "cannot declare init - must be func", new sliceType$4([])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 4:
		/* */ if (ident.Name === "main" && check.pkg.name === "main") { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (ident.Name === "main" && check.pkg.name === "main") { */ case 6:
			$r = check.errorf(ident.Pos(), "cannot declare main - must be func", new sliceType$4([])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 7:
		$r = check.declare(check.pkg.scope, ident, obj, 0); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_key = obj; (check.objMap || $throwRuntimeError("assignment to entry in nil map"))[Object.keyFor(_key)] = { k: _key, v: d };
		$r = obj.setOrder((($keys(check.objMap).length >>> 0))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.declarePkgObj }; } $f._key = _key; $f._r = _r; $f.check = check; $f.d = d; $f.ident = ident; $f.obj = obj; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.declarePkgObj = function(ident, obj, d) { return this.$val.declarePkgObj(ident, obj, d); };
	Checker.ptr.prototype.filename = function(fileNo) {
		var _r, _r$1, _r$2, check, file, fileNo, pos, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; check = $f.check; file = $f.file; fileNo = $f.fileNo; pos = $f.pos; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		file = (x = check.files, ((fileNo < 0 || fileNo >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + fileNo]));
		pos = file.Pos();
		/* */ if (new token.Pos(pos).IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (new token.Pos(pos).IsValid()) { */ case 1:
			_r = check.fset.File(pos); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = _r.Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 2:
		_r$2 = fmt.Sprintf("file[%d]", new sliceType$4([new $Int(fileNo)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.filename }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.check = check; $f.file = file; $f.fileNo = fileNo; $f.pos = pos; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.filename = function(fileNo) { return this.$val.filename(fileNo); };
	Checker.ptr.prototype.importPackage = function(pos, path, dir$1) {
		var _entry, _key, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _tuple$1, _tuple$2, check, dir$1, err, i, i$1, imp, importer, importerFrom, key, name, ok, path, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; check = $f.check; dir$1 = $f.dir$1; err = $f.err; i = $f.i; i$1 = $f.i$1; imp = $f.imp; importer = $f.importer; importerFrom = $f.importerFrom; key = $f.key; name = $f.name; ok = $f.ok; path = $f.path; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		key = new importKey.ptr(path, dir$1);
		imp = (_entry = check.impMap[importKey.keyFor(key)], _entry !== undefined ? _entry.v : ptrType$2.nil);
		if (!(imp === ptrType$2.nil)) {
			$s = -1; return imp;
		}
		/* */ if (path === "C" && check.conf.FakeImportC) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (path === "C" && check.conf.FakeImportC) { */ case 1:
			_r = NewPackage("C", "C"); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			imp = _r;
			imp.fake = true;
			$s = 3; continue;
		/* } else { */ case 2:
			err = $ifaceNil;
			importer = check.conf.Importer;
			/* */ if ($interfaceIsEqual(importer, $ifaceNil)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ($interfaceIsEqual(importer, $ifaceNil)) { */ case 5:
				_r$1 = fmt.Errorf("Config.Importer not installed", new sliceType$4([])); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err = _r$1;
				$s = 7; continue;
			/* } else { */ case 6:
				_tuple = $assertType(importer, ImporterFrom, true);
				importerFrom = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (ok) { */ case 9:
					_r$2 = importerFrom.ImportFrom(path, dir$1, 0); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$1 = _r$2;
					imp = _tuple$1[0];
					err = _tuple$1[1];
					/* */ if (imp === ptrType$2.nil && $interfaceIsEqual(err, $ifaceNil)) { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if (imp === ptrType$2.nil && $interfaceIsEqual(err, $ifaceNil)) { */ case 13:
						_r$3 = fmt.Errorf("Config.Importer.ImportFrom(%s, %s, 0) returned nil but no error", new sliceType$4([new $String(path), new $String(dir$1)])); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						err = _r$3;
					/* } */ case 14:
					$s = 11; continue;
				/* } else { */ case 10:
					_r$4 = importer.Import(path); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_tuple$2 = _r$4;
					imp = _tuple$2[0];
					err = _tuple$2[1];
					/* */ if (imp === ptrType$2.nil && $interfaceIsEqual(err, $ifaceNil)) { $s = 17; continue; }
					/* */ $s = 18; continue;
					/* if (imp === ptrType$2.nil && $interfaceIsEqual(err, $ifaceNil)) { */ case 17:
						_r$5 = fmt.Errorf("Config.Importer.Import(%s) returned nil but no error", new sliceType$4([new $String(path)])); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						err = _r$5;
					/* } */ case 18:
				/* } */ case 11:
			/* } */ case 7:
			/* */ if ($interfaceIsEqual(err, $ifaceNil) && !(imp === ptrType$2.nil) && (imp.name === "_" || imp.name === "")) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ($interfaceIsEqual(err, $ifaceNil) && !(imp === ptrType$2.nil) && (imp.name === "_" || imp.name === "")) { */ case 20:
				_r$6 = fmt.Errorf("invalid package name: %q", new sliceType$4([new $String(imp.name)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				err = _r$6;
				imp = ptrType$2.nil;
			/* } */ case 21:
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 23:
				$r = check.errorf(pos, "could not import %s (%s)", new sliceType$4([new $String(path), err])); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (imp === ptrType$2.nil) { $s = 26; continue; }
				/* */ $s = 27; continue;
				/* if (imp === ptrType$2.nil) { */ case 26:
					name = path;
					i = name.length;
					if (i > 0 && (name.charCodeAt((i - 1 >> 0)) === 47)) {
						name = $substring(name, 0, (i - 1 >> 0));
					}
					i$1 = strings.LastIndex(name, "/");
					if (i$1 >= 0) {
						name = $substring(name, (i$1 + 1 >> 0));
					}
					_r$7 = NewPackage(path, name); /* */ $s = 28; case 28: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					imp = _r$7;
				/* } */ case 27:
				imp.fake = true;
			/* } */ case 24:
		/* } */ case 3:
		if (imp.complete || imp.fake) {
			_key = $clone(key, importKey); (check.impMap || $throwRuntimeError("assignment to entry in nil map"))[importKey.keyFor(_key)] = { k: _key, v: imp };
			$s = -1; return imp;
		}
		$s = -1; return ptrType$2.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.importPackage }; } $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.check = check; $f.dir$1 = dir$1; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.imp = imp; $f.importer = importer; $f.importerFrom = importerFrom; $f.key = key; $f.name = name; $f.ok = ok; $f.path = path; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.importPackage = function(pos, path, dir$1) { return this.$val.importPackage(pos, path, dir$1); };
	Checker.ptr.prototype.collectObjects = function() {
		var _1, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _entry, _entry$1, _entry$2, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _i$6, _i$7, _i$8, _key, _key$1, _key$2, _keys, _keys$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$10, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _ref$7, _ref$8, _ref$9, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, _tuple$2, _tuple$3, alt, base, check, d, d$1, d$2, d$3, d$4, d$5, d1, decl, end, err, f, file, fileDir, fileNo, fileScope, i, i$1, imp, imp$1, info, init$1, init$2, iota, last, lhs, list, name, name$1, name$2, name$3, obj, obj$1, obj$2, obj$3, obj$4, obj$5, obj$6, ok, path, pkg, pkg$1, pkgImports, pos, ptr, s, s$1, s$2, s$3, scope, spec, typ, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _i$6 = $f._i$6; _i$7 = $f._i$7; _i$8 = $f._i$8; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _keys = $f._keys; _keys$1 = $f._keys$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$10 = $f._ref$10; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _ref$7 = $f._ref$7; _ref$8 = $f._ref$8; _ref$9 = $f._ref$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; alt = $f.alt; base = $f.base; check = $f.check; d = $f.d; d$1 = $f.d$1; d$2 = $f.d$2; d$3 = $f.d$3; d$4 = $f.d$4; d$5 = $f.d$5; d1 = $f.d1; decl = $f.decl; end = $f.end; err = $f.err; f = $f.f; file = $f.file; fileDir = $f.fileDir; fileNo = $f.fileNo; fileScope = $f.fileScope; i = $f.i; i$1 = $f.i$1; imp = $f.imp; imp$1 = $f.imp$1; info = $f.info; init$1 = $f.init$1; init$2 = $f.init$2; iota = $f.iota; last = $f.last; lhs = $f.lhs; list = $f.list; name = $f.name; name$1 = $f.name$1; name$2 = $f.name$2; name$3 = $f.name$3; obj = $f.obj; obj$1 = $f.obj$1; obj$2 = $f.obj$2; obj$3 = $f.obj$3; obj$4 = $f.obj$4; obj$5 = $f.obj$5; obj$6 = $f.obj$6; ok = $f.ok; path = $f.path; pkg = $f.pkg; pkg$1 = $f.pkg$1; pkgImports = $f.pkgImports; pos = $f.pos; ptr = $f.ptr; s = $f.s; s$1 = $f.s$1; s$2 = $f.s$2; s$3 = $f.s$3; scope = $f.scope; spec = $f.spec; typ = $f.typ; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		pkg = check.pkg;
		pkgImports = {};
		_ref = pkg.imports;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			imp = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_key = imp; (pkgImports || $throwRuntimeError("assignment to entry in nil map"))[ptrType$2.keyFor(_key)] = { k: _key, v: true };
			_i++;
		}
		_ref$1 = check.files;
		_i$1 = 0;
		/* while (true) { */ case 1:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 2; continue; }
			fileNo = _i$1;
			file = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			check.recordDef(file.Name, $ifaceNil);
			_tmp = file.Pos();
			_r = file.End(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tmp$1 = _r;
			pos = _tmp;
			end = _tmp$1;
			_r$1 = check.fset.File(file.Pos()); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			f = _r$1;
			if (!(f === ptrType$81.nil)) {
				_tmp$2 = ((f.Base() >> 0));
				_tmp$3 = (((f.Base() + f.Size() >> 0) >> 0));
				pos = _tmp$2;
				end = _tmp$3;
			}
			_arg = check.pkg.scope;
			_arg$1 = pos;
			_arg$2 = end;
			_r$2 = check.filename(fileNo); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg$3 = _r$2;
			_r$3 = NewScope(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			fileScope = _r$3;
			check.recordScope(file, fileScope);
			_r$4 = check.fset.Position(file.Name.Pos()); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = dir(_r$4.Filename); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			fileDir = _r$5;
			_ref$2 = file.Decls;
			_i$2 = 0;
			/* while (true) { */ case 9:
				/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 10; continue; }
				decl = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
				_ref$3 = decl;
				/* */ if ($assertType(_ref$3, ptrType$33, true)[1]) { $s = 11; continue; }
				/* */ if ($assertType(_ref$3, ptrType$34, true)[1]) { $s = 12; continue; }
				/* */ if ($assertType(_ref$3, ptrType$80, true)[1]) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ($assertType(_ref$3, ptrType$33, true)[1]) { */ case 11:
					d = _ref$3.$val;
					$s = 15; continue;
				/* } else if ($assertType(_ref$3, ptrType$34, true)[1]) { */ case 12:
					d$1 = _ref$3.$val;
					last = ptrType$35.nil;
					_ref$4 = d$1.Specs;
					_i$3 = 0;
					/* while (true) { */ case 16:
						/* if (!(_i$3 < _ref$4.$length)) { break; } */ if(!(_i$3 < _ref$4.$length)) { $s = 17; continue; }
						iota = _i$3;
						spec = ((_i$3 < 0 || _i$3 >= _ref$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$4.$array[_ref$4.$offset + _i$3]);
						_ref$5 = spec;
						/* */ if ($assertType(_ref$5, ptrType$82, true)[1]) { $s = 18; continue; }
						/* */ if ($assertType(_ref$5, ptrType$35, true)[1]) { $s = 19; continue; }
						/* */ if ($assertType(_ref$5, ptrType$36, true)[1]) { $s = 20; continue; }
						/* */ $s = 21; continue;
						/* if ($assertType(_ref$5, ptrType$82, true)[1]) { */ case 18:
							s = _ref$5.$val;
							_r$6 = validatedImportPath(s.Path.Value); /* */ $s = 23; case 23: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
							_tuple = _r$6;
							path = _tuple[0];
							err = _tuple[1];
							/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 24; continue; }
							/* */ $s = 25; continue;
							/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 24:
								$r = check.errorf(s.Path.Pos(), "invalid import path (%s)", new sliceType$4([err])); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								_i$3++;
								/* continue; */ $s = 16; continue;
							/* } */ case 25:
							_r$7 = check.importPackage(s.Path.Pos(), path, fileDir); /* */ $s = 27; case 27: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
							imp$1 = _r$7;
							/* */ if (imp$1 === ptrType$2.nil) { $s = 28; continue; }
							/* */ $s = 29; continue;
							/* if (imp$1 === ptrType$2.nil) { */ case 28:
								_i$3++;
								/* continue; */ $s = 16; continue;
							/* } */ case 29:
							if (!(_entry = pkgImports[ptrType$2.keyFor(imp$1)], _entry !== undefined ? _entry.v : false)) {
								_key$1 = imp$1; (pkgImports || $throwRuntimeError("assignment to entry in nil map"))[ptrType$2.keyFor(_key$1)] = { k: _key$1, v: true };
								pkg.imports = $append(pkg.imports, imp$1);
							}
							name = imp$1.name;
							/* */ if (!(s.Name === ptrType$7.nil)) { $s = 30; continue; }
							/* */ $s = 31; continue;
							/* if (!(s.Name === ptrType$7.nil)) { */ case 30:
								name = s.Name.Name;
								/* */ if (path === "C") { $s = 32; continue; }
								/* */ $s = 33; continue;
								/* if (path === "C") { */ case 32:
									$r = check.errorf(s.Name.Pos(), "cannot rename import \"C\"", new sliceType$4([])); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									_i$3++;
									/* continue; */ $s = 16; continue;
								/* } */ case 33:
								/* */ if (name === "init") { $s = 35; continue; }
								/* */ $s = 36; continue;
								/* if (name === "init") { */ case 35:
									$r = check.errorf(s.Name.Pos(), "cannot declare init - must be func", new sliceType$4([])); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									_i$3++;
									/* continue; */ $s = 16; continue;
								/* } */ case 36:
							/* } */ case 31:
							obj = NewPkgName(s.Pos(), pkg, name, imp$1);
							if (!(s.Name === ptrType$7.nil)) {
								check.recordDef(s.Name, obj);
							} else {
								check.recordImplicit(s, obj);
							}
							if (path === "C") {
								obj.used = true;
							}
							/* */ if (name === ".") { $s = 38; continue; }
							/* */ $s = 39; continue;
							/* if (name === ".") { */ case 38:
								_ref$6 = imp$1.scope.elems;
								_i$4 = 0;
								_keys = $keys(_ref$6);
								/* while (true) { */ case 41:
									/* if (!(_i$4 < _keys.length)) { break; } */ if(!(_i$4 < _keys.length)) { $s = 42; continue; }
									_entry$1 = _ref$6[_keys[_i$4]];
									if (_entry$1 === undefined) {
										_i$4++;
										/* continue; */ $s = 41; continue;
									}
									obj$1 = _entry$1.v;
									_r$8 = obj$1.Exported(); /* */ $s = 45; case 45: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
									/* */ if (_r$8) { $s = 43; continue; }
									/* */ $s = 44; continue;
									/* if (_r$8) { */ case 43:
										$r = check.declare(fileScope, ptrType$7.nil, obj$1, 0); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									/* } */ case 44:
									_i$4++;
								/* } */ $s = 41; continue; case 42:
								check.addUnusedDotImport(fileScope, imp$1, s.Pos());
								$s = 40; continue;
							/* } else { */ case 39:
								$r = check.declare(fileScope, ptrType$7.nil, obj, 0); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 40:
							$s = 22; continue;
						/* } else if ($assertType(_ref$5, ptrType$35, true)[1]) { */ case 19:
							s$1 = _ref$5.$val;
								_1 = d$1.Tok;
								/* */ if (_1 === (64)) { $s = 49; continue; }
								/* */ if (_1 === (85)) { $s = 50; continue; }
								/* */ $s = 51; continue;
								/* if (_1 === (64)) { */ case 49:
									if (!($interfaceIsEqual(s$1.Type, $ifaceNil)) || s$1.Values.$length > 0) {
										last = s$1;
									} else if (last === ptrType$35.nil) {
										last = new ast.ValueSpec.ptr(ptrType$37.nil, sliceType$17.nil, $ifaceNil, sliceType$10.nil, ptrType$37.nil);
									}
									_ref$7 = s$1.Names;
									_i$5 = 0;
									/* while (true) { */ case 53:
										/* if (!(_i$5 < _ref$7.$length)) { break; } */ if(!(_i$5 < _ref$7.$length)) { $s = 54; continue; }
										i = _i$5;
										name$1 = ((_i$5 < 0 || _i$5 >= _ref$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$7.$array[_ref$7.$offset + _i$5]);
										obj$2 = NewConst(name$1.Pos(), pkg, name$1.Name, $ifaceNil, constant.MakeInt64((new $Int64(0, iota))));
										init$1 = $ifaceNil;
										if (i < last.Values.$length) {
											init$1 = (x = last.Values, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
										}
										d$4 = new declInfo.ptr(fileScope, sliceType$6.nil, last.Type, init$1, ptrType$80.nil, false, false);
										$r = check.declarePkgObj(name$1, obj$2, d$4); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										_i$5++;
									/* } */ $s = 53; continue; case 54:
									$r = check.arityMatch(s$1, last); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$s = 52; continue;
								/* } else if (_1 === (85)) { */ case 50:
									lhs = $makeSlice(sliceType$6, s$1.Names.$length);
									d1 = ptrType$23.nil;
									if (s$1.Values.$length === 1) {
										d1 = new declInfo.ptr(fileScope, lhs, s$1.Type, (x$1 = s$1.Values, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])), ptrType$80.nil, false, false);
									}
									_ref$8 = s$1.Names;
									_i$6 = 0;
									/* while (true) { */ case 57:
										/* if (!(_i$6 < _ref$8.$length)) { break; } */ if(!(_i$6 < _ref$8.$length)) { $s = 58; continue; }
										i$1 = _i$6;
										name$2 = ((_i$6 < 0 || _i$6 >= _ref$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$8.$array[_ref$8.$offset + _i$6]);
										obj$3 = NewVar(name$2.Pos(), pkg, name$2.Name, $ifaceNil);
										((i$1 < 0 || i$1 >= lhs.$length) ? ($throwRuntimeError("index out of range"), undefined) : lhs.$array[lhs.$offset + i$1] = obj$3);
										d$5 = d1;
										if (d$5 === ptrType$23.nil) {
											init$2 = $ifaceNil;
											if (i$1 < s$1.Values.$length) {
												init$2 = (x$2 = s$1.Values, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
											}
											d$5 = new declInfo.ptr(fileScope, sliceType$6.nil, s$1.Type, init$2, ptrType$80.nil, false, false);
										}
										$r = check.declarePkgObj(name$2, obj$3, d$5); /* */ $s = 59; case 59: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										_i$6++;
									/* } */ $s = 57; continue; case 58:
									$r = check.arityMatch(s$1, ptrType$35.nil); /* */ $s = 60; case 60: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$s = 52; continue;
								/* } else { */ case 51:
									$r = check.invalidAST(s$1.Pos(), "invalid token %s", new sliceType$4([new token.Token(d$1.Tok)])); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* } */ case 52:
							case 48:
							$s = 22; continue;
						/* } else if ($assertType(_ref$5, ptrType$36, true)[1]) { */ case 20:
							s$2 = _ref$5.$val;
							obj$4 = NewTypeName(s$2.Name.Pos(), pkg, s$2.Name.Name, $ifaceNil);
							$r = check.declarePkgObj(s$2.Name, obj$4, new declInfo.ptr(fileScope, sliceType$6.nil, s$2.Type, $ifaceNil, ptrType$80.nil, new token.Pos(s$2.Assign).IsValid(), false)); /* */ $s = 62; case 62: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 22; continue;
						/* } else { */ case 21:
							s$3 = _ref$5;
							_r$9 = s$3.Pos(); /* */ $s = 63; case 63: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
							$r = check.invalidAST(_r$9, "unknown ast.Spec node %T", new sliceType$4([s$3])); /* */ $s = 64; case 64: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 22:
						_i$3++;
					/* } */ $s = 16; continue; case 17:
					$s = 15; continue;
				/* } else if ($assertType(_ref$3, ptrType$80, true)[1]) { */ case 13:
					d$2 = _ref$3.$val;
					name$3 = d$2.Name.Name;
					obj$5 = NewFunc(d$2.Name.Pos(), pkg, name$3, ptrType$19.nil);
					/* */ if (d$2.Recv === ptrType$83.nil) { $s = 65; continue; }
					/* */ $s = 66; continue;
					/* if (d$2.Recv === ptrType$83.nil) { */ case 65:
						/* */ if (name$3 === "init") { $s = 68; continue; }
						/* */ $s = 69; continue;
						/* if (name$3 === "init") { */ case 68:
							obj$5.object.parent = pkg.scope;
							check.recordDef(d$2.Name, obj$5);
							/* */ if (d$2.Body === ptrType$32.nil) { $s = 71; continue; }
							/* */ $s = 72; continue;
							/* if (d$2.Body === ptrType$32.nil) { */ case 71:
								$r = check.softErrorf(obj$5.object.pos, "missing function body", new sliceType$4([])); /* */ $s = 73; case 73: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 72:
							$s = 70; continue;
						/* } else { */ case 69:
							$r = check.declare(pkg.scope, d$2.Name, obj$5, 0); /* */ $s = 74; case 74: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 70:
						$s = 67; continue;
					/* } else { */ case 66:
						check.recordDef(d$2.Name, obj$5);
						list = d$2.Recv.List;
						if (list.$length > 0) {
							typ = unparen((0 >= list.$length ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + 0]).Type);
							_tuple$1 = $assertType(typ, ptrType$46, true);
							ptr = _tuple$1[0];
							if (!(ptr === ptrType$46.nil)) {
								typ = unparen(ptr.X);
							}
							_tuple$2 = $assertType(typ, ptrType$7, true);
							base = _tuple$2[0];
							if (!(base === ptrType$7.nil) && !(base.Name === "_")) {
								check.assocMethod(base.Name, obj$5);
							}
						}
					/* } */ case 67:
					info = new declInfo.ptr(fileScope, sliceType$6.nil, $ifaceNil, $ifaceNil, d$2, false, false);
					_key$2 = obj$5; (check.objMap || $throwRuntimeError("assignment to entry in nil map"))[Object.keyFor(_key$2)] = { k: _key$2, v: info };
					obj$5.object.setOrder((($keys(check.objMap).length >>> 0)));
					$s = 15; continue;
				/* } else { */ case 14:
					d$3 = _ref$3;
					_r$10 = d$3.Pos(); /* */ $s = 75; case 75: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					$r = check.invalidAST(_r$10, "unknown ast.Decl node %T", new sliceType$4([d$3])); /* */ $s = 76; case 76: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 15:
				_i$2++;
			/* } */ $s = 9; continue; case 10:
			_i$1++;
		/* } */ $s = 1; continue; case 2:
		_ref$9 = check.pkg.scope.children;
		_i$7 = 0;
		/* while (true) { */ case 77:
			/* if (!(_i$7 < _ref$9.$length)) { break; } */ if(!(_i$7 < _ref$9.$length)) { $s = 78; continue; }
			scope = ((_i$7 < 0 || _i$7 >= _ref$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$9.$array[_ref$9.$offset + _i$7]);
			_ref$10 = scope.elems;
			_i$8 = 0;
			_keys$1 = $keys(_ref$10);
			/* while (true) { */ case 79:
				/* if (!(_i$8 < _keys$1.length)) { break; } */ if(!(_i$8 < _keys$1.length)) { $s = 80; continue; }
				_entry$2 = _ref$10[_keys$1[_i$8]];
				if (_entry$2 === undefined) {
					_i$8++;
					/* continue; */ $s = 79; continue;
				}
				obj$6 = _entry$2.v;
				_r$11 = obj$6.Name(); /* */ $s = 81; case 81: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$12 = pkg.scope.Lookup(_r$11); /* */ $s = 82; case 82: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				alt = _r$12;
				/* */ if (!($interfaceIsEqual(alt, $ifaceNil))) { $s = 83; continue; }
				/* */ $s = 84; continue;
				/* if (!($interfaceIsEqual(alt, $ifaceNil))) { */ case 83:
					_tuple$3 = $assertType(obj$6, ptrType$20, true);
					pkg$1 = _tuple$3[0];
					ok = _tuple$3[1];
					/* */ if (ok) { $s = 85; continue; }
					/* */ $s = 86; continue;
					/* if (ok) { */ case 85:
						_r$13 = alt.Pos(); /* */ $s = 88; case 88: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						_arg$4 = _r$13;
						_r$14 = alt.Name(); /* */ $s = 89; case 89: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						_arg$5 = new $String(_r$14);
						_arg$6 = pkg$1.Imported();
						$r = check.errorf(_arg$4, "%s already declared through import of %s", new sliceType$4([_arg$5, _arg$6])); /* */ $s = 90; case 90: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$r = check.reportAltDecl(pkg$1); /* */ $s = 91; case 91: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 87; continue;
					/* } else { */ case 86:
						_r$15 = alt.Pos(); /* */ $s = 92; case 92: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						_arg$7 = _r$15;
						_r$16 = alt.Name(); /* */ $s = 93; case 93: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						_arg$8 = new $String(_r$16);
						_r$17 = obj$6.Pkg(); /* */ $s = 94; case 94: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						_arg$9 = _r$17;
						$r = check.errorf(_arg$7, "%s already declared through dot-import of %s", new sliceType$4([_arg$8, _arg$9])); /* */ $s = 95; case 95: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$r = check.reportAltDecl(obj$6); /* */ $s = 96; case 96: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 87:
				/* } */ case 84:
				_i$8++;
			/* } */ $s = 79; continue; case 80:
			_i$7++;
		/* } */ $s = 77; continue; case 78:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.collectObjects }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._i$6 = _i$6; $f._i$7 = _i$7; $f._i$8 = _i$8; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._keys = _keys; $f._keys$1 = _keys$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$10 = _ref$10; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._ref$7 = _ref$7; $f._ref$8 = _ref$8; $f._ref$9 = _ref$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.alt = alt; $f.base = base; $f.check = check; $f.d = d; $f.d$1 = d$1; $f.d$2 = d$2; $f.d$3 = d$3; $f.d$4 = d$4; $f.d$5 = d$5; $f.d1 = d1; $f.decl = decl; $f.end = end; $f.err = err; $f.f = f; $f.file = file; $f.fileDir = fileDir; $f.fileNo = fileNo; $f.fileScope = fileScope; $f.i = i; $f.i$1 = i$1; $f.imp = imp; $f.imp$1 = imp$1; $f.info = info; $f.init$1 = init$1; $f.init$2 = init$2; $f.iota = iota; $f.last = last; $f.lhs = lhs; $f.list = list; $f.name = name; $f.name$1 = name$1; $f.name$2 = name$2; $f.name$3 = name$3; $f.obj = obj; $f.obj$1 = obj$1; $f.obj$2 = obj$2; $f.obj$3 = obj$3; $f.obj$4 = obj$4; $f.obj$5 = obj$5; $f.obj$6 = obj$6; $f.ok = ok; $f.path = path; $f.pkg = pkg; $f.pkg$1 = pkg$1; $f.pkgImports = pkgImports; $f.pos = pos; $f.ptr = ptr; $f.s = s; $f.s$1 = s$1; $f.s$2 = s$2; $f.s$3 = s$3; $f.scope = scope; $f.spec = spec; $f.typ = typ; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.collectObjects = function() { return this.$val.collectObjects(); };
	Checker.ptr.prototype.packageObjects = function(objList) {
		var _i, _i$1, _ref, _ref$1, _tuple, check, obj, obj$1, obj$2, objList, typePath, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; check = $f.check; obj = $f.obj; obj$1 = $f.obj$1; obj$2 = $f.obj$2; objList = $f.objList; typePath = $f.typePath; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_ref = objList;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			obj = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_tuple = $assertType(obj, ptrType$21, true);
			obj$1 = _tuple[0];
			/* */ if (!(obj$1 === ptrType$21.nil) && !($interfaceIsEqual(obj$1.object.typ, $ifaceNil))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(obj$1 === ptrType$21.nil) && !($interfaceIsEqual(obj$1.object.typ, $ifaceNil))) { */ case 3:
				$r = check.addMethodDecls(obj$1); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		typePath = $makeSlice(sliceType$16, 0, 8);
		_ref$1 = objList;
		_i$1 = 0;
		/* while (true) { */ case 6:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 7; continue; }
			obj$2 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			$r = check.objDecl(obj$2, ptrType$6.nil, typePath); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i$1++;
		/* } */ $s = 6; continue; case 7:
		check.methods = false;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.packageObjects }; } $f._i = _i; $f._i$1 = _i$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.check = check; $f.obj = obj; $f.obj$1 = obj$1; $f.obj$2 = obj$2; $f.objList = objList; $f.typePath = typePath; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.packageObjects = function(objList) { return this.$val.packageObjects(objList); };
	Checker.ptr.prototype.functionBodies = function() {
		var _i, _ref, check, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; check = $f.check; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_ref = check.funcs;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			f = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), funcInfo);
			$r = check.funcBody(f.decl, f.name, f.sig, f.body); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.functionBodies }; } $f._i = _i; $f._ref = _ref; $f.check = check; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.functionBodies = function() { return this.$val.functionBodies(); };
	Checker.ptr.prototype.unusedImports = function() {
		var _entry, _entry$1, _entry$2, _i, _i$1, _i$2, _i$3, _keys, _keys$1, _keys$2, _ref, _ref$1, _ref$2, _ref$3, _tuple, base, check, obj, obj$1, ok, path, pkg, pos, scope, unusedDotImports, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _keys = $f._keys; _keys$1 = $f._keys$1; _keys$2 = $f._keys$2; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tuple = $f._tuple; base = $f.base; check = $f.check; obj = $f.obj; obj$1 = $f.obj$1; ok = $f.ok; path = $f.path; pkg = $f.pkg; pos = $f.pos; scope = $f.scope; unusedDotImports = $f.unusedDotImports; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		if (check.conf.IgnoreFuncBodies) {
			$s = -1; return;
		}
		_ref = check.pkg.scope.children;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			scope = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_ref$1 = scope.elems;
			_i$1 = 0;
			_keys = $keys(_ref$1);
			/* while (true) { */ case 3:
				/* if (!(_i$1 < _keys.length)) { break; } */ if(!(_i$1 < _keys.length)) { $s = 4; continue; }
				_entry = _ref$1[_keys[_i$1]];
				if (_entry === undefined) {
					_i$1++;
					/* continue; */ $s = 3; continue;
				}
				obj = _entry.v;
				_tuple = $assertType(obj, ptrType$20, true);
				obj$1 = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (ok) { */ case 5:
					/* */ if (!obj$1.used) { $s = 7; continue; }
					/* */ $s = 8; continue;
					/* if (!obj$1.used) { */ case 7:
						path = obj$1.imported.path;
						base = pkgName(path);
						/* */ if (obj$1.object.name === base) { $s = 9; continue; }
						/* */ $s = 10; continue;
						/* if (obj$1.object.name === base) { */ case 9:
							$r = check.softErrorf(obj$1.object.pos, "%q imported but not used", new sliceType$4([new $String(path)])); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 11; continue;
						/* } else { */ case 10:
							$r = check.softErrorf(obj$1.object.pos, "%q imported but not used as %s", new sliceType$4([new $String(path), new $String(obj$1.object.name)])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 11:
					/* } */ case 8:
				/* } */ case 6:
				_i$1++;
			/* } */ $s = 3; continue; case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_ref$2 = check.unusedDotImports;
		_i$2 = 0;
		_keys$1 = $keys(_ref$2);
		/* while (true) { */ case 14:
			/* if (!(_i$2 < _keys$1.length)) { break; } */ if(!(_i$2 < _keys$1.length)) { $s = 15; continue; }
			_entry$1 = _ref$2[_keys$1[_i$2]];
			if (_entry$1 === undefined) {
				_i$2++;
				/* continue; */ $s = 14; continue;
			}
			unusedDotImports = _entry$1.v;
			_ref$3 = unusedDotImports;
			_i$3 = 0;
			_keys$2 = $keys(_ref$3);
			/* while (true) { */ case 16:
				/* if (!(_i$3 < _keys$2.length)) { break; } */ if(!(_i$3 < _keys$2.length)) { $s = 17; continue; }
				_entry$2 = _ref$3[_keys$2[_i$3]];
				if (_entry$2 === undefined) {
					_i$3++;
					/* continue; */ $s = 16; continue;
				}
				pkg = _entry$2.k;
				pos = _entry$2.v;
				$r = check.softErrorf(pos, "%q imported but not used", new sliceType$4([new $String(pkg.path)])); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i$3++;
			/* } */ $s = 16; continue; case 17:
			_i$2++;
		/* } */ $s = 14; continue; case 15:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.unusedImports }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._keys = _keys; $f._keys$1 = _keys$1; $f._keys$2 = _keys$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tuple = _tuple; $f.base = base; $f.check = check; $f.obj = obj; $f.obj$1 = obj$1; $f.ok = ok; $f.path = path; $f.pkg = pkg; $f.pos = pos; $f.scope = scope; $f.unusedDotImports = unusedDotImports; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.unusedImports = function() { return this.$val.unusedImports(); };
	pkgName = function(path) {
		var i, path;
		i = strings.LastIndex(path, "/");
		if (i >= 0) {
			path = $substring(path, (i + 1 >> 0));
		}
		return path;
	};
	dir = function(path) {
		var i, path;
		i = strings.LastIndexAny(path, "/\\");
		if (i > 0) {
			return $substring(path, 0, i);
		}
		return ".";
	};
	Checker.ptr.prototype.isTerminating = function(s, label) {
		var _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _v, _v$1, b, call, cc, check, id, label, obj, s, s$1, s$10, s$11, s$12, s$13, s$2, s$3, s$4, s$5, s$6, s$7, s$8, s$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _v = $f._v; _v$1 = $f._v$1; b = $f.b; call = $f.call; cc = $f.cc; check = $f.check; id = $f.id; label = $f.label; obj = $f.obj; s = $f.s; s$1 = $f.s$1; s$10 = $f.s$10; s$11 = $f.s$11; s$12 = $f.s$12; s$13 = $f.s$13; s$2 = $f.s$2; s$3 = $f.s$3; s$4 = $f.s$4; s$5 = $f.s$5; s$6 = $f.s$6; s$7 = $f.s$7; s$8 = $f.s$8; s$9 = $f.s$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_ref = s;
		/* */ if ($assertType(_ref, ptrType$84, true)[1] || $assertType(_ref, ptrType$67, true)[1] || $assertType(_ref, ptrType$85, true)[1] || $assertType(_ref, ptrType$86, true)[1] || $assertType(_ref, ptrType$87, true)[1] || $assertType(_ref, ptrType$68, true)[1] || $assertType(_ref, ptrType$88, true)[1] || $assertType(_ref, ptrType$89, true)[1] || $assertType(_ref, ptrType$76, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$64, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$90, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$91, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$66, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$32, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$69, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$71, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$72, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref, ptrType$74, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref, ptrType$75, true)[1]) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if ($assertType(_ref, ptrType$84, true)[1] || $assertType(_ref, ptrType$67, true)[1] || $assertType(_ref, ptrType$85, true)[1] || $assertType(_ref, ptrType$86, true)[1] || $assertType(_ref, ptrType$87, true)[1] || $assertType(_ref, ptrType$68, true)[1] || $assertType(_ref, ptrType$88, true)[1] || $assertType(_ref, ptrType$89, true)[1] || $assertType(_ref, ptrType$76, true)[1]) { */ case 1:
			s$2 = _ref;
			$s = 13; continue;
		/* } else if ($assertType(_ref, ptrType$64, true)[1]) { */ case 2:
			s$3 = _ref.$val;
			_r = check.isTerminating(s$3.Stmt, s$3.Label.Name); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } else if ($assertType(_ref, ptrType$90, true)[1]) { */ case 3:
			s$4 = _ref.$val;
			_tuple = $assertType(unparen(s$4.X), ptrType$55, true);
			call = _tuple[0];
			/* */ if (!(call === ptrType$55.nil)) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (!(call === ptrType$55.nil)) { */ case 15:
				_tuple$1 = $assertType(call.Fun, ptrType$7, true);
				id = _tuple$1[0];
				/* */ if (!(id === ptrType$7.nil)) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (!(id === ptrType$7.nil)) { */ case 17:
					_r$1 = check.context.scope.LookupParent(id.Name, 0); /* */ $s = 19; case 19: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$2 = _r$1;
					obj = _tuple$2[1];
					if (!($interfaceIsEqual(obj, $ifaceNil))) {
						_tuple$3 = $assertType(obj, ptrType$22, true);
						b = _tuple$3[0];
						if (!(b === ptrType$22.nil) && (b.id === 10)) {
							$s = -1; return true;
						}
					}
				/* } */ case 18:
			/* } */ case 16:
			$s = 13; continue;
		/* } else if ($assertType(_ref, ptrType$91, true)[1]) { */ case 4:
			s$5 = _ref.$val;
			$s = -1; return true;
		/* } else if ($assertType(_ref, ptrType$66, true)[1]) { */ case 5:
			s$6 = _ref.$val;
			if ((s$6.Tok === 73) || (s$6.Tok === 69)) {
				$s = -1; return true;
			}
			$s = 13; continue;
		/* } else if ($assertType(_ref, ptrType$32, true)[1]) { */ case 6:
			s$7 = _ref.$val;
			_r$2 = check.isTerminatingList(s$7.List, ""); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } else if ($assertType(_ref, ptrType$69, true)[1]) { */ case 7:
			s$8 = _ref.$val;
			if (!(!($interfaceIsEqual(s$8.Else, $ifaceNil)))) { _v$1 = false; $s = 24; continue s; }
			_r$3 = check.isTerminating(s$8.Body, ""); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_v$1 = _r$3; case 24:
			if (!(_v$1)) { _v = false; $s = 23; continue s; }
			_r$4 = check.isTerminating(s$8.Else, ""); /* */ $s = 26; case 26: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_v = _r$4; case 23:
			/* */ if (_v) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (_v) { */ case 21:
				$s = -1; return true;
			/* } */ case 22:
			$s = 13; continue;
		/* } else if ($assertType(_ref, ptrType$71, true)[1]) { */ case 8:
			s$9 = _ref.$val;
			_r$5 = check.isTerminatingSwitch(s$9.Body, label); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return _r$5;
		/* } else if ($assertType(_ref, ptrType$72, true)[1]) { */ case 9:
			s$10 = _ref.$val;
			_r$6 = check.isTerminatingSwitch(s$10.Body, label); /* */ $s = 28; case 28: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$s = -1; return _r$6;
		/* } else if ($assertType(_ref, ptrType$74, true)[1]) { */ case 10:
			s$11 = _ref.$val;
			_ref$1 = s$11.Body.List;
			_i = 0;
			/* while (true) { */ case 29:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 30; continue; }
				s$13 = ((_i < 0 || _i >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i]);
				cc = $assertType(s$13, ptrType$73);
				_r$7 = check.isTerminatingList(cc.Body, ""); /* */ $s = 33; case 33: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				/* */ if (!_r$7 || hasBreakList(cc.Body, label, true)) { $s = 31; continue; }
				/* */ $s = 32; continue;
				/* if (!_r$7 || hasBreakList(cc.Body, label, true)) { */ case 31:
					$s = -1; return false;
				/* } */ case 32:
				_i++;
			/* } */ $s = 29; continue; case 30:
			$s = -1; return true;
		/* } else if ($assertType(_ref, ptrType$75, true)[1]) { */ case 11:
			s$12 = _ref.$val;
			if ($interfaceIsEqual(s$12.Cond, $ifaceNil) && !hasBreak(s$12.Body, label, true)) {
				$s = -1; return true;
			}
			$s = 13; continue;
		/* } else { */ case 12:
			s$1 = _ref;
			unreachable();
		/* } */ case 13:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.isTerminating }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._v = _v; $f._v$1 = _v$1; $f.b = b; $f.call = call; $f.cc = cc; $f.check = check; $f.id = id; $f.label = label; $f.obj = obj; $f.s = s; $f.s$1 = s$1; $f.s$10 = s$10; $f.s$11 = s$11; $f.s$12 = s$12; $f.s$13 = s$13; $f.s$2 = s$2; $f.s$3 = s$3; $f.s$4 = s$4; $f.s$5 = s$5; $f.s$6 = s$6; $f.s$7 = s$7; $f.s$8 = s$8; $f.s$9 = s$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.isTerminating = function(s, label) { return this.$val.isTerminating(s, label); };
	Checker.ptr.prototype.isTerminatingList = function(list, label) {
		var _r, _tuple, check, i, label, list, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; check = $f.check; i = $f.i; label = $f.label; list = $f.list; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		i = list.$length - 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			_tuple = $assertType(((i < 0 || i >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + i]), ptrType$85, true);
			ok = _tuple[1];
			/* */ if (!ok) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!ok) { */ case 3:
				_r = check.isTerminating(((i < 0 || i >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + i]), label); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 4:
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.isTerminatingList }; } $f._r = _r; $f._tuple = _tuple; $f.check = check; $f.i = i; $f.label = label; $f.list = list; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.isTerminatingList = function(list, label) { return this.$val.isTerminatingList(list, label); };
	Checker.ptr.prototype.isTerminatingSwitch = function(body, label) {
		var _i, _r, _ref, body, cc, check, hasDefault, label, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; body = $f.body; cc = $f.cc; check = $f.check; hasDefault = $f.hasDefault; label = $f.label; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		hasDefault = false;
		_ref = body.List;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			cc = $assertType(s, ptrType$70);
			if (cc.List === sliceType$10.nil) {
				hasDefault = true;
			}
			_r = check.isTerminatingList(cc.Body, ""); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r || hasBreakList(cc.Body, label, true)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r || hasBreakList(cc.Body, label, true)) { */ case 3:
				$s = -1; return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return hasDefault;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.isTerminatingSwitch }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.body = body; $f.cc = cc; $f.check = check; $f.hasDefault = hasDefault; $f.label = label; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.isTerminatingSwitch = function(body, label) { return this.$val.isTerminatingSwitch(body, label); };
	hasBreak = function(s, label, implicit) {
		var _ref, implicit, label, s, s$1, s$10, s$11, s$12, s$13, s$2, s$3, s$4, s$5, s$6, s$7, s$8, s$9;
		_ref = s;
		if ($assertType(_ref, ptrType$84, true)[1] || $assertType(_ref, ptrType$67, true)[1] || $assertType(_ref, ptrType$85, true)[1] || $assertType(_ref, ptrType$90, true)[1] || $assertType(_ref, ptrType$86, true)[1] || $assertType(_ref, ptrType$87, true)[1] || $assertType(_ref, ptrType$68, true)[1] || $assertType(_ref, ptrType$88, true)[1] || $assertType(_ref, ptrType$89, true)[1] || $assertType(_ref, ptrType$91, true)[1]) {
			s$2 = _ref;
		} else if ($assertType(_ref, ptrType$64, true)[1]) {
			s$3 = _ref.$val;
			return hasBreak(s$3.Stmt, label, implicit);
		} else if ($assertType(_ref, ptrType$66, true)[1]) {
			s$4 = _ref.$val;
			if (s$4.Tok === 61) {
				if (s$4.Label === ptrType$7.nil) {
					return implicit;
				}
				if (s$4.Label.Name === label) {
					return true;
				}
			}
		} else if ($assertType(_ref, ptrType$32, true)[1]) {
			s$5 = _ref.$val;
			return hasBreakList(s$5.List, label, implicit);
		} else if ($assertType(_ref, ptrType$69, true)[1]) {
			s$6 = _ref.$val;
			if (hasBreak(s$6.Body, label, implicit) || !($interfaceIsEqual(s$6.Else, $ifaceNil)) && hasBreak(s$6.Else, label, implicit)) {
				return true;
			}
		} else if ($assertType(_ref, ptrType$70, true)[1]) {
			s$7 = _ref.$val;
			return hasBreakList(s$7.Body, label, implicit);
		} else if ($assertType(_ref, ptrType$71, true)[1]) {
			s$8 = _ref.$val;
			if (!(label === "") && hasBreak(s$8.Body, label, false)) {
				return true;
			}
		} else if ($assertType(_ref, ptrType$72, true)[1]) {
			s$9 = _ref.$val;
			if (!(label === "") && hasBreak(s$9.Body, label, false)) {
				return true;
			}
		} else if ($assertType(_ref, ptrType$73, true)[1]) {
			s$10 = _ref.$val;
			return hasBreakList(s$10.Body, label, implicit);
		} else if ($assertType(_ref, ptrType$74, true)[1]) {
			s$11 = _ref.$val;
			if (!(label === "") && hasBreak(s$11.Body, label, false)) {
				return true;
			}
		} else if ($assertType(_ref, ptrType$75, true)[1]) {
			s$12 = _ref.$val;
			if (!(label === "") && hasBreak(s$12.Body, label, false)) {
				return true;
			}
		} else if ($assertType(_ref, ptrType$76, true)[1]) {
			s$13 = _ref.$val;
			if (!(label === "") && hasBreak(s$13.Body, label, false)) {
				return true;
			}
		} else {
			s$1 = _ref;
			unreachable();
		}
		return false;
	};
	hasBreakList = function(list, label, implicit) {
		var _i, _ref, implicit, label, list, s;
		_ref = list;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (hasBreak(s, label, implicit)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	NewScope = function(parent, pos, end, comment) {
		var comment, end, parent, pos, s;
		s = new Scope.ptr(parent, sliceType$25.nil, false, pos, end, comment, false);
		if (!(parent === ptrType$1.nil) && !(parent === $pkg.Universe)) {
			parent.children = $append(parent.children, s);
		}
		return s;
	};
	$pkg.NewScope = NewScope;
	Scope.ptr.prototype.Parent = function() {
		var s;
		s = this;
		return s.parent;
	};
	Scope.prototype.Parent = function() { return this.$val.Parent(); };
	Scope.ptr.prototype.Len = function() {
		var s;
		s = this;
		return $keys(s.elems).length;
	};
	Scope.prototype.Len = function() { return this.$val.Len(); };
	Scope.ptr.prototype.Names = function() {
		var _entry, _i, _keys, _ref, i, name, names, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _ref = $f._ref; i = $f.i; name = $f.name; names = $f.names; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		names = $makeSlice(sliceType$26, $keys(s.elems).length);
		i = 0;
		_ref = s.elems;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			name = _entry.k;
			((i < 0 || i >= names.$length) ? ($throwRuntimeError("index out of range"), undefined) : names.$array[names.$offset + i] = name);
			i = i + (1) >> 0;
			_i++;
		}
		$r = sort.Strings(names); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return names;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scope.ptr.prototype.Names }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._ref = _ref; $f.i = i; $f.name = name; $f.names = names; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scope.prototype.Names = function() { return this.$val.Names(); };
	Scope.ptr.prototype.NumChildren = function() {
		var s;
		s = this;
		return s.children.$length;
	};
	Scope.prototype.NumChildren = function() { return this.$val.NumChildren(); };
	Scope.ptr.prototype.Child = function(i) {
		var i, s, x;
		s = this;
		return (x = s.children, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
	};
	Scope.prototype.Child = function(i) { return this.$val.Child(i); };
	Scope.ptr.prototype.Lookup = function(name) {
		var _entry, name, s;
		s = this;
		return (_entry = s.elems[$String.keyFor(name)], _entry !== undefined ? _entry.v : $ifaceNil);
	};
	Scope.prototype.Lookup = function(name) { return this.$val.Lookup(name); };
	Scope.ptr.prototype.LookupParent = function(name, pos) {
		var _entry, _r, _v, _v$1, name, obj, pos, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; _v = $f._v; _v$1 = $f._v$1; name = $f.name; obj = $f.obj; pos = $f.pos; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			/* if (!(!(s === ptrType$1.nil))) { break; } */ if(!(!(s === ptrType$1.nil))) { $s = 2; continue; }
			obj = (_entry = s.elems[$String.keyFor(name)], _entry !== undefined ? _entry.v : $ifaceNil);
			if (!(!($interfaceIsEqual(obj, $ifaceNil)))) { _v = false; $s = 5; continue s; }
			if (!new token.Pos(pos).IsValid()) { _v$1 = true; $s = 6; continue s; }
			_r = obj.scopePos(); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v$1 = _r <= pos; case 6:
			_v = _v$1; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				$s = -1; return [s, obj];
			/* } */ case 4:
			s = s.parent;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [ptrType$1.nil, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scope.ptr.prototype.LookupParent }; } $f._entry = _entry; $f._r = _r; $f._v = _v; $f._v$1 = _v$1; $f.name = name; $f.obj = obj; $f.pos = pos; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scope.prototype.LookupParent = function(name, pos) { return this.$val.LookupParent(name, pos); };
	Scope.ptr.prototype.Insert = function(obj) {
		var _entry, _key, _r, _r$1, alt, name, obj, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; alt = $f.alt; name = $f.name; obj = $f.obj; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = obj.Name(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		name = _r;
		alt = (_entry = s.elems[$String.keyFor(name)], _entry !== undefined ? _entry.v : $ifaceNil);
		if (!($interfaceIsEqual(alt, $ifaceNil))) {
			$s = -1; return alt;
		}
		if (s.elems === false) {
			s.elems = {};
		}
		_key = name; (s.elems || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: obj };
		_r$1 = obj.Parent(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1 === ptrType$1.nil) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_r$1 === ptrType$1.nil) { */ case 2:
			$r = obj.setParent(s); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scope.ptr.prototype.Insert }; } $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f.alt = alt; $f.name = name; $f.obj = obj; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scope.prototype.Insert = function(obj) { return this.$val.Insert(obj); };
	Scope.ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.pos;
	};
	Scope.prototype.Pos = function() { return this.$val.Pos(); };
	Scope.ptr.prototype.End = function() {
		var s;
		s = this;
		return s.end;
	};
	Scope.prototype.End = function() { return this.$val.End(); };
	Scope.ptr.prototype.Contains = function(pos) {
		var pos, s;
		s = this;
		return s.pos <= pos && pos < s.end;
	};
	Scope.prototype.Contains = function(pos) { return this.$val.Contains(pos); };
	Scope.ptr.prototype.Innermost = function(pos) {
		var _i, _i$1, _ref, _ref$1, inner, pos, s, s$1, s$2;
		s = this;
		if (s.parent === $pkg.Universe) {
			_ref = s.children;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				s$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				inner = s$1.Innermost(pos);
				if (!(inner === ptrType$1.nil)) {
					return inner;
				}
				_i++;
			}
		}
		if (s.Contains(pos)) {
			_ref$1 = s.children;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				s$2 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (s$2.Contains(pos)) {
					return s$2.Innermost(pos);
				}
				_i$1++;
			}
			return s;
		}
		return ptrType$1.nil;
	};
	Scope.prototype.Innermost = function(pos) { return this.$val.Innermost(pos); };
	Scope.ptr.prototype.WriteTo = function(w, n, recurse) {
		var _entry, _i, _i$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, indn, indn1, n, name, recurse, s, s$1, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; indn = $f.indn; indn1 = $f.indn1; n = $f.n; name = $f.name; recurse = $f.recurse; s = $f.s; s$1 = $f.s$1; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		indn = strings.Repeat(".  ", n);
		_r = fmt.Fprintf(w, "%s%s scope %p {", new sliceType$4([new $String(indn), new $String(s.comment), s])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		/* */ if ($keys(s.elems).length === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($keys(s.elems).length === 0) { */ case 2:
			_r$1 = fmt.Fprintf(w, "}\n", new sliceType$4([])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			$s = -1; return;
		/* } */ case 3:
		_r$2 = fmt.Fprintln(w, new sliceType$4([])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		indn1 = indn + ".  ";
		_r$3 = s.Names(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_ref = _r$3;
		_i = 0;
		/* while (true) { */ case 7:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
			name = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$4 = fmt.Fprintf(w, "%s%s\n", new sliceType$4([new $String(indn1), (_entry = s.elems[$String.keyFor(name)], _entry !== undefined ? _entry.v : $ifaceNil)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			_i++;
		/* } */ $s = 7; continue; case 8:
		/* */ if (recurse) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (recurse) { */ case 10:
			_ref$1 = s.children;
			_i$1 = 0;
			/* while (true) { */ case 12:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 13; continue; }
				s$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				_r$5 = fmt.Fprintln(w, new sliceType$4([])); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				$r = s$1.WriteTo(w, n + 1 >> 0, recurse); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i$1++;
			/* } */ $s = 12; continue; case 13:
		/* } */ case 11:
		_r$6 = fmt.Fprintf(w, "%s}", new sliceType$4([new $String(indn)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scope.ptr.prototype.WriteTo }; } $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f.indn = indn; $f.indn1 = indn1; $f.n = n; $f.name = name; $f.recurse = recurse; $f.s = s; $f.s$1 = s$1; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scope.prototype.WriteTo = function(w, n, recurse) { return this.$val.WriteTo(w, n, recurse); };
	Scope.ptr.prototype.String = function() {
		var buf, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; buf = $f.buf; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		s = this;
		buf[0] = new bytes.Buffer.ptr(sliceType$5.nil, 0, arrayType.zero(), 0);
		$r = s.WriteTo(buf[0], 0, false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return buf[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scope.ptr.prototype.String }; } $f.buf = buf; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scope.prototype.String = function() { return this.$val.String(); };
	Selection.ptr.prototype.Kind = function() {
		var s;
		s = this;
		return s.kind;
	};
	Selection.prototype.Kind = function() { return this.$val.Kind(); };
	Selection.ptr.prototype.Recv = function() {
		var s;
		s = this;
		return s.recv;
	};
	Selection.prototype.Recv = function() { return this.$val.Recv(); };
	Selection.ptr.prototype.Obj = function() {
		var s;
		s = this;
		return s.obj;
	};
	Selection.prototype.Obj = function() { return this.$val.Obj(); };
	Selection.ptr.prototype.Type = function() {
		var _1, _r, arg0, params, recv, s, sig, sig$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; arg0 = $f.arg0; params = $f.params; recv = $f.recv; s = $f.s; sig = $f.sig; sig$1 = $f.sig$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		arg0 = [arg0];
		recv = [recv];
		sig = [sig];
		sig$1 = [sig$1];
		s = this;
		_1 = s.kind;
		if (_1 === (1)) {
			sig[0] = $clone($assertType($assertType(s.obj, ptrType$5).object.typ, ptrType$19), Signature);
			recv[0] = $clone(sig[0].recv, Var);
			recv[0].object.typ = s.recv;
			sig[0].recv = recv[0];
			$s = -1; return sig[0];
		} else if (_1 === (2)) {
			sig$1[0] = $clone($assertType($assertType(s.obj, ptrType$5).object.typ, ptrType$19), Signature);
			arg0[0] = $clone(sig$1[0].recv, Var);
			sig$1[0].recv = ptrType$10.nil;
			arg0[0].object.typ = s.recv;
			params = sliceType$6.nil;
			if (!(sig$1[0].params === ptrType$16.nil)) {
				params = sig$1[0].params.vars;
			}
			sig$1[0].params = NewTuple($appendSlice(new sliceType$6([arg0[0]]), params));
			$s = -1; return sig$1[0];
		}
		_r = s.obj.Type(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Selection.ptr.prototype.Type }; } $f._1 = _1; $f._r = _r; $f.arg0 = arg0; $f.params = params; $f.recv = recv; $f.s = s; $f.sig = sig; $f.sig$1 = sig$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Selection.prototype.Type = function() { return this.$val.Type(); };
	Selection.ptr.prototype.Index = function() {
		var s;
		s = this;
		return s.index;
	};
	Selection.prototype.Index = function() { return this.$val.Index(); };
	Selection.ptr.prototype.Indirect = function() {
		var s;
		s = this;
		return s.indirect;
	};
	Selection.prototype.Indirect = function() { return this.$val.Indirect(); };
	Selection.ptr.prototype.String = function() {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = SelectionString(s, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Selection.ptr.prototype.String }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Selection.prototype.String = function() { return this.$val.String(); };
	SelectionString = function(s, qf) {
		var T, _1, _arg, _arg$1, _r, _r$1, _r$2, buf, k, qf, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; buf = $f.buf; k = $f.k; qf = $f.qf; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		k = "";
		_1 = s.kind;
		if (_1 === (0)) {
			k = "field ";
		} else if (_1 === (1)) {
			k = "method ";
		} else if (_1 === (2)) {
			k = "method expr ";
		} else {
			unreachable();
		}
		buf[0] = new bytes.Buffer.ptr(sliceType$5.nil, 0, arrayType.zero(), 0);
		buf[0].WriteString(k);
		buf[0].WriteByte(40);
		$r = WriteType(buf[0], s.Recv(), qf); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_arg = buf[0];
		_r = s.obj.Name(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = new $String(_r);
		_r$1 = fmt.Fprintf(_arg, ") %s", new sliceType$4([_arg$1])); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = s.Type(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		T = _r$2;
		/* */ if (s.kind === 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (s.kind === 0) { */ case 5:
			buf[0].WriteByte(32);
			$r = WriteType(buf[0], T, qf); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 7; continue;
		/* } else { */ case 6:
			$r = WriteSignature(buf[0], $assertType(T, ptrType$19), qf); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		$s = -1; return buf[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: SelectionString }; } $f.T = T; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.buf = buf; $f.k = k; $f.qf = qf; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SelectionString = SelectionString;
	StdSizes.ptr.prototype.Alignof = function(T) {
		var T, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, a, a$1, f, max, s, t, t$1, t$2, t$3, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; a = $f.a; a$1 = $f.a$1; f = $f.f; max = $f.max; s = $f.s; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; t$3 = $f.t$3; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = T.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_ref = _r;
		/* */ if ($assertType(_ref, ptrType$13, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$30, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$12, true)[1] || $assertType(_ref, ptrType$58, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ($assertType(_ref, ptrType$13, true)[1]) { */ case 2:
			t = _ref.$val;
			_r$1 = s.Alignof(t.elem); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } else if ($assertType(_ref, ptrType$30, true)[1]) { */ case 3:
			t$1 = _ref.$val;
			max = new $Int64(0, 1);
			_ref$1 = t$1.fields;
			_i = 0;
			/* while (true) { */ case 8:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 9; continue; }
				f = ((_i < 0 || _i >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i]);
				_r$2 = s.Alignof(f.object.typ); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				a = _r$2;
				if ((a.$high > max.$high || (a.$high === max.$high && a.$low > max.$low))) {
					max = a;
				}
				_i++;
			/* } */ $s = 8; continue; case 9:
			$s = -1; return max;
		/* } else if ($assertType(_ref, ptrType$12, true)[1] || $assertType(_ref, ptrType$58, true)[1]) { */ case 4:
			t$2 = _ref;
			$s = -1; return s.WordSize;
		/* } else if ($assertType(_ref, ptrType$4, true)[1]) { */ case 5:
			t$3 = _ref.$val;
			if (!(((t$3.Info() & 32) === 0))) {
				$s = -1; return s.WordSize;
			}
		/* } */ case 6:
		_r$3 = s.Sizeof(T); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		a$1 = _r$3;
		if ((a$1.$high < 0 || (a$1.$high === 0 && a$1.$low < 1))) {
			$s = -1; return new $Int64(0, 1);
		}
		_r$4 = isComplex(T); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (_r$4) { */ case 12:
			a$1 = $div64(a$1, (new $Int64(0, 2)), false);
		/* } */ case 13:
		if ((x = s.MaxAlign, (a$1.$high > x.$high || (a$1.$high === x.$high && a$1.$low > x.$low)))) {
			$s = -1; return s.MaxAlign;
		}
		$s = -1; return a$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StdSizes.ptr.prototype.Alignof }; } $f.T = T; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f.a = a; $f.a$1 = a$1; $f.f = f; $f.max = max; $f.s = s; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.t$3 = t$3; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	StdSizes.prototype.Alignof = function(T) { return this.$val.Alignof(T); };
	StdSizes.ptr.prototype.Offsetsof = function(fields) {
		var _i, _r, _r$1, _ref, a, f, fields, i, o, offsets, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; a = $f.a; f = $f.f; fields = $f.fields; i = $f.i; o = $f.o; offsets = $f.offsets; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		offsets = $makeSlice(sliceType$9, fields.$length);
		o = new $Int64(0, 0);
		_ref = fields;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = s.Alignof(f.object.typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			a = _r;
			o = align(o, a);
			((i < 0 || i >= offsets.$length) ? ($throwRuntimeError("index out of range"), undefined) : offsets.$array[offsets.$offset + i] = o);
			_r$1 = s.Sizeof(f.object.typ); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			o = (x = _r$1, new $Int64(o.$high + x.$high, o.$low + x.$low));
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return offsets;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StdSizes.ptr.prototype.Offsetsof }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.a = a; $f.f = f; $f.fields = fields; $f.i = i; $f.o = o; $f.offsets = offsets; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	StdSizes.prototype.Offsetsof = function(fields) { return this.$val.Offsetsof(fields); };
	StdSizes.ptr.prototype.Sizeof = function(T) {
		var T, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, a, k, n, n$1, offsets, s, s$1, t, t$1, t$2, t$3, t$4, x, x$1, x$2, x$3, x$4, x$5, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; a = $f.a; k = $f.k; n = $f.n; n$1 = $f.n$1; offsets = $f.offsets; s = $f.s; s$1 = $f.s$1; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; t$3 = $f.t$3; t$4 = $f.t$4; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = T.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_ref = _r;
		/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$13, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$12, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$30, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$58, true)[1]) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if ($assertType(_ref, ptrType$4, true)[1]) { */ case 2:
			t = _ref.$val;
			_r$1 = isTyped(T); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$r = assert(_r$1); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			k = t.kind;
			if (((k >> 0)) < 17) {
				s$1 = ((k < 0 || k >= basicSizes.length) ? ($throwRuntimeError("index out of range"), undefined) : basicSizes[k]);
				if (s$1 > 0) {
					$s = -1; return (new $Int64(0, s$1));
				}
			}
			if (k === 17) {
				$s = -1; return $mul64(s.WordSize, new $Int64(0, 2));
			}
			$s = 7; continue;
		/* } else if ($assertType(_ref, ptrType$13, true)[1]) { */ case 3:
			t$1 = _ref.$val;
			n = t$1.len;
			if ((n.$high === 0 && n.$low === 0)) {
				$s = -1; return new $Int64(0, 0);
			}
			_r$2 = s.Alignof(t$1.elem); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			a = _r$2;
			_r$3 = s.Sizeof(t$1.elem); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			z = _r$3;
			$s = -1; return (x = $mul64(align(z, a), (new $Int64(n.$high - 0, n.$low - 1))), new $Int64(x.$high + z.$high, x.$low + z.$low));
		/* } else if ($assertType(_ref, ptrType$12, true)[1]) { */ case 4:
			t$2 = _ref.$val;
			$s = -1; return $mul64(s.WordSize, new $Int64(0, 3));
		/* } else if ($assertType(_ref, ptrType$30, true)[1]) { */ case 5:
			t$3 = _ref.$val;
			n$1 = t$3.NumFields();
			if (n$1 === 0) {
				$s = -1; return new $Int64(0, 0);
			}
			_r$4 = s.Offsetsof(t$3.fields); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			offsets = _r$4;
			_r$5 = s.Sizeof((x$4 = t$3.fields, x$5 = n$1 - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])).object.typ); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return (x$1 = (x$2 = n$1 - 1 >> 0, ((x$2 < 0 || x$2 >= offsets.$length) ? ($throwRuntimeError("index out of range"), undefined) : offsets.$array[offsets.$offset + x$2])), x$3 = _r$5, new $Int64(x$1.$high + x$3.$high, x$1.$low + x$3.$low));
		/* } else if ($assertType(_ref, ptrType$58, true)[1]) { */ case 6:
			t$4 = _ref.$val;
			$s = -1; return $mul64(s.WordSize, new $Int64(0, 2));
		/* } */ case 7:
		$s = -1; return s.WordSize;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StdSizes.ptr.prototype.Sizeof }; } $f.T = T; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.a = a; $f.k = k; $f.n = n; $f.n$1 = n$1; $f.offsets = offsets; $f.s = s; $f.s$1 = s$1; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.t$3 = t$3; $f.t$4 = t$4; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	StdSizes.prototype.Sizeof = function(T) { return this.$val.Sizeof(T); };
	SizesFor = function(compiler, arch) {
		var _entry, _tuple, arch, compiler, ok, s;
		if (!(compiler === "gc")) {
			return $ifaceNil;
		}
		_tuple = (_entry = gcArchSizes[$String.keyFor(arch)], _entry !== undefined ? [_entry.v, true] : [ptrType$92.nil, false]);
		s = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return $ifaceNil;
		}
		return s;
	};
	$pkg.SizesFor = SizesFor;
	Config.ptr.prototype.alignof = function(T) {
		var T, _r, _r$1, a, conf, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; _r = $f._r; _r$1 = $f._r$1; a = $f.a; conf = $f.conf; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		conf = this;
		s = conf.Sizes;
		/* */ if (!($interfaceIsEqual(s, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(s, $ifaceNil))) { */ case 1:
			_r = s.Alignof(T); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			a = _r;
			if ((a.$high > 0 || (a.$high === 0 && a.$low >= 1))) {
				$s = -1; return a;
			}
			$panic(new $String("Config.Sizes.Alignof returned an alignment < 1"));
		/* } */ case 2:
		_r$1 = stdSizes.Alignof(T); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Config.ptr.prototype.alignof }; } $f.T = T; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.conf = conf; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Config.prototype.alignof = function(T) { return this.$val.alignof(T); };
	Config.ptr.prototype.offsetsof = function(T) {
		var T, _i, _r, _r$1, _ref, conf, o, offsets, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; conf = $f.conf; o = $f.o; offsets = $f.offsets; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		conf = this;
		offsets = sliceType$9.nil;
		/* */ if (T.NumFields() > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (T.NumFields() > 0) { */ case 1:
			s = conf.Sizes;
			/* */ if (!($interfaceIsEqual(s, $ifaceNil))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(s, $ifaceNil))) { */ case 3:
				_r = s.Offsetsof(T.fields); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				offsets = _r;
				if (!((offsets.$length === T.NumFields()))) {
					$panic(new $String("Config.Sizes.Offsetsof returned the wrong number of offsets"));
				}
				_ref = offsets;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					o = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					if ((o.$high < 0 || (o.$high === 0 && o.$low < 0))) {
						$panic(new $String("Config.Sizes.Offsetsof returned an offset < 0"));
					}
					_i++;
				}
				$s = 5; continue;
			/* } else { */ case 4:
				_r$1 = stdSizes.Offsetsof(T.fields); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				offsets = _r$1;
			/* } */ case 5:
		/* } */ case 2:
		$s = -1; return offsets;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Config.ptr.prototype.offsetsof }; } $f.T = T; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.conf = conf; $f.o = o; $f.offsets = offsets; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Config.prototype.offsetsof = function(T) { return this.$val.offsetsof(T); };
	Config.ptr.prototype.offsetof = function(typ, index) {
		var _i, _r, _r$1, _ref, conf, i, index, o, s, typ, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; conf = $f.conf; i = $f.i; index = $f.index; o = $f.o; s = $f.s; typ = $f.typ; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		conf = this;
		o = new $Int64(0, 0);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = typ.Underlying(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			s = $assertType(_r, ptrType$30);
			_r$1 = conf.offsetsof(s); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			o = (x = (x$1 = _r$1, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])), new $Int64(o.$high + x.$high, o.$low + x.$low));
			typ = (x$2 = s.fields, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i])).object.typ;
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return o;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Config.ptr.prototype.offsetof }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.conf = conf; $f.i = i; $f.index = index; $f.o = o; $f.s = s; $f.typ = typ; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Config.prototype.offsetof = function(typ, index) { return this.$val.offsetof(typ, index); };
	Config.ptr.prototype.sizeof = function(T) {
		var T, _r, _r$1, conf, s, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; _r = $f._r; _r$1 = $f._r$1; conf = $f.conf; s = $f.s; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		conf = this;
		s = conf.Sizes;
		/* */ if (!($interfaceIsEqual(s, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(s, $ifaceNil))) { */ case 1:
			_r = s.Sizeof(T); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			z = _r;
			if ((z.$high > 0 || (z.$high === 0 && z.$low >= 0))) {
				$s = -1; return z;
			}
			$panic(new $String("Config.Sizes.Sizeof returned a size < 0"));
		/* } */ case 2:
		_r$1 = stdSizes.Sizeof(T); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Config.ptr.prototype.sizeof }; } $f.T = T; $f._r = _r; $f._r$1 = _r$1; $f.conf = conf; $f.s = s; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Config.prototype.sizeof = function(T) { return this.$val.sizeof(T); };
	align = function(x, a) {
		var a, x, x$1, x$2, y;
		y = (x$1 = new $Int64(x.$high + a.$high, x.$low + a.$low), new $Int64(x$1.$high - 0, x$1.$low - 1));
		return (x$2 = $div64(y, a, true), new $Int64(y.$high - x$2.$high, y.$low - x$2.$low));
	};
	Checker.ptr.prototype.funcBody = function(decl, name, sig, body) {
		var _r, _r$1, _v, body, check, decl, name, sig, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; body = $f.body; check = $f.check; decl = $f.decl; name = $f.name; sig = $f.sig; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		check = [check];
		check[0] = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			if (name === "") {
				name = "<function literal>";
			}
			_r = fmt.Printf("--- %s: %s {\n", new sliceType$4([new $String(name), sig])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			$deferred.push([fmt.Println, [new sliceType$4([new $String("--- <end>")])]]);
		/* } */ case 2:
		sig.scope.pos = body.Pos();
		sig.scope.end = body.End();
		$deferred.push([(function(check) { return function(ctxt, indent) {
			var ctxt, indent;
			context.copy(check[0].context, ctxt);
			check[0].indent = indent;
		}; })(check), [$clone(check[0].context, context), check[0].indent]]);
		context.copy(check[0].context, new context.ptr(decl, sig.scope, $ifaceNil, sig, false, false));
		check[0].indent = 0;
		$r = check[0].stmtList(0, body.List); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (check[0].context.hasLabel) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (check[0].context.hasLabel) { */ case 5:
			$r = check[0].labels(body); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		if (!(sig.results.Len() > 0)) { _v = false; $s = 10; continue s; }
		_r$1 = check[0].isTerminating(body, ""); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = !_r$1; case 10:
		/* */ if (_v) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (_v) { */ case 8:
			$r = check[0].error(body.Rbrace, "missing return"); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		$r = check[0].usage(sig.scope); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.funcBody }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.body = body; $f.check = check; $f.decl = decl; $f.name = name; $f.sig = sig; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Checker.prototype.funcBody = function(decl, name, sig, body) { return this.$val.funcBody(decl, name, sig, body); };
	Checker.ptr.prototype.usage = function(scope) {
		var _entry, _i, _i$1, _i$2, _keys, _ref, _ref$1, _ref$2, _tuple, check, elem, scope, scope$1, unused, v, v$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _keys = $f._keys; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; check = $f.check; elem = $f.elem; scope = $f.scope; scope$1 = $f.scope$1; unused = $f.unused; v = $f.v; v$1 = $f.v$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		unused = [unused];
		check = this;
		unused[0] = sliceType$6.nil;
		_ref = scope.elems;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			elem = _entry.v;
			_tuple = $assertType(elem, ptrType$10, true);
			v = _tuple[0];
			if (!(v === ptrType$10.nil) && !v.used) {
				unused[0] = $append(unused[0], v);
			}
			_i++;
		}
		$r = sort.Slice(unused[0], (function(unused) { return function(i, j) {
			var i, j;
			return ((i < 0 || i >= unused[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : unused[0].$array[unused[0].$offset + i]).object.pos < ((j < 0 || j >= unused[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : unused[0].$array[unused[0].$offset + j]).object.pos;
		}; })(unused)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref$1 = unused[0];
		_i$1 = 0;
		/* while (true) { */ case 2:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 3; continue; }
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			$r = check.softErrorf(v$1.object.pos, "%s declared but not used", new sliceType$4([new $String(v$1.object.name)])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i$1++;
		/* } */ $s = 2; continue; case 3:
		_ref$2 = scope.children;
		_i$2 = 0;
		/* while (true) { */ case 5:
			/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 6; continue; }
			scope$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
			/* */ if (!scope$1.isFunc) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!scope$1.isFunc) { */ case 7:
				$r = check.usage(scope$1); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
			_i$2++;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.usage }; } $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._keys = _keys; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f.check = check; $f.elem = elem; $f.scope = scope; $f.scope$1 = scope$1; $f.unused = unused; $f.v = v; $f.v$1 = v$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.usage = function(scope) { return this.$val.usage(scope); };
	Checker.ptr.prototype.simpleStmt = function(s) {
		var check, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; check = $f.check; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		/* */ if (!($interfaceIsEqual(s, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(s, $ifaceNil))) { */ case 1:
			$r = check.stmt(0, s); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.simpleStmt }; } $f.check = check; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.simpleStmt = function(s) { return this.$val.simpleStmt(s); };
	trimTrailingEmptyStmts = function(list) {
		var _tuple, i, list, ok, x;
		i = list.$length;
		while (true) {
			if (!(i > 0)) { break; }
			_tuple = $assertType((x = i - 1 >> 0, ((x < 0 || x >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + x])), ptrType$85, true);
			ok = _tuple[1];
			if (!ok) {
				return $subslice(list, 0, i);
			}
			i = i - (1) >> 0;
		}
		return sliceType$27.nil;
	};
	Checker.ptr.prototype.stmtList = function(ctxt, list) {
		var _i, _ref, check, ctxt, i, inner, inner$1, list, ok, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; check = $f.check; ctxt = $f.ctxt; i = $f.i; inner = $f.inner; inner$1 = $f.inner$1; list = $f.list; ok = $f.ok; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		ok = !((((ctxt & 4) >>> 0) === 0));
		inner = (ctxt & ~4) >>> 0;
		list = trimTrailingEmptyStmts(list);
		_ref = list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			inner$1 = inner;
			if (ok && ((i + 1 >> 0) === list.$length)) {
				inner$1 = (inner$1 | (4)) >>> 0;
			}
			$r = check.stmt(inner$1, s); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.stmtList }; } $f._i = _i; $f._ref = _ref; $f.check = check; $f.ctxt = ctxt; $f.i = i; $f.inner = inner; $f.inner$1 = inner$1; $f.list = list; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.stmtList = function(ctxt, list) { return this.$val.stmtList(ctxt, list); };
	Checker.ptr.prototype.multipleDefaults = function(list) {
		var _arg, _arg$1, _i, _r, _r$1, _r$2, _r$3, _ref, _ref$1, c, c$1, c$2, check, d, first, list, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; c$1 = $f.c$1; c$2 = $f.c$2; check = $f.check; d = $f.d; first = $f.first; list = $f.list; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		first = $ifaceNil;
		_ref = list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			d = $ifaceNil;
			_ref$1 = s;
			/* */ if ($assertType(_ref$1, ptrType$70, true)[1]) { $s = 3; continue; }
			/* */ if ($assertType(_ref$1, ptrType$73, true)[1]) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ($assertType(_ref$1, ptrType$70, true)[1]) { */ case 3:
				c = _ref$1.$val;
				if (c.List.$length === 0) {
					d = s;
				}
				$s = 6; continue;
			/* } else if ($assertType(_ref$1, ptrType$73, true)[1]) { */ case 4:
				c$1 = _ref$1.$val;
				if ($interfaceIsEqual(c$1.Comm, $ifaceNil)) {
					d = s;
				}
				$s = 6; continue;
			/* } else { */ case 5:
				c$2 = _ref$1;
				_r = s.Pos(); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = check.invalidAST(_r, "case/communication clause expected", new sliceType$4([])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
			/* */ if (!($interfaceIsEqual(d, $ifaceNil))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!($interfaceIsEqual(d, $ifaceNil))) { */ case 9:
				/* */ if (!($interfaceIsEqual(first, $ifaceNil))) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!($interfaceIsEqual(first, $ifaceNil))) { */ case 11:
					_r$1 = d.Pos(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_arg = _r$1;
					_r$2 = first.Pos(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$3 = check.fset.Position(_r$2); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_arg$1 = (x = _r$3, new x.constructor.elem(x));
					$r = check.errorf(_arg, "multiple defaults (first at %s)", new sliceType$4([_arg$1])); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 13; continue;
				/* } else { */ case 12:
					first = d;
				/* } */ case 13:
			/* } */ case 10:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.multipleDefaults }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.c$1 = c$1; $f.c$2 = c$2; $f.check = check; $f.d = d; $f.first = first; $f.list = list; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.multipleDefaults = function(list) { return this.$val.multipleDefaults(list); };
	Checker.ptr.prototype.openScope = function(s, comment) {
		var _arg, _arg$1, _arg$2, _arg$3, _r, _r$1, _r$2, check, comment, s, scope, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; check = $f.check; comment = $f.comment; s = $f.s; scope = $f.scope; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_arg = check.context.scope;
		_r = s.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = _r;
		_r$1 = s.End(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$2 = _r$1;
		_arg$3 = comment;
		_r$2 = NewScope(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		scope = _r$2;
		check.recordScope(s, scope);
		check.context.scope = scope;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.openScope }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.check = check; $f.comment = comment; $f.s = s; $f.scope = scope; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.openScope = function(s, comment) { return this.$val.openScope(s, comment); };
	Checker.ptr.prototype.closeScope = function() {
		var check;
		check = this;
		check.context.scope = check.context.scope.Parent();
	};
	Checker.prototype.closeScope = function() { return this.$val.closeScope(); };
	assignOp = function(op) {
		var op;
		if (23 <= op && op <= 33) {
			return op + -11 >> 0;
		}
		return 0;
	};
	Checker.ptr.prototype.suspendedCall = function(keyword, call) {
		var _1, _r, _r$1, call, check, keyword, msg, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; call = $f.call; check = $f.check; keyword = $f.keyword; msg = $f.msg; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = [x];
		check = this;
		x[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
		msg = "";
			_r = check.rawExpr(x[0], call, $ifaceNil); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_1 = _r;
			if (_1 === (0)) {
				msg = "requires function call, not conversion";
			} else if (_1 === (1)) {
				msg = "discards result of";
			} else if (_1 === (2)) {
				$s = -1; return;
			} else {
				unreachable();
			}
		case 1:
		_r$1 = x[0].pos(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$r = check.errorf(_r$1, "%s %s %s", new sliceType$4([new $String(keyword), new $String(msg), x[0]])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.suspendedCall }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.call = call; $f.check = check; $f.keyword = keyword; $f.msg = msg; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.suspendedCall = function(keyword, call) { return this.$val.suspendedCall(keyword, call); };
	goVal = function(val) {
		var _1, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, ok, ok$1, ok$2, val, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; val = $f.val; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(val, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
			_r = val.Kind(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_1 = _r;
			/* */ if (_1 === (3)) { $s = 3; continue; }
			/* */ if (_1 === (4)) { $s = 4; continue; }
			/* */ if (_1 === (2)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (3)) { */ case 3:
				_r$1 = constant.Int64Val(val); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				x = _tuple[0];
				ok = _tuple[1];
				if (ok) {
					$s = -1; return x;
				}
				_r$2 = constant.Uint64Val(val); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				x$1 = _tuple$1[0];
				ok$1 = _tuple$1[1];
				if (ok$1) {
					$s = -1; return x$1;
				}
				$s = 6; continue;
			/* } else if (_1 === (4)) { */ case 4:
				_r$3 = constant.Float64Val(val); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$2 = _r$3;
				x$2 = _tuple$2[0];
				ok$2 = _tuple$2[1];
				if (ok$2) {
					$s = -1; return new $Float64(x$2);
				}
				$s = 6; continue;
			/* } else if (_1 === (2)) { */ case 5:
				_r$4 = constant.StringVal(val); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return new $String(_r$4);
			/* } */ case 6:
		case 1:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: goVal }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.val = val; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.ptr.prototype.caseValues = function(x, values, seen) {
		var _entry, _entry$1, _i, _i$1, _key, _r, _r$1, _r$2, _r$3, _ref, _ref$1, check, e, res, seen, v, val, values, vt, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; check = $f.check; e = $f.e; res = $f.res; seen = $f.seen; v = $f.v; val = $f.val; values = $f.values; vt = $f.vt; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_ref = values;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			res = [res];
			v = [v];
			e = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			v[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
			$r = check.expr(v[0], e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if ((x.mode === 0) || (v[0].mode === 0)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((x.mode === 0) || (v[0].mode === 0)) { */ case 4:
				_i++;
				/* continue L; */ $s = 1; continue s;
			/* } */ case 5:
			$r = check.convertUntyped(v[0], x.typ); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (v[0].mode === 0) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (v[0].mode === 0) { */ case 7:
				_i++;
				/* continue L; */ $s = 1; continue s;
			/* } */ case 8:
			res[0] = $clone(v[0], operand);
			$r = check.comparison(res[0], x, 39); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (res[0].mode === 0) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (res[0].mode === 0) { */ case 10:
				_i++;
				/* continue L; */ $s = 1; continue s;
			/* } */ case 11:
			/* */ if (!((v[0].mode === 4))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (!((v[0].mode === 4))) { */ case 12:
				_i++;
				/* continue L; */ $s = 1; continue s;
			/* } */ case 13:
			_r = goVal(v[0].val); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			val = _r;
			/* */ if (!($interfaceIsEqual(val, $ifaceNil))) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (!($interfaceIsEqual(val, $ifaceNil))) { */ case 15:
				_ref$1 = (_entry = seen[$emptyInterface.keyFor(val)], _entry !== undefined ? _entry.v : sliceType$28.nil);
				_i$1 = 0;
				/* while (true) { */ case 17:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 18; continue; }
					vt = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), valueType);
					_r$1 = Identical(v[0].typ, vt.typ); /* */ $s = 21; case 21: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (_r$1) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (_r$1) { */ case 19:
						_r$2 = v[0].pos(); /* */ $s = 22; case 22: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$r = check.errorf(_r$2, "duplicate case %s in expression switch", new sliceType$4([v[0]])); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$r = check.error(vt.pos, "\tprevious case"); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i++;
						/* continue L; */ $s = 1; continue s;
					/* } */ case 20:
					_i$1++;
				/* } */ $s = 17; continue; case 18:
				_r$3 = v[0].pos(); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_key = val; (seen || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: $append((_entry$1 = seen[$emptyInterface.keyFor(val)], _entry$1 !== undefined ? _entry$1.v : sliceType$28.nil), new valueType.ptr(_r$3, v[0].typ)) };
			/* } */ case 16:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.caseValues }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f.check = check; $f.e = e; $f.res = res; $f.seen = seen; $f.v = v; $f.val = val; $f.values = values; $f.vt = vt; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.caseValues = function(x, values, seen) { return this.$val.caseValues(x, values, seen); };
	Checker.ptr.prototype.caseTypes = function(x, xtyp, types, seen) {
		var T, Ts, _entry, _i, _i$1, _key, _keys, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _ref$1, _v, _v$1, check, e, pos, seen, t, types, x, xtyp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; Ts = $f.Ts; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; _v$1 = $f._v$1; check = $f.check; e = $f.e; pos = $f.pos; seen = $f.seen; t = $f.t; types = $f.types; x = $f.x; xtyp = $f.xtyp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		T = $ifaceNil;
		check = this;
		_ref = types;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			e = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = check.typOrNil(e); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			T = _r;
			/* */ if ($interfaceIsEqual(T, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ($interfaceIsEqual(T, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]))) { */ case 4:
				_i++;
				/* continue L; */ $s = 1; continue s;
			/* } */ case 5:
			_ref$1 = seen;
			_i$1 = 0;
			_keys = $keys(_ref$1);
			/* while (true) { */ case 6:
				/* if (!(_i$1 < _keys.length)) { break; } */ if(!(_i$1 < _keys.length)) { $s = 7; continue; }
				_entry = _ref$1[_keys[_i$1]];
				if (_entry === undefined) {
					_i$1++;
					/* continue; */ $s = 6; continue;
				}
				t = _entry.k;
				pos = _entry.v;
				if ($interfaceIsEqual(T, $ifaceNil) && $interfaceIsEqual(t, $ifaceNil)) { _v = true; $s = 10; continue s; }
				if (!(!($interfaceIsEqual(T, $ifaceNil)) && !($interfaceIsEqual(t, $ifaceNil)))) { _v$1 = false; $s = 11; continue s; }
				_r$1 = Identical(T, t); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = _r$1; case 11:
				_v = _v$1; case 10:
				/* */ if (_v) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_v) { */ case 8:
					Ts = "nil";
					/* */ if (!($interfaceIsEqual(T, $ifaceNil))) { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if (!($interfaceIsEqual(T, $ifaceNil))) { */ case 13:
						_r$2 = T.String(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						Ts = _r$2;
					/* } */ case 14:
					_r$3 = e.Pos(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$r = check.errorf(_r$3, "duplicate case %s in type switch", new sliceType$4([new $String(Ts)])); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = check.error(pos, "\tprevious case"); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
					/* continue L; */ $s = 1; continue s;
				/* } */ case 9:
				_i$1++;
			/* } */ $s = 6; continue; case 7:
			_r$4 = e.Pos(); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_key = T; (seen || $throwRuntimeError("assignment to entry in nil map"))[Type.keyFor(_key)] = { k: _key, v: _r$4 };
			/* */ if (!($interfaceIsEqual(T, $ifaceNil))) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (!($interfaceIsEqual(T, $ifaceNil))) { */ case 20:
				_r$5 = e.Pos(); /* */ $s = 22; case 22: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$r = check.typeAssertion(_r$5, x, xtyp, T); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 21:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return T;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.caseTypes }; } $f.T = T; $f.Ts = Ts; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f._v$1 = _v$1; $f.check = check; $f.e = e; $f.pos = pos; $f.seen = seen; $f.t = t; $f.types = types; $f.x = x; $f.xtyp = xtyp; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.caseTypes = function(x, xtyp, types, seen) { return this.$val.caseTypes(x, xtyp, types, seen); };
	Checker.ptr.prototype.stmt = function(ctxt, s) {
		var T, Y, _1, _2, _3, _4, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _i$6, _i$7, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$10, _ref$11, _ref$12, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _ref$7, _ref$8, _ref$9, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _v, _v$1, alt, c, ch, check, clause, clause$1, clause$2, ctxt, expr, guard, guard$1, guard$2, i, i$1, i$2, ident, inner, inner$1, key, kind, lhs, lhs$1, lhs$2, lhs$3, lhsVars, msg, msg$1, n, name, obj, obj$1, obj$2, obj$3, ok, op, op$1, res, rhs, rhs$1, rhs$2, s, s$1, s$10, s$11, s$12, s$13, s$14, s$15, s$16, s$17, s$18, s$19, s$2, s$20, s$21, s$22, s$23, s$24, s$25, s$3, s$4, s$5, s$6, s$7, s$8, s$9, scopePos, scopePos$1, seen, seen$1, tch, typ, typ$1, typ$2, typ$3, typ$4, typ$5, typ$6, typ$7, typ$8, used, v, val, valid, vars, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, xtyp, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; Y = $f.Y; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _i$6 = $f._i$6; _i$7 = $f._i$7; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$10 = $f._ref$10; _ref$11 = $f._ref$11; _ref$12 = $f._ref$12; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _ref$7 = $f._ref$7; _ref$8 = $f._ref$8; _ref$9 = $f._ref$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; _v = $f._v; _v$1 = $f._v$1; alt = $f.alt; c = $f.c; ch = $f.ch; check = $f.check; clause = $f.clause; clause$1 = $f.clause$1; clause$2 = $f.clause$2; ctxt = $f.ctxt; expr = $f.expr; guard = $f.guard; guard$1 = $f.guard$1; guard$2 = $f.guard$2; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; ident = $f.ident; inner = $f.inner; inner$1 = $f.inner$1; key = $f.key; kind = $f.kind; lhs = $f.lhs; lhs$1 = $f.lhs$1; lhs$2 = $f.lhs$2; lhs$3 = $f.lhs$3; lhsVars = $f.lhsVars; msg = $f.msg; msg$1 = $f.msg$1; n = $f.n; name = $f.name; obj = $f.obj; obj$1 = $f.obj$1; obj$2 = $f.obj$2; obj$3 = $f.obj$3; ok = $f.ok; op = $f.op; op$1 = $f.op$1; res = $f.res; rhs = $f.rhs; rhs$1 = $f.rhs$1; rhs$2 = $f.rhs$2; s = $f.s; s$1 = $f.s$1; s$10 = $f.s$10; s$11 = $f.s$11; s$12 = $f.s$12; s$13 = $f.s$13; s$14 = $f.s$14; s$15 = $f.s$15; s$16 = $f.s$16; s$17 = $f.s$17; s$18 = $f.s$18; s$19 = $f.s$19; s$2 = $f.s$2; s$20 = $f.s$20; s$21 = $f.s$21; s$22 = $f.s$22; s$23 = $f.s$23; s$24 = $f.s$24; s$25 = $f.s$25; s$3 = $f.s$3; s$4 = $f.s$4; s$5 = $f.s$5; s$6 = $f.s$6; s$7 = $f.s$7; s$8 = $f.s$8; s$9 = $f.s$9; scopePos = $f.scopePos; scopePos$1 = $f.scopePos$1; seen = $f.seen; seen$1 = $f.seen$1; tch = $f.tch; typ = $f.typ; typ$1 = $f.typ$1; typ$2 = $f.typ$2; typ$3 = $f.typ$3; typ$4 = $f.typ$4; typ$5 = $f.typ$5; typ$6 = $f.typ$6; typ$7 = $f.typ$7; typ$8 = $f.typ$8; used = $f.used; v = $f.v; val = $f.val; valid = $f.valid; vars = $f.vars; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; xtyp = $f.xtyp; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		ch = [ch];
		check = [check];
		x = [x];
		x$1 = [x$1];
		x$2 = [x$2];
		x$3 = [x$3];
		x$4 = [x$4];
		x$5 = [x$5];
		x$6 = [x$6];
		x$7 = [x$7];
		x$8 = [x$8];
		check[0] = this;
		assert($interfaceIsEqual(check[0].context.iota, $ifaceNil));
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$deferred.push([(function(ch, check, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8) { return function(scope) {
				var p, scope;
				p = $recover();
				if (!($interfaceIsEqual(p, $ifaceNil))) {
					$panic(p);
				}
				assert(scope === check[0].context.scope);
			}; })(ch, check, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8), [check[0].context.scope]]);
		/* } */ case 2:
		inner = (ctxt & ~12) >>> 0;
		_ref = s;
		/* */ if ($assertType(_ref, ptrType$84, true)[1] || $assertType(_ref, ptrType$85, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$67, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$64, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$90, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$86, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$87, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$68, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref, ptrType$88, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref, ptrType$89, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref, ptrType$91, true)[1]) { $s = 12; continue; }
		/* */ if ($assertType(_ref, ptrType$66, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref, ptrType$32, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref, ptrType$69, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref, ptrType$71, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, ptrType$72, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, ptrType$74, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, ptrType$75, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, ptrType$76, true)[1]) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if ($assertType(_ref, ptrType$84, true)[1] || $assertType(_ref, ptrType$85, true)[1]) { */ case 3:
			s$1 = _ref;
			$s = 22; continue;
		/* } else if ($assertType(_ref, ptrType$67, true)[1]) { */ case 4:
			s$2 = _ref.$val;
			$r = check[0].declStmt(s$2.Decl); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 22; continue;
		/* } else if ($assertType(_ref, ptrType$64, true)[1]) { */ case 5:
			s$3 = _ref.$val;
			check[0].context.hasLabel = true;
			$r = check[0].stmt(ctxt, s$3.Stmt); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 22; continue;
		/* } else if ($assertType(_ref, ptrType$90, true)[1]) { */ case 6:
			s$4 = _ref.$val;
			x[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
			_r = check[0].rawExpr(x[0], s$4.X, $ifaceNil); /* */ $s = 25; case 25: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			kind = _r;
			msg = "";
			_1 = x[0].mode;
			if (_1 === (2)) {
				msg = "must be called";
			} else if (_1 === (3)) {
				msg = "is not an expression";
			} else {
				if (kind === 2) {
					$s = -1; return;
				}
				msg = "is not used";
			}
			_r$1 = x[0].pos(); /* */ $s = 26; case 26: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$r = check[0].errorf(_r$1, "%s %s", new sliceType$4([x[0], new $String(msg)])); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 22; continue;
		/* } else if ($assertType(_ref, ptrType$86, true)[1]) { */ case 7:
			s$5 = _ref.$val;
			_tmp = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
			_tmp$1 = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
			ch[0] = $clone(_tmp, operand);
			x$1[0] = $clone(_tmp$1, operand);
			$r = check[0].expr(ch[0], s$5.Chan); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = check[0].expr(x$1[0], s$5.Value); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if ((ch[0].mode === 0) || (x$1[0].mode === 0)) {
				$s = -1; return;
			}
			_r$2 = ch[0].typ.Underlying(); /* */ $s = 30; case 30: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = $assertType(_r$2, ptrType$14, true);
			tch = _tuple[0];
			ok = _tuple[1];
			/* */ if (!ok) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (!ok) { */ case 31:
				$r = check[0].invalidOp(s$5.Arrow, "cannot send to non-chan type %s", new sliceType$4([ch[0].typ])); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 32:
			/* */ if (tch.dir === 2) { $s = 34; continue; }
			/* */ $s = 35; continue;
			/* if (tch.dir === 2) { */ case 34:
				$r = check[0].invalidOp(s$5.Arrow, "cannot send to receive-only type %s", new sliceType$4([tch])); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 35:
			$r = check[0].assignment(x$1[0], tch.elem, "send"); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 22; continue;
		/* } else if ($assertType(_ref, ptrType$87, true)[1]) { */ case 8:
			s$6 = _ref.$val;
			op = 0;
				_2 = s$6.Tok;
				/* */ if (_2 === (37)) { $s = 39; continue; }
				/* */ if (_2 === (38)) { $s = 40; continue; }
				/* */ $s = 41; continue;
				/* if (_2 === (37)) { */ case 39:
					op = 12;
					$s = 42; continue;
				/* } else if (_2 === (38)) { */ case 40:
					op = 13;
					$s = 42; continue;
				/* } else { */ case 41:
					$r = check[0].invalidAST(s$6.TokPos, "unknown inc/dec operation %s", new sliceType$4([new token.Token(s$6.Tok)])); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 42:
			case 38:
			x$2[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
			$r = check[0].expr(x$2[0], s$6.X); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (x$2[0].mode === 0) {
				$s = -1; return;
			}
			_r$3 = isNumeric(x$2[0].typ); /* */ $s = 47; case 47: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 45; continue; }
			/* */ $s = 46; continue;
			/* if (!_r$3) { */ case 45:
				_r$4 = s$6.X.Pos(); /* */ $s = 48; case 48: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$r = check[0].invalidOp(_r$4, "%s%s (non-numeric type %s)", new sliceType$4([s$6.X, new token.Token(s$6.Tok), x$2[0].typ])); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 46:
			_r$5 = s$6.X.Pos(); /* */ $s = 50; case 50: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			Y = new ast.BasicLit.ptr(_r$5, 5, "1");
			$r = check[0].binary(x$2[0], ptrType$57.nil, s$6.X, Y, op); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (x$2[0].mode === 0) {
				$s = -1; return;
			}
			_r$6 = check[0].assignVar(s$6.X, x$2[0]); /* */ $s = 52; case 52: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			$s = 22; continue;
		/* } else if ($assertType(_ref, ptrType$68, true)[1]) { */ case 9:
			s$7 = _ref.$val;
				_3 = s$7.Tok;
				/* */ if ((_3 === (42)) || (_3 === (47))) { $s = 54; continue; }
				/* */ $s = 55; continue;
				/* if ((_3 === (42)) || (_3 === (47))) { */ case 54:
					/* */ if (s$7.Lhs.$length === 0) { $s = 57; continue; }
					/* */ $s = 58; continue;
					/* if (s$7.Lhs.$length === 0) { */ case 57:
						_r$7 = s$7.Pos(); /* */ $s = 59; case 59: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						$r = check[0].invalidAST(_r$7, "missing lhs in assignment", new sliceType$4([])); /* */ $s = 60; case 60: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
					/* } */ case 58:
					/* */ if (s$7.Tok === 47) { $s = 61; continue; }
					/* */ $s = 62; continue;
					/* if (s$7.Tok === 47) { */ case 61:
						$r = check[0].shortVarDecl(s$7.TokPos, s$7.Lhs, s$7.Rhs); /* */ $s = 64; case 64: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 63; continue;
					/* } else { */ case 62:
						$r = check[0].assignVars(s$7.Lhs, s$7.Rhs); /* */ $s = 65; case 65: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 63:
					$s = 56; continue;
				/* } else { */ case 55:
					/* */ if (!((s$7.Lhs.$length === 1)) || !((s$7.Rhs.$length === 1))) { $s = 66; continue; }
					/* */ $s = 67; continue;
					/* if (!((s$7.Lhs.$length === 1)) || !((s$7.Rhs.$length === 1))) { */ case 66:
						$r = check[0].errorf(s$7.TokPos, "assignment operation %s requires single-valued expressions", new sliceType$4([new token.Token(s$7.Tok)])); /* */ $s = 68; case 68: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
					/* } */ case 67:
					op$1 = assignOp(s$7.Tok);
					/* */ if (op$1 === 0) { $s = 69; continue; }
					/* */ $s = 70; continue;
					/* if (op$1 === 0) { */ case 69:
						$r = check[0].invalidAST(s$7.TokPos, "unknown assignment operation %s", new sliceType$4([new token.Token(s$7.Tok)])); /* */ $s = 71; case 71: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
					/* } */ case 70:
					x$3[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
					$r = check[0].binary(x$3[0], ptrType$57.nil, (x$9 = s$7.Lhs, (0 >= x$9.$length ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + 0])), (x$10 = s$7.Rhs, (0 >= x$10.$length ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + 0])), op$1); /* */ $s = 72; case 72: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (x$3[0].mode === 0) {
						$s = -1; return;
					}
					_r$8 = check[0].assignVar((x$11 = s$7.Lhs, (0 >= x$11.$length ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + 0])), x$3[0]); /* */ $s = 73; case 73: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$8;
				/* } */ case 56:
			case 53:
			$s = 22; continue;
		/* } else if ($assertType(_ref, ptrType$88, true)[1]) { */ case 10:
			s$8 = _ref.$val;
			$r = check[0].suspendedCall("go", s$8.Call); /* */ $s = 74; case 74: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 22; continue;
		/* } else if ($assertType(_ref, ptrType$89, true)[1]) { */ case 11:
			s$9 = _ref.$val;
			$r = check[0].suspendedCall("defer", s$9.Call); /* */ $s = 75; case 75: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 22; continue;
		/* } else if ($assertType(_ref, ptrType$91, true)[1]) { */ case 12:
			s$10 = _ref.$val;
			res = check[0].context.sig.results;
			/* */ if (res.Len() > 0) { $s = 76; continue; }
			/* */ if (s$10.Results.$length > 0) { $s = 77; continue; }
			/* */ $s = 78; continue;
			/* if (res.Len() > 0) { */ case 76:
				/* */ if ((s$10.Results.$length === 0) && !((x$12 = res.vars, (0 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 0])).object.name === "")) { $s = 79; continue; }
				/* */ $s = 80; continue;
				/* if ((s$10.Results.$length === 0) && !((x$12 = res.vars, (0 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 0])).object.name === "")) { */ case 79:
					_ref$1 = res.vars;
					_i = 0;
					/* while (true) { */ case 82:
						/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 83; continue; }
						obj = ((_i < 0 || _i >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i]);
						_r$9 = check[0].context.scope.LookupParent(obj.object.name, check[0].pos); /* */ $s = 84; case 84: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_tuple$1 = _r$9;
						alt = _tuple$1[1];
						/* */ if (!($interfaceIsEqual(alt, $ifaceNil)) && !($interfaceIsEqual(alt, obj))) { $s = 85; continue; }
						/* */ $s = 86; continue;
						/* if (!($interfaceIsEqual(alt, $ifaceNil)) && !($interfaceIsEqual(alt, obj))) { */ case 85:
							$r = check[0].errorf(s$10.Pos(), "result parameter %s not in scope at return", new sliceType$4([new $String(obj.object.name)])); /* */ $s = 87; case 87: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							_r$10 = alt.Pos(); /* */ $s = 88; case 88: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
							$r = check[0].errorf(_r$10, "\tinner declaration of %s", new sliceType$4([obj])); /* */ $s = 89; case 89: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 86:
						_i++;
					/* } */ $s = 82; continue; case 83:
					$s = 81; continue;
				/* } else { */ case 80:
					$r = check[0].initVars(res.vars, s$10.Results, s$10.Return); /* */ $s = 90; case 90: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 81:
				$s = 78; continue;
			/* } else if (s$10.Results.$length > 0) { */ case 77:
				_r$11 = (x$13 = s$10.Results, (0 >= x$13.$length ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + 0])).Pos(); /* */ $s = 91; case 91: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				$r = check[0].error(_r$11, "no result values expected"); /* */ $s = 92; case 92: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = check[0].use(s$10.Results); /* */ $s = 93; case 93: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 78:
			$s = 22; continue;
		/* } else if ($assertType(_ref, ptrType$66, true)[1]) { */ case 13:
			s$11 = _ref.$val;
			if (!(s$11.Label === ptrType$7.nil)) {
				check[0].context.hasLabel = true;
				$s = -1; return;
			}
				_4 = s$11.Tok;
				/* */ if (_4 === (61)) { $s = 95; continue; }
				/* */ if (_4 === (65)) { $s = 96; continue; }
				/* */ if (_4 === (69)) { $s = 97; continue; }
				/* */ $s = 98; continue;
				/* if (_4 === (61)) { */ case 95:
					/* */ if (((ctxt & 1) >>> 0) === 0) { $s = 100; continue; }
					/* */ $s = 101; continue;
					/* if (((ctxt & 1) >>> 0) === 0) { */ case 100:
						$r = check[0].error(s$11.Pos(), "break not in for, switch, or select statement"); /* */ $s = 102; case 102: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 101:
					$s = 99; continue;
				/* } else if (_4 === (65)) { */ case 96:
					/* */ if (((ctxt & 2) >>> 0) === 0) { $s = 103; continue; }
					/* */ $s = 104; continue;
					/* if (((ctxt & 2) >>> 0) === 0) { */ case 103:
						$r = check[0].error(s$11.Pos(), "continue not in for statement"); /* */ $s = 105; case 105: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 104:
					$s = 99; continue;
				/* } else if (_4 === (69)) { */ case 97:
					/* */ if (((ctxt & 4) >>> 0) === 0) { $s = 106; continue; }
					/* */ $s = 107; continue;
					/* if (((ctxt & 4) >>> 0) === 0) { */ case 106:
						msg$1 = "fallthrough statement out of place";
						if (!((((ctxt & 8) >>> 0) === 0))) {
							msg$1 = "cannot fallthrough final case in switch";
						}
						$r = check[0].error(s$11.Pos(), msg$1); /* */ $s = 108; case 108: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 107:
					$s = 99; continue;
				/* } else { */ case 98:
					$r = check[0].invalidAST(s$11.Pos(), "branch statement: %s", new sliceType$4([new token.Token(s$11.Tok)])); /* */ $s = 109; case 109: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 99:
			case 94:
			$s = 22; continue;
		/* } else if ($assertType(_ref, ptrType$32, true)[1]) { */ case 14:
			s$12 = _ref.$val;
			$r = check[0].openScope(s$12, "block"); /* */ $s = 110; case 110: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$deferred.push([$methodVal(check[0], "closeScope"), []]);
			$r = check[0].stmtList(inner, s$12.List); /* */ $s = 111; case 111: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 22; continue;
		/* } else if ($assertType(_ref, ptrType$69, true)[1]) { */ case 15:
			s$13 = _ref.$val;
			$r = check[0].openScope(s$13, "if"); /* */ $s = 112; case 112: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$deferred.push([$methodVal(check[0], "closeScope"), []]);
			$r = check[0].simpleStmt(s$13.Init); /* */ $s = 113; case 113: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			x$4[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
			$r = check[0].expr(x$4[0], s$13.Cond); /* */ $s = 114; case 114: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (!(!((x$4[0].mode === 0)))) { _v = false; $s = 117; continue s; }
			_r$12 = isBoolean(x$4[0].typ); /* */ $s = 118; case 118: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_v = !_r$12; case 117:
			/* */ if (_v) { $s = 115; continue; }
			/* */ $s = 116; continue;
			/* if (_v) { */ case 115:
				_r$13 = s$13.Cond.Pos(); /* */ $s = 119; case 119: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				$r = check[0].error(_r$13, "non-boolean condition in if statement"); /* */ $s = 120; case 120: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 116:
			$r = check[0].stmt(inner, s$13.Body); /* */ $s = 121; case 121: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_ref$2 = s$13.Else;
			/* */ if (_ref$2 === $ifaceNil || $assertType(_ref$2, ptrType$84, true)[1]) { $s = 122; continue; }
			/* */ if ($assertType(_ref$2, ptrType$69, true)[1] || $assertType(_ref$2, ptrType$32, true)[1]) { $s = 123; continue; }
			/* */ $s = 124; continue;
			/* if (_ref$2 === $ifaceNil || $assertType(_ref$2, ptrType$84, true)[1]) { */ case 122:
				$s = 125; continue;
			/* } else if ($assertType(_ref$2, ptrType$69, true)[1] || $assertType(_ref$2, ptrType$32, true)[1]) { */ case 123:
				$r = check[0].stmt(inner, s$13.Else); /* */ $s = 126; case 126: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 125; continue;
			/* } else { */ case 124:
				_r$14 = s$13.Else.Pos(); /* */ $s = 127; case 127: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				$r = check[0].error(_r$14, "invalid else branch in if statement"); /* */ $s = 128; case 128: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 125:
			$s = 22; continue;
		/* } else if ($assertType(_ref, ptrType$71, true)[1]) { */ case 16:
			s$14 = _ref.$val;
			inner = (inner | (1)) >>> 0;
			$r = check[0].openScope(s$14, "switch"); /* */ $s = 129; case 129: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$deferred.push([$methodVal(check[0], "closeScope"), []]);
			$r = check[0].simpleStmt(s$14.Init); /* */ $s = 130; case 130: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			x$5[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
			/* */ if (!($interfaceIsEqual(s$14.Tag, $ifaceNil))) { $s = 131; continue; }
			/* */ $s = 132; continue;
			/* if (!($interfaceIsEqual(s$14.Tag, $ifaceNil))) { */ case 131:
				$r = check[0].expr(x$5[0], s$14.Tag); /* */ $s = 134; case 134: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = check[0].assignment(x$5[0], $ifaceNil, "switch expression"); /* */ $s = 135; case 135: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 133; continue;
			/* } else { */ case 132:
				x$5[0].mode = 4;
				x$5[0].typ = (1 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 1]);
				x$5[0].val = constant.MakeBool(true);
				x$5[0].expr = new ast.Ident.ptr(s$14.Body.Lbrace, "true", ptrType$93.nil);
			/* } */ case 133:
			$r = check[0].multipleDefaults(s$14.Body.List); /* */ $s = 136; case 136: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			seen = {};
			_ref$3 = s$14.Body.List;
			_i$1 = 0;
			/* while (true) { */ case 137:
				/* if (!(_i$1 < _ref$3.$length)) { break; } */ if(!(_i$1 < _ref$3.$length)) { $s = 138; continue; }
				i = _i$1;
				c = ((_i$1 < 0 || _i$1 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$1]);
				_tuple$2 = $assertType(c, ptrType$70, true);
				clause = _tuple$2[0];
				/* */ if (clause === ptrType$70.nil) { $s = 139; continue; }
				/* */ $s = 140; continue;
				/* if (clause === ptrType$70.nil) { */ case 139:
					_r$15 = c.Pos(); /* */ $s = 141; case 141: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					$r = check[0].invalidAST(_r$15, "incorrect expression switch case", new sliceType$4([])); /* */ $s = 142; case 142: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$1++;
					/* continue; */ $s = 137; continue;
				/* } */ case 140:
				$r = check[0].caseValues(x$5[0], clause.List, seen); /* */ $s = 143; case 143: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = check[0].openScope(clause, "case"); /* */ $s = 144; case 144: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				inner$1 = inner;
				if ((i + 1 >> 0) < s$14.Body.List.$length) {
					inner$1 = (inner$1 | (4)) >>> 0;
				} else {
					inner$1 = (inner$1 | (8)) >>> 0;
				}
				$r = check[0].stmtList(inner$1, clause.Body); /* */ $s = 145; case 145: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				check[0].closeScope();
				_i$1++;
			/* } */ $s = 137; continue; case 138:
			$s = 22; continue;
		/* } else if ($assertType(_ref, ptrType$72, true)[1]) { */ case 17:
			s$15 = _ref.$val;
			inner = (inner | (1)) >>> 0;
			$r = check[0].openScope(s$15, "type switch"); /* */ $s = 146; case 146: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$deferred.push([$methodVal(check[0], "closeScope"), []]);
			$r = check[0].simpleStmt(s$15.Init); /* */ $s = 147; case 147: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			lhs = ptrType$7.nil;
			rhs = $ifaceNil;
			_ref$4 = s$15.Assign;
			/* */ if ($assertType(_ref$4, ptrType$90, true)[1]) { $s = 148; continue; }
			/* */ if ($assertType(_ref$4, ptrType$68, true)[1]) { $s = 149; continue; }
			/* */ $s = 150; continue;
			/* if ($assertType(_ref$4, ptrType$90, true)[1]) { */ case 148:
				guard = _ref$4.$val;
				rhs = guard.X;
				$s = 151; continue;
			/* } else if ($assertType(_ref$4, ptrType$68, true)[1]) { */ case 149:
				guard$1 = _ref$4.$val;
				/* */ if (!((guard$1.Lhs.$length === 1)) || !((guard$1.Tok === 47)) || !((guard$1.Rhs.$length === 1))) { $s = 152; continue; }
				/* */ $s = 153; continue;
				/* if (!((guard$1.Lhs.$length === 1)) || !((guard$1.Tok === 47)) || !((guard$1.Rhs.$length === 1))) { */ case 152:
					$r = check[0].invalidAST(s$15.Pos(), "incorrect form of type switch guard", new sliceType$4([])); /* */ $s = 154; case 154: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 153:
				_tuple$3 = $assertType((x$14 = guard$1.Lhs, (0 >= x$14.$length ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + 0])), ptrType$7, true);
				lhs = _tuple$3[0];
				/* */ if (lhs === ptrType$7.nil) { $s = 155; continue; }
				/* */ $s = 156; continue;
				/* if (lhs === ptrType$7.nil) { */ case 155:
					$r = check[0].invalidAST(s$15.Pos(), "incorrect form of type switch guard", new sliceType$4([])); /* */ $s = 157; case 157: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 156:
				/* */ if (lhs.Name === "_") { $s = 158; continue; }
				/* */ $s = 159; continue;
				/* if (lhs.Name === "_") { */ case 158:
					$r = check[0].softErrorf(lhs.Pos(), "no new variable on left side of :=", new sliceType$4([])); /* */ $s = 161; case 161: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					lhs = ptrType$7.nil;
					$s = 160; continue;
				/* } else { */ case 159:
					check[0].recordDef(lhs, $ifaceNil);
				/* } */ case 160:
				rhs = (x$15 = guard$1.Rhs, (0 >= x$15.$length ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + 0]));
				$s = 151; continue;
			/* } else { */ case 150:
				guard$2 = _ref$4;
				$r = check[0].invalidAST(s$15.Pos(), "incorrect form of type switch guard", new sliceType$4([])); /* */ $s = 162; case 162: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 151:
			_tuple$4 = $assertType(rhs, ptrType$45, true);
			expr = _tuple$4[0];
			/* */ if (expr === ptrType$45.nil || !($interfaceIsEqual(expr.Type, $ifaceNil))) { $s = 163; continue; }
			/* */ $s = 164; continue;
			/* if (expr === ptrType$45.nil || !($interfaceIsEqual(expr.Type, $ifaceNil))) { */ case 163:
				$r = check[0].invalidAST(s$15.Pos(), "incorrect form of type switch guard", new sliceType$4([])); /* */ $s = 165; case 165: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 164:
			x$6[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
			$r = check[0].expr(x$6[0], expr.X); /* */ $s = 166; case 166: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (x$6[0].mode === 0) {
				$s = -1; return;
			}
			_r$16 = x$6[0].typ.Underlying(); /* */ $s = 167; case 167: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_tuple$5 = $assertType(_r$16, ptrType$58, true);
			xtyp = _tuple$5[0];
			/* */ if (xtyp === ptrType$58.nil) { $s = 168; continue; }
			/* */ $s = 169; continue;
			/* if (xtyp === ptrType$58.nil) { */ case 168:
				_r$17 = x$6[0].pos(); /* */ $s = 170; case 170: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				$r = check[0].errorf(_r$17, "%s is not an interface", new sliceType$4([x$6[0]])); /* */ $s = 171; case 171: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 169:
			$r = check[0].multipleDefaults(s$15.Body.List); /* */ $s = 172; case 172: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			lhsVars = sliceType$6.nil;
			seen$1 = {};
			_ref$5 = s$15.Body.List;
			_i$2 = 0;
			/* while (true) { */ case 173:
				/* if (!(_i$2 < _ref$5.$length)) { break; } */ if(!(_i$2 < _ref$5.$length)) { $s = 174; continue; }
				s$20 = ((_i$2 < 0 || _i$2 >= _ref$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$5.$array[_ref$5.$offset + _i$2]);
				_tuple$6 = $assertType(s$20, ptrType$70, true);
				clause$1 = _tuple$6[0];
				/* */ if (clause$1 === ptrType$70.nil) { $s = 175; continue; }
				/* */ $s = 176; continue;
				/* if (clause$1 === ptrType$70.nil) { */ case 175:
					_r$18 = s$20.Pos(); /* */ $s = 177; case 177: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					$r = check[0].invalidAST(_r$18, "incorrect type switch case", new sliceType$4([])); /* */ $s = 178; case 178: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$2++;
					/* continue; */ $s = 173; continue;
				/* } */ case 176:
				_r$19 = check[0].caseTypes(x$6[0], xtyp, clause$1.List, seen$1); /* */ $s = 179; case 179: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				T = _r$19;
				$r = check[0].openScope(clause$1, "case"); /* */ $s = 180; case 180: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (!(lhs === ptrType$7.nil)) { $s = 181; continue; }
				/* */ $s = 182; continue;
				/* if (!(lhs === ptrType$7.nil)) { */ case 181:
					if (!((clause$1.List.$length === 1)) || $interfaceIsEqual(T, $ifaceNil)) {
						T = x$6[0].typ;
					}
					obj$1 = NewVar(lhs.Pos(), check[0].pkg, lhs.Name, T);
					scopePos = clause$1.Pos() + 7 >> 0;
					n = clause$1.List.$length;
					/* */ if (n > 0) { $s = 183; continue; }
					/* */ $s = 184; continue;
					/* if (n > 0) { */ case 183:
						_r$20 = (x$16 = clause$1.List, x$17 = n - 1 >> 0, ((x$17 < 0 || x$17 >= x$16.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$16.$array[x$16.$offset + x$17])).End(); /* */ $s = 185; case 185: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
						scopePos = _r$20;
					/* } */ case 184:
					$r = check[0].declare(check[0].context.scope, ptrType$7.nil, obj$1, scopePos); /* */ $s = 186; case 186: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					check[0].recordImplicit(clause$1, obj$1);
					lhsVars = $append(lhsVars, obj$1);
				/* } */ case 182:
				$r = check[0].stmtList(inner, clause$1.Body); /* */ $s = 187; case 187: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				check[0].closeScope();
				_i$2++;
			/* } */ $s = 173; continue; case 174:
			/* */ if (!(lhs === ptrType$7.nil)) { $s = 188; continue; }
			/* */ $s = 189; continue;
			/* if (!(lhs === ptrType$7.nil)) { */ case 188:
				used = false;
				_ref$6 = lhsVars;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$6.$length)) { break; }
					v = ((_i$3 < 0 || _i$3 >= _ref$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$6.$array[_ref$6.$offset + _i$3]);
					if (v.used) {
						used = true;
					}
					v.used = true;
					_i$3++;
				}
				/* */ if (!used) { $s = 190; continue; }
				/* */ $s = 191; continue;
				/* if (!used) { */ case 190:
					$r = check[0].softErrorf(lhs.Pos(), "%s declared but not used", new sliceType$4([new $String(lhs.Name)])); /* */ $s = 192; case 192: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 191:
			/* } */ case 189:
			$s = 22; continue;
		/* } else if ($assertType(_ref, ptrType$74, true)[1]) { */ case 18:
			s$16 = _ref.$val;
			inner = (inner | (1)) >>> 0;
			$r = check[0].multipleDefaults(s$16.Body.List); /* */ $s = 193; case 193: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_ref$7 = s$16.Body.List;
			_i$4 = 0;
			/* while (true) { */ case 194:
				/* if (!(_i$4 < _ref$7.$length)) { break; } */ if(!(_i$4 < _ref$7.$length)) { $s = 195; continue; }
				s$21 = ((_i$4 < 0 || _i$4 >= _ref$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$7.$array[_ref$7.$offset + _i$4]);
				_tuple$7 = $assertType(s$21, ptrType$73, true);
				clause$2 = _tuple$7[0];
				/* */ if (clause$2 === ptrType$73.nil) { $s = 196; continue; }
				/* */ $s = 197; continue;
				/* if (clause$2 === ptrType$73.nil) { */ case 196:
					_i$4++;
					/* continue; */ $s = 194; continue;
				/* } */ case 197:
				valid = false;
				rhs$1 = $ifaceNil;
				_ref$8 = clause$2.Comm;
				if (_ref$8 === $ifaceNil || $assertType(_ref$8, ptrType$86, true)[1]) {
					s$22 = _ref$8;
					valid = true;
				} else if ($assertType(_ref$8, ptrType$68, true)[1]) {
					s$23 = _ref$8.$val;
					if (s$23.Rhs.$length === 1) {
						rhs$1 = (x$18 = s$23.Rhs, (0 >= x$18.$length ? ($throwRuntimeError("index out of range"), undefined) : x$18.$array[x$18.$offset + 0]));
					}
				} else if ($assertType(_ref$8, ptrType$90, true)[1]) {
					s$24 = _ref$8.$val;
					rhs$1 = s$24.X;
				}
				if (!($interfaceIsEqual(rhs$1, $ifaceNil))) {
					_tuple$8 = $assertType(unparen(rhs$1), ptrType$39, true);
					x$19 = _tuple$8[0];
					if (!(x$19 === ptrType$39.nil) && (x$19.Op === 36)) {
						valid = true;
					}
				}
				/* */ if (!valid) { $s = 198; continue; }
				/* */ $s = 199; continue;
				/* if (!valid) { */ case 198:
					_r$21 = clause$2.Comm.Pos(); /* */ $s = 200; case 200: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
					$r = check[0].error(_r$21, "select case must be send or receive (possibly with assignment)"); /* */ $s = 201; case 201: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$4++;
					/* continue; */ $s = 194; continue;
				/* } */ case 199:
				$r = check[0].openScope(s$21, "case"); /* */ $s = 202; case 202: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (!($interfaceIsEqual(clause$2.Comm, $ifaceNil))) { $s = 203; continue; }
				/* */ $s = 204; continue;
				/* if (!($interfaceIsEqual(clause$2.Comm, $ifaceNil))) { */ case 203:
					$r = check[0].stmt(inner, clause$2.Comm); /* */ $s = 205; case 205: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 204:
				$r = check[0].stmtList(inner, clause$2.Body); /* */ $s = 206; case 206: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				check[0].closeScope();
				_i$4++;
			/* } */ $s = 194; continue; case 195:
			$s = 22; continue;
		/* } else if ($assertType(_ref, ptrType$75, true)[1]) { */ case 19:
			s$17 = _ref.$val;
			inner = (inner | (3)) >>> 0;
			$r = check[0].openScope(s$17, "for"); /* */ $s = 207; case 207: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$deferred.push([$methodVal(check[0], "closeScope"), []]);
			$r = check[0].simpleStmt(s$17.Init); /* */ $s = 208; case 208: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(s$17.Cond, $ifaceNil))) { $s = 209; continue; }
			/* */ $s = 210; continue;
			/* if (!($interfaceIsEqual(s$17.Cond, $ifaceNil))) { */ case 209:
				x$7[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
				$r = check[0].expr(x$7[0], s$17.Cond); /* */ $s = 211; case 211: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (!(!((x$7[0].mode === 0)))) { _v$1 = false; $s = 214; continue s; }
				_r$22 = isBoolean(x$7[0].typ); /* */ $s = 215; case 215: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				_v$1 = !_r$22; case 214:
				/* */ if (_v$1) { $s = 212; continue; }
				/* */ $s = 213; continue;
				/* if (_v$1) { */ case 212:
					_r$23 = s$17.Cond.Pos(); /* */ $s = 216; case 216: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
					$r = check[0].error(_r$23, "non-boolean condition in for statement"); /* */ $s = 217; case 217: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 213:
			/* } */ case 210:
			$r = check[0].simpleStmt(s$17.Post); /* */ $s = 218; case 218: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$9 = $assertType(s$17.Post, ptrType$68, true);
			s$25 = _tuple$9[0];
			/* */ if (!(s$25 === ptrType$68.nil) && (s$25.Tok === 47)) { $s = 219; continue; }
			/* */ $s = 220; continue;
			/* if (!(s$25 === ptrType$68.nil) && (s$25.Tok === 47)) { */ case 219:
				_r$24 = s$25.Pos(); /* */ $s = 221; case 221: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				$r = check[0].softErrorf(_r$24, "cannot declare in post statement", new sliceType$4([])); /* */ $s = 222; case 222: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = check[0].use(s$25.Lhs); /* */ $s = 223; case 223: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 220:
			$r = check[0].stmt(inner, s$17.Body); /* */ $s = 224; case 224: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 22; continue;
		/* } else if ($assertType(_ref, ptrType$76, true)[1]) { */ case 20:
			s$18 = _ref.$val;
			inner = (inner | (3)) >>> 0;
			$r = check[0].openScope(s$18, "for"); /* */ $s = 225; case 225: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$deferred.push([$methodVal(check[0], "closeScope"), []]);
			x$8[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
			$r = check[0].expr(x$8[0], s$18.X); /* */ $s = 226; case 226: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tmp$2 = $ifaceNil;
			_tmp$3 = $ifaceNil;
			key = _tmp$2;
			val = _tmp$3;
			/* */ if (!((x$8[0].mode === 0))) { $s = 227; continue; }
			/* */ $s = 228; continue;
			/* if (!((x$8[0].mode === 0))) { */ case 227:
				_r$25 = x$8[0].typ.Underlying(); /* */ $s = 229; case 229: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				_ref$9 = _r$25;
				/* */ if ($assertType(_ref$9, ptrType$4, true)[1]) { $s = 230; continue; }
				/* */ if ($assertType(_ref$9, ptrType$13, true)[1]) { $s = 231; continue; }
				/* */ if ($assertType(_ref$9, ptrType$12, true)[1]) { $s = 232; continue; }
				/* */ if ($assertType(_ref$9, ptrType$17, true)[1]) { $s = 233; continue; }
				/* */ if ($assertType(_ref$9, ptrType$15, true)[1]) { $s = 234; continue; }
				/* */ if ($assertType(_ref$9, ptrType$14, true)[1]) { $s = 235; continue; }
				/* */ $s = 236; continue;
				/* if ($assertType(_ref$9, ptrType$4, true)[1]) { */ case 230:
					typ = _ref$9.$val;
					_r$26 = isString(typ); /* */ $s = 239; case 239: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
					/* */ if (_r$26) { $s = 237; continue; }
					/* */ $s = 238; continue;
					/* if (_r$26) { */ case 237:
						key = (2 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 2]);
						val = universeRune;
					/* } */ case 238:
					$s = 236; continue;
				/* } else if ($assertType(_ref$9, ptrType$13, true)[1]) { */ case 231:
					typ$1 = _ref$9.$val;
					key = (2 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 2]);
					val = typ$1.elem;
					$s = 236; continue;
				/* } else if ($assertType(_ref$9, ptrType$12, true)[1]) { */ case 232:
					typ$2 = _ref$9.$val;
					key = (2 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 2]);
					val = typ$2.elem;
					$s = 236; continue;
				/* } else if ($assertType(_ref$9, ptrType$17, true)[1]) { */ case 233:
					typ$3 = _ref$9.$val;
					_r$27 = typ$3.base.Underlying(); /* */ $s = 240; case 240: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					_tuple$10 = $assertType(_r$27, ptrType$13, true);
					typ$6 = _tuple$10[0];
					if (!(typ$6 === ptrType$13.nil)) {
						key = (2 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 2]);
						val = typ$6.elem;
					}
					$s = 236; continue;
				/* } else if ($assertType(_ref$9, ptrType$15, true)[1]) { */ case 234:
					typ$4 = _ref$9.$val;
					key = typ$4.key;
					val = typ$4.elem;
					$s = 236; continue;
				/* } else if ($assertType(_ref$9, ptrType$14, true)[1]) { */ case 235:
					typ$5 = _ref$9.$val;
					key = typ$5.elem;
					val = (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]);
					/* */ if (typ$5.dir === 1) { $s = 241; continue; }
					/* */ $s = 242; continue;
					/* if (typ$5.dir === 1) { */ case 241:
						_r$28 = x$8[0].pos(); /* */ $s = 243; case 243: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
						$r = check[0].errorf(_r$28, "cannot range over send-only channel %s", new sliceType$4([x$8[0]])); /* */ $s = 244; case 244: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 242:
					/* */ if (!($interfaceIsEqual(s$18.Value, $ifaceNil))) { $s = 245; continue; }
					/* */ $s = 246; continue;
					/* if (!($interfaceIsEqual(s$18.Value, $ifaceNil))) { */ case 245:
						_r$29 = s$18.Value.Pos(); /* */ $s = 247; case 247: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
						$r = check[0].errorf(_r$29, "iteration over %s permits only one iteration variable", new sliceType$4([x$8[0]])); /* */ $s = 248; case 248: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 246:
				/* } */ case 236:
			/* } */ case 228:
			/* */ if ($interfaceIsEqual(key, $ifaceNil)) { $s = 249; continue; }
			/* */ $s = 250; continue;
			/* if ($interfaceIsEqual(key, $ifaceNil)) { */ case 249:
				_r$30 = x$8[0].pos(); /* */ $s = 251; case 251: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				$r = check[0].errorf(_r$30, "cannot range over %s", new sliceType$4([x$8[0]])); /* */ $s = 252; case 252: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 250:
			lhs$1 = $toNativeArray($kindInterface, [s$18.Key, s$18.Value]);
			rhs$2 = $toNativeArray($kindInterface, [key, val]);
			/* */ if (s$18.Tok === 47) { $s = 253; continue; }
			/* */ $s = 254; continue;
			/* if (s$18.Tok === 47) { */ case 253:
				vars = sliceType$6.nil;
				_ref$10 = lhs$1;
				_i$5 = 0;
				/* while (true) { */ case 256:
					/* if (!(_i$5 < 2)) { break; } */ if(!(_i$5 < 2)) { $s = 257; continue; }
					i$1 = _i$5;
					lhs$2 = ((_i$5 < 0 || _i$5 >= _ref$10.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$10[_i$5]);
					/* */ if ($interfaceIsEqual(lhs$2, $ifaceNil)) { $s = 258; continue; }
					/* */ $s = 259; continue;
					/* if ($interfaceIsEqual(lhs$2, $ifaceNil)) { */ case 258:
						_i$5++;
						/* continue; */ $s = 256; continue;
					/* } */ case 259:
					obj$2 = ptrType$10.nil;
					_tuple$11 = $assertType(lhs$2, ptrType$7, true);
					ident = _tuple$11[0];
					/* */ if (!(ident === ptrType$7.nil)) { $s = 260; continue; }
					/* */ $s = 261; continue;
					/* if (!(ident === ptrType$7.nil)) { */ case 260:
						name = ident.Name;
						obj$2 = NewVar(ident.Pos(), check[0].pkg, name, $ifaceNil);
						check[0].recordDef(ident, obj$2);
						if (!(name === "_")) {
							vars = $append(vars, obj$2);
						}
						$s = 262; continue;
					/* } else { */ case 261:
						_r$31 = lhs$2.Pos(); /* */ $s = 263; case 263: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
						$r = check[0].errorf(_r$31, "cannot declare %s", new sliceType$4([lhs$2])); /* */ $s = 264; case 264: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_r$32 = lhs$2.Pos(); /* */ $s = 265; case 265: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
						_r$33 = NewVar(_r$32, check[0].pkg, "_", $ifaceNil); /* */ $s = 266; case 266: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
						obj$2 = _r$33;
					/* } */ case 262:
					typ$7 = ((i$1 < 0 || i$1 >= rhs$2.length) ? ($throwRuntimeError("index out of range"), undefined) : rhs$2[i$1]);
					/* */ if (!($interfaceIsEqual(typ$7, $ifaceNil))) { $s = 267; continue; }
					/* */ $s = 268; continue;
					/* if (!($interfaceIsEqual(typ$7, $ifaceNil))) { */ case 267:
						x$8[0].mode = 7;
						x$8[0].expr = lhs$2;
						x$8[0].typ = typ$7;
						_r$34 = check[0].initVar(obj$2, x$8[0], "range clause"); /* */ $s = 270; case 270: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
						_r$34;
						$s = 269; continue;
					/* } else { */ case 268:
						obj$2.object.typ = (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]);
						obj$2.used = true;
					/* } */ case 269:
					_i$5++;
				/* } */ $s = 256; continue; case 257:
				/* */ if (vars.$length > 0) { $s = 271; continue; }
				/* */ $s = 272; continue;
				/* if (vars.$length > 0) { */ case 271:
					_r$35 = s$18.X.End(); /* */ $s = 274; case 274: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
					scopePos$1 = _r$35;
					_ref$11 = vars;
					_i$6 = 0;
					/* while (true) { */ case 275:
						/* if (!(_i$6 < _ref$11.$length)) { break; } */ if(!(_i$6 < _ref$11.$length)) { $s = 276; continue; }
						obj$3 = ((_i$6 < 0 || _i$6 >= _ref$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$11.$array[_ref$11.$offset + _i$6]);
						$r = check[0].declare(check[0].context.scope, ptrType$7.nil, obj$3, scopePos$1); /* */ $s = 277; case 277: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i$6++;
					/* } */ $s = 275; continue; case 276:
					$s = 273; continue;
				/* } else { */ case 272:
					$r = check[0].error(s$18.TokPos, "no new variables on left side of :="); /* */ $s = 278; case 278: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 273:
				$s = 255; continue;
			/* } else { */ case 254:
				_ref$12 = lhs$1;
				_i$7 = 0;
				/* while (true) { */ case 279:
					/* if (!(_i$7 < 2)) { break; } */ if(!(_i$7 < 2)) { $s = 280; continue; }
					i$2 = _i$7;
					lhs$3 = ((_i$7 < 0 || _i$7 >= _ref$12.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$12[_i$7]);
					/* */ if ($interfaceIsEqual(lhs$3, $ifaceNil)) { $s = 281; continue; }
					/* */ $s = 282; continue;
					/* if ($interfaceIsEqual(lhs$3, $ifaceNil)) { */ case 281:
						_i$7++;
						/* continue; */ $s = 279; continue;
					/* } */ case 282:
					typ$8 = ((i$2 < 0 || i$2 >= rhs$2.length) ? ($throwRuntimeError("index out of range"), undefined) : rhs$2[i$2]);
					/* */ if (!($interfaceIsEqual(typ$8, $ifaceNil))) { $s = 283; continue; }
					/* */ $s = 284; continue;
					/* if (!($interfaceIsEqual(typ$8, $ifaceNil))) { */ case 283:
						x$8[0].mode = 7;
						x$8[0].expr = lhs$3;
						x$8[0].typ = typ$8;
						_r$36 = check[0].assignVar(lhs$3, x$8[0]); /* */ $s = 285; case 285: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
						_r$36;
					/* } */ case 284:
					_i$7++;
				/* } */ $s = 279; continue; case 280:
			/* } */ case 255:
			$r = check[0].stmt(inner, s$18.Body); /* */ $s = 286; case 286: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 22; continue;
		/* } else { */ case 21:
			s$19 = _ref;
			_r$37 = s$19.Pos(); /* */ $s = 287; case 287: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
			$r = check[0].error(_r$37, "invalid statement"); /* */ $s = 288; case 288: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 22:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.stmt }; } $f.T = T; $f.Y = Y; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._i$6 = _i$6; $f._i$7 = _i$7; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$10 = _ref$10; $f._ref$11 = _ref$11; $f._ref$12 = _ref$12; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._ref$7 = _ref$7; $f._ref$8 = _ref$8; $f._ref$9 = _ref$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f._v = _v; $f._v$1 = _v$1; $f.alt = alt; $f.c = c; $f.ch = ch; $f.check = check; $f.clause = clause; $f.clause$1 = clause$1; $f.clause$2 = clause$2; $f.ctxt = ctxt; $f.expr = expr; $f.guard = guard; $f.guard$1 = guard$1; $f.guard$2 = guard$2; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.ident = ident; $f.inner = inner; $f.inner$1 = inner$1; $f.key = key; $f.kind = kind; $f.lhs = lhs; $f.lhs$1 = lhs$1; $f.lhs$2 = lhs$2; $f.lhs$3 = lhs$3; $f.lhsVars = lhsVars; $f.msg = msg; $f.msg$1 = msg$1; $f.n = n; $f.name = name; $f.obj = obj; $f.obj$1 = obj$1; $f.obj$2 = obj$2; $f.obj$3 = obj$3; $f.ok = ok; $f.op = op; $f.op$1 = op$1; $f.res = res; $f.rhs = rhs; $f.rhs$1 = rhs$1; $f.rhs$2 = rhs$2; $f.s = s; $f.s$1 = s$1; $f.s$10 = s$10; $f.s$11 = s$11; $f.s$12 = s$12; $f.s$13 = s$13; $f.s$14 = s$14; $f.s$15 = s$15; $f.s$16 = s$16; $f.s$17 = s$17; $f.s$18 = s$18; $f.s$19 = s$19; $f.s$2 = s$2; $f.s$20 = s$20; $f.s$21 = s$21; $f.s$22 = s$22; $f.s$23 = s$23; $f.s$24 = s$24; $f.s$25 = s$25; $f.s$3 = s$3; $f.s$4 = s$4; $f.s$5 = s$5; $f.s$6 = s$6; $f.s$7 = s$7; $f.s$8 = s$8; $f.s$9 = s$9; $f.scopePos = scopePos; $f.scopePos$1 = scopePos$1; $f.seen = seen; $f.seen$1 = seen$1; $f.tch = tch; $f.typ = typ; $f.typ$1 = typ$1; $f.typ$2 = typ$2; $f.typ$3 = typ$3; $f.typ$4 = typ$4; $f.typ$5 = typ$5; $f.typ$6 = typ$6; $f.typ$7 = typ$7; $f.typ$8 = typ$8; $f.used = used; $f.v = v; $f.val = val; $f.valid = valid; $f.vars = vars; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.xtyp = xtyp; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Checker.prototype.stmt = function(ctxt, s) { return this.$val.stmt(ctxt, s); };
	Basic.ptr.prototype.Kind = function() {
		var b;
		b = this;
		return b.kind;
	};
	Basic.prototype.Kind = function() { return this.$val.Kind(); };
	Basic.ptr.prototype.Info = function() {
		var b;
		b = this;
		return b.info;
	};
	Basic.prototype.Info = function() { return this.$val.Info(); };
	Basic.ptr.prototype.Name = function() {
		var b;
		b = this;
		return b.name;
	};
	Basic.prototype.Name = function() { return this.$val.Name(); };
	Array.ptr.prototype.Len = function() {
		var a;
		a = this;
		return a.len;
	};
	Array.prototype.Len = function() { return this.$val.Len(); };
	Array.ptr.prototype.Elem = function() {
		var a;
		a = this;
		return a.elem;
	};
	Array.prototype.Elem = function() { return this.$val.Elem(); };
	NewSlice = function(elem) {
		var elem;
		return new Slice.ptr(elem);
	};
	$pkg.NewSlice = NewSlice;
	Slice.ptr.prototype.Elem = function() {
		var s;
		s = this;
		return s.elem;
	};
	Slice.prototype.Elem = function() { return this.$val.Elem(); };
	Struct.ptr.prototype.NumFields = function() {
		var s;
		s = this;
		return s.fields.$length;
	};
	Struct.prototype.NumFields = function() { return this.$val.NumFields(); };
	Struct.ptr.prototype.Field = function(i) {
		var i, s, x;
		s = this;
		return (x = s.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
	};
	Struct.prototype.Field = function(i) { return this.$val.Field(i); };
	Struct.ptr.prototype.Tag = function(i) {
		var i, s, x;
		s = this;
		if (i < s.tags.$length) {
			return (x = s.tags, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		}
		return "";
	};
	Struct.prototype.Tag = function(i) { return this.$val.Tag(i); };
	NewPointer = function(elem) {
		var elem;
		return new Pointer.ptr(elem);
	};
	$pkg.NewPointer = NewPointer;
	Pointer.ptr.prototype.Elem = function() {
		var p;
		p = this;
		return p.base;
	};
	Pointer.prototype.Elem = function() { return this.$val.Elem(); };
	NewTuple = function(x) {
		var x;
		if (x.$length > 0) {
			return new Tuple.ptr(x);
		}
		return ptrType$16.nil;
	};
	$pkg.NewTuple = NewTuple;
	Tuple.ptr.prototype.Len = function() {
		var t;
		t = this;
		if (!(t === ptrType$16.nil)) {
			return t.vars.$length;
		}
		return 0;
	};
	Tuple.prototype.Len = function() { return this.$val.Len(); };
	Tuple.ptr.prototype.At = function(i) {
		var i, t, x;
		t = this;
		return (x = t.vars, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
	};
	Tuple.prototype.At = function(i) { return this.$val.At(i); };
	Signature.ptr.prototype.Recv = function() {
		var s;
		s = this;
		return s.recv;
	};
	Signature.prototype.Recv = function() { return this.$val.Recv(); };
	Signature.ptr.prototype.Params = function() {
		var s;
		s = this;
		return s.params;
	};
	Signature.prototype.Params = function() { return this.$val.Params(); };
	Signature.ptr.prototype.Results = function() {
		var s;
		s = this;
		return s.results;
	};
	Signature.prototype.Results = function() { return this.$val.Results(); };
	Signature.ptr.prototype.Variadic = function() {
		var s;
		s = this;
		return s.variadic;
	};
	Signature.prototype.Variadic = function() { return this.$val.Variadic(); };
	NewInterface = function(methods, embeddeds) {
		var _i, _r, _ref, embeddeds, m, methods, mset, mset$24ptr, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; embeddeds = $f.embeddeds; m = $f.m; methods = $f.methods; mset = $f.mset; mset$24ptr = $f.mset$24ptr; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		typ = new Interface.ptr(sliceType$1.nil, sliceType$2.nil, sliceType$1.nil);
		if ((methods.$length === 0) && (embeddeds.$length === 0)) {
			$s = -1; return typ;
		}
		mset = false;
		_ref = methods;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			m = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = (mset$24ptr || (mset$24ptr = new ptrType$31(function() { return mset; }, function($v) { mset = $v; }))).insert(m); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(_r, $ifaceNil))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(_r, $ifaceNil))) { */ case 3:
				$panic(new $String("multiple methods with the same name"));
			/* } */ case 4:
			$assertType(m.object.typ, ptrType$19).recv = NewVar(m.object.pos, m.object.pkg, "", typ);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$r = sort.Sort(($subslice(new byUniqueMethodName(methods.$array), methods.$offset, methods.$offset + methods.$length))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!(embeddeds === sliceType$2.nil)) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!(embeddeds === sliceType$2.nil)) { */ case 7:
			$r = sort.Sort(($subslice(new byUniqueTypeName(embeddeds.$array), embeddeds.$offset, embeddeds.$offset + embeddeds.$length))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		typ.methods = methods;
		typ.embeddeds = embeddeds;
		$s = -1; return typ;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewInterface }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.embeddeds = embeddeds; $f.m = m; $f.methods = methods; $f.mset = mset; $f.mset$24ptr = mset$24ptr; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewInterface = NewInterface;
	Interface.ptr.prototype.NumExplicitMethods = function() {
		var t;
		t = this;
		return t.methods.$length;
	};
	Interface.prototype.NumExplicitMethods = function() { return this.$val.NumExplicitMethods(); };
	Interface.ptr.prototype.ExplicitMethod = function(i) {
		var i, t, x;
		t = this;
		return (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
	};
	Interface.prototype.ExplicitMethod = function(i) { return this.$val.ExplicitMethod(i); };
	Interface.ptr.prototype.NumEmbeddeds = function() {
		var t;
		t = this;
		return t.embeddeds.$length;
	};
	Interface.prototype.NumEmbeddeds = function() { return this.$val.NumEmbeddeds(); };
	Interface.ptr.prototype.Embedded = function(i) {
		var i, t, x;
		t = this;
		return (x = t.embeddeds, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
	};
	Interface.prototype.Embedded = function(i) { return this.$val.Embedded(i); };
	Interface.ptr.prototype.NumMethods = function() {
		var t;
		t = this;
		return t.allMethods.$length;
	};
	Interface.prototype.NumMethods = function() { return this.$val.NumMethods(); };
	Interface.ptr.prototype.Method = function(i) {
		var i, t, x;
		t = this;
		return (x = t.allMethods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
	};
	Interface.prototype.Method = function(i) { return this.$val.Method(i); };
	Interface.ptr.prototype.Empty = function() {
		var t;
		t = this;
		return t.allMethods.$length === 0;
	};
	Interface.prototype.Empty = function() { return this.$val.Empty(); };
	Interface.ptr.prototype.Complete = function() {
		var _i, _i$1, _r, _ref, _ref$1, allMethods, et, it, newm, newmtyp, t, tm, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; allMethods = $f.allMethods; et = $f.et; it = $f.it; newm = $f.newm; newmtyp = $f.newmtyp; t = $f.t; tm = $f.tm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!(t.allMethods === sliceType$1.nil)) {
			$s = -1; return t;
		}
		allMethods = sliceType$1.nil;
		/* */ if (t.embeddeds === sliceType$2.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (t.embeddeds === sliceType$2.nil) { */ case 1:
			if (t.methods === sliceType$1.nil) {
				allMethods = $makeSlice(sliceType$1, 0, 1);
			} else {
				allMethods = t.methods;
			}
			$s = 3; continue;
		/* } else { */ case 2:
			allMethods = $appendSlice(allMethods, t.methods);
			_ref = t.embeddeds;
			_i = 0;
			/* while (true) { */ case 4:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
				et = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				it = $assertType(et.Underlying(), ptrType$58);
				_r = it.Complete(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_ref$1 = it.allMethods;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					newm = [newm];
					newmtyp = [newmtyp];
					tm = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
					newm[0] = $clone(tm, Func);
					newmtyp[0] = $clone($assertType(tm.object.typ, ptrType$19), Signature);
					newm[0].object.typ = newmtyp[0];
					newmtyp[0].recv = NewVar(newm[0].object.pos, newm[0].object.pkg, "", t);
					allMethods = $append(allMethods, newm[0]);
					_i$1++;
				}
				_i++;
			/* } */ $s = 4; continue; case 5:
			$r = sort.Sort(($subslice(new byUniqueMethodName(allMethods.$array), allMethods.$offset, allMethods.$offset + allMethods.$length))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		t.allMethods = allMethods;
		$s = -1; return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Interface.ptr.prototype.Complete }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.allMethods = allMethods; $f.et = et; $f.it = it; $f.newm = newm; $f.newmtyp = newmtyp; $f.t = t; $f.tm = tm; $f.$s = $s; $f.$r = $r; return $f;
	};
	Interface.prototype.Complete = function() { return this.$val.Complete(); };
	Map.ptr.prototype.Key = function() {
		var m;
		m = this;
		return m.key;
	};
	Map.prototype.Key = function() { return this.$val.Key(); };
	Map.ptr.prototype.Elem = function() {
		var m;
		m = this;
		return m.elem;
	};
	Map.prototype.Elem = function() { return this.$val.Elem(); };
	Chan.ptr.prototype.Dir = function() {
		var c;
		c = this;
		return c.dir;
	};
	Chan.prototype.Dir = function() { return this.$val.Dir(); };
	Chan.ptr.prototype.Elem = function() {
		var c;
		c = this;
		return c.elem;
	};
	Chan.prototype.Elem = function() { return this.$val.Elem(); };
	Named.ptr.prototype.Obj = function() {
		var t;
		t = this;
		return t.obj;
	};
	Named.prototype.Obj = function() { return this.$val.Obj(); };
	Named.ptr.prototype.NumMethods = function() {
		var t;
		t = this;
		return t.methods.$length;
	};
	Named.prototype.NumMethods = function() { return this.$val.NumMethods(); };
	Named.ptr.prototype.Method = function(i) {
		var i, t, x;
		t = this;
		return (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
	};
	Named.prototype.Method = function(i) { return this.$val.Method(i); };
	Named.ptr.prototype.SetUnderlying = function(underlying$1) {
		var _tuple, ok, t, underlying$1;
		t = this;
		if ($interfaceIsEqual(underlying$1, $ifaceNil)) {
			$panic(new $String("types.Named.SetUnderlying: underlying type must not be nil"));
		}
		_tuple = $assertType(underlying$1, ptrType$6, true);
		ok = _tuple[1];
		if (ok) {
			$panic(new $String("types.Named.SetUnderlying: underlying type must not be *Named"));
		}
		t.underlying = underlying$1;
	};
	Named.prototype.SetUnderlying = function(underlying$1) { return this.$val.SetUnderlying(underlying$1); };
	Named.ptr.prototype.AddMethod = function(m) {
		var _tuple, i, m, t;
		t = this;
		_tuple = lookupMethod(t.methods, m.object.pkg, m.object.name);
		i = _tuple[0];
		if (i < 0) {
			t.methods = $append(t.methods, m);
		}
	};
	Named.prototype.AddMethod = function(m) { return this.$val.AddMethod(m); };
	Basic.ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t;
	};
	Basic.prototype.Underlying = function() { return this.$val.Underlying(); };
	Array.ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t;
	};
	Array.prototype.Underlying = function() { return this.$val.Underlying(); };
	Slice.ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t;
	};
	Slice.prototype.Underlying = function() { return this.$val.Underlying(); };
	Struct.ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t;
	};
	Struct.prototype.Underlying = function() { return this.$val.Underlying(); };
	Pointer.ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t;
	};
	Pointer.prototype.Underlying = function() { return this.$val.Underlying(); };
	Tuple.ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t;
	};
	Tuple.prototype.Underlying = function() { return this.$val.Underlying(); };
	Signature.ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t;
	};
	Signature.prototype.Underlying = function() { return this.$val.Underlying(); };
	Interface.ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t;
	};
	Interface.prototype.Underlying = function() { return this.$val.Underlying(); };
	Map.ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t;
	};
	Map.prototype.Underlying = function() { return this.$val.Underlying(); };
	Chan.ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t;
	};
	Chan.prototype.Underlying = function() { return this.$val.Underlying(); };
	Named.ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t.underlying;
	};
	Named.prototype.Underlying = function() { return this.$val.Underlying(); };
	Basic.ptr.prototype.String = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = TypeString(t, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Basic.ptr.prototype.String }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Basic.prototype.String = function() { return this.$val.String(); };
	Array.ptr.prototype.String = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = TypeString(t, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Array.ptr.prototype.String }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Array.prototype.String = function() { return this.$val.String(); };
	Slice.ptr.prototype.String = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = TypeString(t, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Slice.ptr.prototype.String }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Slice.prototype.String = function() { return this.$val.String(); };
	Struct.ptr.prototype.String = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = TypeString(t, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Struct.ptr.prototype.String }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Struct.prototype.String = function() { return this.$val.String(); };
	Pointer.ptr.prototype.String = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = TypeString(t, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pointer.ptr.prototype.String }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pointer.prototype.String = function() { return this.$val.String(); };
	Tuple.ptr.prototype.String = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = TypeString(t, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tuple.ptr.prototype.String }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tuple.prototype.String = function() { return this.$val.String(); };
	Signature.ptr.prototype.String = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = TypeString(t, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Signature.ptr.prototype.String }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Signature.prototype.String = function() { return this.$val.String(); };
	Interface.ptr.prototype.String = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = TypeString(t, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Interface.ptr.prototype.String }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Interface.prototype.String = function() { return this.$val.String(); };
	Map.ptr.prototype.String = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = TypeString(t, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.String }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.String = function() { return this.$val.String(); };
	Chan.ptr.prototype.String = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = TypeString(t, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Chan.ptr.prototype.String }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Chan.prototype.String = function() { return this.$val.String(); };
	Named.ptr.prototype.String = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = TypeString(t, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Named.ptr.prototype.String }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Named.prototype.String = function() { return this.$val.String(); };
	TypeString = function(typ, qf) {
		var buf, qf, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; buf = $f.buf; qf = $f.qf; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		buf[0] = new bytes.Buffer.ptr(sliceType$5.nil, 0, arrayType.zero(), 0);
		$r = WriteType(buf[0], typ, qf); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return buf[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: TypeString }; } $f.buf = buf; $f.qf = qf; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TypeString = TypeString;
	WriteType = function(buf, typ, qf) {
		var buf, qf, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; buf = $f.buf; qf = $f.qf; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = writeType(buf, typ, qf, $makeSlice(sliceType$8, 0, 8)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WriteType }; } $f.buf = buf; $f.qf = qf; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.WriteType = WriteType;
	writeType = function(buf, typ, qf, visited) {
		var _1, _2, _i, _i$1, _i$2, _i$3, _i$4, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _tuple, buf, c, empty, f, i, i$1, i$2, i$3, m, m$1, obj, parens, qf, s, s$1, t, t$1, t$10, t$11, t$12, t$13, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9, tag, typ, typ$1, visited, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _tuple = $f._tuple; buf = $f.buf; c = $f.c; empty = $f.empty; f = $f.f; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; m = $f.m; m$1 = $f.m$1; obj = $f.obj; parens = $f.parens; qf = $f.qf; s = $f.s; s$1 = $f.s$1; t = $f.t; t$1 = $f.t$1; t$10 = $f.t$10; t$11 = $f.t$11; t$12 = $f.t$12; t$13 = $f.t$13; t$2 = $f.t$2; t$3 = $f.t$3; t$4 = $f.t$4; t$5 = $f.t$5; t$6 = $f.t$6; t$7 = $f.t$7; t$8 = $f.t$8; t$9 = $f.t$9; tag = $f.tag; typ = $f.typ; typ$1 = $f.typ$1; visited = $f.visited; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = visited;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			t = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if ($interfaceIsEqual(t, typ)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($interfaceIsEqual(t, typ)) { */ case 3:
				_r = fmt.Fprintf(buf, "\xE2\x97\x8B%T", new sliceType$4([typ])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				$s = -1; return;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		visited = $append(visited, typ);
		_ref$1 = typ;
		/* */ if (_ref$1 === $ifaceNil) { $s = 6; continue; }
		/* */ if ($assertType(_ref$1, ptrType$4, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref$1, ptrType$13, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref$1, ptrType$12, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref$1, ptrType$30, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref$1, ptrType$17, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref$1, ptrType$16, true)[1]) { $s = 12; continue; }
		/* */ if ($assertType(_ref$1, ptrType$19, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref$1, ptrType$58, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref$1, ptrType$15, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref$1, ptrType$14, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref$1, ptrType$6, true)[1]) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (_ref$1 === $ifaceNil) { */ case 6:
			t$1 = _ref$1;
			buf.WriteString("<nil>");
			$s = 19; continue;
		/* } else if ($assertType(_ref$1, ptrType$4, true)[1]) { */ case 7:
			t$2 = _ref$1.$val;
			if (t$2.kind === 18) {
				buf.WriteString("unsafe.");
			}
			if (gcCompatibilityMode) {
				_1 = t$2.kind;
				if (_1 === (8)) {
					t$2 = (8 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 8]);
				} else if (_1 === (5)) {
					t$2 = (5 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 5]);
				}
			}
			buf.WriteString(t$2.name);
			$s = 19; continue;
		/* } else if ($assertType(_ref$1, ptrType$13, true)[1]) { */ case 8:
			t$3 = _ref$1.$val;
			_r$1 = fmt.Fprintf(buf, "[%d]", new sliceType$4([t$3.len])); /* */ $s = 20; case 20: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			$r = writeType(buf, t$3.elem, qf, visited); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 19; continue;
		/* } else if ($assertType(_ref$1, ptrType$12, true)[1]) { */ case 9:
			t$4 = _ref$1.$val;
			buf.WriteString("[]");
			$r = writeType(buf, t$4.elem, qf, visited); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 19; continue;
		/* } else if ($assertType(_ref$1, ptrType$30, true)[1]) { */ case 10:
			t$5 = _ref$1.$val;
			buf.WriteString("struct{");
			_ref$2 = t$5.fields;
			_i$1 = 0;
			/* while (true) { */ case 23:
				/* if (!(_i$1 < _ref$2.$length)) { break; } */ if(!(_i$1 < _ref$2.$length)) { $s = 24; continue; }
				i = _i$1;
				f = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$1]);
				if (i > 0) {
					buf.WriteString("; ");
				}
				if (!f.anonymous) {
					buf.WriteString(f.object.name);
					buf.WriteByte(32);
				}
				$r = writeType(buf, f.object.typ, qf, visited); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				tag = t$5.Tag(i);
				/* */ if (!(tag === "")) { $s = 26; continue; }
				/* */ $s = 27; continue;
				/* if (!(tag === "")) { */ case 26:
					_r$2 = fmt.Fprintf(buf, " %q", new sliceType$4([new $String(tag)])); /* */ $s = 28; case 28: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
				/* } */ case 27:
				_i$1++;
			/* } */ $s = 23; continue; case 24:
			buf.WriteByte(125);
			$s = 19; continue;
		/* } else if ($assertType(_ref$1, ptrType$17, true)[1]) { */ case 11:
			t$6 = _ref$1.$val;
			buf.WriteByte(42);
			$r = writeType(buf, t$6.base, qf, visited); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 19; continue;
		/* } else if ($assertType(_ref$1, ptrType$16, true)[1]) { */ case 12:
			t$7 = _ref$1.$val;
			$r = writeTuple(buf, t$7, false, qf, visited); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 19; continue;
		/* } else if ($assertType(_ref$1, ptrType$19, true)[1]) { */ case 13:
			t$8 = _ref$1.$val;
			buf.WriteString("func");
			$r = writeSignature(buf, t$8, qf, visited); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 19; continue;
		/* } else if ($assertType(_ref$1, ptrType$58, true)[1]) { */ case 14:
			t$9 = _ref$1.$val;
			buf.WriteString("interface{");
			empty = true;
			/* */ if (gcCompatibilityMode) { $s = 32; continue; }
			/* */ $s = 33; continue;
			/* if (gcCompatibilityMode) { */ case 32:
				_ref$3 = t$9.allMethods;
				_i$2 = 0;
				/* while (true) { */ case 35:
					/* if (!(_i$2 < _ref$3.$length)) { break; } */ if(!(_i$2 < _ref$3.$length)) { $s = 36; continue; }
					i$1 = _i$2;
					m = ((_i$2 < 0 || _i$2 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$2]);
					if (i$1 > 0) {
						buf.WriteString("; ");
					}
					buf.WriteString(m.object.name);
					$r = writeSignature(buf, $assertType(m.object.typ, ptrType$19), qf, visited); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					empty = false;
					_i$2++;
				/* } */ $s = 35; continue; case 36:
				$s = 34; continue;
			/* } else { */ case 33:
				_ref$4 = t$9.methods;
				_i$3 = 0;
				/* while (true) { */ case 38:
					/* if (!(_i$3 < _ref$4.$length)) { break; } */ if(!(_i$3 < _ref$4.$length)) { $s = 39; continue; }
					i$2 = _i$3;
					m$1 = ((_i$3 < 0 || _i$3 >= _ref$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$4.$array[_ref$4.$offset + _i$3]);
					if (i$2 > 0) {
						buf.WriteString("; ");
					}
					buf.WriteString(m$1.object.name);
					$r = writeSignature(buf, $assertType(m$1.object.typ, ptrType$19), qf, visited); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					empty = false;
					_i$3++;
				/* } */ $s = 38; continue; case 39:
				_ref$5 = t$9.embeddeds;
				_i$4 = 0;
				/* while (true) { */ case 41:
					/* if (!(_i$4 < _ref$5.$length)) { break; } */ if(!(_i$4 < _ref$5.$length)) { $s = 42; continue; }
					i$3 = _i$4;
					typ$1 = ((_i$4 < 0 || _i$4 >= _ref$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$5.$array[_ref$5.$offset + _i$4]);
					if (i$3 > 0 || t$9.methods.$length > 0) {
						buf.WriteString("; ");
					}
					$r = writeType(buf, typ$1, qf, visited); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					empty = false;
					_i$4++;
				/* } */ $s = 41; continue; case 42:
			/* } */ case 34:
			if (t$9.allMethods === sliceType$1.nil || t$9.methods.$length > t$9.allMethods.$length) {
				if (!empty) {
					buf.WriteByte(32);
				}
				buf.WriteString("/* incomplete */");
			}
			buf.WriteByte(125);
			$s = 19; continue;
		/* } else if ($assertType(_ref$1, ptrType$15, true)[1]) { */ case 15:
			t$10 = _ref$1.$val;
			buf.WriteString("map[");
			$r = writeType(buf, t$10.key, qf, visited); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			buf.WriteByte(93);
			$r = writeType(buf, t$10.elem, qf, visited); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 19; continue;
		/* } else if ($assertType(_ref$1, ptrType$14, true)[1]) { */ case 16:
			t$11 = _ref$1.$val;
			s = "";
			parens = false;
			_2 = t$11.dir;
			if (_2 === (0)) {
				s = "chan ";
				_tuple = $assertType(t$11.elem, ptrType$14, true);
				c = _tuple[0];
				if (!(c === ptrType$14.nil) && (c.dir === 2)) {
					parens = true;
				}
			} else if (_2 === (1)) {
				s = "chan<- ";
			} else if (_2 === (2)) {
				s = "<-chan ";
			} else {
				$panic(new $String("unreachable"));
			}
			buf.WriteString(s);
			if (parens) {
				buf.WriteByte(40);
			}
			$r = writeType(buf, t$11.elem, qf, visited); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (parens) {
				buf.WriteByte(41);
			}
			$s = 19; continue;
		/* } else if ($assertType(_ref$1, ptrType$6, true)[1]) { */ case 17:
			t$12 = _ref$1.$val;
			s$1 = "<Named w/o object>";
			obj = t$12.obj;
			/* */ if (!(obj === ptrType$21.nil)) { $s = 47; continue; }
			/* */ $s = 48; continue;
			/* if (!(obj === ptrType$21.nil)) { */ case 47:
				/* */ if (!(obj.object.pkg === ptrType$2.nil)) { $s = 49; continue; }
				/* */ $s = 50; continue;
				/* if (!(obj.object.pkg === ptrType$2.nil)) { */ case 49:
					$r = writePackage(buf, obj.object.pkg, qf); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 50:
				s$1 = obj.object.name;
			/* } */ case 48:
			buf.WriteString(s$1);
			$s = 19; continue;
		/* } else { */ case 18:
			t$13 = _ref$1;
			_r$3 = t$13.String(); /* */ $s = 52; case 52: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = buf.WriteString(_r$3); /* */ $s = 53; case 53: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 19:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: writeType }; } $f._1 = _1; $f._2 = _2; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._tuple = _tuple; $f.buf = buf; $f.c = c; $f.empty = empty; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.m = m; $f.m$1 = m$1; $f.obj = obj; $f.parens = parens; $f.qf = qf; $f.s = s; $f.s$1 = s$1; $f.t = t; $f.t$1 = t$1; $f.t$10 = t$10; $f.t$11 = t$11; $f.t$12 = t$12; $f.t$13 = t$13; $f.t$2 = t$2; $f.t$3 = t$3; $f.t$4 = t$4; $f.t$5 = t$5; $f.t$6 = t$6; $f.t$7 = t$7; $f.t$8 = t$8; $f.t$9 = t$9; $f.tag = tag; $f.typ = typ; $f.typ$1 = typ$1; $f.visited = visited; $f.$s = $s; $f.$r = $r; return $f;
	};
	writeTuple = function(buf, tup, variadic, qf, visited) {
		var _i, _r, _ref, _tuple, _tuple$1, buf, i, ok, ok$1, qf, s, t, tup, typ, v, variadic, visited, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buf = $f.buf; i = $f.i; ok = $f.ok; ok$1 = $f.ok$1; qf = $f.qf; s = $f.s; t = $f.t; tup = $f.tup; typ = $f.typ; v = $f.v; variadic = $f.variadic; visited = $f.visited; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf.WriteByte(40);
		/* */ if (!(tup === ptrType$16.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tup === ptrType$16.nil)) { */ case 1:
			_ref = tup.vars;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				i = _i;
				v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (i > 0) {
					buf.WriteString(", ");
				}
				if (!(v.object.name === "")) {
					buf.WriteString(v.object.name);
					buf.WriteByte(32);
				}
				typ = v.object.typ;
				/* */ if (variadic && (i === (tup.vars.$length - 1 >> 0))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (variadic && (i === (tup.vars.$length - 1 >> 0))) { */ case 5:
					_tuple = $assertType(typ, ptrType$12, true);
					s = _tuple[0];
					ok = _tuple[1];
					/* */ if (ok) { $s = 7; continue; }
					/* */ $s = 8; continue;
					/* if (ok) { */ case 7:
						buf.WriteString("...");
						typ = s.elem;
						$s = 9; continue;
					/* } else { */ case 8:
						_r = typ.Underlying(); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						_tuple$1 = $assertType(_r, ptrType$4, true);
						t = _tuple$1[0];
						ok$1 = _tuple$1[1];
						if (!ok$1 || !((t.kind === 17))) {
							$panic(new $String("internal error: string type expected"));
						}
						$r = writeType(buf, typ, qf, visited); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						buf.WriteString("...");
						_i++;
						/* continue; */ $s = 3; continue;
					/* } */ case 9:
				/* } */ case 6:
				$r = writeType(buf, typ, qf, visited); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		buf.WriteByte(41);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: writeTuple }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.i = i; $f.ok = ok; $f.ok$1 = ok$1; $f.qf = qf; $f.s = s; $f.t = t; $f.tup = tup; $f.typ = typ; $f.v = v; $f.variadic = variadic; $f.visited = visited; $f.$s = $s; $f.$r = $r; return $f;
	};
	WriteSignature = function(buf, sig, qf) {
		var buf, qf, sig, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; buf = $f.buf; qf = $f.qf; sig = $f.sig; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = writeSignature(buf, sig, qf, $makeSlice(sliceType$8, 0, 8)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WriteSignature }; } $f.buf = buf; $f.qf = qf; $f.sig = sig; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.WriteSignature = WriteSignature;
	writeSignature = function(buf, sig, qf, visited) {
		var buf, n, qf, sig, visited, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; buf = $f.buf; n = $f.n; qf = $f.qf; sig = $f.sig; visited = $f.visited; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = writeTuple(buf, sig.params, sig.variadic, qf, visited); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		n = sig.results.Len();
		if (n === 0) {
			$s = -1; return;
		}
		buf.WriteByte(32);
		/* */ if ((n === 1) && (x = sig.results.vars, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).object.name === "") { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ((n === 1) && (x = sig.results.vars, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).object.name === "") { */ case 2:
			$r = writeType(buf, (x$1 = sig.results.vars, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])).object.typ, qf, visited); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 3:
		$r = writeTuple(buf, sig.results, false, qf, visited); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: writeSignature }; } $f.buf = buf; $f.n = n; $f.qf = qf; $f.sig = sig; $f.visited = visited; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.ptr.prototype.ident = function(x, e, def$1, path) {
		var _entry, _i, _i$1, _r, _r$1, _r$2, _ref, _ref$1, _ref$2, _tuple, check, def$1, e, i, obj, obj$1, obj$2, obj$3, obj$4, obj$5, obj$6, obj$7, obj$8, obj$9, path, pkg, prev, scope, typ, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; check = $f.check; def$1 = $f.def$1; e = $f.e; i = $f.i; obj = $f.obj; obj$1 = $f.obj$1; obj$2 = $f.obj$2; obj$3 = $f.obj$3; obj$4 = $f.obj$4; obj$5 = $f.obj$5; obj$6 = $f.obj$6; obj$7 = $f.obj$7; obj$8 = $f.obj$8; obj$9 = $f.obj$9; path = $f.path; pkg = $f.pkg; prev = $f.prev; scope = $f.scope; typ = $f.typ; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		x.mode = 0;
		x.expr = e;
		_r = check.context.scope.LookupParent(e.Name, check.pos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		scope = _tuple[0];
		obj = _tuple[1];
		/* */ if ($interfaceIsEqual(obj, $ifaceNil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($interfaceIsEqual(obj, $ifaceNil)) { */ case 2:
			/* */ if (e.Name === "_") { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (e.Name === "_") { */ case 4:
				$r = check.errorf(e.Pos(), "cannot use _ as value or type", new sliceType$4([])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else { */ case 5:
				$r = check.errorf(e.Pos(), "undeclared name: %s", new sliceType$4([new $String(e.Name)])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
			$s = -1; return;
		/* } */ case 3:
		check.recordUse(e, obj);
		$r = check.objDecl(obj, def$1, path); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = obj.Type(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		typ = _r$1;
		assert(!($interfaceIsEqual(typ, $ifaceNil)));
		_r$2 = obj.Pkg(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		pkg = _r$2;
		if (!(pkg === check.pkg) && !(pkg === ptrType$2.nil)) {
			delete (_entry = check.unusedDotImports[ptrType$1.keyFor(scope)], _entry !== undefined ? _entry.v : false)[ptrType$2.keyFor(pkg)];
		}
		_ref = obj;
		/* */ if ($assertType(_ref, ptrType$20, true)[1]) { $s = 12; continue; }
		/* */ if ($assertType(_ref, ptrType$3, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref, ptrType$21, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref, ptrType$5, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, ptrType$22, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, ptrType$77, true)[1]) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if ($assertType(_ref, ptrType$20, true)[1]) { */ case 12:
			obj$1 = _ref.$val;
			$r = check.errorf(e.Pos(), "use of package %s not in selector", new sliceType$4([new $String(obj$1.object.name)])); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } else if ($assertType(_ref, ptrType$3, true)[1]) { */ case 13:
			obj$2 = _ref.$val;
			check.addDeclDep(obj$2);
			if ($interfaceIsEqual(typ, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]))) {
				$s = -1; return;
			}
			/* */ if (obj$2 === universeIota) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (obj$2 === universeIota) { */ case 22:
				/* */ if ($interfaceIsEqual(check.context.iota, $ifaceNil)) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if ($interfaceIsEqual(check.context.iota, $ifaceNil)) { */ case 25:
					$r = check.errorf(e.Pos(), "cannot use iota outside constant declaration", new sliceType$4([])); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 26:
				x.val = check.context.iota;
				$s = 24; continue;
			/* } else { */ case 23:
				x.val = obj$2.val;
			/* } */ case 24:
			assert(!($interfaceIsEqual(x.val, $ifaceNil)));
			x.mode = 4;
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType$21, true)[1]) { */ case 14:
			obj$3 = _ref.$val;
			x.mode = 3;
			_ref$1 = path;
			_i = 0;
			/* while (true) { */ case 28:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 29; continue; }
				i = _i;
				prev = ((_i < 0 || _i >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i]);
				/* */ if (prev === obj$3) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if (prev === obj$3) { */ case 30:
					$r = check.errorf(obj$3.object.pos, "illegal cycle in declaration of %s", new sliceType$4([new $String(obj$3.object.name)])); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_ref$2 = $subslice(path, i);
					_i$1 = 0;
					/* while (true) { */ case 33:
						/* if (!(_i$1 < _ref$2.$length)) { break; } */ if(!(_i$1 < _ref$2.$length)) { $s = 34; continue; }
						obj$9 = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$1]);
						$r = check.errorf(obj$9.object.Pos(), "\t%s refers to", new sliceType$4([new $String(obj$9.object.Name())])); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i$1++;
					/* } */ $s = 33; continue; case 34:
					$r = check.errorf(obj$3.object.Pos(), "\t%s", new sliceType$4([new $String(obj$3.object.Name())])); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					typ = (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]);
					/* break; */ $s = 29; continue;
				/* } */ case 31:
				_i++;
			/* } */ $s = 28; continue; case 29:
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 15:
			obj$4 = _ref.$val;
			if (obj$4.object.pkg === check.pkg) {
				obj$4.used = true;
			}
			check.addDeclDep(obj$4);
			if ($interfaceIsEqual(typ, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]))) {
				$s = -1; return;
			}
			x.mode = 5;
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType$5, true)[1]) { */ case 16:
			obj$5 = _ref.$val;
			check.addDeclDep(obj$5);
			x.mode = 7;
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType$22, true)[1]) { */ case 17:
			obj$6 = _ref.$val;
			x.id = obj$6.id;
			x.mode = 2;
			$s = 20; continue;
		/* } else if ($assertType(_ref, ptrType$77, true)[1]) { */ case 18:
			obj$7 = _ref.$val;
			x.mode = 7;
			$s = 20; continue;
		/* } else { */ case 19:
			obj$8 = _ref;
			unreachable();
		/* } */ case 20:
		x.typ = typ;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.ident }; } $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f.check = check; $f.def$1 = def$1; $f.e = e; $f.i = i; $f.obj = obj; $f.obj$1 = obj$1; $f.obj$2 = obj$2; $f.obj$3 = obj$3; $f.obj$4 = obj$4; $f.obj$5 = obj$5; $f.obj$6 = obj$6; $f.obj$7 = obj$7; $f.obj$8 = obj$8; $f.obj$9 = obj$9; $f.path = path; $f.pkg = pkg; $f.prev = prev; $f.scope = scope; $f.typ = typ; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.ident = function(x, e, def$1, path) { return this.$val.ident(x, e, def$1, path); };
	Checker.ptr.prototype.typExpr = function(e, def$1, path) {
		var T, _r, _r$1, _r$2, check, def$1, e, path, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; check = $f.check; def$1 = $f.def$1; e = $f.e; path = $f.path; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		T = [T];
		check = [check];
		e = [e];
		T[0] = $ifaceNil;
		check[0] = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			_r = e[0].Pos(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = check[0].trace(_r, "%s", new sliceType$4([e[0]])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			check[0].indent = check[0].indent + (1) >> 0;
			$deferred.push([(function(T, check, e) { return function $b() {
				var _r$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				check[0].indent = check[0].indent - (1) >> 0;
				_r$1 = e[0].Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = check[0].trace(_r$1, "=> %s", new sliceType$4([T[0]])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$1 = _r$1; $f.$s = $s; $f.$r = $r; return $f;
			}; })(T, check, e), []]);
		/* } */ case 2:
		_r$1 = check[0].typExprInternal(e[0], def$1, path); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		T[0] = _r$1;
		_r$2 = isTyped(T[0]); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$r = assert(_r$2); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = check[0].recordTypeAndValue(e[0], 3, T[0], $ifaceNil); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return T[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  T[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.typExpr }; } $f.T = T; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.check = check; $f.def$1 = def$1; $f.e = e; $f.path = path; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Checker.prototype.typExpr = function(e, def$1, path) { return this.$val.typExpr(e, def$1, path); };
	Checker.ptr.prototype.typ = function(e) {
		var _r, check, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; check = $f.check; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_r = check.typExpr(e, ptrType$6.nil, sliceType$16.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.typ }; } $f._r = _r; $f.check = check; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.typ = function(e) { return this.$val.typ(e); };
	Checker.ptr.prototype.funcType = function(sig, recvPar, ftyp) {
		var T, _1, _r, _r$1, _r$2, _r$3, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, check, err, ftyp, params, recv, recvList, recvPar, results, scope, sig, t, u, u$1, variadic, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; check = $f.check; err = $f.err; ftyp = $f.ftyp; params = $f.params; recv = $f.recv; recvList = $f.recvList; recvPar = $f.recvPar; results = $f.results; scope = $f.scope; sig = $f.sig; t = $f.t; u = $f.u; u$1 = $f.u$1; variadic = $f.variadic; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		scope = NewScope(check.context.scope, 0, 0, "function");
		scope.isFunc = true;
		check.recordScope(ftyp, scope);
		_r = check.collectParams(scope, recvPar, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		recvList = _tuple[0];
		_r$1 = check.collectParams(scope, ftyp.Params, true); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		params = _tuple$1[0];
		variadic = _tuple$1[1];
		_r$2 = check.collectParams(scope, ftyp.Results, false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		results = _tuple$2[0];
		/* */ if (!(recvPar === ptrType$83.nil)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(recvPar === ptrType$83.nil)) { */ case 4:
			recv = ptrType$10.nil;
				_1 = recvList.$length;
				/* */ if (_1 === (0)) { $s = 7; continue; }
				/* */ if (_1 === (1)) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_1 === (0)) { */ case 7:
					_r$3 = recvPar.Pos(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$r = check.error(_r$3, "method is missing receiver"); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					recv = NewParam(0, ptrType$2.nil, "", (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]));
					$s = 10; continue;
				/* } else if (_1 === (1)) { */ case 8:
					recv = (0 >= recvList.$length ? ($throwRuntimeError("index out of range"), undefined) : recvList.$array[recvList.$offset + 0]);
					$s = 10; continue;
				/* } else { */ case 9:
					$r = check.error((x = recvList.$length - 1 >> 0, ((x < 0 || x >= recvList.$length) ? ($throwRuntimeError("index out of range"), undefined) : recvList.$array[recvList.$offset + x])).object.Pos(), "method must have exactly one receiver"); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					recv = (0 >= recvList.$length ? ($throwRuntimeError("index out of range"), undefined) : recvList.$array[recvList.$offset + 0]);
				/* } */ case 10:
			case 6:
			_tuple$3 = deref(recv.object.typ);
			t = _tuple$3[0];
			/* */ if (!($interfaceIsEqual(t, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0])))) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!($interfaceIsEqual(t, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0])))) { */ case 14:
				err = "";
				_tuple$4 = $assertType(t, ptrType$6, true);
				T = _tuple$4[0];
				if (!(T === ptrType$6.nil)) {
					if (!(T.obj.object.pkg === check.pkg)) {
						err = "type not defined in this package";
					} else {
						_ref = T.underlying;
						if ($assertType(_ref, ptrType$4, true)[1]) {
							u = _ref.$val;
							if (u.kind === 18) {
								err = "unsafe.Pointer";
							}
						} else if ($assertType(_ref, ptrType$17, true)[1] || $assertType(_ref, ptrType$58, true)[1]) {
							u$1 = _ref;
							err = "pointer or interface type";
						}
					}
				} else {
					err = "basic or unnamed type";
				}
				/* */ if (!(err === "")) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (!(err === "")) { */ case 16:
					$r = check.errorf(recv.object.pos, "invalid receiver %s (%s)", new sliceType$4([recv.object.typ, new $String(err)])); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 17:
			/* } */ case 15:
			sig.recv = recv;
		/* } */ case 5:
		sig.scope = scope;
		sig.params = NewTuple(params);
		sig.results = NewTuple(results);
		sig.variadic = variadic;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.funcType }; } $f.T = T; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.check = check; $f.err = err; $f.ftyp = ftyp; $f.params = params; $f.recv = recv; $f.recvList = recvList; $f.recvPar = recvPar; $f.results = results; $f.scope = scope; $f.sig = sig; $f.t = t; $f.u = u; $f.u$1 = u$1; $f.variadic = variadic; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.funcType = function(sig, recvPar, ftyp) { return this.$val.funcType(sig, recvPar, ftyp); };
	Checker.ptr.prototype.typExprInternal = function(e, def$1, path) {
		var _1, _2, _3, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, check, def$1, dir$1, e, e$1, e$10, e$11, e$12, e$13, e$2, e$3, e$4, e$5, e$6, e$7, e$8, e$9, path, typ, typ$1, typ$10, typ$11, typ$2, typ$3, typ$4, typ$5, typ$6, typ$7, typ$8, typ$9, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; check = $f.check; def$1 = $f.def$1; dir$1 = $f.dir$1; e = $f.e; e$1 = $f.e$1; e$10 = $f.e$10; e$11 = $f.e$11; e$12 = $f.e$12; e$13 = $f.e$13; e$2 = $f.e$2; e$3 = $f.e$3; e$4 = $f.e$4; e$5 = $f.e$5; e$6 = $f.e$6; e$7 = $f.e$7; e$8 = $f.e$8; e$9 = $f.e$9; path = $f.path; typ = $f.typ; typ$1 = $f.typ$1; typ$10 = $f.typ$10; typ$11 = $f.typ$11; typ$2 = $f.typ$2; typ$3 = $f.typ$3; typ$4 = $f.typ$4; typ$5 = $f.typ$5; typ$6 = $f.typ$6; typ$7 = $f.typ$7; typ$8 = $f.typ$8; typ$9 = $f.typ$9; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = [check];
		e$1 = [e$1];
		typ = [typ];
		x = [x];
		x$1 = [x$1];
		check[0] = this;
		_ref = e;
		/* */ if ($assertType(_ref, ptrType$40, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$53, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$7, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$11, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$18, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$48, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$49, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$46, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$50, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref, ptrType$51, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref, ptrType$52, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref, ptrType$54, true)[1]) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ($assertType(_ref, ptrType$40, true)[1]) { */ case 1:
			e$2 = _ref.$val;
			$s = 14; continue;
		/* } else if ($assertType(_ref, ptrType$53, true)[1]) { */ case 2:
			e$3 = _ref.$val;
			typ$1 = (26 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 26]);
			def$1.setUnderlying(typ$1);
			$s = -1; return typ$1;
		/* } else if ($assertType(_ref, ptrType$7, true)[1]) { */ case 3:
			e$4 = _ref.$val;
			x[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
			$r = check[0].ident(x[0], e$4, def$1, path); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_1 = x[0].mode;
				/* */ if (_1 === (3)) { $s = 17; continue; }
				/* */ if (_1 === (0)) { $s = 18; continue; }
				/* */ if (_1 === (1)) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (_1 === (3)) { */ case 17:
					typ$2 = x[0].typ;
					def$1.setUnderlying(typ$2);
					$s = -1; return typ$2;
				/* } else if (_1 === (0)) { */ case 18:
					$s = 21; continue;
				/* } else if (_1 === (1)) { */ case 19:
					_r = x[0].pos(); /* */ $s = 22; case 22: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$r = check[0].errorf(_r, "%s used as type", new sliceType$4([x[0]])); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 21; continue;
				/* } else { */ case 20:
					_r$1 = x[0].pos(); /* */ $s = 24; case 24: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$r = check[0].errorf(_r$1, "%s is not a type", new sliceType$4([x[0]])); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 21:
			case 16:
			$s = 14; continue;
		/* } else if ($assertType(_ref, ptrType$11, true)[1]) { */ case 4:
			e$5 = _ref.$val;
			x$1[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
			$r = check[0].selector(x$1[0], e$5); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_2 = x$1[0].mode;
				/* */ if (_2 === (3)) { $s = 28; continue; }
				/* */ if (_2 === (0)) { $s = 29; continue; }
				/* */ if (_2 === (1)) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if (_2 === (3)) { */ case 28:
					typ$3 = x$1[0].typ;
					def$1.setUnderlying(typ$3);
					$s = -1; return typ$3;
				/* } else if (_2 === (0)) { */ case 29:
					$s = 32; continue;
				/* } else if (_2 === (1)) { */ case 30:
					_r$2 = x$1[0].pos(); /* */ $s = 33; case 33: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = check[0].errorf(_r$2, "%s used as type", new sliceType$4([x$1[0]])); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 32; continue;
				/* } else { */ case 31:
					_r$3 = x$1[0].pos(); /* */ $s = 35; case 35: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$r = check[0].errorf(_r$3, "%s is not a type", new sliceType$4([x$1[0]])); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 32:
			case 27:
			$s = 14; continue;
		/* } else if ($assertType(_ref, ptrType$18, true)[1]) { */ case 5:
			e$6 = _ref.$val;
			_r$4 = check[0].typExpr(e$6.X, def$1, path); /* */ $s = 37; case 37: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return _r$4;
		/* } else if ($assertType(_ref, ptrType$48, true)[1]) { */ case 6:
			e$7 = _ref.$val;
			/* */ if (!($interfaceIsEqual(e$7.Len, $ifaceNil))) { $s = 38; continue; }
			/* */ $s = 39; continue;
			/* if (!($interfaceIsEqual(e$7.Len, $ifaceNil))) { */ case 38:
				typ$4 = new Array.ptr(new $Int64(0, 0), $ifaceNil);
				def$1.setUnderlying(typ$4);
				_r$5 = check[0].arrayLength(e$7.Len); /* */ $s = 41; case 41: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				typ$4.len = _r$5;
				_r$6 = check[0].typExpr(e$7.Elt, ptrType$6.nil, path); /* */ $s = 42; case 42: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				typ$4.elem = _r$6;
				$s = -1; return typ$4;
			/* } else { */ case 39:
				typ$5 = new Slice.ptr($ifaceNil);
				def$1.setUnderlying(typ$5);
				_r$7 = check[0].typ(e$7.Elt); /* */ $s = 43; case 43: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				typ$5.elem = _r$7;
				$s = -1; return typ$5;
			/* } */ case 40:
			$s = 14; continue;
		/* } else if ($assertType(_ref, ptrType$49, true)[1]) { */ case 7:
			e$8 = _ref.$val;
			typ$6 = new Struct.ptr(sliceType$6.nil, sliceType$26.nil);
			def$1.setUnderlying(typ$6);
			$r = check[0].structType(typ$6, e$8, path); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return typ$6;
		/* } else if ($assertType(_ref, ptrType$46, true)[1]) { */ case 8:
			e$9 = _ref.$val;
			typ$7 = new Pointer.ptr($ifaceNil);
			def$1.setUnderlying(typ$7);
			_r$8 = check[0].typ(e$9.X); /* */ $s = 45; case 45: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			typ$7.base = _r$8;
			$s = -1; return typ$7;
		/* } else if ($assertType(_ref, ptrType$50, true)[1]) { */ case 9:
			e$10 = _ref.$val;
			typ$8 = new Signature.ptr(ptrType$1.nil, ptrType$10.nil, ptrType$16.nil, ptrType$16.nil, false);
			def$1.setUnderlying(typ$8);
			$r = check[0].funcType(typ$8, ptrType$83.nil, e$10); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return typ$8;
		/* } else if ($assertType(_ref, ptrType$51, true)[1]) { */ case 10:
			e$11 = _ref.$val;
			typ$9 = new Interface.ptr(sliceType$1.nil, sliceType$2.nil, sliceType$1.nil);
			def$1.setUnderlying(typ$9);
			$r = check[0].interfaceType(typ$9, e$11, def$1, path); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return typ$9;
		/* } else if ($assertType(_ref, ptrType$52, true)[1]) { */ case 11:
			e$1[0] = _ref.$val;
			typ[0] = new Map.ptr($ifaceNil, $ifaceNil);
			def$1.setUnderlying(typ[0]);
			_r$9 = check[0].typ(e$1[0].Key); /* */ $s = 48; case 48: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			typ[0].key = _r$9;
			_r$10 = check[0].typ(e$1[0].Value); /* */ $s = 49; case 49: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			typ[0].elem = _r$10;
			check[0].delay((function(check, e$1, typ, x, x$1) { return function $b() {
				var _r$11, _r$12, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$11 = $f._r$11; _r$12 = $f._r$12; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r$11 = Comparable(typ[0].key); /* */ $s = 3; case 3: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				/* */ if (!_r$11) { $s = 1; continue; }
				/* */ $s = 2; continue;
				/* if (!_r$11) { */ case 1:
					_r$12 = e$1[0].Key.Pos(); /* */ $s = 4; case 4: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					$r = check[0].errorf(_r$12, "invalid map key type %s", new sliceType$4([typ[0].key])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 2:
				$s = -1; return;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$11 = _r$11; $f._r$12 = _r$12; $f.$s = $s; $f.$r = $r; return $f;
			}; })(check, e$1, typ, x, x$1));
			$s = -1; return typ[0];
		/* } else if ($assertType(_ref, ptrType$54, true)[1]) { */ case 12:
			e$12 = _ref.$val;
			typ$10 = new Chan.ptr(0, $ifaceNil);
			def$1.setUnderlying(typ$10);
			dir$1 = 0;
				_3 = e$12.Dir;
				/* */ if (_3 === (3)) { $s = 51; continue; }
				/* */ if (_3 === (1)) { $s = 52; continue; }
				/* */ if (_3 === (2)) { $s = 53; continue; }
				/* */ $s = 54; continue;
				/* if (_3 === (3)) { */ case 51:
					$s = 55; continue;
				/* } else if (_3 === (1)) { */ case 52:
					dir$1 = 1;
					$s = 55; continue;
				/* } else if (_3 === (2)) { */ case 53:
					dir$1 = 2;
					$s = 55; continue;
				/* } else { */ case 54:
					$r = check[0].invalidAST(e$12.Pos(), "unknown channel direction %d", new sliceType$4([new ast.ChanDir(e$12.Dir)])); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 55:
			case 50:
			typ$10.dir = dir$1;
			_r$11 = check[0].typ(e$12.Value); /* */ $s = 57; case 57: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			typ$10.elem = _r$11;
			$s = -1; return typ$10;
		/* } else { */ case 13:
			e$13 = _ref;
			_r$12 = e$13.Pos(); /* */ $s = 58; case 58: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			$r = check[0].errorf(_r$12, "%s is not a type", new sliceType$4([e$13])); /* */ $s = 59; case 59: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 14:
		typ$11 = (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]);
		def$1.setUnderlying(typ$11);
		$s = -1; return typ$11;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.typExprInternal }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.check = check; $f.def$1 = def$1; $f.dir$1 = dir$1; $f.e = e; $f.e$1 = e$1; $f.e$10 = e$10; $f.e$11 = e$11; $f.e$12 = e$12; $f.e$13 = e$13; $f.e$2 = e$2; $f.e$3 = e$3; $f.e$4 = e$4; $f.e$5 = e$5; $f.e$6 = e$6; $f.e$7 = e$7; $f.e$8 = e$8; $f.e$9 = e$9; $f.path = path; $f.typ = typ; $f.typ$1 = typ$1; $f.typ$10 = typ$10; $f.typ$11 = typ$11; $f.typ$2 = typ$2; $f.typ$3 = typ$3; $f.typ$4 = typ$4; $f.typ$5 = typ$5; $f.typ$6 = typ$6; $f.typ$7 = typ$7; $f.typ$8 = typ$8; $f.typ$9 = typ$9; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.typExprInternal = function(e, def$1, path) { return this.$val.typExprInternal(e, def$1, path); };
	Checker.ptr.prototype.typOrNil = function(e) {
		var _1, _r, _r$1, _r$2, _r$3, check, e, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; check = $f.check; e = $f.e; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = [x];
		check = this;
		x[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
		_r = check.rawExpr(x[0], e, $ifaceNil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
			_1 = x[0].mode;
			/* */ if (_1 === (0)) { $s = 3; continue; }
			/* */ if (_1 === (1)) { $s = 4; continue; }
			/* */ if (_1 === (3)) { $s = 5; continue; }
			/* */ if (_1 === (7)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (0)) { */ case 3:
				$s = 8; continue;
			/* } else if (_1 === (1)) { */ case 4:
				_r$1 = x[0].pos(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = check.errorf(_r$1, "%s used as type", new sliceType$4([x[0]])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 8; continue;
			/* } else if (_1 === (3)) { */ case 5:
				$s = -1; return x[0].typ;
			/* } else if (_1 === (7)) { */ case 6:
				if (x[0].isNil()) {
					$s = -1; return $ifaceNil;
				}
				_r$2 = x[0].pos(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = check.errorf(_r$2, "%s is not a type", new sliceType$4([x[0]])); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 8; continue;
			/* } else { */ case 7:
				_r$3 = x[0].pos(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$r = check.errorf(_r$3, "%s is not a type", new sliceType$4([x[0]])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 2:
		$s = -1; return (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.typOrNil }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.check = check; $f.e = e; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.typOrNil = function(e) { return this.$val.typOrNil(e); };
	Checker.ptr.prototype.arrayLength = function(e) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tuple, _v, check, e, n, ok, val, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; _v = $f._v; check = $f.check; e = $f.e; n = $f.n; ok = $f.ok; val = $f.val; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = [x];
		check = this;
		x[0] = new operand.ptr(0, $ifaceNil, $ifaceNil, $ifaceNil, 0);
		$r = check.expr(x[0], e); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!((x[0].mode === 4))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((x[0].mode === 4))) { */ case 2:
			/* */ if (!((x[0].mode === 0))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!((x[0].mode === 0))) { */ case 4:
				_r = x[0].pos(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = check.errorf(_r, "array length %s must be constant", new sliceType$4([x[0]])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			$s = -1; return new $Int64(0, 0);
		/* } */ case 3:
		_r$1 = isUntyped(x[0].typ); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1) { _v = true; $s = 10; continue s; }
		_r$2 = isInteger(x[0].typ); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v = _r$2; case 10:
		/* */ if (_v) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (_v) { */ case 8:
			_r$3 = constant.ToInt(x[0].val); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			val = _r$3;
			_r$4 = val.Kind(); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4 === 3) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (_r$4 === 3) { */ case 14:
				_r$5 = representableConst(val, check.conf, (2 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 2]), ptrType$29.nil); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (_r$5) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (_r$5) { */ case 17:
					_r$6 = constant.Int64Val(val); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_tuple = _r$6;
					n = _tuple[0];
					ok = _tuple[1];
					if (ok && (n.$high > 0 || (n.$high === 0 && n.$low >= 0))) {
						$s = -1; return n;
					}
					_r$7 = x[0].pos(); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$r = check.errorf(_r$7, "invalid array length %s", new sliceType$4([x[0]])); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return new $Int64(0, 0);
				/* } */ case 18:
			/* } */ case 15:
		/* } */ case 9:
		_r$8 = x[0].pos(); /* */ $s = 23; case 23: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$r = check.errorf(_r$8, "array length %s must be integer", new sliceType$4([x[0]])); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return new $Int64(0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.arrayLength }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f._v = _v; $f.check = check; $f.e = e; $f.n = n; $f.ok = ok; $f.val = val; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.arrayLength = function(e) { return this.$val.arrayLength(e); };
	Checker.ptr.prototype.collectParams = function(scope, list, variadicOk) {
		var _i, _i$1, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _tmp, _tmp$1, _tuple, anonymous, check, field, ftype, i, last, list, name, named, par, par$1, params, scope, t, typ, variadic, variadicOk, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; anonymous = $f.anonymous; check = $f.check; field = $f.field; ftype = $f.ftype; i = $f.i; last = $f.last; list = $f.list; name = $f.name; named = $f.named; par = $f.par; par$1 = $f.par$1; params = $f.params; scope = $f.scope; t = $f.t; typ = $f.typ; variadic = $f.variadic; variadicOk = $f.variadicOk; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		params = sliceType$6.nil;
		variadic = false;
		check = this;
		if (list === ptrType$83.nil) {
			$s = -1; return [params, variadic];
		}
		_tmp = false;
		_tmp$1 = false;
		named = _tmp;
		anonymous = _tmp$1;
		_ref = list.List;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			field = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			ftype = field.Type;
			_tuple = $assertType(ftype, ptrType$59, true);
			t = _tuple[0];
			/* */ if (!(t === ptrType$59.nil)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(t === ptrType$59.nil)) { */ case 3:
				ftype = t.Elt;
				/* */ if (variadicOk && (i === (list.List.$length - 1 >> 0))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (variadicOk && (i === (list.List.$length - 1 >> 0))) { */ case 5:
					variadic = true;
					$s = 7; continue;
				/* } else { */ case 6:
					_r = field.Pos(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$r = check.invalidAST(_r, "... not permitted", new sliceType$4([])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 7:
			/* } */ case 4:
			_r$1 = check.typ(ftype); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			typ = _r$1;
			/* */ if (field.Names.$length > 0) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (field.Names.$length > 0) { */ case 11:
				_ref$1 = field.Names;
				_i$1 = 0;
				/* while (true) { */ case 14:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 15; continue; }
					name = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
					/* */ if (name.Name === "") { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if (name.Name === "") { */ case 16:
						$r = check.invalidAST(name.Pos(), "anonymous parameter", new sliceType$4([])); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 17:
					par = NewParam(name.Pos(), check.pkg, name.Name, typ);
					$r = check.declare(scope, name, par, scope.pos); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					params = $append(params, par);
					_i$1++;
				/* } */ $s = 14; continue; case 15:
				named = true;
				$s = 13; continue;
			/* } else { */ case 12:
				_r$2 = ftype.Pos(); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = NewParam(_r$2, check.pkg, "", typ); /* */ $s = 21; case 21: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				par$1 = _r$3;
				check.recordImplicit(field, par$1);
				params = $append(params, par$1);
				anonymous = true;
			/* } */ case 13:
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ if (named && anonymous) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (named && anonymous) { */ case 22:
			_r$4 = list.Pos(); /* */ $s = 24; case 24: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$r = check.invalidAST(_r$4, "list contains both named and anonymous parameters", new sliceType$4([])); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 23:
		if (variadic && params.$length > 0) {
			last = (x = params.$length - 1 >> 0, ((x < 0 || x >= params.$length) ? ($throwRuntimeError("index out of range"), undefined) : params.$array[params.$offset + x]));
			last.object.typ = new Slice.ptr(last.object.typ);
		}
		$s = -1; return [params, variadic];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.collectParams }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.anonymous = anonymous; $f.check = check; $f.field = field; $f.ftype = ftype; $f.i = i; $f.last = last; $f.list = list; $f.name = name; $f.named = named; $f.par = par; $f.par$1 = par$1; $f.params = params; $f.scope = scope; $f.t = t; $f.typ = typ; $f.variadic = variadic; $f.variadicOk = variadicOk; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.collectParams = function(scope, list, variadicOk) { return this.$val.collectParams(scope, list, variadicOk); };
	Checker.ptr.prototype.declareInSet = function(oset, pos, obj) {
		var _arg, _arg$1, _r, _r$1, alt, check, obj, oset, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; alt = $f.alt; check = $f.check; obj = $f.obj; oset = $f.oset; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		_r = oset.insert(obj); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		alt = _r;
		/* */ if (!($interfaceIsEqual(alt, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(alt, $ifaceNil))) { */ case 2:
			_arg = pos;
			_r$1 = obj.Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$1);
			$r = check.errorf(_arg, "%s redeclared", new sliceType$4([_arg$1])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = check.reportAltDecl(alt); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return false;
		/* } */ case 3:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.declareInSet }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f.alt = alt; $f.check = check; $f.obj = obj; $f.oset = oset; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.declareInSet = function(oset, pos, obj) { return this.$val.declareInSet(oset, pos, obj); };
	Checker.ptr.prototype.interfaceType = function(iface, ityp, def$1, path) {
		var _i, _i$1, _i$2, _i$3, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _ref$1, _ref$2, _ref$3, _tuple, _tuple$1, _tuple$2, check, def$1, e, embed, embedded, expr, f, i, iface, ityp, m, m$1, m$2, mset, name, named, old, path, pos, pos$1, recvTyp, sig, sig$1, signatures, typ, typ$1, under, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; check = $f.check; def$1 = $f.def$1; e = $f.e; embed = $f.embed; embedded = $f.embedded; expr = $f.expr; f = $f.f; i = $f.i; iface = $f.iface; ityp = $f.ityp; m = $f.m; m$1 = $f.m$1; m$2 = $f.m$2; mset = $f.mset; name = $f.name; named = $f.named; old = $f.old; path = $f.path; pos = $f.pos; pos$1 = $f.pos$1; recvTyp = $f.recvTyp; sig = $f.sig; sig$1 = $f.sig$1; signatures = $f.signatures; typ = $f.typ; typ$1 = $f.typ$1; under = $f.under; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mset = [mset];
		check = this;
		if (ityp.Methods === ptrType$83.nil) {
			$s = -1; return;
		}
		recvTyp = iface;
		if (!(def$1 === ptrType$6.nil)) {
			recvTyp = def$1;
		}
		mset[0] = false;
		signatures = sliceType$10.nil;
		embedded = sliceType$10.nil;
		_ref = ityp.Methods.List;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (f.Names.$length > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (f.Names.$length > 0) { */ case 3:
				name = (x = f.Names, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
				pos = name.Pos();
				/* */ if (name.Name === "_") { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (name.Name === "_") { */ case 6:
					$r = check.errorf(pos, "invalid method name _", new sliceType$4([])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
					/* continue; */ $s = 1; continue;
				/* } */ case 7:
				sig = new Signature.ptr(ptrType$1.nil, ptrType$10.nil, ptrType$16.nil, ptrType$16.nil, false);
				sig.recv = NewVar(pos, check.pkg, "", recvTyp);
				m = NewFunc(pos, check.pkg, name.Name, sig);
				_r = check.declareInSet((mset.$ptr || (mset.$ptr = new ptrType$31(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, mset))), pos, m); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (_r) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_r) { */ case 9:
					iface.methods = $append(iface.methods, m);
					iface.allMethods = $append(iface.allMethods, m);
					signatures = $append(signatures, f.Type);
					check.recordDef(name, m);
				/* } */ case 10:
				$s = 5; continue;
			/* } else { */ case 4:
				embedded = $append(embedded, f.Type);
			/* } */ case 5:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_ref$1 = embedded;
		_i$1 = 0;
		/* while (true) { */ case 12:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 13; continue; }
			e = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			_r$1 = e.Pos(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			pos$1 = _r$1;
			_r$2 = check.typExpr(e, ptrType$6.nil, path); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			typ = _r$2;
			_tuple = $assertType(typ, ptrType$6, true);
			named = _tuple[0];
			under = underlying(named);
			_tuple$1 = $assertType(under, ptrType$58, true);
			embed = _tuple$1[0];
			/* */ if (embed === ptrType$58.nil) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (embed === ptrType$58.nil) { */ case 16:
				/* */ if (!($interfaceIsEqual(typ, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0])))) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (!($interfaceIsEqual(typ, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0])))) { */ case 18:
					$r = check.errorf(pos$1, "%s is not an interface", new sliceType$4([typ])); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 19:
				_i$1++;
				/* continue; */ $s = 12; continue;
			/* } */ case 17:
			iface.embeddeds = $append(iface.embeddeds, named);
			/* */ if (embed.allMethods === sliceType$1.nil) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (embed.allMethods === sliceType$1.nil) { */ case 21:
				$r = check.errorf(pos$1, "internal error: incomplete embedded interface %s (issue #18395)", new sliceType$4([named])); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 22:
			_ref$2 = embed.allMethods;
			_i$2 = 0;
			/* while (true) { */ case 24:
				/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 25; continue; }
				m$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
				_r$3 = check.declareInSet((mset.$ptr || (mset.$ptr = new ptrType$31(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, mset))), pos$1, m$1); /* */ $s = 28; case 28: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3) { $s = 26; continue; }
				/* */ $s = 27; continue;
				/* if (_r$3) { */ case 26:
					iface.allMethods = $append(iface.allMethods, m$1);
				/* } */ case 27:
				_i$2++;
			/* } */ $s = 24; continue; case 25:
			_i$1++;
		/* } */ $s = 12; continue; case 13:
		_ref$3 = iface.methods;
		_i$3 = 0;
		/* while (true) { */ case 29:
			/* if (!(_i$3 < _ref$3.$length)) { break; } */ if(!(_i$3 < _ref$3.$length)) { $s = 30; continue; }
			i = _i$3;
			m$2 = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$3]);
			expr = ((i < 0 || i >= signatures.$length) ? ($throwRuntimeError("index out of range"), undefined) : signatures.$array[signatures.$offset + i]);
			_r$4 = check.typ(expr); /* */ $s = 31; case 31: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			typ$1 = _r$4;
			_tuple$2 = $assertType(typ$1, ptrType$19, true);
			sig$1 = _tuple$2[0];
			/* */ if (sig$1 === ptrType$19.nil) { $s = 32; continue; }
			/* */ $s = 33; continue;
			/* if (sig$1 === ptrType$19.nil) { */ case 32:
				/* */ if (!($interfaceIsEqual(typ$1, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0])))) { $s = 34; continue; }
				/* */ $s = 35; continue;
				/* if (!($interfaceIsEqual(typ$1, (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0])))) { */ case 34:
					_r$5 = expr.Pos(); /* */ $s = 36; case 36: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$r = check.invalidAST(_r$5, "%s is not a method signature", new sliceType$4([typ$1])); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 35:
				_i$3++;
				/* continue; */ $s = 29; continue;
			/* } */ case 33:
			old = $assertType(m$2.object.typ, ptrType$19);
			sig$1.recv = old.recv;
			Signature.copy(old, sig$1);
			_i$3++;
		/* } */ $s = 29; continue; case 30:
		$r = sort.Sort(((x$1 = iface.methods, $subslice(new byUniqueMethodName(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)))); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.Sort(((x$2 = iface.embeddeds, $subslice(new byUniqueTypeName(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)))); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (iface.allMethods === sliceType$1.nil) { $s = 40; continue; }
		/* */ $s = 41; continue;
		/* if (iface.allMethods === sliceType$1.nil) { */ case 40:
			iface.allMethods = $makeSlice(sliceType$1, 0);
			$s = 42; continue;
		/* } else { */ case 41:
			$r = sort.Sort(((x$3 = iface.allMethods, $subslice(new byUniqueMethodName(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)))); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 42:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.interfaceType }; } $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.check = check; $f.def$1 = def$1; $f.e = e; $f.embed = embed; $f.embedded = embedded; $f.expr = expr; $f.f = f; $f.i = i; $f.iface = iface; $f.ityp = ityp; $f.m = m; $f.m$1 = m$1; $f.m$2 = m$2; $f.mset = mset; $f.name = name; $f.named = named; $f.old = old; $f.path = path; $f.pos = pos; $f.pos$1 = pos$1; $f.recvTyp = recvTyp; $f.sig = sig; $f.sig$1 = sig$1; $f.signatures = signatures; $f.typ = typ; $f.typ$1 = typ$1; $f.under = under; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.interfaceType = function(iface, ityp, def$1, path) { return this.$val.interfaceType(iface, ityp, def$1, path); };
	byUniqueTypeName.prototype.Len = function() {
		var a;
		a = this;
		return a.$length;
	};
	$ptrType(byUniqueTypeName).prototype.Len = function() { return this.$get().Len(); };
	byUniqueTypeName.prototype.Less = function(i, j) {
		var a, i, j;
		a = this;
		return ((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]).obj.object.Id() < ((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j]).obj.object.Id();
	};
	$ptrType(byUniqueTypeName).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	byUniqueTypeName.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, a, i, j;
		a = this;
		_tmp = ((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j]);
		_tmp$1 = ((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]);
		((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = _tmp);
		((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j] = _tmp$1);
	};
	$ptrType(byUniqueTypeName).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	byUniqueMethodName.prototype.Len = function() {
		var a;
		a = this;
		return a.$length;
	};
	$ptrType(byUniqueMethodName).prototype.Len = function() { return this.$get().Len(); };
	byUniqueMethodName.prototype.Less = function(i, j) {
		var a, i, j;
		a = this;
		return ((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]).object.Id() < ((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j]).object.Id();
	};
	$ptrType(byUniqueMethodName).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	byUniqueMethodName.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, a, i, j;
		a = this;
		_tmp = ((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j]);
		_tmp$1 = ((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]);
		((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = _tmp);
		((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j] = _tmp$1);
	};
	$ptrType(byUniqueMethodName).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	Checker.ptr.prototype.tag = function(t) {
		var _tuple, check, err, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; check = $f.check; err = $f.err; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = this;
		/* */ if (!(t === ptrType$56.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(t === ptrType$56.nil)) { */ case 1:
			if (t.Kind === 9) {
				_tuple = strconv.Unquote(t.Value);
				val = _tuple[0];
				err = _tuple[1];
				if ($interfaceIsEqual(err, $ifaceNil)) {
					$s = -1; return val;
				}
			}
			$r = check.invalidAST(t.Pos(), "incorrect tag syntax: %q", new sliceType$4([new $String(t.Value)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return "";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.tag }; } $f._tuple = _tuple; $f.check = check; $f.err = err; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.tag = function(t) { return this.$val.tag(t); };
	Checker.ptr.prototype.structType = function(styp, e, path) {
		var _i, _i$1, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _ref$2, _tuple, add, check, e, f, fields, fset, isPtr, list, name, name$1, path, pos, styp, t, t$1, t$2, t$3, tag, tags, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; add = $f.add; check = $f.check; e = $f.e; f = $f.f; fields = $f.fields; fset = $f.fset; isPtr = $f.isPtr; list = $f.list; name = $f.name; name$1 = $f.name$1; path = $f.path; pos = $f.pos; styp = $f.styp; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; t$3 = $f.t$3; tag = $f.tag; tags = $f.tags; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = [check];
		fields = [fields];
		fset = [fset];
		tag = [tag];
		tags = [tags];
		typ = [typ];
		check[0] = this;
		list = e.Fields;
		if (list === ptrType$83.nil) {
			$s = -1; return;
		}
		fields[0] = sliceType$6.nil;
		tags[0] = sliceType$26.nil;
		fset[0] = false;
		typ[0] = $ifaceNil;
		tag[0] = "";
		add = (function(check, fields, fset, tag, tags, typ) { return function $b(ident, anonymous, pos) {
			var _r, _v, anonymous, fld, ident, name, pos, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _v = $f._v; anonymous = $f.anonymous; fld = $f.fld; ident = $f.ident; name = $f.name; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			if (!(tag[0] === "") && tags[0] === sliceType$26.nil) {
				tags[0] = $makeSlice(sliceType$26, fields[0].$length);
			}
			if (!(tags[0] === sliceType$26.nil)) {
				tags[0] = $append(tags[0], tag[0]);
			}
			name = ident.Name;
			fld = NewField(pos, check[0].pkg, name, typ[0], anonymous);
			if (name === "_") { _v = true; $s = 3; continue s; }
			_r = check[0].declareInSet((fset.$ptr || (fset.$ptr = new ptrType$31(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, fset))), pos, fld); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 3:
			/* */ if (_v) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (_v) { */ case 1:
				fields[0] = $append(fields[0], fld);
				check[0].recordDef(ident, fld);
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f._v = _v; $f.anonymous = anonymous; $f.fld = fld; $f.ident = ident; $f.name = name; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
		}; })(check, fields, fset, tag, tags, typ);
		_ref = list.List;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = check[0].typExpr(f.Type, ptrType$6.nil, path); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			typ[0] = _r;
			_r$1 = check[0].tag(f.Tag); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			tag[0] = _r$1;
			/* */ if (f.Names.$length > 0) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (f.Names.$length > 0) { */ case 5:
				_ref$1 = f.Names;
				_i$1 = 0;
				/* while (true) { */ case 8:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 9; continue; }
					name = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
					$r = add(name, false, name.Pos()); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$1++;
				/* } */ $s = 8; continue; case 9:
				$s = 7; continue;
			/* } else { */ case 6:
				_r$2 = f.Type.Pos(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				pos = _r$2;
				name$1 = anonymousFieldIdent(f.Type);
				/* */ if (name$1 === ptrType$7.nil) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (name$1 === ptrType$7.nil) { */ case 12:
					$r = check[0].invalidAST(pos, "anonymous field type %s has no name", new sliceType$4([f.Type])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
					/* continue; */ $s = 1; continue;
				/* } */ case 13:
				_tuple = deref(typ[0]);
				t = _tuple[0];
				isPtr = _tuple[1];
				_r$3 = t.Underlying(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_ref$2 = _r$3;
				/* */ if ($assertType(_ref$2, ptrType$4, true)[1]) { $s = 16; continue; }
				/* */ if ($assertType(_ref$2, ptrType$17, true)[1]) { $s = 17; continue; }
				/* */ if ($assertType(_ref$2, ptrType$58, true)[1]) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if ($assertType(_ref$2, ptrType$4, true)[1]) { */ case 16:
					t$1 = _ref$2.$val;
					/* */ if (t$1 === (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0])) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (t$1 === (0 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 0])) { */ case 20:
						_i++;
						/* continue; */ $s = 1; continue;
					/* } */ case 21:
					/* */ if (t$1.kind === 18) { $s = 22; continue; }
					/* */ $s = 23; continue;
					/* if (t$1.kind === 18) { */ case 22:
						$r = check[0].errorf(pos, "anonymous field type cannot be unsafe.Pointer", new sliceType$4([])); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i++;
						/* continue; */ $s = 1; continue;
					/* } */ case 23:
					$s = 19; continue;
				/* } else if ($assertType(_ref$2, ptrType$17, true)[1]) { */ case 17:
					t$2 = _ref$2.$val;
					$r = check[0].errorf(pos, "anonymous field type cannot be a pointer", new sliceType$4([])); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
					/* continue; */ $s = 1; continue;
					$s = 19; continue;
				/* } else if ($assertType(_ref$2, ptrType$58, true)[1]) { */ case 18:
					t$3 = _ref$2.$val;
					/* */ if (isPtr) { $s = 26; continue; }
					/* */ $s = 27; continue;
					/* if (isPtr) { */ case 26:
						$r = check[0].errorf(pos, "anonymous field type cannot be a pointer to an interface", new sliceType$4([])); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i++;
						/* continue; */ $s = 1; continue;
					/* } */ case 27:
				/* } */ case 19:
				$r = add(name$1, true, pos); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 7:
			_i++;
		/* } */ $s = 1; continue; case 2:
		styp.fields = fields[0];
		styp.tags = tags[0];
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Checker.ptr.prototype.structType }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f.add = add; $f.check = check; $f.e = e; $f.f = f; $f.fields = fields; $f.fset = fset; $f.isPtr = isPtr; $f.list = list; $f.name = name; $f.name$1 = name$1; $f.path = path; $f.pos = pos; $f.styp = styp; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.t$3 = t$3; $f.tag = tag; $f.tags = tags; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	Checker.prototype.structType = function(styp, e, path) { return this.$val.structType(styp, e, path); };
	anonymousFieldIdent = function(e) {
		var _ref, _tuple, e, e$1, e$2, e$3, ok;
		_ref = e;
		if ($assertType(_ref, ptrType$7, true)[1]) {
			e$1 = _ref.$val;
			return e$1;
		} else if ($assertType(_ref, ptrType$46, true)[1]) {
			e$2 = _ref.$val;
			_tuple = $assertType(e$2.X, ptrType$46, true);
			ok = _tuple[1];
			if (!ok) {
				return anonymousFieldIdent(e$2.X);
			}
		} else if ($assertType(_ref, ptrType$11, true)[1]) {
			e$3 = _ref.$val;
			return e$3.Sel;
		}
		return ptrType$7.nil;
	};
	defPredeclaredTypes = function() {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, err, res, sig, t, t$1, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; err = $f.err; res = $f.res; sig = $f.sig; t = $f.t; t$1 = $f.t$1; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = $pkg.Typ;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			t = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = def(NewTypeName(0, ptrType$2.nil, t.name, t)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		_ref$1 = aliases;
		_i$1 = 0;
		/* while (true) { */ case 4:
			/* if (!(_i$1 < 2)) { break; } */ if(!(_i$1 < 2)) { $s = 5; continue; }
			t$1 = ((_i$1 < 0 || _i$1 >= _ref$1.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1[_i$1]);
			$r = def(NewTypeName(0, ptrType$2.nil, t$1.name, t$1)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i$1++;
		/* } */ $s = 4; continue; case 5:
		res = NewVar(0, ptrType$2.nil, "", (17 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 17]));
		sig = new Signature.ptr(ptrType$1.nil, ptrType$10.nil, ptrType$16.nil, NewTuple(new sliceType$6([res])), false);
		err = NewFunc(0, ptrType$2.nil, "Error", sig);
		_r = NewInterface(new sliceType$1([err]), sliceType$2.nil); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Complete(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		typ = new Named.ptr(ptrType$21.nil, _r$1, sliceType$1.nil);
		sig.recv = NewVar(0, ptrType$2.nil, "", typ);
		$r = def(NewTypeName(0, ptrType$2.nil, "error", typ)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: defPredeclaredTypes }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.err = err; $f.res = res; $f.sig = sig; $f.t = t; $f.t$1 = t$1; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	defPredeclaredConsts = function() {
		var _i, _ref, c, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; c = $f.c; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = predeclaredConsts;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 3)) { break; } */ if(!(_i < 3)) { $s = 2; continue; }
			c = $clone(((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]), structType);
			$r = def(NewConst(0, ptrType$2.nil, c.name, (x = c.kind, ((x < 0 || x >= $pkg.Typ.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + x])), c.val)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: defPredeclaredConsts }; } $f._i = _i; $f._ref = _ref; $f.c = c; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	defPredeclaredNil = function() {
		var $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = def(new Nil.ptr(new object.ptr(ptrType$1.nil, 0, ptrType$2.nil, "nil", (25 >= $pkg.Typ.$length ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Typ.$array[$pkg.Typ.$offset + 25]), 0, 0))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: defPredeclaredNil }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	defPredeclaredFuncs = function() {
		var _i, _ref, i, id, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; i = $f.i; id = $f.id; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = predeclaredFuncs;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 20)) { break; } */ if(!(_i < 20)) { $s = 2; continue; }
			i = _i;
			id = ((i >> 0));
			/* */ if ((id === 18) || (id === 19)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((id === 18) || (id === 19)) { */ case 3:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			$r = def(newBuiltin(id)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: defPredeclaredFuncs }; } $f._i = _i; $f._ref = _ref; $f.i = i; $f.id = id; $f.$s = $s; $f.$r = $r; return $f;
	};
	init = function() {
		var _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$pkg.Universe = NewScope(ptrType$1.nil, 0, 0, "universe");
		_r = NewPackage("unsafe", "unsafe"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$pkg.Unsafe = _r;
		$pkg.Unsafe.complete = true;
		$r = defPredeclaredTypes(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = defPredeclaredConsts(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = defPredeclaredNil(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = defPredeclaredFuncs(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		universeIota = $assertType($pkg.Universe.Lookup("iota"), ptrType$3);
		universeByte = $assertType($assertType($pkg.Universe.Lookup("byte"), ptrType$21).object.typ, ptrType$4);
		universeRune = $assertType($assertType($pkg.Universe.Lookup("rune"), ptrType$21).object.typ, ptrType$4);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	def = function(obj) {
		var _r, _r$1, _r$2, _r$3, _ref, _tuple, name, obj, obj$1, obj$2, obj$3, ok, scope, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; name = $f.name; obj = $f.obj; obj$1 = $f.obj$1; obj$2 = $f.obj$2; obj$3 = $f.obj$3; ok = $f.ok; scope = $f.scope; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = obj.Name(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		name = _r;
		if (strings.Contains(name, " ")) {
			$s = -1; return;
		}
		_r$1 = obj.Type(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$1, ptrType$6, true);
		typ = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			typ.obj = $assertType(obj, ptrType$21);
		}
		scope = $pkg.Universe;
		_r$2 = obj.Exported(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_r$2) { */ case 3:
			scope = $pkg.Unsafe.scope;
			_ref = obj;
			if ($assertType(_ref, ptrType$21, true)[1]) {
				obj$1 = _ref.$val;
				obj$1.object.pkg = $pkg.Unsafe;
			} else if ($assertType(_ref, ptrType$22, true)[1]) {
				obj$2 = _ref.$val;
				obj$2.object.pkg = $pkg.Unsafe;
			} else {
				obj$3 = _ref;
				unreachable();
			}
		/* } */ case 4:
		_r$3 = scope.Insert(obj); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!($interfaceIsEqual(_r$3, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(_r$3, $ifaceNil))) { */ case 6:
			$panic(new $String("internal error: double declaration"));
		/* } */ case 7:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: def }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f.name = name; $f.obj = obj; $f.obj$1 = obj$1; $f.obj$2 = obj$2; $f.obj$3 = obj$3; $f.ok = ok; $f.scope = scope; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	Error.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$8.methods = [{prop: "Check", name: "Check", pkg: "", typ: $funcType([$String, ptrType$26, sliceType$13, ptrType$24], [ptrType$2, $error], false)}, {prop: "alignof", name: "alignof", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([Type], [$Int64], false)}, {prop: "offsetsof", name: "offsetsof", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$30], [sliceType$9], false)}, {prop: "offsetof", name: "offsetof", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([Type, sliceType$11], [$Int64], false)}, {prop: "sizeof", name: "sizeof", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([Type], [$Int64], false)}];
	ptrType$24.methods = [{prop: "TypeOf", name: "TypeOf", pkg: "", typ: $funcType([ast.Expr], [Type], false)}, {prop: "ObjectOf", name: "ObjectOf", pkg: "", typ: $funcType([ptrType$7], [Object], false)}];
	TypeAndValue.methods = [{prop: "IsVoid", name: "IsVoid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsType", name: "IsType", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsBuiltin", name: "IsBuiltin", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsValue", name: "IsValue", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Addressable", name: "Addressable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Assignable", name: "Assignable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "HasOk", name: "HasOk", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$25.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$94.methods = [{prop: "assignment", name: "assignment", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, Type, $String], [], false)}, {prop: "initConst", name: "initConst", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$3, ptrType$38], [], false)}, {prop: "initVar", name: "initVar", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$10, ptrType$38, $String], [Type], false)}, {prop: "assignVar", name: "assignVar", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ast.Expr, ptrType$38], [Type], false)}, {prop: "initVars", name: "initVars", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([sliceType$6, sliceType$10, token.Pos], [], false)}, {prop: "assignVars", name: "assignVars", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([sliceType$10, sliceType$10], [], false)}, {prop: "shortVarDecl", name: "shortVarDecl", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([token.Pos, sliceType$10, sliceType$10], [], false)}, {prop: "builtin", name: "builtin", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, ptrType$55, builtinId], [$Bool], false)}, {prop: "call", name: "call", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, ptrType$55], [exprKind], false)}, {prop: "use", name: "use", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([sliceType$10], [], true)}, {prop: "useLHS", name: "useLHS", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([sliceType$10], [], true)}, {prop: "useGetter", name: "useGetter", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([getter, $Int], [], false)}, {prop: "arguments$", name: "arguments", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, ptrType$55, ptrType$19, getter, $Int], [Type], false)}, {prop: "argument", name: "argument", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ast.Expr, ptrType$19, $Int, ptrType$38, token.Pos], [Type], false)}, {prop: "selector", name: "selector", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, ptrType$11], [], false)}, {prop: "addUnusedDotImport", name: "addUnusedDotImport", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$1, ptrType$2, token.Pos], [], false)}, {prop: "addDeclDep", name: "addDeclDep", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([Object], [], false)}, {prop: "assocMethod", name: "assocMethod", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([$String, ptrType$5], [], false)}, {prop: "rememberUntyped", name: "rememberUntyped", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ast.Expr, $Bool, operandMode, ptrType$4, constant.Value], [], false)}, {prop: "later", name: "later", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([$String, ptrType$23, ptrType$19, ptrType$32], [], false)}, {prop: "delay", name: "delay", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([funcType], [], false)}, {prop: "initFiles", name: "initFiles", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([sliceType$13], [], false)}, {prop: "handleBailout", name: "handleBailout", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$28], [], false)}, {prop: "Files", name: "Files", pkg: "", typ: $funcType([sliceType$13], [$error], false)}, {prop: "checkFiles", name: "checkFiles", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([sliceType$13], [$error], false)}, {prop: "recordUntyped", name: "recordUntyped", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([], [], false)}, {prop: "recordTypeAndValue", name: "recordTypeAndValue", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ast.Expr, operandMode, Type, constant.Value], [], false)}, {prop: "recordBuiltinType", name: "recordBuiltinType", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ast.Expr, ptrType$19], [], false)}, {prop: "recordCommaOkTypes", name: "recordCommaOkTypes", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ast.Expr, arrayType$1], [], false)}, {prop: "recordDef", name: "recordDef", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$7, Object], [], false)}, {prop: "recordUse", name: "recordUse", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$7, Object], [], false)}, {prop: "recordImplicit", name: "recordImplicit", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ast.Node, Object], [], false)}, {prop: "recordSelection", name: "recordSelection", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$11, SelectionKind, Type, Object, sliceType$11, $Bool], [], false)}, {prop: "recordScope", name: "recordScope", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ast.Node, ptrType$1], [], false)}, {prop: "conversion", name: "conversion", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, Type], [], false)}, {prop: "reportAltDecl", name: "reportAltDecl", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([Object], [], false)}, {prop: "declare", name: "declare", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$1, ptrType$7, Object, token.Pos], [], false)}, {prop: "objDecl", name: "objDecl", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([Object, ptrType$6, sliceType$16], [], false)}, {prop: "constDecl", name: "constDecl", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$3, ast.Expr, ast.Expr], [], false)}, {prop: "varDecl", name: "varDecl", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$10, sliceType$6, ast.Expr, ast.Expr], [], false)}, {prop: "typeDecl", name: "typeDecl", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$21, ast.Expr, ptrType$6, sliceType$16, $Bool], [], false)}, {prop: "addMethodDecls", name: "addMethodDecls", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$21], [], false)}, {prop: "funcDecl", name: "funcDecl", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$5, ptrType$23], [], false)}, {prop: "declStmt", name: "declStmt", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ast.Decl], [], false)}, {prop: "qualifier", name: "qualifier", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$2], [$String], false)}, {prop: "sprintf", name: "sprintf", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([$String, sliceType$4], [$String], true)}, {prop: "trace", name: "trace", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([token.Pos, $String, sliceType$4], [], true)}, {prop: "dump", name: "dump", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([$String, sliceType$4], [], true)}, {prop: "err", name: "err", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([token.Pos, $String, $Bool], [], false)}, {prop: "error", name: "error", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([token.Pos, $String], [], false)}, {prop: "errorf", name: "errorf", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([token.Pos, $String, sliceType$4], [], true)}, {prop: "softErrorf", name: "softErrorf", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([token.Pos, $String, sliceType$4], [], true)}, {prop: "invalidAST", name: "invalidAST", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([token.Pos, $String, sliceType$4], [], true)}, {prop: "invalidArg", name: "invalidArg", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([token.Pos, $String, sliceType$4], [], true)}, {prop: "invalidOp", name: "invalidOp", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([token.Pos, $String, sliceType$4], [], true)}, {prop: "op", name: "op", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([opPredicates, ptrType$38, token.Token], [$Bool], false)}, {prop: "unary", name: "unary", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, ptrType$39, token.Token], [], false)}, {prop: "representable", name: "representable", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, ptrType$4], [], false)}, {prop: "updateExprType", name: "updateExprType", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ast.Expr, Type, $Bool], [], false)}, {prop: "updateExprVal", name: "updateExprVal", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ast.Expr, constant.Value], [], false)}, {prop: "convertUntyped", name: "convertUntyped", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, Type], [], false)}, {prop: "comparison", name: "comparison", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, ptrType$38, token.Token], [], false)}, {prop: "shift", name: "shift", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, ptrType$38, ptrType$57, token.Token], [], false)}, {prop: "binary", name: "binary", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, ptrType$57, ast.Expr, ast.Expr, token.Token], [], false)}, {prop: "index", name: "index", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ast.Expr, $Int64], [$Int64, $Bool], false)}, {prop: "indexedElts", name: "indexedElts", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([sliceType$10, Type, $Int64], [$Int64], false)}, {prop: "rawExpr", name: "rawExpr", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, ast.Expr, Type], [exprKind], false)}, {prop: "exprInternal", name: "exprInternal", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, ast.Expr, Type], [exprKind], false)}, {prop: "typeAssertion", name: "typeAssertion", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([token.Pos, ptrType$38, ptrType$58, Type], [], false)}, {prop: "singleValue", name: "singleValue", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38], [], false)}, {prop: "expr", name: "expr", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, ast.Expr], [], false)}, {prop: "multiExpr", name: "multiExpr", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, ast.Expr], [], false)}, {prop: "exprWithHint", name: "exprWithHint", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, ast.Expr, Type], [], false)}, {prop: "exprOrType", name: "exprOrType", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, ast.Expr], [], false)}, {prop: "initOrder", name: "initOrder", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([], [], false)}, {prop: "reportCycle", name: "reportCycle", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([sliceType$20], [], false)}, {prop: "labels", name: "labels", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$32], [], false)}, {prop: "blockBranches", name: "blockBranches", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$1, ptrType$63, ptrType$64, sliceType$27], [sliceType$22], false)}, {prop: "resolveOrder", name: "resolveOrder", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([], [sliceType$20], false)}, {prop: "interfaceFor", name: "interfaceFor", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([Object], [ptrType$51], false)}, {prop: "appendInPostOrder", name: "appendInPostOrder", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$78, Object, objSet], [], false)}, {prop: "arityMatch", name: "arityMatch", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$35, ptrType$35], [], false)}, {prop: "declarePkgObj", name: "declarePkgObj", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$7, Object, ptrType$23], [], false)}, {prop: "filename", name: "filename", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([$Int], [$String], false)}, {prop: "importPackage", name: "importPackage", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([token.Pos, $String, $String], [ptrType$2], false)}, {prop: "collectObjects", name: "collectObjects", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([], [], false)}, {prop: "packageObjects", name: "packageObjects", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([sliceType$20], [], false)}, {prop: "functionBodies", name: "functionBodies", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([], [], false)}, {prop: "unusedImports", name: "unusedImports", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([], [], false)}, {prop: "isTerminating", name: "isTerminating", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ast.Stmt, $String], [$Bool], false)}, {prop: "isTerminatingList", name: "isTerminatingList", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([sliceType$27, $String], [$Bool], false)}, {prop: "isTerminatingSwitch", name: "isTerminatingSwitch", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$32, $String], [$Bool], false)}, {prop: "funcBody", name: "funcBody", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$23, $String, ptrType$19, ptrType$32], [], false)}, {prop: "usage", name: "usage", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$1], [], false)}, {prop: "simpleStmt", name: "simpleStmt", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ast.Stmt], [], false)}, {prop: "stmtList", name: "stmtList", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([stmtContext, sliceType$27], [], false)}, {prop: "multipleDefaults", name: "multipleDefaults", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([sliceType$27], [], false)}, {prop: "openScope", name: "openScope", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ast.Stmt, $String], [], false)}, {prop: "closeScope", name: "closeScope", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([], [], false)}, {prop: "suspendedCall", name: "suspendedCall", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([$String, ptrType$55], [], false)}, {prop: "caseValues", name: "caseValues", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, sliceType$10, valueMap], [], false)}, {prop: "caseTypes", name: "caseTypes", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, ptrType$58, sliceType$10, mapType$5], [Type], false)}, {prop: "stmt", name: "stmt", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([stmtContext, ast.Stmt], [], false)}, {prop: "ident", name: "ident", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$38, ptrType$7, ptrType$6, sliceType$16], [], false)}, {prop: "typExpr", name: "typExpr", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ast.Expr, ptrType$6, sliceType$16], [Type], false)}, {prop: "typ", name: "typ", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ast.Expr], [Type], false)}, {prop: "funcType", name: "funcType", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$19, ptrType$83, ptrType$50], [], false)}, {prop: "typExprInternal", name: "typExprInternal", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ast.Expr, ptrType$6, sliceType$16], [Type], false)}, {prop: "typOrNil", name: "typOrNil", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ast.Expr], [Type], false)}, {prop: "arrayLength", name: "arrayLength", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ast.Expr], [$Int64], false)}, {prop: "collectParams", name: "collectParams", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$1, ptrType$83, $Bool], [sliceType$6, $Bool], false)}, {prop: "declareInSet", name: "declareInSet", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$31, token.Pos, Object], [$Bool], false)}, {prop: "interfaceType", name: "interfaceType", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$58, ptrType$51, ptrType$6, sliceType$16], [], false)}, {prop: "tag", name: "tag", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$56], [$String], false)}, {prop: "structType", name: "structType", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$30, ptrType$49, sliceType$16], [], false)}];
	ptrType$62.methods = [{prop: "add", name: "add", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$61], [], false)}];
	nodeQueue.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	ptrType$60.methods = [{prop: "Push", name: "Push", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "Pop", name: "Pop", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	ptrType$63.methods = [{prop: "insert", name: "insert", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$64], [], false)}, {prop: "gotoTarget", name: "gotoTarget", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([$String], [ptrType$64], false)}, {prop: "enclosingTarget", name: "enclosingTarget", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([$String], [ptrType$64], false)}];
	ptrType$95.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [ptrType], false)}, {prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([ptrType$2, $String], [ptrType], false)}];
	fieldSet.methods = [{prop: "add", name: "add", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$10, $Bool], [fieldSet], false)}];
	methodSet.methods = [{prop: "add", name: "add", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([sliceType$1, sliceType$11, $Bool, $Bool], [methodSet], false)}];
	ptrType$96.methods = [{prop: "Parent", name: "Parent", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "Pkg", name: "Pkg", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Exported", name: "Exported", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Id", name: "Id", pkg: "", typ: $funcType([], [$String], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "order", name: "order", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([], [$Uint32], false)}, {prop: "scopePos", name: "scopePos", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([], [token.Pos], false)}, {prop: "setParent", name: "setParent", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$1], [], false)}, {prop: "setOrder", name: "setOrder", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([$Uint32], [], false)}, {prop: "setScopePos", name: "setScopePos", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([token.Pos], [], false)}, {prop: "sameId", name: "sameId", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$2, $String], [$Bool], false)}];
	ptrType$20.methods = [{prop: "Imported", name: "Imported", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "Val", name: "Val", pkg: "", typ: $funcType([], [constant.Value], false)}, {prop: "isDependency", name: "isDependency", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$21.methods = [{prop: "IsAlias", name: "IsAlias", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$10.methods = [{prop: "Anonymous", name: "Anonymous", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsField", name: "IsField", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "isDependency", name: "isDependency", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$5.methods = [{prop: "FullName", name: "FullName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Scope", name: "Scope", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "isDependency", name: "isDependency", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$65.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$22.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$77.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$31.methods = [{prop: "insert", name: "insert", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([Object], [Object], false)}];
	ptrType$38.methods = [{prop: "convertibleTo", name: "convertibleTo", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$8, Type], [$Bool], false)}, {prop: "pos", name: "pos", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([], [token.Pos], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "setConst", name: "setConst", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([token.Token, $String], [], false)}, {prop: "isNil", name: "isNil", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([], [$Bool], false)}, {prop: "assignableTo", name: "assignableTo", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$8, Type, ptrType$9], [$Bool], false)}];
	inSourceOrder.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	ptrType$2.methods = [{prop: "Path", name: "Path", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetName", name: "SetName", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Scope", name: "Scope", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Complete", name: "Complete", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "MarkComplete", name: "MarkComplete", pkg: "", typ: $funcType([], [], false)}, {prop: "Imports", name: "Imports", pkg: "", typ: $funcType([], [sliceType$24], false)}, {prop: "SetImports", name: "SetImports", pkg: "", typ: $funcType([sliceType$24], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$79.methods = [{prop: "identical", name: "identical", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$79], [$Bool], false)}];
	ptrType$23.methods = [{prop: "hasInitializer", name: "hasInitializer", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([], [$Bool], false)}, {prop: "addDep", name: "addDep", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([Object], [], false)}];
	ptrType$1.methods = [{prop: "Parent", name: "Parent", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Names", name: "Names", pkg: "", typ: $funcType([], [sliceType$26], false)}, {prop: "NumChildren", name: "NumChildren", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Child", name: "Child", pkg: "", typ: $funcType([$Int], [ptrType$1], false)}, {prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [Object], false)}, {prop: "LookupParent", name: "LookupParent", pkg: "", typ: $funcType([$String, token.Pos], [ptrType$1, Object], false)}, {prop: "Insert", name: "Insert", pkg: "", typ: $funcType([Object], [Object], false)}, {prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "Contains", name: "Contains", pkg: "", typ: $funcType([token.Pos], [$Bool], false)}, {prop: "Innermost", name: "Innermost", pkg: "", typ: $funcType([token.Pos], [ptrType$1], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer, $Int, $Bool], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType.methods = [{prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [SelectionKind], false)}, {prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Obj", name: "Obj", pkg: "", typ: $funcType([], [Object], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([], [sliceType$11], false)}, {prop: "Indirect", name: "Indirect", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$92.methods = [{prop: "Alignof", name: "Alignof", pkg: "", typ: $funcType([Type], [$Int64], false)}, {prop: "Offsetsof", name: "Offsetsof", pkg: "", typ: $funcType([sliceType$6], [sliceType$9], false)}, {prop: "Sizeof", name: "Sizeof", pkg: "", typ: $funcType([Type], [$Int64], false)}];
	ptrType$4.methods = [{prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [BasicKind], false)}, {prop: "Info", name: "Info", pkg: "", typ: $funcType([], [BasicInfo], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [Type], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$13.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [Type], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$12.methods = [{prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [Type], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$30.methods = [{prop: "NumFields", name: "NumFields", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [ptrType$10], false)}, {prop: "Tag", name: "Tag", pkg: "", typ: $funcType([$Int], [$String], false)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [Type], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$17.methods = [{prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [Type], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$16.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [ptrType$10], false)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [Type], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$19.methods = [{prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "Params", name: "Params", pkg: "", typ: $funcType([], [ptrType$16], false)}, {prop: "Results", name: "Results", pkg: "", typ: $funcType([], [ptrType$16], false)}, {prop: "Variadic", name: "Variadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [Type], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$58.methods = [{prop: "NumExplicitMethods", name: "NumExplicitMethods", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ExplicitMethod", name: "ExplicitMethod", pkg: "", typ: $funcType([$Int], [ptrType$5], false)}, {prop: "NumEmbeddeds", name: "NumEmbeddeds", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Embedded", name: "Embedded", pkg: "", typ: $funcType([$Int], [ptrType$6], false)}, {prop: "NumMethods", name: "NumMethods", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [ptrType$5], false)}, {prop: "Empty", name: "Empty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Complete", name: "Complete", pkg: "", typ: $funcType([], [ptrType$58], false)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [Type], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$15.methods = [{prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [Type], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$14.methods = [{prop: "Dir", name: "Dir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [Type], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$6.methods = [{prop: "setUnderlying", name: "setUnderlying", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([Type], [], false)}, {prop: "Obj", name: "Obj", pkg: "", typ: $funcType([], [ptrType$21], false)}, {prop: "NumMethods", name: "NumMethods", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [ptrType$5], false)}, {prop: "SetUnderlying", name: "SetUnderlying", pkg: "", typ: $funcType([Type], [], false)}, {prop: "AddMethod", name: "AddMethod", pkg: "", typ: $funcType([ptrType$5], [], false)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [Type], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	byUniqueTypeName.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	byUniqueMethodName.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	Error.init("", [{prop: "Fset", name: "Fset", anonymous: false, exported: true, typ: ptrType$26, tag: ""}, {prop: "Pos", name: "Pos", anonymous: false, exported: true, typ: token.Pos, tag: ""}, {prop: "Msg", name: "Msg", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Soft", name: "Soft", anonymous: false, exported: true, typ: $Bool, tag: ""}]);
	Importer.init([{prop: "Import", name: "Import", pkg: "", typ: $funcType([$String], [ptrType$2, $error], false)}]);
	ImporterFrom.init([{prop: "Import", name: "Import", pkg: "", typ: $funcType([$String], [ptrType$2, $error], false)}, {prop: "ImportFrom", name: "ImportFrom", pkg: "", typ: $funcType([$String, $String, ImportMode], [ptrType$2, $error], false)}]);
	Config.init("", [{prop: "IgnoreFuncBodies", name: "IgnoreFuncBodies", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "FakeImportC", name: "FakeImportC", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "Error", name: "Error", anonymous: false, exported: true, typ: funcType$1, tag: ""}, {prop: "Importer", name: "Importer", anonymous: false, exported: true, typ: Importer, tag: ""}, {prop: "Sizes", name: "Sizes", anonymous: false, exported: true, typ: Sizes, tag: ""}, {prop: "DisableUnusedImportCheck", name: "DisableUnusedImportCheck", anonymous: false, exported: true, typ: $Bool, tag: ""}]);
	Info.init("", [{prop: "Types", name: "Types", anonymous: false, exported: true, typ: mapType, tag: ""}, {prop: "Defs", name: "Defs", anonymous: false, exported: true, typ: mapType$1, tag: ""}, {prop: "Uses", name: "Uses", anonymous: false, exported: true, typ: mapType$1, tag: ""}, {prop: "Implicits", name: "Implicits", anonymous: false, exported: true, typ: mapType$2, tag: ""}, {prop: "Selections", name: "Selections", anonymous: false, exported: true, typ: mapType$3, tag: ""}, {prop: "Scopes", name: "Scopes", anonymous: false, exported: true, typ: mapType$4, tag: ""}, {prop: "InitOrder", name: "InitOrder", anonymous: false, exported: true, typ: sliceType$12, tag: ""}]);
	TypeAndValue.init("example.com/transpiler/xgtest/types", [{prop: "mode", name: "mode", anonymous: false, exported: false, typ: operandMode, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: Type, tag: ""}, {prop: "Value", name: "Value", anonymous: false, exported: true, typ: constant.Value, tag: ""}]);
	Initializer.init("", [{prop: "Lhs", name: "Lhs", anonymous: false, exported: true, typ: sliceType$6, tag: ""}, {prop: "Rhs", name: "Rhs", anonymous: false, exported: true, typ: ast.Expr, tag: ""}]);
	getter.init([ptrType$38, $Int], [], false);
	exprInfo.init("example.com/transpiler/xgtest/types", [{prop: "isLhs", name: "isLhs", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "mode", name: "mode", anonymous: false, exported: false, typ: operandMode, tag: ""}, {prop: "typ", name: "typ", anonymous: false, exported: false, typ: ptrType$4, tag: ""}, {prop: "val", name: "val", anonymous: false, exported: false, typ: constant.Value, tag: ""}]);
	funcInfo.init("example.com/transpiler/xgtest/types", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "decl", name: "decl", anonymous: false, exported: false, typ: ptrType$23, tag: ""}, {prop: "sig", name: "sig", anonymous: false, exported: false, typ: ptrType$19, tag: ""}, {prop: "body", name: "body", anonymous: false, exported: false, typ: ptrType$32, tag: ""}]);
	context.init("example.com/transpiler/xgtest/types", [{prop: "decl", name: "decl", anonymous: false, exported: false, typ: ptrType$23, tag: ""}, {prop: "scope", name: "scope", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "iota", name: "iota", anonymous: false, exported: false, typ: constant.Value, tag: ""}, {prop: "sig", name: "sig", anonymous: false, exported: false, typ: ptrType$19, tag: ""}, {prop: "hasLabel", name: "hasLabel", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "hasCallOrRecv", name: "hasCallOrRecv", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	importKey.init("example.com/transpiler/xgtest/types", [{prop: "path", name: "path", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "dir", name: "dir", anonymous: false, exported: false, typ: $String, tag: ""}]);
	Checker.init("example.com/transpiler/xgtest/types", [{prop: "conf", name: "conf", anonymous: false, exported: false, typ: ptrType$8, tag: ""}, {prop: "fset", name: "fset", anonymous: false, exported: false, typ: ptrType$26, tag: ""}, {prop: "pkg", name: "pkg", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "Info", name: "Info", anonymous: true, exported: true, typ: ptrType$24, tag: ""}, {prop: "objMap", name: "objMap", anonymous: false, exported: false, typ: mapType$6, tag: ""}, {prop: "impMap", name: "impMap", anonymous: false, exported: false, typ: mapType$7, tag: ""}, {prop: "files", name: "files", anonymous: false, exported: false, typ: sliceType$13, tag: ""}, {prop: "unusedDotImports", name: "unusedDotImports", anonymous: false, exported: false, typ: mapType$9, tag: ""}, {prop: "firstErr", name: "firstErr", anonymous: false, exported: false, typ: $error, tag: ""}, {prop: "methods", name: "methods", anonymous: false, exported: false, typ: mapType$10, tag: ""}, {prop: "untyped", name: "untyped", anonymous: false, exported: false, typ: mapType$11, tag: ""}, {prop: "funcs", name: "funcs", anonymous: false, exported: false, typ: sliceType$14, tag: ""}, {prop: "delayed", name: "delayed", anonymous: false, exported: false, typ: sliceType$15, tag: ""}, {prop: "context", name: "context", anonymous: true, exported: false, typ: context, tag: ""}, {prop: "pos", name: "pos", anonymous: false, exported: false, typ: token.Pos, tag: ""}, {prop: "indent", name: "indent", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	bailout.init("", []);
	opPredicates.init(token.Token, funcType$2);
	dependency.init([{prop: "Exported", name: "Exported", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Id", name: "Id", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Parent", name: "Parent", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Pkg", name: "Pkg", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "isDependency", name: "isDependency", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([], [], false)}, {prop: "order", name: "order", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([], [$Uint32], false)}, {prop: "sameId", name: "sameId", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$2, $String], [$Bool], false)}, {prop: "scopePos", name: "scopePos", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([], [token.Pos], false)}, {prop: "setOrder", name: "setOrder", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([$Uint32], [], false)}, {prop: "setParent", name: "setParent", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$1], [], false)}, {prop: "setScopePos", name: "setScopePos", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([token.Pos], [], false)}]);
	graphNode.init("example.com/transpiler/xgtest/types", [{prop: "obj", name: "obj", anonymous: false, exported: false, typ: dependency, tag: ""}, {prop: "pred", name: "pred", anonymous: false, exported: false, typ: nodeSet, tag: ""}, {prop: "succ", name: "succ", anonymous: false, exported: false, typ: nodeSet, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "ndeps", name: "ndeps", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	nodeSet.init(ptrType$61, $Bool);
	nodeQueue.init(ptrType$61);
	block.init("example.com/transpiler/xgtest/types", [{prop: "parent", name: "parent", anonymous: false, exported: false, typ: ptrType$63, tag: ""}, {prop: "lstmt", name: "lstmt", anonymous: false, exported: false, typ: ptrType$64, tag: ""}, {prop: "labels", name: "labels", anonymous: false, exported: false, typ: mapType$12, tag: ""}]);
	embeddedType.init("example.com/transpiler/xgtest/types", [{prop: "typ", name: "typ", anonymous: false, exported: false, typ: Type, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: sliceType$11, tag: ""}, {prop: "indirect", name: "indirect", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "multiples", name: "multiples", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	MethodSet.init("example.com/transpiler/xgtest/types", [{prop: "list", name: "list", anonymous: false, exported: false, typ: sliceType, tag: ""}]);
	fieldSet.init($String, ptrType$10);
	methodSet.init($String, ptrType);
	Object.init([{prop: "Exported", name: "Exported", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Id", name: "Id", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Parent", name: "Parent", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Pkg", name: "Pkg", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "order", name: "order", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([], [$Uint32], false)}, {prop: "sameId", name: "sameId", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$2, $String], [$Bool], false)}, {prop: "scopePos", name: "scopePos", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([], [token.Pos], false)}, {prop: "setOrder", name: "setOrder", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([$Uint32], [], false)}, {prop: "setParent", name: "setParent", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([ptrType$1], [], false)}, {prop: "setScopePos", name: "setScopePos", pkg: "example.com/transpiler/xgtest/types", typ: $funcType([token.Pos], [], false)}]);
	object.init("example.com/transpiler/xgtest/types", [{prop: "parent", name: "parent", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "pos", name: "pos", anonymous: false, exported: false, typ: token.Pos, tag: ""}, {prop: "pkg", name: "pkg", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "typ", name: "typ", anonymous: false, exported: false, typ: Type, tag: ""}, {prop: "order_", name: "order_", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "scopePos_", name: "scopePos_", anonymous: false, exported: false, typ: token.Pos, tag: ""}]);
	PkgName.init("example.com/transpiler/xgtest/types", [{prop: "object", name: "object", anonymous: true, exported: false, typ: object, tag: ""}, {prop: "imported", name: "imported", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "used", name: "used", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	Const.init("example.com/transpiler/xgtest/types", [{prop: "object", name: "object", anonymous: true, exported: false, typ: object, tag: ""}, {prop: "val", name: "val", anonymous: false, exported: false, typ: constant.Value, tag: ""}, {prop: "visited", name: "visited", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	TypeName.init("example.com/transpiler/xgtest/types", [{prop: "object", name: "object", anonymous: true, exported: false, typ: object, tag: ""}]);
	Var.init("example.com/transpiler/xgtest/types", [{prop: "object", name: "object", anonymous: true, exported: false, typ: object, tag: ""}, {prop: "anonymous", name: "anonymous", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "visited", name: "visited", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "isField", name: "isField", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "used", name: "used", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	Func.init("example.com/transpiler/xgtest/types", [{prop: "object", name: "object", anonymous: true, exported: false, typ: object, tag: ""}]);
	Label.init("example.com/transpiler/xgtest/types", [{prop: "object", name: "object", anonymous: true, exported: false, typ: object, tag: ""}, {prop: "used", name: "used", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	Builtin.init("example.com/transpiler/xgtest/types", [{prop: "object", name: "object", anonymous: true, exported: false, typ: object, tag: ""}, {prop: "id", name: "id", anonymous: false, exported: false, typ: builtinId, tag: ""}]);
	Nil.init("example.com/transpiler/xgtest/types", [{prop: "object", name: "object", anonymous: true, exported: false, typ: object, tag: ""}]);
	objset.init($String, Object);
	operand.init("example.com/transpiler/xgtest/types", [{prop: "mode", name: "mode", anonymous: false, exported: false, typ: operandMode, tag: ""}, {prop: "expr", name: "expr", anonymous: false, exported: false, typ: ast.Expr, tag: ""}, {prop: "typ", name: "typ", anonymous: false, exported: false, typ: Type, tag: ""}, {prop: "val", name: "val", anonymous: false, exported: false, typ: constant.Value, tag: ""}, {prop: "id", name: "id", anonymous: false, exported: false, typ: builtinId, tag: ""}]);
	inSourceOrder.init(Object);
	Package.init("example.com/transpiler/xgtest/types", [{prop: "path", name: "path", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "scope", name: "scope", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "complete", name: "complete", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "imports", name: "imports", anonymous: false, exported: false, typ: sliceType$24, tag: ""}, {prop: "fake", name: "fake", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	ifacePair.init("example.com/transpiler/xgtest/types", [{prop: "x", name: "x", anonymous: false, exported: false, typ: ptrType$58, tag: ""}, {prop: "y", name: "y", anonymous: false, exported: false, typ: ptrType$58, tag: ""}, {prop: "prev", name: "prev", anonymous: false, exported: false, typ: ptrType$79, tag: ""}]);
	declInfo.init("example.com/transpiler/xgtest/types", [{prop: "file", name: "file", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "lhs", name: "lhs", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "typ", name: "typ", anonymous: false, exported: false, typ: ast.Expr, tag: ""}, {prop: "init", name: "init", anonymous: false, exported: false, typ: ast.Expr, tag: ""}, {prop: "fdecl", name: "fdecl", anonymous: false, exported: false, typ: ptrType$80, tag: ""}, {prop: "alias", name: "alias", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "deps", name: "deps", anonymous: false, exported: false, typ: objSet, tag: ""}]);
	objSet.init(Object, $Bool);
	Scope.init("example.com/transpiler/xgtest/types", [{prop: "parent", name: "parent", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "children", name: "children", anonymous: false, exported: false, typ: sliceType$25, tag: ""}, {prop: "elems", name: "elems", anonymous: false, exported: false, typ: mapType$13, tag: ""}, {prop: "pos", name: "pos", anonymous: false, exported: false, typ: token.Pos, tag: ""}, {prop: "end", name: "end", anonymous: false, exported: false, typ: token.Pos, tag: ""}, {prop: "comment", name: "comment", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "isFunc", name: "isFunc", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	Selection.init("example.com/transpiler/xgtest/types", [{prop: "kind", name: "kind", anonymous: false, exported: false, typ: SelectionKind, tag: ""}, {prop: "recv", name: "recv", anonymous: false, exported: false, typ: Type, tag: ""}, {prop: "obj", name: "obj", anonymous: false, exported: false, typ: Object, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: sliceType$11, tag: ""}, {prop: "indirect", name: "indirect", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	Sizes.init([{prop: "Alignof", name: "Alignof", pkg: "", typ: $funcType([Type], [$Int64], false)}, {prop: "Offsetsof", name: "Offsetsof", pkg: "", typ: $funcType([sliceType$6], [sliceType$9], false)}, {prop: "Sizeof", name: "Sizeof", pkg: "", typ: $funcType([Type], [$Int64], false)}]);
	StdSizes.init("", [{prop: "WordSize", name: "WordSize", anonymous: false, exported: true, typ: $Int64, tag: ""}, {prop: "MaxAlign", name: "MaxAlign", anonymous: false, exported: true, typ: $Int64, tag: ""}]);
	valueMap.init($emptyInterface, sliceType$28);
	valueType.init("example.com/transpiler/xgtest/types", [{prop: "pos", name: "pos", anonymous: false, exported: false, typ: token.Pos, tag: ""}, {prop: "typ", name: "typ", anonymous: false, exported: false, typ: Type, tag: ""}]);
	Type.init([{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [Type], false)}]);
	Basic.init("example.com/transpiler/xgtest/types", [{prop: "kind", name: "kind", anonymous: false, exported: false, typ: BasicKind, tag: ""}, {prop: "info", name: "info", anonymous: false, exported: false, typ: BasicInfo, tag: ""}, {prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}]);
	Array.init("example.com/transpiler/xgtest/types", [{prop: "len", name: "len", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: Type, tag: ""}]);
	Slice.init("example.com/transpiler/xgtest/types", [{prop: "elem", name: "elem", anonymous: false, exported: false, typ: Type, tag: ""}]);
	Struct.init("example.com/transpiler/xgtest/types", [{prop: "fields", name: "fields", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "tags", name: "tags", anonymous: false, exported: false, typ: sliceType$26, tag: ""}]);
	Pointer.init("example.com/transpiler/xgtest/types", [{prop: "base", name: "base", anonymous: false, exported: false, typ: Type, tag: ""}]);
	Tuple.init("example.com/transpiler/xgtest/types", [{prop: "vars", name: "vars", anonymous: false, exported: false, typ: sliceType$6, tag: ""}]);
	Signature.init("example.com/transpiler/xgtest/types", [{prop: "scope", name: "scope", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "recv", name: "recv", anonymous: false, exported: false, typ: ptrType$10, tag: ""}, {prop: "params", name: "params", anonymous: false, exported: false, typ: ptrType$16, tag: ""}, {prop: "results", name: "results", anonymous: false, exported: false, typ: ptrType$16, tag: ""}, {prop: "variadic", name: "variadic", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	Interface.init("example.com/transpiler/xgtest/types", [{prop: "methods", name: "methods", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "embeddeds", name: "embeddeds", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "allMethods", name: "allMethods", anonymous: false, exported: false, typ: sliceType$1, tag: ""}]);
	Map.init("example.com/transpiler/xgtest/types", [{prop: "key", name: "key", anonymous: false, exported: false, typ: Type, tag: ""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: Type, tag: ""}]);
	Chan.init("example.com/transpiler/xgtest/types", [{prop: "dir", name: "dir", anonymous: false, exported: false, typ: ChanDir, tag: ""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: Type, tag: ""}]);
	Named.init("example.com/transpiler/xgtest/types", [{prop: "obj", name: "obj", anonymous: false, exported: false, typ: ptrType$21, tag: ""}, {prop: "underlying", name: "underlying", anonymous: false, exported: false, typ: Type, tag: ""}, {prop: "methods", name: "methods", anonymous: false, exported: false, typ: sliceType$1, tag: ""}]);
	byUniqueTypeName.init(ptrType$6);
	byUniqueMethodName.init(ptrType$5);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = heap.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ast.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = parser.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = constant.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = token.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		emptyMethodSet = new MethodSet.ptr(sliceType.nil);
		gcCompatibilityMode = false;
		$pkg.Universe = ptrType$1.nil;
		$pkg.Unsafe = ptrType$2.nil;
		universeIota = ptrType$3.nil;
		universeByte = ptrType$4.nil;
		universeRune = ptrType$4.nil;
		operandModeString = $toNativeArray($kindString, ["invalid operand", "no value", "built-in", "type", "constant", "variable", "map index expression", "value", "comma, ok expression"]);
		gcArchSizes = $makeMap($String.keyFor, [{ k: "386", v: new StdSizes.ptr(new $Int64(0, 4), new $Int64(0, 4)) }, { k: "arm", v: new StdSizes.ptr(new $Int64(0, 4), new $Int64(0, 4)) }, { k: "arm64", v: new StdSizes.ptr(new $Int64(0, 8), new $Int64(0, 8)) }, { k: "amd64", v: new StdSizes.ptr(new $Int64(0, 8), new $Int64(0, 8)) }, { k: "amd64p32", v: new StdSizes.ptr(new $Int64(0, 4), new $Int64(0, 8)) }, { k: "mips", v: new StdSizes.ptr(new $Int64(0, 4), new $Int64(0, 4)) }, { k: "mipsle", v: new StdSizes.ptr(new $Int64(0, 4), new $Int64(0, 4)) }, { k: "mips64", v: new StdSizes.ptr(new $Int64(0, 8), new $Int64(0, 8)) }, { k: "mips64le", v: new StdSizes.ptr(new $Int64(0, 8), new $Int64(0, 8)) }, { k: "ppc64", v: new StdSizes.ptr(new $Int64(0, 8), new $Int64(0, 8)) }, { k: "ppc64le", v: new StdSizes.ptr(new $Int64(0, 8), new $Int64(0, 8)) }, { k: "s390x", v: new StdSizes.ptr(new $Int64(0, 8), new $Int64(0, 8)) }]);
		stdSizes = SizesFor("gc", "amd64");
		basicSizes = $toNativeArray($kindUint8, [0, 1, 0, 1, 2, 4, 8, 0, 1, 2, 4, 8, 0, 4, 8, 8, 16]);
		unaryOpPredicates = $makeMap(token.Token.keyFor, [{ k: 12, v: isNumeric }, { k: 13, v: isNumeric }, { k: 19, v: isInteger }, { k: 43, v: isBoolean }]);
		binaryOpPredicates = $makeMap(token.Token.keyFor, [{ k: 12, v: (function $b(typ) {
			var _r, _r$1, _v, typ, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = isNumeric(typ); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			if (_r) { _v = true; $s = 1; continue s; }
			_r$1 = isString(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1; case 1:
			$s = -1; return _v;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
		}) }, { k: 13, v: isNumeric }, { k: 14, v: isNumeric }, { k: 15, v: isNumeric }, { k: 16, v: isInteger }, { k: 17, v: isInteger }, { k: 18, v: isInteger }, { k: 19, v: isInteger }, { k: 22, v: isInteger }, { k: 34, v: isBoolean }, { k: 35, v: isBoolean }]);
		markComplete = $makeSlice(sliceType$1, 0);
		emptyInterface = new Interface.ptr(sliceType$1.nil, sliceType$2.nil, markComplete);
		$pkg.Typ = new sliceType$3([new Basic.ptr(0, 0, "invalid type"), new Basic.ptr(1, 1, "bool"), new Basic.ptr(2, 2, "int"), new Basic.ptr(3, 2, "int8"), new Basic.ptr(4, 2, "int16"), new Basic.ptr(5, 2, "int32"), new Basic.ptr(6, 2, "int64"), new Basic.ptr(7, 6, "uint"), new Basic.ptr(8, 6, "uint8"), new Basic.ptr(9, 6, "uint16"), new Basic.ptr(10, 6, "uint32"), new Basic.ptr(11, 6, "uint64"), new Basic.ptr(12, 6, "uintptr"), new Basic.ptr(13, 8, "float32"), new Basic.ptr(14, 8, "float64"), new Basic.ptr(15, 16, "complex64"), new Basic.ptr(16, 16, "complex128"), new Basic.ptr(17, 32, "string"), new Basic.ptr(18, 0, "Pointer"), new Basic.ptr(19, 65, "untyped bool"), new Basic.ptr(20, 66, "untyped int"), new Basic.ptr(21, 66, "untyped rune"), new Basic.ptr(22, 72, "untyped float"), new Basic.ptr(23, 80, "untyped complex"), new Basic.ptr(24, 96, "untyped string"), new Basic.ptr(25, 64, "untyped nil"), new Basic.ptr(26, 0, "untyped void")]);
		aliases = $toNativeArray($kindPtr, [new Basic.ptr(8, 6, "byte"), new Basic.ptr(5, 2, "rune")]);
		predeclaredConsts = $toNativeArray($kindStruct, [new structType.ptr("true", 19, constant.MakeBool(true)), new structType.ptr("false", 19, constant.MakeBool(false)), new structType.ptr("iota", 20, constant.MakeInt64(new $Int64(0, 0)))]);
		predeclaredFuncs = $toNativeArray($kindStruct, [new structType$1.ptr("append", 1, true, 1), new structType$1.ptr("cap", 1, false, 1), new structType$1.ptr("close", 1, false, 2), new structType$1.ptr("complex", 2, false, 1), new structType$1.ptr("copy", 2, false, 2), new structType$1.ptr("delete", 2, false, 2), new structType$1.ptr("imag", 1, false, 1), new structType$1.ptr("len", 1, false, 1), new structType$1.ptr("make", 1, true, 1), new structType$1.ptr("new", 1, false, 1), new structType$1.ptr("panic", 1, false, 2), new structType$1.ptr("print", 0, true, 2), new structType$1.ptr("println", 0, true, 2), new structType$1.ptr("real", 1, false, 1), new structType$1.ptr("recover", 0, false, 2), new structType$1.ptr("Alignof", 1, false, 1), new structType$1.ptr("Offsetof", 1, false, 1), new structType$1.ptr("Sizeof", 1, false, 1), new structType$1.ptr("assert", 1, false, 2), new structType$1.ptr("trace", 0, true, 2)]);
		$r = init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["example.com/transpiler/xgtest/importer"] = (function() {
	var $pkg = {}, $init, types, fmt, Foo, ptrType, sliceType, ptrType$1, Default;
	types = $packages["example.com/transpiler/xgtest/types"];
	fmt = $packages["fmt"];
	Foo = $pkg.Foo = $newType(0, $kindStruct, "importer.Foo", true, "example.com/transpiler/xgtest/importer", true, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	ptrType = $ptrType(types.Package);
	sliceType = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(Foo);
	Foo.ptr.prototype.Import = function(path) {
		var _r, f, path, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; path = $f.path; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = fmt.Errorf("Not found!", new sliceType([])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return [ptrType.nil, _r];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Foo.ptr.prototype.Import }; } $f._r = _r; $f.f = f; $f.path = path; $f.$s = $s; $f.$r = $r; return $f;
	};
	Foo.prototype.Import = function(path) { return this.$val.Import(path); };
	Default = function() {
		return new Foo.ptr();
	};
	$pkg.Default = Default;
	ptrType$1.methods = [{prop: "Import", name: "Import", pkg: "", typ: $funcType([$String], [ptrType, $error], false)}];
	Foo.init("", []);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = types.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/go-li/mapast"] = (function() {
	var $pkg = {}, $init, sliceType, structType, ptrType, storage, LookupComments, ToplevFuncNode, BlocOfCodeNode, ExpressionNode, BranchStmtNode, IncDecStmtNode, AssignStmtNode, ClosureExpNode, GoDferStmtNode, LblGotoCntNode, VarDefStmtNode, TypDefStmtNode, O, Poke, Which, Printer, itoA, PrintDump, Dump, PrintCode, Code;
	sliceType = $sliceType($Uint8);
	structType = $structType("", []);
	ptrType = $ptrType($Uint8);
	LookupComments = function(file, EnderSepar) {
		var EnderSepar, _key, _key$1, _key$2, _key$3, _key$4, _q, _q$1, _q$2, _q$3, _q$4, _tmp, _tmp$1, c, cleanline, d, file, i, sawender, whitespace, x;
		whitespace = false;
		cleanline = false;
		sawender = false;
		i = 0;
		while (true) {
			if (!((i + 1 >> 0) < file.$length)) { break; }
			_tmp = ((i < 0 || i >= file.$length) ? ($throwRuntimeError("index out of range"), undefined) : file.$array[file.$offset + i]);
			_tmp$1 = (x = i + 1 >> 0, ((x < 0 || x >= file.$length) ? ($throwRuntimeError("index out of range"), undefined) : file.$array[file.$offset + x]));
			c = _tmp;
			d = _tmp$1;
			if (c === 10) {
				if (whitespace) {
					cleanline = true;
				}
				whitespace = true;
				sawender = false;
				i = i + (1) >> 0;
				continue;
			}
			if ((c === 47) && (d === 47) && !whitespace && !sawender) {
				_key = (_q = ((i + 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")); (EnderSepar[0] || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: new structType.ptr() };
				sawender = true;
			}
			if ((c === 47) && (d === 42) && !whitespace && !sawender) {
				_key$1 = (_q$1 = ((i + 1 >> 0)) / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")); (EnderSepar[0] || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$1)] = { k: _key$1, v: new structType.ptr() };
				sawender = true;
			}
			if ((c === 47) && (d === 47) && cleanline) {
				_key$2 = (_q$2 = ((i + 1 >> 0)) / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")); (EnderSepar[1] || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$2)] = { k: _key$2, v: new structType.ptr() };
				cleanline = false;
			}
			if ((c === 47) && (d === 42) && cleanline) {
				_key$3 = (_q$3 = ((i + 1 >> 0)) / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")); (EnderSepar[1] || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$3)] = { k: _key$3, v: new structType.ptr() };
				cleanline = false;
			}
			if ((c === 112) && (d === 97) && cleanline) {
				_key$4 = (_q$4 = ((i + 1 >> 0)) / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero")); (EnderSepar[1] || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$4)] = { k: _key$4, v: new structType.ptr() };
				cleanline = false;
			}
			if (c > 32) {
				whitespace = false;
				cleanline = false;
			}
			i = i + (1) >> 0;
		}
	};
	$pkg.LookupComments = LookupComments;
	ToplevFuncNode = function(receiver, argc) {
		var argc, receiver, recv;
		recv = 0;
		if (receiver) {
			recv = 1;
		}
		return $subslice($pkg.ToplevFunc, 0, (recv + 1 >> 0), ((((argc.$low >> 0)) + recv >> 0) + 1 >> 0));
	};
	$pkg.ToplevFuncNode = ToplevFuncNode;
	BlocOfCodeNode = function(kind, headelemscount) {
		var headelemscount, kind;
		return $subslice($pkg.BlocOfCode, 0, (((kind >> 0)) + 1 >> 0), (((headelemscount.$low >> 0)) + 13 >> 0));
	};
	$pkg.BlocOfCodeNode = BlocOfCodeNode;
	ExpressionNode = function(kind, elemscount) {
		var elemscount, kind;
		return $subslice($pkg.Expression, 0, (((kind >> 0)) + 1 >> 0), ((new $Uint64(elemscount.$high + 0, elemscount.$low + 38).$low >> 0)));
	};
	$pkg.ExpressionNode = ExpressionNode;
	BranchStmtNode = function(kind) {
		var kind;
		return $subslice($pkg.BranchStmt, 0, (((kind >> 0)) + 1 >> 0));
	};
	$pkg.BranchStmtNode = BranchStmtNode;
	IncDecStmtNode = function(kind) {
		var kind;
		return $subslice($pkg.IncDecStmt, 0, (((kind >> 0)) + 1 >> 0));
	};
	$pkg.IncDecStmtNode = IncDecStmtNode;
	AssignStmtNode = function(kind, elemscount) {
		var elemscount, kind;
		return $subslice($pkg.AssignStmt, 0, (((kind >> 0)) + 1 >> 0), ((new $Uint64(elemscount.$high + 0, elemscount.$low + 19).$low >> 0)));
	};
	$pkg.AssignStmtNode = AssignStmtNode;
	ClosureExpNode = function(paramscount) {
		var paramscount;
		return $subslice($pkg.ClosureExp, 0, (((paramscount.$low >> 0)) + 1 >> 0));
	};
	$pkg.ClosureExpNode = ClosureExpNode;
	GoDferStmtNode = function(kind) {
		var kind;
		return $subslice($pkg.GoDferStmt, 0, (((kind >> 0)) + 1 >> 0));
	};
	$pkg.GoDferStmtNode = GoDferStmtNode;
	LblGotoCntNode = function(kind) {
		var kind;
		return $subslice($pkg.LblGotoCnt, 0, (((kind >> 0)) + 1 >> 0));
	};
	$pkg.LblGotoCntNode = LblGotoCntNode;
	VarDefStmtNode = function(kind) {
		var kind;
		return $subslice($pkg.VarDefStmt, 0, (((kind >> 0)) + 1 >> 0));
	};
	$pkg.VarDefStmtNode = VarDefStmtNode;
	TypDefStmtNode = function(kind) {
		var kind;
		return $subslice($pkg.TypDefStmt, 0, (((kind >> 0)) + 1 >> 0));
	};
	$pkg.TypDefStmtNode = TypDefStmtNode;
	O = function(n) {
		var n, v, x, x$1, x$2, x$3, x$4, x$5, x$6;
		v = (x = $mul64(n, new $Uint64(916318735, 832913285)), new $Uint64(x.$high + 626627283, x.$low + 2183170913));
		v = (x$1 = $shiftRightUint64(v, 21), new $Uint64(v.$high ^ x$1.$high, (v.$low ^ x$1.$low) >>> 0));
		v = (x$2 = $shiftLeft64(v, 37), new $Uint64(v.$high ^ x$2.$high, (v.$low ^ x$2.$low) >>> 0));
		v = (x$3 = $shiftRightUint64(v, 4), new $Uint64(v.$high ^ x$3.$high, (v.$low ^ x$3.$low) >>> 0));
		v = $mul64(v, (new $Uint64(1110317537, 3646762765)));
		v = (x$4 = $shiftLeft64(v, 20), new $Uint64(v.$high ^ x$4.$high, (v.$low ^ x$4.$low) >>> 0));
		v = (x$5 = $shiftRightUint64(v, 41), new $Uint64(v.$high ^ x$5.$high, (v.$low ^ x$5.$low) >>> 0));
		v = (x$6 = $shiftLeft64(v, 5), new $Uint64(v.$high ^ x$6.$high, (v.$low ^ x$6.$low) >>> 0));
		return v;
	};
	$pkg.O = O;
	Poke = function(ast, iterator) {
		var _entry, _tuple, ast, iterator, ok;
		_tuple = (_entry = ast[$Uint64.keyFor(iterator)], _entry !== undefined ? [_entry.v, true] : [sliceType.nil, false]);
		ok = _tuple[1];
		return ok;
	};
	$pkg.Poke = Poke;
	Which = function(node) {
		var node;
		if (node === sliceType.nil) {
			return sliceType.nil;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.RootMatter.$array, $pkg.RootMatter.$offset + 0, ptrType)) {
			return $pkg.RootMatter;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.FileMatter.$array, $pkg.FileMatter.$offset + 0, ptrType)) {
			return $pkg.FileMatter;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.PackageDef.$array, $pkg.PackageDef.$offset + 0, ptrType)) {
			return $pkg.PackageDef;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.ImportStmt.$array, $pkg.ImportStmt.$offset + 0, ptrType)) {
			return $pkg.ImportStmt;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.ImportsDef.$array, $pkg.ImportsDef.$offset + 0, ptrType)) {
			return $pkg.ImportsDef;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.ToplevFunc.$array, $pkg.ToplevFunc.$offset + 0, ptrType)) {
			return $pkg.ToplevFunc;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.TypedIdent.$array, $pkg.TypedIdent.$offset + 0, ptrType)) {
			return $pkg.TypedIdent;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.RootOfType.$array, $pkg.RootOfType.$offset + 0, ptrType)) {
			return $pkg.RootOfType;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.BlocOfCode.$array, $pkg.BlocOfCode.$offset + 0, ptrType)) {
			return $pkg.BlocOfCode;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.TypDefStmt.$array, $pkg.TypDefStmt.$offset + 0, ptrType)) {
			return $pkg.TypDefStmt;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.StructType.$array, $pkg.StructType.$offset + 0, ptrType)) {
			return $pkg.StructType;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.BranchStmt.$array, $pkg.BranchStmt.$offset + 0, ptrType)) {
			return $pkg.BranchStmt;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.GoDferStmt.$array, $pkg.GoDferStmt.$offset + 0, ptrType)) {
			return $pkg.GoDferStmt;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.Expression.$array, $pkg.Expression.$offset + 0, ptrType)) {
			return $pkg.Expression;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.ReturnStmt.$array, $pkg.ReturnStmt.$offset + 0, ptrType)) {
			return $pkg.ReturnStmt;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.IncDecStmt.$array, $pkg.IncDecStmt.$offset + 0, ptrType)) {
			return $pkg.IncDecStmt;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.AssignStmt.$array, $pkg.AssignStmt.$offset + 0, ptrType)) {
			return $pkg.AssignStmt;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.VarDefStmt.$array, $pkg.VarDefStmt.$offset + 0, ptrType)) {
			return $pkg.VarDefStmt;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.LblGotoCnt.$array, $pkg.LblGotoCnt.$offset + 0, ptrType)) {
			return $pkg.LblGotoCnt;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.ClosureExp.$array, $pkg.ClosureExp.$offset + 0, ptrType)) {
			return $pkg.ClosureExp;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.IfceTypExp.$array, $pkg.IfceTypExp.$offset + 0, ptrType)) {
			return $pkg.IfceTypExp;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.IfceMethod.$array, $pkg.IfceMethod.$offset + 0, ptrType)) {
			return $pkg.IfceMethod;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.CommentRow.$array, $pkg.CommentRow.$offset + 0, ptrType)) {
			return $pkg.CommentRow;
		} else if ($indexPtr(node.$array, node.$offset + 0, ptrType) === $indexPtr($pkg.GenericExp.$array, $pkg.GenericExp.$offset + 0, ptrType)) {
			return $pkg.GenericExp;
		}
		return sliceType.nil;
	};
	$pkg.Which = Which;
	Printer = function(s) {
		var s;
		if (s.length === 0) {
			console.log("");
		} else {
			console.log(s);
		}
	};
	$pkg.Printer = Printer;
	itoA = function(n) {
		var _q, _q$1, _q$2, _r, _r$1, _r$2, _r$3, a, n;
		if (n > 9999) {
			return "many";
		}
		a = $toNativeArray($kindUint8, [48, 48, 48, 48]);
		a[3] = (a[3] + ((((_r = n % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24))) << 24 >>> 24);
		a[2] = (a[2] + ((((_r$1 = ((_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24))) << 24 >>> 24);
		a[1] = (a[1] + ((((_r$2 = ((_q$1 = n / 100, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24))) << 24 >>> 24);
		a[0] = (a[0] + ((((_r$3 = ((_q$2 = n / 1000, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))) % 10, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24))) << 24 >>> 24);
		if (a[0] === 48) {
			if (a[1] === 48) {
				if (a[2] === 48) {
					return ($bytesToString($subslice(new sliceType(a), 3)));
				}
				return ($bytesToString($subslice(new sliceType(a), 2)));
			}
			return ($bytesToString($subslice(new sliceType(a), 1)));
		}
		return ($bytesToString(new sliceType(a)));
	};
	PrintDump = function(ast, iterator, pad) {
		var _r, ast, iterator, pad, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; ast = $f.ast; iterator = $f.iterator; pad = $f.pad; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Dump(Printer, ast, iterator, pad); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PrintDump }; } $f._r = _r; $f.ast = ast; $f.iterator = iterator; $f.pad = pad; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.PrintDump = PrintDump;
	Dump = function(print, ast, iterator, pad) {
		var _1, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _r, _tuple, ast, i, iterator, nod, ok, pad, print, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _r = $f._r; _tuple = $f._tuple; ast = $f.ast; i = $f.i; iterator = $f.iterator; nod = $f.nod; ok = $f.ok; pad = $f.pad; print = $f.print; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (pad > 50) {
			pad = 50;
		}
		$r = print($substring("                                                      ", 0, pad)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple = (_entry = ast[$Uint64.keyFor(iterator)], _entry !== undefined ? [_entry.v, true] : [sliceType.nil, false]);
		nod = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ if (nod === sliceType.nil) { $s = 3; continue; }
		/* */ if (!(Which((_entry$1 = ast[$Uint64.keyFor(iterator)], _entry$1 !== undefined ? _entry$1.v : sliceType.nil)) === sliceType.nil)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!ok) { */ case 2:
			$r = print("[-]"); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = print(""); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return false;
		/* } else if (nod === sliceType.nil) { */ case 3:
			$r = print(" [nil]"); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = print(""); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 6; continue;
		/* } else if (!(Which((_entry$1 = ast[$Uint64.keyFor(iterator)], _entry$1 !== undefined ? _entry$1.v : sliceType.nil)) === sliceType.nil)) { */ case 4:
			$r = print(" ["); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_1 = Which((_entry$2 = ast[$Uint64.keyFor(iterator)], _entry$2 !== undefined ? _entry$2.v : sliceType.nil)).$length;
				/* */ if (_1 === (10)) { $s = 13; continue; }
				/* */ if (_1 === (1000000)) { $s = 14; continue; }
				/* */ if (_1 === (999984)) { $s = 15; continue; }
				/* */ if (_1 === (999968)) { $s = 16; continue; }
				/* */ if (_1 === (999952)) { $s = 17; continue; }
				/* */ if (_1 === (999936)) { $s = 18; continue; }
				/* */ if (_1 === (999920)) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (_1 === (10)) { */ case 13:
					$r = print(($bytesToString(Which((_entry$3 = ast[$Uint64.keyFor(iterator)], _entry$3 !== undefined ? _entry$3.v : sliceType.nil))))); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 20; continue;
				/* } else if (_1 === (1000000)) { */ case 14:
					$r = print("Expression"); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 20; continue;
				/* } else if (_1 === (999984)) { */ case 15:
					$r = print("BlocOfCode"); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 20; continue;
				/* } else if (_1 === (999968)) { */ case 16:
					$r = print("ToplevFunc"); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 20; continue;
				/* } else if (_1 === (999952)) { */ case 17:
					$r = print("AssignStmt"); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 20; continue;
				/* } else if (_1 === (999936)) { */ case 18:
					$r = print("ClosureExp"); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 20; continue;
				/* } else if (_1 === (999920)) { */ case 19:
					$r = print("IfceMethod"); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 20:
			case 12:
			$r = print(" "); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = print(itoA((_entry$4 = ast[$Uint64.keyFor(iterator)], _entry$4 !== undefined ? _entry$4.v : sliceType.nil).$length - 1 >> 0)); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = print(" "); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = print(itoA((_entry$5 = ast[$Uint64.keyFor(iterator)], _entry$5 !== undefined ? _entry$5.v : sliceType.nil).$capacity - 1 >> 0)); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = print("]"); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = print(""); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 6; continue;
		/* } else { */ case 5:
			$r = print(" [string " + ($bytesToString(nod)) + "]"); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = print(""); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		i = new $Uint64(0, 0);
		/* while (true) { */ case 36:
			_r = Dump(print, ast, (x = O(iterator), new $Uint64(x.$high + i.$high, x.$low + i.$low)), pad + 1 >> 0); /* */ $s = 40; case 40: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 38; continue; }
			/* */ $s = 39; continue;
			/* if (!_r) { */ case 38:
				$s = -1; return true;
			/* } */ case 39:
			i = (x$1 = new $Uint64(0, 1), new $Uint64(i.$high + x$1.$high, i.$low + x$1.$low));
		/* } */ $s = 36; continue; case 37:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Dump }; } $f._1 = _1; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._r = _r; $f._tuple = _tuple; $f.ast = ast; $f.i = i; $f.iterator = iterator; $f.nod = nod; $f.ok = ok; $f.pad = pad; $f.print = print; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Dump = Dump;
	PrintCode = function(ast, iterator, parent) {
		var ast, iterator, parent, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ast = $f.ast; iterator = $f.iterator; parent = $f.parent; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = Code(Printer, ast, iterator, parent); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PrintCode }; } $f.ast = ast; $f.iterator = iterator; $f.parent = parent; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.PrintCode = PrintCode;
	Code = function(print, ast, iterator, parent) {
		var _1, _10, _11, _12, _13, _14, _15, _16, _17, _18, _2, _3, _4, _5, _6, _7, _8, _9, _entry, _entry$1, _entry$10, _entry$11, _entry$12, _entry$13, _entry$14, _entry$15, _entry$16, _entry$17, _entry$18, _entry$19, _entry$2, _entry$20, _entry$21, _entry$22, _entry$23, _entry$24, _entry$25, _entry$26, _entry$27, _entry$28, _entry$29, _entry$3, _entry$30, _entry$31, _entry$32, _entry$33, _entry$34, _entry$35, _entry$36, _entry$37, _entry$38, _entry$39, _entry$4, _entry$40, _entry$41, _entry$42, _entry$43, _entry$44, _entry$45, _entry$46, _entry$47, _entry$48, _entry$49, _entry$5, _entry$50, _entry$51, _entry$52, _entry$53, _entry$54, _entry$55, _entry$56, _entry$57, _entry$58, _entry$59, _entry$6, _entry$60, _entry$61, _entry$62, _entry$63, _entry$64, _entry$65, _entry$66, _entry$67, _entry$68, _entry$69, _entry$7, _entry$70, _entry$71, _entry$72, _entry$73, _entry$74, _entry$75, _entry$76, _entry$77, _entry$78, _entry$79, _entry$8, _entry$80, _entry$81, _entry$82, _entry$83, _entry$84, _entry$85, _entry$86, _entry$87, _entry$88, _entry$89, _entry$9, _entry$90, _entry$91, abc, alpha, another, ast, ast_o_iterator, beta, blockheader, blockheader$1, caseheader, def, defparent, end, end$1, end$2, end$3, end$4, ene, epsil, gamma, i, i$1, i$2, iterator, l, l$1, l$2, multi, none, omega, op, op$1, op$10, op$11, op$2, op$3, op$4, op$5, op$6, op$7, op$8, op$9, parent, phi, print, rho, separ, separ$1, theta, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$79, x$8, x$80, x$81, x$82, x$83, x$84, x$85, x$86, x$87, x$88, x$89, x$9, x$90, x$91, x$92, x$93, x$94, x$95, x$96, x$97, xyz, xyz$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _10 = $f._10; _11 = $f._11; _12 = $f._12; _13 = $f._13; _14 = $f._14; _15 = $f._15; _16 = $f._16; _17 = $f._17; _18 = $f._18; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _7 = $f._7; _8 = $f._8; _9 = $f._9; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$10 = $f._entry$10; _entry$11 = $f._entry$11; _entry$12 = $f._entry$12; _entry$13 = $f._entry$13; _entry$14 = $f._entry$14; _entry$15 = $f._entry$15; _entry$16 = $f._entry$16; _entry$17 = $f._entry$17; _entry$18 = $f._entry$18; _entry$19 = $f._entry$19; _entry$2 = $f._entry$2; _entry$20 = $f._entry$20; _entry$21 = $f._entry$21; _entry$22 = $f._entry$22; _entry$23 = $f._entry$23; _entry$24 = $f._entry$24; _entry$25 = $f._entry$25; _entry$26 = $f._entry$26; _entry$27 = $f._entry$27; _entry$28 = $f._entry$28; _entry$29 = $f._entry$29; _entry$3 = $f._entry$3; _entry$30 = $f._entry$30; _entry$31 = $f._entry$31; _entry$32 = $f._entry$32; _entry$33 = $f._entry$33; _entry$34 = $f._entry$34; _entry$35 = $f._entry$35; _entry$36 = $f._entry$36; _entry$37 = $f._entry$37; _entry$38 = $f._entry$38; _entry$39 = $f._entry$39; _entry$4 = $f._entry$4; _entry$40 = $f._entry$40; _entry$41 = $f._entry$41; _entry$42 = $f._entry$42; _entry$43 = $f._entry$43; _entry$44 = $f._entry$44; _entry$45 = $f._entry$45; _entry$46 = $f._entry$46; _entry$47 = $f._entry$47; _entry$48 = $f._entry$48; _entry$49 = $f._entry$49; _entry$5 = $f._entry$5; _entry$50 = $f._entry$50; _entry$51 = $f._entry$51; _entry$52 = $f._entry$52; _entry$53 = $f._entry$53; _entry$54 = $f._entry$54; _entry$55 = $f._entry$55; _entry$56 = $f._entry$56; _entry$57 = $f._entry$57; _entry$58 = $f._entry$58; _entry$59 = $f._entry$59; _entry$6 = $f._entry$6; _entry$60 = $f._entry$60; _entry$61 = $f._entry$61; _entry$62 = $f._entry$62; _entry$63 = $f._entry$63; _entry$64 = $f._entry$64; _entry$65 = $f._entry$65; _entry$66 = $f._entry$66; _entry$67 = $f._entry$67; _entry$68 = $f._entry$68; _entry$69 = $f._entry$69; _entry$7 = $f._entry$7; _entry$70 = $f._entry$70; _entry$71 = $f._entry$71; _entry$72 = $f._entry$72; _entry$73 = $f._entry$73; _entry$74 = $f._entry$74; _entry$75 = $f._entry$75; _entry$76 = $f._entry$76; _entry$77 = $f._entry$77; _entry$78 = $f._entry$78; _entry$79 = $f._entry$79; _entry$8 = $f._entry$8; _entry$80 = $f._entry$80; _entry$81 = $f._entry$81; _entry$82 = $f._entry$82; _entry$83 = $f._entry$83; _entry$84 = $f._entry$84; _entry$85 = $f._entry$85; _entry$86 = $f._entry$86; _entry$87 = $f._entry$87; _entry$88 = $f._entry$88; _entry$89 = $f._entry$89; _entry$9 = $f._entry$9; _entry$90 = $f._entry$90; _entry$91 = $f._entry$91; abc = $f.abc; alpha = $f.alpha; another = $f.another; ast = $f.ast; ast_o_iterator = $f.ast_o_iterator; beta = $f.beta; blockheader = $f.blockheader; blockheader$1 = $f.blockheader$1; caseheader = $f.caseheader; def = $f.def; defparent = $f.defparent; end = $f.end; end$1 = $f.end$1; end$2 = $f.end$2; end$3 = $f.end$3; end$4 = $f.end$4; ene = $f.ene; epsil = $f.epsil; gamma = $f.gamma; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; iterator = $f.iterator; l = $f.l; l$1 = $f.l$1; l$2 = $f.l$2; multi = $f.multi; none = $f.none; omega = $f.omega; op = $f.op; op$1 = $f.op$1; op$10 = $f.op$10; op$11 = $f.op$11; op$2 = $f.op$2; op$3 = $f.op$3; op$4 = $f.op$4; op$5 = $f.op$5; op$6 = $f.op$6; op$7 = $f.op$7; op$8 = $f.op$8; op$9 = $f.op$9; parent = $f.parent; phi = $f.phi; print = $f.print; rho = $f.rho; separ = $f.separ; separ$1 = $f.separ$1; theta = $f.theta; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$2 = $f.x$2; x$20 = $f.x$20; x$21 = $f.x$21; x$22 = $f.x$22; x$23 = $f.x$23; x$24 = $f.x$24; x$25 = $f.x$25; x$26 = $f.x$26; x$27 = $f.x$27; x$28 = $f.x$28; x$29 = $f.x$29; x$3 = $f.x$3; x$30 = $f.x$30; x$31 = $f.x$31; x$32 = $f.x$32; x$33 = $f.x$33; x$34 = $f.x$34; x$35 = $f.x$35; x$36 = $f.x$36; x$37 = $f.x$37; x$38 = $f.x$38; x$39 = $f.x$39; x$4 = $f.x$4; x$40 = $f.x$40; x$41 = $f.x$41; x$42 = $f.x$42; x$43 = $f.x$43; x$44 = $f.x$44; x$45 = $f.x$45; x$46 = $f.x$46; x$47 = $f.x$47; x$48 = $f.x$48; x$49 = $f.x$49; x$5 = $f.x$5; x$50 = $f.x$50; x$51 = $f.x$51; x$52 = $f.x$52; x$53 = $f.x$53; x$54 = $f.x$54; x$55 = $f.x$55; x$56 = $f.x$56; x$57 = $f.x$57; x$58 = $f.x$58; x$59 = $f.x$59; x$6 = $f.x$6; x$60 = $f.x$60; x$61 = $f.x$61; x$62 = $f.x$62; x$63 = $f.x$63; x$64 = $f.x$64; x$65 = $f.x$65; x$66 = $f.x$66; x$67 = $f.x$67; x$68 = $f.x$68; x$69 = $f.x$69; x$7 = $f.x$7; x$70 = $f.x$70; x$71 = $f.x$71; x$72 = $f.x$72; x$73 = $f.x$73; x$74 = $f.x$74; x$75 = $f.x$75; x$76 = $f.x$76; x$77 = $f.x$77; x$78 = $f.x$78; x$79 = $f.x$79; x$8 = $f.x$8; x$80 = $f.x$80; x$81 = $f.x$81; x$82 = $f.x$82; x$83 = $f.x$83; x$84 = $f.x$84; x$85 = $f.x$85; x$86 = $f.x$86; x$87 = $f.x$87; x$88 = $f.x$88; x$89 = $f.x$89; x$9 = $f.x$9; x$90 = $f.x$90; x$91 = $f.x$91; x$92 = $f.x$92; x$93 = $f.x$93; x$94 = $f.x$94; x$95 = $f.x$95; x$96 = $f.x$96; x$97 = $f.x$97; xyz = $f.xyz; xyz$1 = $f.xyz$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ast_o_iterator = ($bytesToString((_entry = ast[$Uint64.keyFor(O(iterator))], _entry !== undefined ? _entry.v : sliceType.nil)));
		/* */ if (!((_entry$1 = ast[$Uint64.keyFor(iterator)], _entry$1 !== undefined ? _entry$1.v : sliceType.nil) === sliceType.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_entry$1 = ast[$Uint64.keyFor(iterator)], _entry$1 !== undefined ? _entry$1.v : sliceType.nil) === sliceType.nil)) { */ case 1:
				_1 = (x = (_entry$2 = ast[$Uint64.keyFor(iterator)], _entry$2 !== undefined ? _entry$2.v : sliceType.nil), $indexPtr(x.$array, x.$offset + 0, ptrType));
				/* */ if (_1 === ($indexPtr($pkg.CommentRow.$array, $pkg.CommentRow.$offset + 0, ptrType))) { $s = 4; continue; }
				/* */ if (_1 === ($indexPtr($pkg.PackageDef.$array, $pkg.PackageDef.$offset + 0, ptrType))) { $s = 5; continue; }
				/* */ if (_1 === ($indexPtr($pkg.ImportStmt.$array, $pkg.ImportStmt.$offset + 0, ptrType))) { $s = 6; continue; }
				/* */ if (_1 === ($indexPtr($pkg.ImportsDef.$array, $pkg.ImportsDef.$offset + 0, ptrType))) { $s = 7; continue; }
				/* */ if (_1 === ($indexPtr($pkg.ToplevFunc.$array, $pkg.ToplevFunc.$offset + 0, ptrType))) { $s = 8; continue; }
				/* */ if (_1 === ($indexPtr($pkg.BlocOfCode.$array, $pkg.BlocOfCode.$offset + 0, ptrType))) { $s = 9; continue; }
				/* */ if (_1 === ($indexPtr($pkg.RootOfType.$array, $pkg.RootOfType.$offset + 0, ptrType))) { $s = 10; continue; }
				/* */ if (_1 === ($indexPtr($pkg.TypDefStmt.$array, $pkg.TypDefStmt.$offset + 0, ptrType))) { $s = 11; continue; }
				/* */ if (_1 === ($indexPtr($pkg.StructType.$array, $pkg.StructType.$offset + 0, ptrType))) { $s = 12; continue; }
				/* */ if (_1 === ($indexPtr($pkg.IfceTypExp.$array, $pkg.IfceTypExp.$offset + 0, ptrType))) { $s = 13; continue; }
				/* */ if (_1 === ($indexPtr($pkg.GoDferStmt.$array, $pkg.GoDferStmt.$offset + 0, ptrType))) { $s = 14; continue; }
				/* */ if (_1 === ($indexPtr($pkg.BranchStmt.$array, $pkg.BranchStmt.$offset + 0, ptrType))) { $s = 15; continue; }
				/* */ if (_1 === ($indexPtr($pkg.Expression.$array, $pkg.Expression.$offset + 0, ptrType))) { $s = 16; continue; }
				/* */ if (_1 === ($indexPtr($pkg.ReturnStmt.$array, $pkg.ReturnStmt.$offset + 0, ptrType))) { $s = 17; continue; }
				/* */ if (_1 === ($indexPtr($pkg.VarDefStmt.$array, $pkg.VarDefStmt.$offset + 0, ptrType))) { $s = 18; continue; }
				/* */ if (_1 === ($indexPtr($pkg.LblGotoCnt.$array, $pkg.LblGotoCnt.$offset + 0, ptrType))) { $s = 19; continue; }
				/* */ if (_1 === ($indexPtr($pkg.ClosureExp.$array, $pkg.ClosureExp.$offset + 0, ptrType))) { $s = 20; continue; }
				/* */ if (_1 === ($indexPtr($pkg.TypedIdent.$array, $pkg.TypedIdent.$offset + 0, ptrType))) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (_1 === ($indexPtr($pkg.CommentRow.$array, $pkg.CommentRow.$offset + 0, ptrType))) { */ case 4:
					/* */ if (((_entry$3 = ast[$Uint64.keyFor(iterator)], _entry$3 !== undefined ? _entry$3.v : sliceType.nil).$length - 1 >> 0) === 2) { $s = 23; continue; }
					/* */ $s = 24; continue;
					/* if (((_entry$3 = ast[$Uint64.keyFor(iterator)], _entry$3 !== undefined ? _entry$3.v : sliceType.nil).$length - 1 >> 0) === 2) { */ case 23:
						$r = print(""); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 24:
					$r = print(ast_o_iterator); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 22; continue;
				/* } else if (_1 === ($indexPtr($pkg.PackageDef.$array, $pkg.PackageDef.$offset + 0, ptrType))) { */ case 5:
					/* */ if (((_entry$4 = ast[$Uint64.keyFor(iterator)], _entry$4 !== undefined ? _entry$4.v : sliceType.nil).$length - 1 >> 0) === 1) { $s = 27; continue; }
					/* */ $s = 28; continue;
					/* if (((_entry$4 = ast[$Uint64.keyFor(iterator)], _entry$4 !== undefined ? _entry$4.v : sliceType.nil).$length - 1 >> 0) === 1) { */ case 27:
						$r = print(""); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 28:
					$r = print("package "); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = print(ast_o_iterator); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 22; continue;
				/* } else if (_1 === ($indexPtr($pkg.ImportStmt.$array, $pkg.ImportStmt.$offset + 0, ptrType))) { */ case 6:
					defparent = !((_entry$5 = ast[$Uint64.keyFor(parent)], _entry$5 !== undefined ? _entry$5.v : sliceType.nil) === sliceType.nil) && (x$1 = (_entry$6 = ast[$Uint64.keyFor(parent)], _entry$6 !== undefined ? _entry$6.v : sliceType.nil), $indexPtr(x$1.$array, x$1.$offset + 0, ptrType)) === $indexPtr($pkg.ImportsDef.$array, $pkg.ImportsDef.$offset + 0, ptrType);
					/* */ if (defparent) { $s = 32; continue; }
					/* */ $s = 33; continue;
					/* if (defparent) { */ case 32:
						$s = 34; continue;
					/* } else { */ case 33:
						$r = print("import "); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 34:
					$r = print(ast_o_iterator); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					another = ($bytesToString((_entry$7 = ast[$Uint64.keyFor((x$2 = O(iterator), new $Uint64(x$2.$high + 0, x$2.$low + 1)))], _entry$7 !== undefined ? _entry$7.v : sliceType.nil)));
					/* */ if (another.length > 0) { $s = 37; continue; }
					/* */ $s = 38; continue;
					/* if (another.length > 0) { */ case 37:
						$r = print(" "); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$r = print(another); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 38:
					/* */ if (defparent) { $s = 41; continue; }
					/* */ $s = 42; continue;
					/* if (defparent) { */ case 41:
						$r = print(""); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 42:
					$s = 22; continue;
				/* } else if (_1 === ($indexPtr($pkg.ImportsDef.$array, $pkg.ImportsDef.$offset + 0, ptrType))) { */ case 7:
					$r = print("import ("); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = print(""); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 22; continue;
				/* } else if (_1 === ($indexPtr($pkg.ToplevFunc.$array, $pkg.ToplevFunc.$offset + 0, ptrType))) { */ case 8:
					$r = print("func "); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* */ if ((_entry$8 = ast[$Uint64.keyFor(iterator)], _entry$8 !== undefined ? _entry$8.v : sliceType.nil).$length === 2) { $s = 47; continue; }
					/* */ $s = 48; continue;
					/* if ((_entry$8 = ast[$Uint64.keyFor(iterator)], _entry$8 !== undefined ? _entry$8.v : sliceType.nil).$length === 2) { */ case 47:
						$r = print("("); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 48:
					$s = 22; continue;
				/* } else if (_1 === ($indexPtr($pkg.BlocOfCode.$array, $pkg.BlocOfCode.$offset + 0, ptrType))) { */ case 9:
						_2 = ((((_entry$9 = ast[$Uint64.keyFor(iterator)], _entry$9 !== undefined ? _entry$9.v : sliceType.nil).$length - 1 >> 0) << 24 >>> 24));
						/* */ if (_2 === (0)) { $s = 51; continue; }
						/* */ if (_2 === (1)) { $s = 52; continue; }
						/* */ if (_2 === (2)) { $s = 53; continue; }
						/* */ if (_2 === (4)) { $s = 54; continue; }
						/* */ if (_2 === (5)) { $s = 55; continue; }
						/* */ if (_2 === (3)) { $s = 56; continue; }
						/* */ if (_2 === (6)) { $s = 57; continue; }
						/* */ if (_2 === (7)) { $s = 58; continue; }
						/* */ if (_2 === (8)) { $s = 59; continue; }
						/* */ if (_2 === (12)) { $s = 60; continue; }
						/* */ if (_2 === (9)) { $s = 61; continue; }
						/* */ if (_2 === (11)) { $s = 62; continue; }
						/* */ if (_2 === (10)) { $s = 63; continue; }
						/* */ $s = 64; continue;
						/* if (_2 === (0)) { */ case 51:
							$s = 64; continue;
						/* } else if (_2 === (1)) { */ case 52:
							$r = print("if "); /* */ $s = 65; case 65: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 64; continue;
						/* } else if (_2 === (2)) { */ case 53:
							$r = print("if "); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 64; continue;
						/* } else if (_2 === (4)) { */ case 54:
							$r = print("for "); /* */ $s = 67; case 67: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 64; continue;
						/* } else if (_2 === (5)) { */ case 55:
							$r = print("for range "); /* */ $s = 68; case 68: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 64; continue;
						/* } else if (_2 === (3)) { */ case 56:
							$r = print("switch "); /* */ $s = 69; case 69: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 64; continue;
						/* } else if (_2 === (6)) { */ case 57:
							$r = print("switch "); /* */ $s = 70; case 70: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 64; continue;
						/* } else if (_2 === (7)) { */ case 58:
							$r = print("select "); /* */ $s = 71; case 71: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 64; continue;
						/* } else if (_2 === (8)) { */ case 59:
							$r = print("case "); /* */ $s = 72; case 72: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 64; continue;
						/* } else if (_2 === (12)) { */ case 60:
							$r = print("default:"); /* */ $s = 73; case 73: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$r = print(""); /* */ $s = 74; case 74: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 64; continue;
						/* } else if (_2 === (9)) { */ case 61:
							$r = print("default:"); /* */ $s = 75; case 75: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$r = print(""); /* */ $s = 76; case 76: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 64; continue;
						/* } else if (_2 === (11)) { */ case 62:
							$r = print("case "); /* */ $s = 77; case 77: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 64; continue;
						/* } else if (_2 === (10)) { */ case 63:
						/* } */ case 64:
					case 50:
					/* */ if ((_entry$10 = ast[$Uint64.keyFor(iterator)], _entry$10 !== undefined ? _entry$10.v : sliceType.nil).$capacity === 13) { $s = 78; continue; }
					/* */ $s = 79; continue;
					/* if ((_entry$10 = ast[$Uint64.keyFor(iterator)], _entry$10 !== undefined ? _entry$10.v : sliceType.nil).$capacity === 13) { */ case 78:
						/* */ if (((_entry$11 = ast[$Uint64.keyFor(iterator)], _entry$11 !== undefined ? _entry$11.v : sliceType.nil).$length - 1 >> 0) < 8) { $s = 80; continue; }
						/* */ $s = 81; continue;
						/* if (((_entry$11 = ast[$Uint64.keyFor(iterator)], _entry$11 !== undefined ? _entry$11.v : sliceType.nil).$length - 1 >> 0) < 8) { */ case 80:
							$r = print("{"); /* */ $s = 82; case 82: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$r = print(""); /* */ $s = 83; case 83: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 81:
					/* } */ case 79:
					$s = 22; continue;
				/* } else if (_1 === ($indexPtr($pkg.RootOfType.$array, $pkg.RootOfType.$offset + 0, ptrType))) { */ case 10:
					$s = 22; continue;
				/* } else if (_1 === ($indexPtr($pkg.TypDefStmt.$array, $pkg.TypDefStmt.$offset + 0, ptrType))) { */ case 11:
					$r = print("type "); /* */ $s = 84; case 84: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = print(ast_o_iterator); /* */ $s = 85; case 85: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = print(" "); /* */ $s = 86; case 86: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					op = ((((_entry$12 = ast[$Uint64.keyFor(iterator)], _entry$12 !== undefined ? _entry$12.v : sliceType.nil).$length - 1 >> 0) << 24 >>> 24));
					/* */ if (op === 1) { $s = 87; continue; }
					/* */ $s = 88; continue;
					/* if (op === 1) { */ case 87:
						$r = print("= "); /* */ $s = 89; case 89: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 88:
					$s = 22; continue;
				/* } else if (_1 === ($indexPtr($pkg.StructType.$array, $pkg.StructType.$offset + 0, ptrType))) { */ case 12:
					$r = print("struct{"); /* */ $s = 90; case 90: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* */ if (!((_entry$13 = ast[$Uint64.keyFor(O(iterator))], _entry$13 !== undefined ? _entry$13.v : sliceType.nil) === sliceType.nil)) { $s = 91; continue; }
					/* */ $s = 92; continue;
					/* if (!((_entry$13 = ast[$Uint64.keyFor(O(iterator))], _entry$13 !== undefined ? _entry$13.v : sliceType.nil) === sliceType.nil)) { */ case 91:
						$r = print(""); /* */ $s = 93; case 93: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 92:
					$s = 22; continue;
				/* } else if (_1 === ($indexPtr($pkg.IfceTypExp.$array, $pkg.IfceTypExp.$offset + 0, ptrType))) { */ case 13:
					$r = print("interface{"); /* */ $s = 94; case 94: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* */ if (!((_entry$14 = ast[$Uint64.keyFor(O(iterator))], _entry$14 !== undefined ? _entry$14.v : sliceType.nil) === sliceType.nil)) { $s = 95; continue; }
					/* */ $s = 96; continue;
					/* if (!((_entry$14 = ast[$Uint64.keyFor(O(iterator))], _entry$14 !== undefined ? _entry$14.v : sliceType.nil) === sliceType.nil)) { */ case 95:
						$r = print(""); /* */ $s = 97; case 97: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 96:
					$s = 22; continue;
				/* } else if (_1 === ($indexPtr($pkg.GoDferStmt.$array, $pkg.GoDferStmt.$offset + 0, ptrType))) { */ case 14:
						_3 = ((((_entry$15 = ast[$Uint64.keyFor(iterator)], _entry$15 !== undefined ? _entry$15.v : sliceType.nil).$length - 1 >> 0) << 24 >>> 24));
						/* */ if (_3 === (0)) { $s = 99; continue; }
						/* */ if (_3 === (1)) { $s = 100; continue; }
						/* */ $s = 101; continue;
						/* if (_3 === (0)) { */ case 99:
							$r = print("go "); /* */ $s = 102; case 102: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 101; continue;
						/* } else if (_3 === (1)) { */ case 100:
							$r = print("defer "); /* */ $s = 103; case 103: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 101:
					case 98:
					$s = 22; continue;
				/* } else if (_1 === ($indexPtr($pkg.BranchStmt.$array, $pkg.BranchStmt.$offset + 0, ptrType))) { */ case 15:
						_4 = ((((_entry$16 = ast[$Uint64.keyFor(iterator)], _entry$16 !== undefined ? _entry$16.v : sliceType.nil).$length - 1 >> 0) << 24 >>> 24));
						/* */ if (_4 === (0)) { $s = 105; continue; }
						/* */ if (_4 === (1)) { $s = 106; continue; }
						/* */ if (_4 === (2)) { $s = 107; continue; }
						/* */ if (_4 === (3)) { $s = 108; continue; }
						/* */ if (_4 === (4)) { $s = 109; continue; }
						/* */ $s = 110; continue;
						/* if (_4 === (0)) { */ case 105:
							$r = print(";"); /* */ $s = 111; case 111: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 110; continue;
						/* } else if (_4 === (1)) { */ case 106:
							$r = print("break"); /* */ $s = 112; case 112: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 110; continue;
						/* } else if (_4 === (2)) { */ case 107:
							$r = print("continue"); /* */ $s = 113; case 113: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 110; continue;
						/* } else if (_4 === (3)) { */ case 108:
							$r = print("fallthrough"); /* */ $s = 114; case 114: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 110; continue;
						/* } else if (_4 === (4)) { */ case 109:
							$r = print("goto"); /* */ $s = 115; case 115: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 110:
					case 104:
					$s = 22; continue;
				/* } else if (_1 === ($indexPtr($pkg.Expression.$array, $pkg.Expression.$offset + 0, ptrType))) { */ case 16:
					op$1 = ((((_entry$17 = ast[$Uint64.keyFor(iterator)], _entry$17 !== undefined ? _entry$17.v : sliceType.nil).$length - 1 >> 0) << 24 >>> 24));
					l = ((((_entry$18 = ast[$Uint64.keyFor(iterator)], _entry$18 !== undefined ? _entry$18.v : sliceType.nil).$capacity - 38 >> 0) << 24 >>> 24));
					/* */ if (l === 1) { $s = 116; continue; }
					/* */ $s = 117; continue;
					/* if (l === 1) { */ case 116:
							_5 = op$1;
							/* */ if (_5 === (0)) { $s = 120; continue; }
							/* */ if (_5 === (9)) { $s = 121; continue; }
							/* */ if (_5 === (10)) { $s = 122; continue; }
							/* */ if (_5 === (12)) { $s = 123; continue; }
							/* */ if (_5 === (13)) { $s = 124; continue; }
							/* */ if (_5 === (16)) { $s = 125; continue; }
							/* */ if (_5 === (20)) { $s = 126; continue; }
							/* */ if (_5 === (25)) { $s = 127; continue; }
							/* */ if (_5 === (35)) { $s = 128; continue; }
							/* */ if (_5 === (36)) { $s = 129; continue; }
							/* */ if (_5 === (37)) { $s = 130; continue; }
							/* */ if (_5 === (31)) { $s = 131; continue; }
							/* */ if (_5 === (27)) { $s = 132; continue; }
							/* */ $s = 133; continue;
							/* if (_5 === (0)) { */ case 120:
								$r = print("("); /* */ $s = 134; case 134: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = 133; continue;
							/* } else if (_5 === (9)) { */ case 121:
								$r = print("+"); /* */ $s = 135; case 135: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = 133; continue;
							/* } else if (_5 === (10)) { */ case 122:
								$r = print("-"); /* */ $s = 136; case 136: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = 133; continue;
							/* } else if (_5 === (12)) { */ case 123:
								$r = print("^"); /* */ $s = 137; case 137: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = 133; continue;
							/* } else if (_5 === (13)) { */ case 124:
								$r = print("*"); /* */ $s = 138; case 138: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = 133; continue;
							/* } else if (_5 === (16)) { */ case 125:
								$r = print("&"); /* */ $s = 139; case 139: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = 133; continue;
							/* } else if (_5 === (20)) { */ case 126:
								$r = print("!"); /* */ $s = 140; case 140: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = 133; continue;
							/* } else if (_5 === (25)) { */ case 127:
								$r = print("<-"); /* */ $s = 141; case 141: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = 133; continue;
							/* } else if (_5 === (35)) { */ case 128:
								$r = print("chan "); /* */ $s = 142; case 142: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = 133; continue;
							/* } else if (_5 === (36)) { */ case 129:
								$r = print("chan<- "); /* */ $s = 143; case 143: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = 133; continue;
							/* } else if (_5 === (37)) { */ case 130:
								$r = print("<-chan "); /* */ $s = 144; case 144: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = 133; continue;
							/* } else if (_5 === (31)) { */ case 131:
								$r = print("{"); /* */ $s = 145; case 145: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = 133; continue;
							/* } else if (_5 === (27)) { */ case 132:
								$r = print("[]"); /* */ $s = 146; case 146: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 133:
						case 119:
						$s = 118; continue;
					/* } else { */ case 117:
							_6 = op$1;
							/* */ if (_6 === (31)) { $s = 148; continue; }
							/* */ if (_6 === (26)) { $s = 149; continue; }
							/* */ if (_6 === (33)) { $s = 150; continue; }
							/* */ $s = 151; continue;
							/* if (_6 === (31)) { */ case 148:
								$r = print("{"); /* */ $s = 152; case 152: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* */ if (l === 0) { $s = 153; continue; }
								/* */ $s = 154; continue;
								/* if (l === 0) { */ case 153:
									$r = print("}"); /* */ $s = 155; case 155: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* } */ case 154:
								$s = 151; continue;
							/* } else if (_6 === (26)) { */ case 149:
								$r = print("["); /* */ $s = 156; case 156: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = 151; continue;
							/* } else if (_6 === (33)) { */ case 150:
								$r = print("map["); /* */ $s = 157; case 157: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 151:
						case 147:
					/* } */ case 118:
					$s = 22; continue;
				/* } else if (_1 === ($indexPtr($pkg.ReturnStmt.$array, $pkg.ReturnStmt.$offset + 0, ptrType))) { */ case 17:
					$r = print("return "); /* */ $s = 158; case 158: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 22; continue;
				/* } else if (_1 === ($indexPtr($pkg.VarDefStmt.$array, $pkg.VarDefStmt.$offset + 0, ptrType))) { */ case 18:
					op$2 = ((((_entry$19 = ast[$Uint64.keyFor(iterator)], _entry$19 !== undefined ? _entry$19.v : sliceType.nil).$length - 1 >> 0) << 24 >>> 24));
					multi = (_entry$20 = ast[$Uint64.keyFor((x$3 = O(iterator), new $Uint64(x$3.$high + 0, x$3.$low + 1)))], _entry$20 !== undefined ? _entry$20.v : sliceType.nil).$length > 0;
					none = (_entry$21 = ast[$Uint64.keyFor(O(iterator))], _entry$21 !== undefined ? _entry$21.v : sliceType.nil).$length === 0;
						_7 = op$2;
						/* */ if (_7 === (0)) { $s = 160; continue; }
						/* */ if (_7 === (1)) { $s = 161; continue; }
						/* */ $s = 162; continue;
						/* if (_7 === (0)) { */ case 160:
							$r = print("var "); /* */ $s = 163; case 163: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 162; continue;
						/* } else if (_7 === (1)) { */ case 161:
							$r = print("const "); /* */ $s = 164; case 164: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 162:
					case 159:
					/* */ if (multi) { $s = 165; continue; }
					/* */ if (none) { $s = 166; continue; }
					/* */ $s = 167; continue;
					/* if (multi) { */ case 165:
						$r = print("("); /* */ $s = 168; case 168: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$r = print(""); /* */ $s = 169; case 169: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 167; continue;
					/* } else if (none) { */ case 166:
						$r = print("()"); /* */ $s = 170; case 170: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 167:
					$s = 22; continue;
				/* } else if (_1 === ($indexPtr($pkg.LblGotoCnt.$array, $pkg.LblGotoCnt.$offset + 0, ptrType))) { */ case 19:
					op$3 = ((((_entry$22 = ast[$Uint64.keyFor(iterator)], _entry$22 !== undefined ? _entry$22.v : sliceType.nil).$length - 1 >> 0) << 24 >>> 24));
						_8 = op$3;
						/* */ if (_8 === (1)) { $s = 172; continue; }
						/* */ if (_8 === (2)) { $s = 173; continue; }
						/* */ if (_8 === (3)) { $s = 174; continue; }
						/* */ $s = 175; continue;
						/* if (_8 === (1)) { */ case 172:
							$r = print("goto "); /* */ $s = 176; case 176: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 175; continue;
						/* } else if (_8 === (2)) { */ case 173:
							$r = print("continue "); /* */ $s = 177; case 177: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 175; continue;
						/* } else if (_8 === (3)) { */ case 174:
							$r = print("break "); /* */ $s = 178; case 178: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 175:
					case 171:
					$s = 22; continue;
				/* } else if (_1 === ($indexPtr($pkg.ClosureExp.$array, $pkg.ClosureExp.$offset + 0, ptrType))) { */ case 20:
					$r = print("func("); /* */ $s = 179; case 179: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					end = (_entry$23 = ast[$Uint64.keyFor(O(iterator))], _entry$23 !== undefined ? _entry$23.v : sliceType.nil) === sliceType.nil || (x$4 = (_entry$24 = ast[$Uint64.keyFor(O(iterator))], _entry$24 !== undefined ? _entry$24.v : sliceType.nil), $indexPtr(x$4.$array, x$4.$offset + 0, ptrType)) === $indexPtr($pkg.BlocOfCode.$array, $pkg.BlocOfCode.$offset + 0, ptrType);
					separ = (new $Uint64(0, ((_entry$25 = ast[$Uint64.keyFor(iterator)], _entry$25 !== undefined ? _entry$25.v : sliceType.nil).$length - 1 >> 0)));
					/* */ if ((separ.$high === 0 && separ.$low === 0)) { $s = 180; continue; }
					/* */ $s = 181; continue;
					/* if ((separ.$high === 0 && separ.$low === 0)) { */ case 180:
						$r = print(")("); /* */ $s = 182; case 182: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 181:
					/* */ if (end) { $s = 183; continue; }
					/* */ $s = 184; continue;
					/* if (end) { */ case 183:
						$r = print(")"); /* */ $s = 185; case 185: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 184:
					$s = 22; continue;
				/* } else if (_1 === ($indexPtr($pkg.TypedIdent.$array, $pkg.TypedIdent.$offset + 0, ptrType))) { */ case 21:
					/* */ if ((_entry$26 = ast[$Uint64.keyFor((x$5 = O(iterator), new $Uint64(x$5.$high + 0, x$5.$low + 1)))], _entry$26 !== undefined ? _entry$26.v : sliceType.nil) === sliceType.nil || !((x$6 = (_entry$27 = ast[$Uint64.keyFor((x$7 = O(iterator), new $Uint64(x$7.$high + 0, x$7.$low + 1)))], _entry$27 !== undefined ? _entry$27.v : sliceType.nil), $indexPtr(x$6.$array, x$6.$offset + 0, ptrType)) === $indexPtr($pkg.RootOfType.$array, $pkg.RootOfType.$offset + 0, ptrType))) { $s = 186; continue; }
					/* */ $s = 187; continue;
					/* if ((_entry$26 = ast[$Uint64.keyFor((x$5 = O(iterator), new $Uint64(x$5.$high + 0, x$5.$low + 1)))], _entry$26 !== undefined ? _entry$26.v : sliceType.nil) === sliceType.nil || !((x$6 = (_entry$27 = ast[$Uint64.keyFor((x$7 = O(iterator), new $Uint64(x$7.$high + 0, x$7.$low + 1)))], _entry$27 !== undefined ? _entry$27.v : sliceType.nil), $indexPtr(x$6.$array, x$6.$offset + 0, ptrType)) === $indexPtr($pkg.RootOfType.$array, $pkg.RootOfType.$offset + 0, ptrType))) { */ case 186:
						op$4 = ((((_entry$28 = ast[$Uint64.keyFor(iterator)], _entry$28 !== undefined ? _entry$28.v : sliceType.nil).$length - 1 >> 0) << 24 >>> 24));
							_9 = op$4;
							/* */ if (_9 === (2)) { $s = 189; continue; }
							/* */ $s = 190; continue;
							/* if (_9 === (2)) { */ case 189:
								$r = print("..."); /* */ $s = 191; case 191: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 190:
						case 188:
					/* } */ case 187:
				/* } */ case 22:
			case 3:
		/* } */ case 2:
		i = new $Uint64(0, 0);
		/* while (true) { */ case 192:
			/* if (!((i.$high < 4294967295 || (i.$high === 4294967295 && i.$low < 4294967294)))) { break; } */ if(!((i.$high < 4294967295 || (i.$high === 4294967295 && i.$low < 4294967294)))) { $s = 193; continue; }
			/* */ if (Poke(ast, (x$8 = O(iterator), new $Uint64(x$8.$high + i.$high, x$8.$low + i.$low)))) { $s = 194; continue; }
			/* */ $s = 195; continue;
			/* if (Poke(ast, (x$8 = O(iterator), new $Uint64(x$8.$high + i.$high, x$8.$low + i.$low)))) { */ case 194:
				$r = Code(print, ast, (x$9 = O(iterator), new $Uint64(x$9.$high + i.$high, x$9.$low + i.$low)), iterator); /* */ $s = 197; case 197: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 196; continue;
			/* } else { */ case 195:
				i = new $Uint64(4294967295, 4294967294);
			/* } */ case 196:
			/* */ if (!((_entry$29 = ast[$Uint64.keyFor(iterator)], _entry$29 !== undefined ? _entry$29.v : sliceType.nil) === sliceType.nil)) { $s = 198; continue; }
			/* */ $s = 199; continue;
			/* if (!((_entry$29 = ast[$Uint64.keyFor(iterator)], _entry$29 !== undefined ? _entry$29.v : sliceType.nil) === sliceType.nil)) { */ case 198:
					_10 = (x$10 = (_entry$30 = ast[$Uint64.keyFor(iterator)], _entry$30 !== undefined ? _entry$30.v : sliceType.nil), $indexPtr(x$10.$array, x$10.$offset + 0, ptrType));
					/* */ if (_10 === ($indexPtr($pkg.ImportsDef.$array, $pkg.ImportsDef.$offset + 0, ptrType))) { $s = 201; continue; }
					/* */ if (_10 === ($indexPtr($pkg.ToplevFunc.$array, $pkg.ToplevFunc.$offset + 0, ptrType))) { $s = 202; continue; }
					/* */ if (_10 === ($indexPtr($pkg.TypedIdent.$array, $pkg.TypedIdent.$offset + 0, ptrType))) { $s = 203; continue; }
					/* */ if (_10 === ($indexPtr($pkg.BlocOfCode.$array, $pkg.BlocOfCode.$offset + 0, ptrType))) { $s = 204; continue; }
					/* */ if (_10 === ($indexPtr($pkg.TypDefStmt.$array, $pkg.TypDefStmt.$offset + 0, ptrType))) { $s = 205; continue; }
					/* */ if (_10 === ($indexPtr($pkg.IfceTypExp.$array, $pkg.IfceTypExp.$offset + 0, ptrType))) { $s = 206; continue; }
					/* */ if (_10 === ($indexPtr($pkg.StructType.$array, $pkg.StructType.$offset + 0, ptrType))) { $s = 207; continue; }
					/* */ if (_10 === ($indexPtr($pkg.GoDferStmt.$array, $pkg.GoDferStmt.$offset + 0, ptrType))) { $s = 208; continue; }
					/* */ if (_10 === ($indexPtr($pkg.Expression.$array, $pkg.Expression.$offset + 0, ptrType))) { $s = 209; continue; }
					/* */ if (_10 === ($indexPtr($pkg.ReturnStmt.$array, $pkg.ReturnStmt.$offset + 0, ptrType))) { $s = 210; continue; }
					/* */ if (_10 === ($indexPtr($pkg.IncDecStmt.$array, $pkg.IncDecStmt.$offset + 0, ptrType))) { $s = 211; continue; }
					/* */ if (_10 === ($indexPtr($pkg.AssignStmt.$array, $pkg.AssignStmt.$offset + 0, ptrType))) { $s = 212; continue; }
					/* */ if (_10 === ($indexPtr($pkg.RootOfType.$array, $pkg.RootOfType.$offset + 0, ptrType))) { $s = 213; continue; }
					/* */ if (_10 === ($indexPtr($pkg.LblGotoCnt.$array, $pkg.LblGotoCnt.$offset + 0, ptrType))) { $s = 214; continue; }
					/* */ if (_10 === ($indexPtr($pkg.VarDefStmt.$array, $pkg.VarDefStmt.$offset + 0, ptrType))) { $s = 215; continue; }
					/* */ if (_10 === ($indexPtr($pkg.FileMatter.$array, $pkg.FileMatter.$offset + 0, ptrType))) { $s = 216; continue; }
					/* */ if (_10 === ($indexPtr($pkg.ClosureExp.$array, $pkg.ClosureExp.$offset + 0, ptrType))) { $s = 217; continue; }
					/* */ if (_10 === ($indexPtr($pkg.IfceMethod.$array, $pkg.IfceMethod.$offset + 0, ptrType))) { $s = 218; continue; }
					/* */ $s = 219; continue;
					/* if (_10 === ($indexPtr($pkg.ImportsDef.$array, $pkg.ImportsDef.$offset + 0, ptrType))) { */ case 201:
						/* */ if ((i.$high === 4294967295 && i.$low === 4294967294)) { $s = 220; continue; }
						/* */ $s = 221; continue;
						/* if ((i.$high === 4294967295 && i.$low === 4294967294)) { */ case 220:
							$r = print(")"); /* */ $s = 222; case 222: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 221:
						$s = 219; continue;
					/* } else if (_10 === ($indexPtr($pkg.ToplevFunc.$array, $pkg.ToplevFunc.$offset + 0, ptrType))) { */ case 202:
						alpha = (_entry$31 = ast[$Uint64.keyFor((x$11 = O(iterator), new $Uint64(x$11.$high + i.$high, x$11.$low + i.$low)))], _entry$31 !== undefined ? _entry$31.v : sliceType.nil) === sliceType.nil || (x$12 = (_entry$32 = ast[$Uint64.keyFor((x$13 = O(iterator), new $Uint64(x$13.$high + i.$high, x$13.$low + i.$low)))], _entry$32 !== undefined ? _entry$32.v : sliceType.nil), $indexPtr(x$12.$array, x$12.$offset + 0, ptrType)) === $indexPtr($pkg.BlocOfCode.$array, $pkg.BlocOfCode.$offset + 0, ptrType);
						beta = (_entry$33 = ast[$Uint64.keyFor((x$14 = (x$15 = O(iterator), new $Uint64(x$15.$high + i.$high, x$15.$low + i.$low)), new $Uint64(x$14.$high + 0, x$14.$low + 1)))], _entry$33 !== undefined ? _entry$33.v : sliceType.nil) === sliceType.nil || (x$16 = (_entry$34 = ast[$Uint64.keyFor((x$17 = (x$18 = O(iterator), new $Uint64(x$18.$high + i.$high, x$18.$low + i.$low)), new $Uint64(x$17.$high + 0, x$17.$low + 1)))], _entry$34 !== undefined ? _entry$34.v : sliceType.nil), $indexPtr(x$16.$array, x$16.$offset + 0, ptrType)) === $indexPtr($pkg.BlocOfCode.$array, $pkg.BlocOfCode.$offset + 0, ptrType);
						gamma = (_entry$35 = ast[$Uint64.keyFor(iterator)], _entry$35 !== undefined ? _entry$35.v : sliceType.nil).$capacity === (_entry$36 = ast[$Uint64.keyFor(iterator)], _entry$36 !== undefined ? _entry$36.v : sliceType.nil).$length;
						epsil = !((((_entry$37 = ast[$Uint64.keyFor(iterator)], _entry$37 !== undefined ? _entry$37.v : sliceType.nil).$length - 1 >> 0) === 0));
						omega = !((i.$high === 4294967295 && i.$low === 4294967294));
						theta = (i.$high === 0 && i.$low === 0);
						phi = (i.$high === 0 && i.$low === 1);
						rho = (x$19 = new $Uint64(i.$high + 0, i.$low + 1), x$20 = (new $Uint64(0, (_entry$38 = ast[$Uint64.keyFor(iterator)], _entry$38 !== undefined ? _entry$38.v : sliceType.nil).$capacity)), (x$19.$high === x$20.$high && x$19.$low === x$20.$low));
						/* */ if (alpha) { $s = 223; continue; }
						/* */ if (beta) { $s = 224; continue; }
						/* */ $s = 225; continue;
						/* if (alpha) { */ case 223:
							$s = 226; continue;
						/* } else if (beta) { */ case 224:
							/* */ if (gamma && omega && epsil === phi && !(theta === phi)) { $s = 227; continue; }
							/* */ $s = 228; continue;
							/* if (gamma && omega && epsil === phi && !(theta === phi)) { */ case 227:
								/* */ if (phi) { $s = 230; continue; }
								/* */ $s = 231; continue;
								/* if (phi) { */ case 230:
									$r = print(") "); /* */ $s = 232; case 232: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* } */ case 231:
								$r = print(ast_o_iterator); /* */ $s = 233; case 233: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$r = print("()"); /* */ $s = 234; case 234: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = 229; continue;
							/* } else { */ case 228:
								$r = print(")"); /* */ $s = 235; case 235: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 229:
							$s = 226; continue;
						/* } else { */ case 225:
							/* */ if (!theta) { $s = 236; continue; }
							/* */ if (!epsil) { $s = 237; continue; }
							/* */ $s = 238; continue;
							/* if (!theta) { */ case 236:
								/* */ if (epsil && phi) { $s = 239; continue; }
								/* */ if (!rho) { $s = 240; continue; }
								/* */ $s = 241; continue;
								/* if (epsil && phi) { */ case 239:
									$r = print(") "); /* */ $s = 242; case 242: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$r = print(ast_o_iterator); /* */ $s = 243; case 243: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$r = print("("); /* */ $s = 244; case 244: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$s = 241; continue;
								/* } else if (!rho) { */ case 240:
									$r = print(", "); /* */ $s = 245; case 245: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* } */ case 241:
								$s = 238; continue;
							/* } else if (!epsil) { */ case 237:
								$r = print(ast_o_iterator); /* */ $s = 246; case 246: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$r = print("("); /* */ $s = 247; case 247: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 238:
							/* */ if (rho) { $s = 248; continue; }
							/* */ $s = 249; continue;
							/* if (rho) { */ case 248:
								$r = print(")("); /* */ $s = 250; case 250: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 249:
						/* } */ case 226:
						/* */ if ((i.$high === 4294967295 && i.$low === 4294967294)) { $s = 251; continue; }
						/* */ $s = 252; continue;
						/* if ((i.$high === 4294967295 && i.$low === 4294967294)) { */ case 251:
							$r = print(""); /* */ $s = 253; case 253: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 252:
						$s = 219; continue;
					/* } else if (_10 === ($indexPtr($pkg.TypedIdent.$array, $pkg.TypedIdent.$offset + 0, ptrType))) { */ case 203:
						/* */ if (!((_entry$39 = ast[$Uint64.keyFor((x$21 = O(iterator), new $Uint64(x$21.$high + i.$high, x$21.$low + i.$low)))], _entry$39 !== undefined ? _entry$39.v : sliceType.nil) === sliceType.nil) && !((x$22 = (_entry$40 = ast[$Uint64.keyFor((x$23 = O(iterator), new $Uint64(x$23.$high + i.$high, x$23.$low + i.$low)))], _entry$40 !== undefined ? _entry$40.v : sliceType.nil), $indexPtr(x$22.$array, x$22.$offset + 0, ptrType)) === $indexPtr($pkg.RootOfType.$array, $pkg.RootOfType.$offset + 0, ptrType))) { $s = 254; continue; }
						/* */ $s = 255; continue;
						/* if (!((_entry$39 = ast[$Uint64.keyFor((x$21 = O(iterator), new $Uint64(x$21.$high + i.$high, x$21.$low + i.$low)))], _entry$39 !== undefined ? _entry$39.v : sliceType.nil) === sliceType.nil) && !((x$22 = (_entry$40 = ast[$Uint64.keyFor((x$23 = O(iterator), new $Uint64(x$23.$high + i.$high, x$23.$low + i.$low)))], _entry$40 !== undefined ? _entry$40.v : sliceType.nil), $indexPtr(x$22.$array, x$22.$offset + 0, ptrType)) === $indexPtr($pkg.RootOfType.$array, $pkg.RootOfType.$offset + 0, ptrType))) { */ case 254:
							/* */ if (!((_entry$41 = ast[$Uint64.keyFor((x$24 = (x$25 = O(iterator), new $Uint64(x$25.$high + i.$high, x$25.$low + i.$low)), new $Uint64(x$24.$high - 0, x$24.$low - 1)))], _entry$41 !== undefined ? _entry$41.v : sliceType.nil) === sliceType.nil) && (x$26 = (_entry$42 = ast[$Uint64.keyFor((x$27 = (x$28 = O(iterator), new $Uint64(x$28.$high + i.$high, x$28.$low + i.$low)), new $Uint64(x$27.$high - 0, x$27.$low - 1)))], _entry$42 !== undefined ? _entry$42.v : sliceType.nil), $indexPtr(x$26.$array, x$26.$offset + 0, ptrType)) === $indexPtr($pkg.RootOfType.$array, $pkg.RootOfType.$offset + 0, ptrType)) { $s = 256; continue; }
							/* */ $s = 257; continue;
							/* if (!((_entry$41 = ast[$Uint64.keyFor((x$24 = (x$25 = O(iterator), new $Uint64(x$25.$high + i.$high, x$25.$low + i.$low)), new $Uint64(x$24.$high - 0, x$24.$low - 1)))], _entry$41 !== undefined ? _entry$41.v : sliceType.nil) === sliceType.nil) && (x$26 = (_entry$42 = ast[$Uint64.keyFor((x$27 = (x$28 = O(iterator), new $Uint64(x$28.$high + i.$high, x$28.$low + i.$low)), new $Uint64(x$27.$high - 0, x$27.$low - 1)))], _entry$42 !== undefined ? _entry$42.v : sliceType.nil), $indexPtr(x$26.$array, x$26.$offset + 0, ptrType)) === $indexPtr($pkg.RootOfType.$array, $pkg.RootOfType.$offset + 0, ptrType)) { */ case 256:
								$r = print(" "); /* */ $s = 258; case 258: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 257:
							$r = print(($bytesToString((_entry$43 = ast[$Uint64.keyFor((x$29 = O(iterator), new $Uint64(x$29.$high + i.$high, x$29.$low + i.$low)))], _entry$43 !== undefined ? _entry$43.v : sliceType.nil)))); /* */ $s = 259; case 259: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* */ if (!((_entry$44 = ast[$Uint64.keyFor((x$30 = (x$31 = O(iterator), new $Uint64(x$31.$high + i.$high, x$31.$low + i.$low)), new $Uint64(x$30.$high + 0, x$30.$low + 1)))], _entry$44 !== undefined ? _entry$44.v : sliceType.nil) === sliceType.nil) && !((x$32 = (_entry$45 = ast[$Uint64.keyFor((x$33 = (x$34 = O(iterator), new $Uint64(x$34.$high + i.$high, x$34.$low + i.$low)), new $Uint64(x$33.$high + 0, x$33.$low + 1)))], _entry$45 !== undefined ? _entry$45.v : sliceType.nil), $indexPtr(x$32.$array, x$32.$offset + 0, ptrType)) === $indexPtr($pkg.RootOfType.$array, $pkg.RootOfType.$offset + 0, ptrType))) { $s = 260; continue; }
							/* */ $s = 261; continue;
							/* if (!((_entry$44 = ast[$Uint64.keyFor((x$30 = (x$31 = O(iterator), new $Uint64(x$31.$high + i.$high, x$31.$low + i.$low)), new $Uint64(x$30.$high + 0, x$30.$low + 1)))], _entry$44 !== undefined ? _entry$44.v : sliceType.nil) === sliceType.nil) && !((x$32 = (_entry$45 = ast[$Uint64.keyFor((x$33 = (x$34 = O(iterator), new $Uint64(x$34.$high + i.$high, x$34.$low + i.$low)), new $Uint64(x$33.$high + 0, x$33.$low + 1)))], _entry$45 !== undefined ? _entry$45.v : sliceType.nil), $indexPtr(x$32.$array, x$32.$offset + 0, ptrType)) === $indexPtr($pkg.RootOfType.$array, $pkg.RootOfType.$offset + 0, ptrType))) { */ case 260:
								$r = print(", "); /* */ $s = 263; case 263: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = 262; continue;
							/* } else { */ case 261:
								op$5 = ((((_entry$46 = ast[$Uint64.keyFor(iterator)], _entry$46 !== undefined ? _entry$46.v : sliceType.nil).$length - 1 >> 0) << 24 >>> 24));
									_11 = op$5;
									/* */ if (_11 === (3)) { $s = 265; continue; }
									/* */ if (_11 === (0)) { $s = 266; continue; }
									/* */ if (_11 === (1)) { $s = 267; continue; }
									/* */ if (_11 === (2)) { $s = 268; continue; }
									/* */ $s = 269; continue;
									/* if (_11 === (3)) { */ case 265:
										$r = print(" "); /* */ $s = 270; case 270: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 269; continue;
									/* } else if (_11 === (0)) { */ case 266:
										$r = print(" "); /* */ $s = 271; case 271: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 269; continue;
									/* } else if (_11 === (1)) { */ case 267:
										$r = print(" = "); /* */ $s = 272; case 272: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 269; continue;
									/* } else if (_11 === (2)) { */ case 268:
										$r = print(" ..."); /* */ $s = 273; case 273: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									/* } */ case 269:
								case 264:
							/* } */ case 262:
						/* } */ case 255:
						$s = 219; continue;
					/* } else if (_10 === ($indexPtr($pkg.BlocOfCode.$array, $pkg.BlocOfCode.$offset + 0, ptrType))) { */ case 204:
						/* */ if (!((i.$high === 4294967295 && i.$low === 4294967294))) { $s = 274; continue; }
						/* */ if ((i.$high === 4294967295 && i.$low === 4294967294)) { $s = 275; continue; }
						/* */ $s = 276; continue;
						/* if (!((i.$high === 4294967295 && i.$low === 4294967294))) { */ case 274:
							/* */ if ((x$35 = (x$36 = new $Uint64(i.$high + 0, i.$low + 13), new $Uint64(x$36.$high + 0, x$36.$low + 1)), x$37 = (new $Uint64(0, (_entry$47 = ast[$Uint64.keyFor(iterator)], _entry$47 !== undefined ? _entry$47.v : sliceType.nil).$capacity)), (x$35.$high === x$37.$high && x$35.$low === x$37.$low))) { $s = 277; continue; }
							/* */ if ((x$38 = (x$39 = new $Uint64(i.$high + 0, i.$low + 13), new $Uint64(x$39.$high + 0, x$39.$low + 1)), x$40 = (new $Uint64(0, (_entry$48 = ast[$Uint64.keyFor(iterator)], _entry$48 !== undefined ? _entry$48.v : sliceType.nil).$capacity)), (x$38.$high > x$40.$high || (x$38.$high === x$40.$high && x$38.$low > x$40.$low)))) { $s = 278; continue; }
							/* */ if ((x$41 = (x$42 = new $Uint64(i.$high + 0, i.$low + 13), new $Uint64(x$42.$high + 0, x$42.$low + 1)), x$43 = (new $Uint64(0, (_entry$49 = ast[$Uint64.keyFor(iterator)], _entry$49 !== undefined ? _entry$49.v : sliceType.nil).$capacity)), (x$41.$high < x$43.$high || (x$41.$high === x$43.$high && x$41.$low < x$43.$low)))) { $s = 279; continue; }
							/* */ $s = 280; continue;
							/* if ((x$35 = (x$36 = new $Uint64(i.$high + 0, i.$low + 13), new $Uint64(x$36.$high + 0, x$36.$low + 1)), x$37 = (new $Uint64(0, (_entry$47 = ast[$Uint64.keyFor(iterator)], _entry$47 !== undefined ? _entry$47.v : sliceType.nil).$capacity)), (x$35.$high === x$37.$high && x$35.$low === x$37.$low))) { */ case 277:
								/* */ if (((_entry$50 = ast[$Uint64.keyFor(iterator)], _entry$50 !== undefined ? _entry$50.v : sliceType.nil).$length - 1 >> 0) === 8) { $s = 281; continue; }
								/* */ if (((_entry$51 = ast[$Uint64.keyFor(iterator)], _entry$51 !== undefined ? _entry$51.v : sliceType.nil).$length - 1 >> 0) === 11) { $s = 282; continue; }
								/* */ if (((_entry$52 = ast[$Uint64.keyFor(iterator)], _entry$52 !== undefined ? _entry$52.v : sliceType.nil).$length - 1 >> 0) < 8) { $s = 283; continue; }
								/* */ $s = 284; continue;
								/* if (((_entry$50 = ast[$Uint64.keyFor(iterator)], _entry$50 !== undefined ? _entry$50.v : sliceType.nil).$length - 1 >> 0) === 8) { */ case 281:
									$r = print(":"); /* */ $s = 285; case 285: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$r = print(""); /* */ $s = 286; case 286: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$s = 284; continue;
								/* } else if (((_entry$51 = ast[$Uint64.keyFor(iterator)], _entry$51 !== undefined ? _entry$51.v : sliceType.nil).$length - 1 >> 0) === 11) { */ case 282:
									$r = print(":"); /* */ $s = 287; case 287: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$r = print(""); /* */ $s = 288; case 288: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$s = 284; continue;
								/* } else if (((_entry$52 = ast[$Uint64.keyFor(iterator)], _entry$52 !== undefined ? _entry$52.v : sliceType.nil).$length - 1 >> 0) < 8) { */ case 283:
									$r = print("{"); /* */ $s = 289; case 289: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$r = print(""); /* */ $s = 290; case 290: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* } */ case 284:
								$s = 280; continue;
							/* } else if ((x$38 = (x$39 = new $Uint64(i.$high + 0, i.$low + 13), new $Uint64(x$39.$high + 0, x$39.$low + 1)), x$40 = (new $Uint64(0, (_entry$48 = ast[$Uint64.keyFor(iterator)], _entry$48 !== undefined ? _entry$48.v : sliceType.nil).$capacity)), (x$38.$high > x$40.$high || (x$38.$high === x$40.$high && x$38.$low > x$40.$low)))) { */ case 278:
								$r = print(""); /* */ $s = 291; case 291: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = 280; continue;
							/* } else if ((x$41 = (x$42 = new $Uint64(i.$high + 0, i.$low + 13), new $Uint64(x$42.$high + 0, x$42.$low + 1)), x$43 = (new $Uint64(0, (_entry$49 = ast[$Uint64.keyFor(iterator)], _entry$49 !== undefined ? _entry$49.v : sliceType.nil).$capacity)), (x$41.$high < x$43.$high || (x$41.$high === x$43.$high && x$41.$low < x$43.$low)))) { */ case 279:
								/* */ if (((_entry$53 = ast[$Uint64.keyFor(iterator)], _entry$53 !== undefined ? _entry$53.v : sliceType.nil).$length - 1 >> 0) === 8) { $s = 292; continue; }
								/* */ $s = 293; continue;
								/* if (((_entry$53 = ast[$Uint64.keyFor(iterator)], _entry$53 !== undefined ? _entry$53.v : sliceType.nil).$length - 1 >> 0) === 8) { */ case 292:
									$r = print(", "); /* */ $s = 294; case 294: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* } */ case 293:
							/* } */ case 280:
							$s = 276; continue;
						/* } else if ((i.$high === 4294967295 && i.$low === 4294967294)) { */ case 275:
							/* */ if (((_entry$54 = ast[$Uint64.keyFor(iterator)], _entry$54 !== undefined ? _entry$54.v : sliceType.nil).$length - 1 >> 0) < 8) { $s = 295; continue; }
							/* */ $s = 296; continue;
							/* if (((_entry$54 = ast[$Uint64.keyFor(iterator)], _entry$54 !== undefined ? _entry$54.v : sliceType.nil).$length - 1 >> 0) < 8) { */ case 295:
								$r = print("}"); /* */ $s = 297; case 297: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 296:
							/* */ if (((_entry$55 = ast[$Uint64.keyFor(iterator)], _entry$55 !== undefined ? _entry$55.v : sliceType.nil).$length - 1 >> 0) === 2) { $s = 298; continue; }
							/* */ $s = 299; continue;
							/* if (((_entry$55 = ast[$Uint64.keyFor(iterator)], _entry$55 !== undefined ? _entry$55.v : sliceType.nil).$length - 1 >> 0) === 2) { */ case 298:
								$r = print(" else"); /* */ $s = 300; case 300: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 299:
						/* } */ case 276:
						$s = 219; continue;
					/* } else if (_10 === ($indexPtr($pkg.TypDefStmt.$array, $pkg.TypDefStmt.$offset + 0, ptrType))) { */ case 205:
						/* */ if ((i.$high === 4294967295 && i.$low === 4294967294)) { $s = 301; continue; }
						/* */ $s = 302; continue;
						/* if ((i.$high === 4294967295 && i.$low === 4294967294)) { */ case 301:
							$r = print(""); /* */ $s = 303; case 303: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 302:
						$s = 219; continue;
					/* } else if (_10 === ($indexPtr($pkg.IfceTypExp.$array, $pkg.IfceTypExp.$offset + 0, ptrType))) { */ case 206:
						/* */ if ((i.$high === 4294967295 && i.$low === 4294967294)) { $s = 304; continue; }
						/* */ $s = 305; continue;
						/* if ((i.$high === 4294967295 && i.$low === 4294967294)) { */ case 304:
							$r = print("}"); /* */ $s = 307; case 307: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 306; continue;
						/* } else { */ case 305:
							$r = print(""); /* */ $s = 308; case 308: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 306:
						$s = 219; continue;
					/* } else if (_10 === ($indexPtr($pkg.StructType.$array, $pkg.StructType.$offset + 0, ptrType))) { */ case 207:
						/* */ if ((i.$high === 4294967295 && i.$low === 4294967294)) { $s = 309; continue; }
						/* */ $s = 310; continue;
						/* if ((i.$high === 4294967295 && i.$low === 4294967294)) { */ case 309:
							$r = print("}"); /* */ $s = 312; case 312: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 311; continue;
						/* } else { */ case 310:
							$r = print(""); /* */ $s = 313; case 313: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 311:
						$s = 219; continue;
					/* } else if (_10 === ($indexPtr($pkg.GoDferStmt.$array, $pkg.GoDferStmt.$offset + 0, ptrType))) { */ case 208:
						$s = 219; continue;
					/* } else if (_10 === ($indexPtr($pkg.Expression.$array, $pkg.Expression.$offset + 0, ptrType))) { */ case 209:
						caseheader = true;
						blockheader = true;
						op$6 = ((((_entry$56 = ast[$Uint64.keyFor(iterator)], _entry$56 !== undefined ? _entry$56.v : sliceType.nil).$length - 1 >> 0) << 24 >>> 24));
						l$1 = (new $Uint64(0, ((_entry$57 = ast[$Uint64.keyFor(iterator)], _entry$57 !== undefined ? _entry$57.v : sliceType.nil).$capacity - 38 >> 0)));
						/* */ if (Which((_entry$58 = ast[$Uint64.keyFor((x$44 = O(iterator), new $Uint64(x$44.$high + i.$high, x$44.$low + i.$low)))], _entry$58 !== undefined ? _entry$58.v : sliceType.nil)) === sliceType.nil) { $s = 314; continue; }
						/* */ $s = 315; continue;
						/* if (Which((_entry$58 = ast[$Uint64.keyFor((x$44 = O(iterator), new $Uint64(x$44.$high + i.$high, x$44.$low + i.$low)))], _entry$58 !== undefined ? _entry$58.v : sliceType.nil)) === sliceType.nil) { */ case 314:
							/* */ if ((_entry$59 = ast[$Uint64.keyFor((x$45 = O(iterator), new $Uint64(x$45.$high + i.$high, x$45.$low + i.$low)))], _entry$59 !== undefined ? _entry$59.v : sliceType.nil).$length > 0) { $s = 316; continue; }
							/* */ $s = 317; continue;
							/* if ((_entry$59 = ast[$Uint64.keyFor((x$45 = O(iterator), new $Uint64(x$45.$high + i.$high, x$45.$low + i.$low)))], _entry$59 !== undefined ? _entry$59.v : sliceType.nil).$length > 0) { */ case 316:
								$r = print(($bytesToString((_entry$60 = ast[$Uint64.keyFor((x$46 = O(iterator), new $Uint64(x$46.$high + i.$high, x$46.$low + i.$low)))], _entry$60 !== undefined ? _entry$60.v : sliceType.nil)))); /* */ $s = 318; case 318: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 317:
						/* } */ case 315:
						/* */ if (!((i.$high === 4294967295 && i.$low === 4294967294))) { $s = 319; continue; }
						/* */ $s = 320; continue;
						/* if (!((i.$high === 4294967295 && i.$low === 4294967294))) { */ case 319:
							i$1 = new $Uint64(i.$high + 0, i.$low + 1);
							/* */ if ((((i$1.$high > 0 || (i$1.$high === 0 && i$1.$low >= 1))) === ((l$1.$high > 0 || (l$1.$high === 0 && l$1.$low > 1)))) && (!((i$1.$high === l$1.$high && i$1.$low === l$1.$low)))) { $s = 321; continue; }
							/* */ if (((i$1.$high === 0 && i$1.$low === 1)) && ((l$1.$high === 0 && l$1.$low === 1))) { $s = 322; continue; }
							/* */ if (((i$1.$high === l$1.$high && i$1.$low === l$1.$low)) && ((i$1.$high > 0 || (i$1.$high === 0 && i$1.$low > 0)))) { $s = 323; continue; }
							/* */ $s = 324; continue;
							/* if ((((i$1.$high > 0 || (i$1.$high === 0 && i$1.$low >= 1))) === ((l$1.$high > 0 || (l$1.$high === 0 && l$1.$low > 1)))) && (!((i$1.$high === l$1.$high && i$1.$low === l$1.$low)))) { */ case 321:
								/* */ if ((i$1.$high === 0 && i$1.$low === 0)) { $s = 325; continue; }
								/* */ $s = 326; continue;
								/* if ((i$1.$high === 0 && i$1.$low === 0)) { */ case 325:
									$s = 327; continue;
								/* } else { */ case 326:
										_12 = op$6;
										/* */ if (_12 === (21)) { $s = 329; continue; }
										/* */ if (_12 === (30)) { $s = 330; continue; }
										/* */ if (_12 === (24)) { $s = 331; continue; }
										/* */ if (_12 === (1)) { $s = 332; continue; }
										/* */ if (_12 === (2)) { $s = 333; continue; }
										/* */ if (_12 === (3)) { $s = 334; continue; }
										/* */ if (_12 === (4)) { $s = 335; continue; }
										/* */ if (_12 === (5)) { $s = 336; continue; }
										/* */ if (_12 === (6)) { $s = 337; continue; }
										/* */ if (_12 === (7)) { $s = 338; continue; }
										/* */ if (_12 === (8)) { $s = 339; continue; }
										/* */ if (_12 === (9)) { $s = 340; continue; }
										/* */ if (_12 === (10)) { $s = 341; continue; }
										/* */ if (_12 === (11)) { $s = 342; continue; }
										/* */ if (_12 === (12)) { $s = 343; continue; }
										/* */ if (_12 === (13)) { $s = 344; continue; }
										/* */ if (_12 === (14)) { $s = 345; continue; }
										/* */ if (_12 === (15)) { $s = 346; continue; }
										/* */ if (_12 === (16)) { $s = 347; continue; }
										/* */ if (_12 === (17)) { $s = 348; continue; }
										/* */ if (_12 === (18)) { $s = 349; continue; }
										/* */ if (_12 === (19)) { $s = 350; continue; }
										/* */ if (_12 === (25)) { $s = 351; continue; }
										/* */ if (_12 === (28)) { $s = 352; continue; }
										/* */ if (_12 === (32)) { $s = 353; continue; }
										/* */ if (_12 === (22)) { $s = 354; continue; }
										/* */ if (_12 === (23)) { $s = 355; continue; }
										/* */ if (_12 === (31)) { $s = 356; continue; }
										/* */ if (_12 === (33)) { $s = 357; continue; }
										/* */ if (_12 === (26)) { $s = 358; continue; }
										/* */ if (_12 === (29)) { $s = 359; continue; }
										/* */ $s = 360; continue;
										/* if (_12 === (21)) { */ case 329:
											$r = print("."); /* */ $s = 361; case 361: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (30)) { */ case 330:
											/* */ if ((i$1.$high === 0 && i$1.$low === 1)) { $s = 362; continue; }
											/* */ $s = 363; continue;
											/* if ((i$1.$high === 0 && i$1.$low === 1)) { */ case 362:
												$r = print("("); /* */ $s = 365; case 365: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
												$s = 364; continue;
											/* } else { */ case 363:
												$r = print(","); /* */ $s = 366; case 366: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											/* } */ case 364:
											$s = 360; continue;
										/* } else if (_12 === (24)) { */ case 331:
											/* */ if ((i$1.$high === 0 && i$1.$low === 1)) { $s = 367; continue; }
											/* */ $s = 368; continue;
											/* if ((i$1.$high === 0 && i$1.$low === 1)) { */ case 367:
												$r = print("("); /* */ $s = 370; case 370: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
												$s = 369; continue;
											/* } else { */ case 368:
												$r = print(","); /* */ $s = 371; case 371: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											/* } */ case 369:
											$s = 360; continue;
										/* } else if (_12 === (1)) { */ case 332:
											$r = print(" || "); /* */ $s = 372; case 372: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (2)) { */ case 333:
											$r = print(" && "); /* */ $s = 373; case 373: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (3)) { */ case 334:
											$r = print(" == "); /* */ $s = 374; case 374: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (4)) { */ case 335:
											$r = print(" != "); /* */ $s = 375; case 375: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (5)) { */ case 336:
											$r = print(" < "); /* */ $s = 376; case 376: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (6)) { */ case 337:
											$r = print(" <= "); /* */ $s = 377; case 377: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (7)) { */ case 338:
											$r = print(" >= "); /* */ $s = 378; case 378: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (8)) { */ case 339:
											$r = print(" > "); /* */ $s = 379; case 379: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (9)) { */ case 340:
											$r = print(" + "); /* */ $s = 380; case 380: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (10)) { */ case 341:
											$r = print(" - "); /* */ $s = 381; case 381: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (11)) { */ case 342:
											$r = print(" | "); /* */ $s = 382; case 382: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (12)) { */ case 343:
											$r = print(" ^ "); /* */ $s = 383; case 383: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (13)) { */ case 344:
											$r = print(" * "); /* */ $s = 384; case 384: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (14)) { */ case 345:
											$r = print(" / "); /* */ $s = 385; case 385: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (15)) { */ case 346:
											$r = print(" % "); /* */ $s = 386; case 386: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (16)) { */ case 347:
											$r = print(" & "); /* */ $s = 387; case 387: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (17)) { */ case 348:
											$r = print(" &^ "); /* */ $s = 388; case 388: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (18)) { */ case 349:
											$r = print(" << "); /* */ $s = 389; case 389: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (19)) { */ case 350:
											$r = print(" >> "); /* */ $s = 390; case 390: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (25)) { */ case 351:
											$r = print(" <- "); /* */ $s = 391; case 391: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (28)) { */ case 352:
											$r = print(":"); /* */ $s = 392; case 392: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (32)) { */ case 353:
											$r = print("["); /* */ $s = 393; case 393: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (22)) { */ case 354:
											/* */ if ((i$1.$high === 0 && i$1.$low === 1)) { $s = 394; continue; }
											/* */ $s = 395; continue;
											/* if ((i$1.$high === 0 && i$1.$low === 1)) { */ case 394:
												$r = print("["); /* */ $s = 397; case 397: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
												$s = 396; continue;
											/* } else { */ case 395:
												$r = print(":"); /* */ $s = 398; case 398: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											/* } */ case 396:
											$s = 360; continue;
										/* } else if (_12 === (23)) { */ case 355:
											/* */ if ((i$1.$high === 0 && i$1.$low === 1)) { $s = 399; continue; }
											/* */ $s = 400; continue;
											/* if ((i$1.$high === 0 && i$1.$low === 1)) { */ case 399:
												$r = print("{"); /* */ $s = 402; case 402: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
												$s = 401; continue;
											/* } else { */ case 400:
												$r = print(", "); /* */ $s = 403; case 403: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											/* } */ case 401:
											$s = 360; continue;
										/* } else if (_12 === (31)) { */ case 356:
											$r = print(", "); /* */ $s = 404; case 404: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (33)) { */ case 357:
											$r = print("]"); /* */ $s = 405; case 405: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (26)) { */ case 358:
											$r = print("]"); /* */ $s = 406; case 406: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 360; continue;
										/* } else if (_12 === (29)) { */ case 359:
											$r = print(".("); /* */ $s = 407; case 407: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										/* } */ case 360:
									case 328:
								/* } */ case 327:
								$s = 324; continue;
							/* } else if (((i$1.$high === 0 && i$1.$low === 1)) && ((l$1.$high === 0 && l$1.$low === 1))) { */ case 322:
									_13 = op$6;
									/* */ if (_13 === (0)) { $s = 409; continue; }
									/* */ if (_13 === (30)) { $s = 410; continue; }
									/* */ if (_13 === (24)) { $s = 411; continue; }
									/* */ if (_13 === (31)) { $s = 412; continue; }
									/* */ if (_13 === (23)) { $s = 413; continue; }
									/* */ if (_13 === (29)) { $s = 414; continue; }
									/* */ $s = 415; continue;
									/* if (_13 === (0)) { */ case 409:
										$r = print(")"); /* */ $s = 416; case 416: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 415; continue;
									/* } else if (_13 === (30)) { */ case 410:
										$r = print("()"); /* */ $s = 417; case 417: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 415; continue;
									/* } else if (_13 === (24)) { */ case 411:
										$r = print("()"); /* */ $s = 418; case 418: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 415; continue;
									/* } else if (_13 === (31)) { */ case 412:
										$r = print("}"); /* */ $s = 419; case 419: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 415; continue;
									/* } else if (_13 === (23)) { */ case 413:
										$r = print("{}"); /* */ $s = 420; case 420: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 415; continue;
									/* } else if (_13 === (29)) { */ case 414:
										$r = print(".(type)"); /* */ $s = 421; case 421: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									/* } */ case 415:
								case 408:
								$s = 324; continue;
							/* } else if (((i$1.$high === l$1.$high && i$1.$low === l$1.$low)) && ((i$1.$high > 0 || (i$1.$high === 0 && i$1.$low > 0)))) { */ case 323:
									_14 = op$6;
									/* */ if (_14 === (32)) { $s = 423; continue; }
									/* */ if (_14 === (22)) { $s = 424; continue; }
									/* */ if (_14 === (31)) { $s = 425; continue; }
									/* */ if (_14 === (23)) { $s = 426; continue; }
									/* */ if (_14 === (30)) { $s = 427; continue; }
									/* */ if (_14 === (24)) { $s = 428; continue; }
									/* */ if (_14 === (29)) { $s = 429; continue; }
									/* */ $s = 430; continue;
									/* if (_14 === (32)) { */ case 423:
										$r = print("]"); /* */ $s = 431; case 431: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 430; continue;
									/* } else if (_14 === (22)) { */ case 424:
										/* */ if ((l$1.$high === 0 && l$1.$low === 2)) { $s = 432; continue; }
										/* */ $s = 433; continue;
										/* if ((l$1.$high === 0 && l$1.$low === 2)) { */ case 432:
											$r = print(":]"); /* */ $s = 435; case 435: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
											$s = 434; continue;
										/* } else { */ case 433:
											$r = print("]"); /* */ $s = 436; case 436: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										/* } */ case 434:
										$s = 430; continue;
									/* } else if (_14 === (31)) { */ case 425:
										$r = print("}"); /* */ $s = 437; case 437: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 430; continue;
									/* } else if (_14 === (23)) { */ case 426:
										$r = print("}"); /* */ $s = 438; case 438: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 430; continue;
									/* } else if (_14 === (30)) { */ case 427:
										$r = print("...)"); /* */ $s = 439; case 439: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 430; continue;
									/* } else if (_14 === (24)) { */ case 428:
										$r = print(")"); /* */ $s = 440; case 440: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 430; continue;
									/* } else if (_14 === (29)) { */ case 429:
										$r = print(")"); /* */ $s = 441; case 441: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									/* } */ case 430:
								case 422:
							/* } */ case 324:
							/* */ if ((i$1.$high === l$1.$high && i$1.$low === l$1.$low)) { $s = 442; continue; }
							/* */ $s = 443; continue;
							/* if ((i$1.$high === l$1.$high && i$1.$low === l$1.$low)) { */ case 442:
								/* */ if (caseheader) { $s = 444; continue; }
								/* */ if (blockheader) { $s = 445; continue; }
								/* */ $s = 446; continue;
								/* if (caseheader) { */ case 444:
									$s = 446; continue;
								/* } else if (blockheader) { */ case 445:
									$r = print(" "); /* */ $s = 447; case 447: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* } */ case 446:
							/* } */ case 443:
						/* } */ case 320:
						$s = 219; continue;
					/* } else if (_10 === ($indexPtr($pkg.ReturnStmt.$array, $pkg.ReturnStmt.$offset + 0, ptrType))) { */ case 210:
						/* */ if (!((i.$high === 4294967295 && i.$low === 4294967294)) && !((_entry$61 = ast[$Uint64.keyFor((x$47 = (x$48 = O(iterator), new $Uint64(x$48.$high + i.$high, x$48.$low + i.$low)), new $Uint64(x$47.$high + 0, x$47.$low + 1)))], _entry$61 !== undefined ? _entry$61.v : sliceType.nil) === sliceType.nil)) { $s = 448; continue; }
						/* */ $s = 449; continue;
						/* if (!((i.$high === 4294967295 && i.$low === 4294967294)) && !((_entry$61 = ast[$Uint64.keyFor((x$47 = (x$48 = O(iterator), new $Uint64(x$48.$high + i.$high, x$48.$low + i.$low)), new $Uint64(x$47.$high + 0, x$47.$low + 1)))], _entry$61 !== undefined ? _entry$61.v : sliceType.nil) === sliceType.nil)) { */ case 448:
							$r = print(", "); /* */ $s = 450; case 450: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 449:
						$s = 219; continue;
					/* } else if (_10 === ($indexPtr($pkg.IncDecStmt.$array, $pkg.IncDecStmt.$offset + 0, ptrType))) { */ case 211:
						/* */ if ((i.$high === 0 && i.$low === 0)) { $s = 451; continue; }
						/* */ $s = 452; continue;
						/* if ((i.$high === 0 && i.$low === 0)) { */ case 451:
							/* */ if (Which((_entry$62 = ast[$Uint64.keyFor(O(iterator))], _entry$62 !== undefined ? _entry$62.v : sliceType.nil)) === sliceType.nil) { $s = 453; continue; }
							/* */ $s = 454; continue;
							/* if (Which((_entry$62 = ast[$Uint64.keyFor(O(iterator))], _entry$62 !== undefined ? _entry$62.v : sliceType.nil)) === sliceType.nil) { */ case 453:
								/* */ if (ast_o_iterator.length > 0) { $s = 455; continue; }
								/* */ $s = 456; continue;
								/* if (ast_o_iterator.length > 0) { */ case 455:
									$r = print(ast_o_iterator); /* */ $s = 457; case 457: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* } */ case 456:
							/* } */ case 454:
						/* } */ case 452:
						/* */ if ((i.$high === 4294967295 && i.$low === 4294967294)) { $s = 458; continue; }
						/* */ $s = 459; continue;
						/* if ((i.$high === 4294967295 && i.$low === 4294967294)) { */ case 458:
							op$7 = ((((_entry$63 = ast[$Uint64.keyFor(iterator)], _entry$63 !== undefined ? _entry$63.v : sliceType.nil).$length - 1 >> 0) << 24 >>> 24));
								_15 = op$7;
								/* */ if (_15 === (0)) { $s = 461; continue; }
								/* */ if (_15 === (1)) { $s = 462; continue; }
								/* */ $s = 463; continue;
								/* if (_15 === (0)) { */ case 461:
									$r = print("++"); /* */ $s = 464; case 464: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$s = 463; continue;
								/* } else if (_15 === (1)) { */ case 462:
									$r = print("--"); /* */ $s = 465; case 465: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* } */ case 463:
							case 460:
						/* } */ case 459:
						$s = 219; continue;
					/* } else if (_10 === ($indexPtr($pkg.AssignStmt.$array, $pkg.AssignStmt.$offset + 0, ptrType))) { */ case 212:
						blockheader$1 = true;
						op$8 = ((((_entry$64 = ast[$Uint64.keyFor(iterator)], _entry$64 !== undefined ? _entry$64.v : sliceType.nil).$length - 1 >> 0) << 24 >>> 24));
						l$2 = (new $Uint64(0, ((_entry$65 = ast[$Uint64.keyFor(iterator)], _entry$65 !== undefined ? _entry$65.v : sliceType.nil).$capacity - 19 >> 0)));
						/* */ if (Which((_entry$66 = ast[$Uint64.keyFor((x$49 = O(iterator), new $Uint64(x$49.$high + i.$high, x$49.$low + i.$low)))], _entry$66 !== undefined ? _entry$66.v : sliceType.nil)) === sliceType.nil) { $s = 466; continue; }
						/* */ $s = 467; continue;
						/* if (Which((_entry$66 = ast[$Uint64.keyFor((x$49 = O(iterator), new $Uint64(x$49.$high + i.$high, x$49.$low + i.$low)))], _entry$66 !== undefined ? _entry$66.v : sliceType.nil)) === sliceType.nil) { */ case 466:
							/* */ if (($bytesToString((_entry$67 = ast[$Uint64.keyFor((x$50 = O(iterator), new $Uint64(x$50.$high + i.$high, x$50.$low + i.$low)))], _entry$67 !== undefined ? _entry$67.v : sliceType.nil))).length > 0) { $s = 468; continue; }
							/* */ $s = 469; continue;
							/* if (($bytesToString((_entry$67 = ast[$Uint64.keyFor((x$50 = O(iterator), new $Uint64(x$50.$high + i.$high, x$50.$low + i.$low)))], _entry$67 !== undefined ? _entry$67.v : sliceType.nil))).length > 0) { */ case 468:
								$r = print(($bytesToString((_entry$68 = ast[$Uint64.keyFor((x$51 = O(iterator), new $Uint64(x$51.$high + i.$high, x$51.$low + i.$low)))], _entry$68 !== undefined ? _entry$68.v : sliceType.nil)))); /* */ $s = 470; case 470: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 469:
						/* } */ case 467:
						/* */ if (!((i.$high === 4294967295 && i.$low === 4294967294))) { $s = 471; continue; }
						/* */ $s = 472; continue;
						/* if (!((i.$high === 4294967295 && i.$low === 4294967294))) { */ case 471:
							i$2 = new $Uint64(i.$high + 0, i.$low + 1);
							/* */ if ((i$2.$high === l$2.$high && i$2.$low === l$2.$low)) { $s = 473; continue; }
							/* */ if (((x$52 = new $Uint64(i$2.$high + 0, i$2.$low + 1), (x$52.$high === l$2.$high && x$52.$low === l$2.$low))) && (op$8 > 14)) { $s = 474; continue; }
							/* */ if (((x$53 = $shiftRightUint64((new $Uint64(l$2.$high + 0, l$2.$low + 1)), 1), (i$2.$high === x$53.$high && i$2.$low === x$53.$low))) && (!((op$8 === 14)))) { $s = 475; continue; }
							/* */ if (((x$54 = $shiftRightUint64(l$2, 1), (i$2.$high === x$54.$high && i$2.$low === x$54.$low))) && (op$8 < 14)) { $s = 476; continue; }
							/* */ if ((i$2.$high > 0 || (i$2.$high === 0 && i$2.$low > 0)) && ((!((x$55 = new $Uint64(i$2.$high + 0, i$2.$low + 1), (x$55.$high === l$2.$high && x$55.$low === l$2.$low)))) || (!((op$8 === 14))))) { $s = 477; continue; }
							/* */ if ((i$2.$high > 0 || (i$2.$high === 0 && i$2.$low > 0))) { $s = 478; continue; }
							/* */ $s = 479; continue;
							/* if ((i$2.$high === l$2.$high && i$2.$low === l$2.$low)) { */ case 473:
								/* */ if (blockheader$1) { $s = 480; continue; }
								/* */ $s = 481; continue;
								/* if (blockheader$1) { */ case 480:
									$r = print(" "); /* */ $s = 483; case 483: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$s = 482; continue;
								/* } else { */ case 481:
									$r = print(""); /* */ $s = 484; case 484: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* } */ case 482:
								$s = 479; continue;
							/* } else if (((x$52 = new $Uint64(i$2.$high + 0, i$2.$low + 1), (x$52.$high === l$2.$high && x$52.$low === l$2.$low))) && (op$8 > 14)) { */ case 474:
									_16 = op$8;
									/* */ if (_16 === (15)) { $s = 486; continue; }
									/* */ if (_16 === (16)) { $s = 487; continue; }
									/* */ if (_16 === (17)) { $s = 488; continue; }
									/* */ if (_16 === (18)) { $s = 489; continue; }
									/* */ if (_16 === (13)) { $s = 490; continue; }
									/* */ $s = 491; continue;
									/* if (_16 === (15)) { */ case 486:
										$r = print(" = "); /* */ $s = 492; case 492: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 491; continue;
									/* } else if (_16 === (16)) { */ case 487:
										$r = print(" := "); /* */ $s = 493; case 493: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 491; continue;
									/* } else if (_16 === (17)) { */ case 488:
										$r = print(" = range "); /* */ $s = 494; case 494: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 491; continue;
									/* } else if (_16 === (18)) { */ case 489:
										$r = print(" := range "); /* */ $s = 495; case 495: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 491; continue;
									/* } else if (_16 === (13)) { */ case 490:
										$r = print(", "); /* */ $s = 496; case 496: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									/* } */ case 491:
								case 485:
								$s = 479; continue;
							/* } else if (((x$53 = $shiftRightUint64((new $Uint64(l$2.$high + 0, l$2.$low + 1)), 1), (i$2.$high === x$53.$high && i$2.$low === x$53.$low))) && (!((op$8 === 14)))) { */ case 475:
									_17 = op$8;
									/* */ if (_17 === (0)) { $s = 498; continue; }
									/* */ if (_17 === (1)) { $s = 499; continue; }
									/* */ if (_17 === (3)) { $s = 500; continue; }
									/* */ if (_17 === (4)) { $s = 501; continue; }
									/* */ if (_17 === (5)) { $s = 502; continue; }
									/* */ if (_17 === (6)) { $s = 503; continue; }
									/* */ if (_17 === (7)) { $s = 504; continue; }
									/* */ if (_17 === (8)) { $s = 505; continue; }
									/* */ if (_17 === (9)) { $s = 506; continue; }
									/* */ if (_17 === (10)) { $s = 507; continue; }
									/* */ if (_17 === (11)) { $s = 508; continue; }
									/* */ if (_17 === (12)) { $s = 509; continue; }
									/* */ if (_17 === (2)) { $s = 510; continue; }
									/* */ if (_17 === (15)) { $s = 511; continue; }
									/* */ if (_17 === (16)) { $s = 512; continue; }
									/* */ if (_17 === (17)) { $s = 513; continue; }
									/* */ if (_17 === (18)) { $s = 514; continue; }
									/* */ if (_17 === (13)) { $s = 515; continue; }
									/* */ $s = 516; continue;
									/* if (_17 === (0)) { */ case 498:
										$r = print(" = "); /* */ $s = 517; case 517: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 516; continue;
									/* } else if (_17 === (1)) { */ case 499:
										$r = print(" := "); /* */ $s = 518; case 518: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 516; continue;
									/* } else if (_17 === (3)) { */ case 500:
										$r = print(" += "); /* */ $s = 519; case 519: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 516; continue;
									/* } else if (_17 === (4)) { */ case 501:
										$r = print(" -= "); /* */ $s = 520; case 520: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 516; continue;
									/* } else if (_17 === (5)) { */ case 502:
										$r = print(" *= "); /* */ $s = 521; case 521: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 516; continue;
									/* } else if (_17 === (6)) { */ case 503:
										$r = print(" /= "); /* */ $s = 522; case 522: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 516; continue;
									/* } else if (_17 === (7)) { */ case 504:
										$r = print(" %= "); /* */ $s = 523; case 523: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 516; continue;
									/* } else if (_17 === (8)) { */ case 505:
										$r = print(" &= "); /* */ $s = 524; case 524: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 516; continue;
									/* } else if (_17 === (9)) { */ case 506:
										$r = print(" |= "); /* */ $s = 525; case 525: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 516; continue;
									/* } else if (_17 === (10)) { */ case 507:
										$r = print(" ^= "); /* */ $s = 526; case 526: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 516; continue;
									/* } else if (_17 === (11)) { */ case 508:
										$r = print(" <<= "); /* */ $s = 527; case 527: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 516; continue;
									/* } else if (_17 === (12)) { */ case 509:
										$r = print(" >>= "); /* */ $s = 528; case 528: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 516; continue;
									/* } else if (_17 === (2)) { */ case 510:
										$r = print(" &^= "); /* */ $s = 529; case 529: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 516; continue;
									/* } else if (_17 === (15)) { */ case 511:
										$r = print(", "); /* */ $s = 530; case 530: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 516; continue;
									/* } else if (_17 === (16)) { */ case 512:
										$r = print(", "); /* */ $s = 531; case 531: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 516; continue;
									/* } else if (_17 === (17)) { */ case 513:
										$r = print(", "); /* */ $s = 532; case 532: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 516; continue;
									/* } else if (_17 === (18)) { */ case 514:
										$r = print(", "); /* */ $s = 533; case 533: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
										$s = 516; continue;
									/* } else if (_17 === (13)) { */ case 515:
										$r = print(", "); /* */ $s = 534; case 534: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									/* } */ case 516:
								case 497:
								$s = 479; continue;
							/* } else if (((x$54 = $shiftRightUint64(l$2, 1), (i$2.$high === x$54.$high && i$2.$low === x$54.$low))) && (op$8 < 14)) { */ case 476:
								$r = print(" "); /* */ $s = 535; case 535: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = 479; continue;
							/* } else if ((i$2.$high > 0 || (i$2.$high === 0 && i$2.$low > 0)) && ((!((x$55 = new $Uint64(i$2.$high + 0, i$2.$low + 1), (x$55.$high === l$2.$high && x$55.$low === l$2.$low)))) || (!((op$8 === 14))))) { */ case 477:
								$r = print(", "); /* */ $s = 536; case 536: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = 479; continue;
							/* } else if ((i$2.$high > 0 || (i$2.$high === 0 && i$2.$low > 0))) { */ case 478:
								$r = print(" "); /* */ $s = 537; case 537: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 479:
						/* } */ case 472:
						$s = 219; continue;
					/* } else if (_10 === ($indexPtr($pkg.RootOfType.$array, $pkg.RootOfType.$offset + 0, ptrType))) { */ case 213:
						/* */ if ((i.$high === 4294967295 && i.$low === 4294967294) && Which((_entry$69 = ast[$Uint64.keyFor(O(iterator))], _entry$69 !== undefined ? _entry$69.v : sliceType.nil)) === sliceType.nil) { $s = 538; continue; }
						/* */ $s = 539; continue;
						/* if ((i.$high === 4294967295 && i.$low === 4294967294) && Which((_entry$69 = ast[$Uint64.keyFor(O(iterator))], _entry$69 !== undefined ? _entry$69.v : sliceType.nil)) === sliceType.nil) { */ case 538:
							/* */ if (ast_o_iterator.length > 0) { $s = 540; continue; }
							/* */ $s = 541; continue;
							/* if (ast_o_iterator.length > 0) { */ case 540:
								$r = print(ast_o_iterator); /* */ $s = 542; case 542: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 541:
						/* } */ case 539:
						$s = 219; continue;
					/* } else if (_10 === ($indexPtr($pkg.LblGotoCnt.$array, $pkg.LblGotoCnt.$offset + 0, ptrType))) { */ case 214:
						/* */ if ((i.$high === 4294967295 && i.$low === 4294967294)) { $s = 543; continue; }
						/* */ $s = 544; continue;
						/* if ((i.$high === 4294967295 && i.$low === 4294967294)) { */ case 543:
							op$9 = ((((_entry$70 = ast[$Uint64.keyFor(iterator)], _entry$70 !== undefined ? _entry$70.v : sliceType.nil).$length - 1 >> 0) << 24 >>> 24));
								_18 = op$9;
								/* */ if (_18 === (3)) { $s = 546; continue; }
								/* */ if (_18 === (2)) { $s = 547; continue; }
								/* */ if (_18 === (1)) { $s = 548; continue; }
								/* */ if (_18 === (0)) { $s = 549; continue; }
								/* */ $s = 550; continue;
								/* if (_18 === (3)) { */ case 546:
									$r = print(ast_o_iterator); /* */ $s = 551; case 551: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$s = 550; continue;
								/* } else if (_18 === (2)) { */ case 547:
									$r = print(ast_o_iterator); /* */ $s = 552; case 552: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$s = 550; continue;
								/* } else if (_18 === (1)) { */ case 548:
									$r = print(ast_o_iterator); /* */ $s = 553; case 553: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$s = 550; continue;
								/* } else if (_18 === (0)) { */ case 549:
									$r = print(ast_o_iterator); /* */ $s = 554; case 554: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$r = print(": "); /* */ $s = 555; case 555: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* } */ case 550:
							case 545:
						/* } */ case 544:
						$s = 219; continue;
					/* } else if (_10 === ($indexPtr($pkg.VarDefStmt.$array, $pkg.VarDefStmt.$offset + 0, ptrType))) { */ case 215:
						/* */ if (!((i.$high === 4294967295 && i.$low === 4294967294))) { $s = 556; continue; }
						/* */ $s = 557; continue;
						/* if (!((i.$high === 4294967295 && i.$low === 4294967294))) { */ case 556:
							/* */ if (!(((_entry$71 = ast[$Uint64.keyFor((x$56 = O(iterator), new $Uint64(x$56.$high + i.$high, x$56.$low + i.$low)))], _entry$71 !== undefined ? _entry$71.v : sliceType.nil).$length === 0))) { $s = 558; continue; }
							/* */ $s = 559; continue;
							/* if (!(((_entry$71 = ast[$Uint64.keyFor((x$56 = O(iterator), new $Uint64(x$56.$high + i.$high, x$56.$low + i.$low)))], _entry$71 !== undefined ? _entry$71.v : sliceType.nil).$length === 0))) { */ case 558:
								/* */ if (!(((_entry$72 = ast[$Uint64.keyFor((x$57 = (x$58 = O(iterator), new $Uint64(x$58.$high + i.$high, x$58.$low + i.$low)), new $Uint64(x$57.$high + 0, x$57.$low + 1)))], _entry$72 !== undefined ? _entry$72.v : sliceType.nil).$length === 0))) { $s = 560; continue; }
								/* */ $s = 561; continue;
								/* if (!(((_entry$72 = ast[$Uint64.keyFor((x$57 = (x$58 = O(iterator), new $Uint64(x$58.$high + i.$high, x$58.$low + i.$low)), new $Uint64(x$57.$high + 0, x$57.$low + 1)))], _entry$72 !== undefined ? _entry$72.v : sliceType.nil).$length === 0))) { */ case 560:
									$r = print(""); /* */ $s = 562; case 562: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* } */ case 561:
							/* } */ case 559:
							/* */ if (!(((_entry$73 = ast[$Uint64.keyFor((x$59 = (x$60 = O(iterator), new $Uint64(x$60.$high + i.$high, x$60.$low + i.$low)), new $Uint64(x$59.$high - 0, x$59.$low - 1)))], _entry$73 !== undefined ? _entry$73.v : sliceType.nil).$length === 0))) { $s = 563; continue; }
							/* */ $s = 564; continue;
							/* if (!(((_entry$73 = ast[$Uint64.keyFor((x$59 = (x$60 = O(iterator), new $Uint64(x$60.$high + i.$high, x$60.$low + i.$low)), new $Uint64(x$59.$high - 0, x$59.$low - 1)))], _entry$73 !== undefined ? _entry$73.v : sliceType.nil).$length === 0))) { */ case 563:
								/* */ if ((_entry$74 = ast[$Uint64.keyFor((x$61 = (x$62 = O(iterator), new $Uint64(x$62.$high + i.$high, x$62.$low + i.$low)), new $Uint64(x$61.$high + 0, x$61.$low + 1)))], _entry$74 !== undefined ? _entry$74.v : sliceType.nil).$length === 0) { $s = 565; continue; }
								/* */ $s = 566; continue;
								/* if ((_entry$74 = ast[$Uint64.keyFor((x$61 = (x$62 = O(iterator), new $Uint64(x$62.$high + i.$high, x$62.$low + i.$low)), new $Uint64(x$61.$high + 0, x$61.$low + 1)))], _entry$74 !== undefined ? _entry$74.v : sliceType.nil).$length === 0) { */ case 565:
									$r = print(""); /* */ $s = 567; case 567: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$r = print(")"); /* */ $s = 568; case 568: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$r = print(""); /* */ $s = 569; case 569: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* } */ case 566:
							/* } */ case 564:
						/* } */ case 557:
						$s = 219; continue;
					/* } else if (_10 === ($indexPtr($pkg.FileMatter.$array, $pkg.FileMatter.$offset + 0, ptrType))) { */ case 216:
						/* */ if (!((i.$high === 4294967295 && i.$low === 4294967294))) { $s = 570; continue; }
						/* */ $s = 571; continue;
						/* if (!((i.$high === 4294967295 && i.$low === 4294967294))) { */ case 570:
							xyz = (_entry$75 = ast[$Uint64.keyFor((x$63 = (x$64 = O(iterator), new $Uint64(x$64.$high + i.$high, x$64.$low + i.$low)), new $Uint64(x$63.$high + 0, x$63.$low + 1)))], _entry$75 !== undefined ? _entry$75.v : sliceType.nil) === sliceType.nil || (x$65 = (_entry$76 = ast[$Uint64.keyFor((x$66 = (x$67 = O(iterator), new $Uint64(x$67.$high + i.$high, x$67.$low + i.$low)), new $Uint64(x$66.$high + 0, x$66.$low + 1)))], _entry$76 !== undefined ? _entry$76.v : sliceType.nil), $indexPtr(x$65.$array, x$65.$offset + 0, ptrType)) === $indexPtr($pkg.CommentRow.$array, $pkg.CommentRow.$offset + 0, ptrType);
							abc = !((_entry$77 = ast[$Uint64.keyFor((x$68 = (x$69 = O(iterator), new $Uint64(x$69.$high + i.$high, x$69.$low + i.$low)), new $Uint64(x$68.$high + 0, x$68.$low + 0)))], _entry$77 !== undefined ? _entry$77.v : sliceType.nil) === sliceType.nil) && (x$70 = (_entry$78 = ast[$Uint64.keyFor((x$71 = (x$72 = O(iterator), new $Uint64(x$72.$high + i.$high, x$72.$low + i.$low)), new $Uint64(x$71.$high + 0, x$71.$low + 0)))], _entry$78 !== undefined ? _entry$78.v : sliceType.nil), $indexPtr(x$70.$array, x$70.$offset + 0, ptrType)) === $indexPtr($pkg.CommentRow.$array, $pkg.CommentRow.$offset + 0, ptrType);
							def = !((_entry$79 = ast[$Uint64.keyFor((x$73 = (x$74 = O(iterator), new $Uint64(x$74.$high + i.$high, x$74.$low + i.$low)), new $Uint64(x$73.$high + 0, x$73.$low + 1)))], _entry$79 !== undefined ? _entry$79.v : sliceType.nil) === sliceType.nil) && (x$75 = (_entry$80 = ast[$Uint64.keyFor((x$76 = (x$77 = O(iterator), new $Uint64(x$77.$high + i.$high, x$77.$low + i.$low)), new $Uint64(x$76.$high + 0, x$76.$low + 1)))], _entry$80 !== undefined ? _entry$80.v : sliceType.nil), $indexPtr(x$75.$array, x$75.$offset + 0, ptrType)) === $indexPtr($pkg.CommentRow.$array, $pkg.CommentRow.$offset + 0, ptrType);
							end$1 = ((_entry$81 = ast[$Uint64.keyFor((x$78 = (x$79 = O(iterator), new $Uint64(x$79.$high + i.$high, x$79.$low + i.$low)), new $Uint64(x$78.$high + 0, x$78.$low + 1)))], _entry$81 !== undefined ? _entry$81.v : sliceType.nil).$length - 1 >> 0) === 0;
							ene = ((_entry$82 = ast[$Uint64.keyFor((x$80 = (x$81 = O(iterator), new $Uint64(x$81.$high + i.$high, x$81.$low + i.$low)), new $Uint64(x$80.$high + 0, x$80.$low + 0)))], _entry$82 !== undefined ? _entry$82.v : sliceType.nil).$length - 1 >> 0) === 0;
							/* */ if (!xyz || !end$1) { $s = 572; continue; }
							/* */ $s = 573; continue;
							/* if (!xyz || !end$1) { */ case 572:
								$r = print(""); /* */ $s = 574; case 574: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 573:
							/* */ if (abc && def && end$1 && ene) { $s = 575; continue; }
							/* */ $s = 576; continue;
							/* if (abc && def && end$1 && ene) { */ case 575:
								$r = print(""); /* */ $s = 577; case 577: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 576:
						/* } */ case 571:
						$s = 219; continue;
					/* } else if (_10 === ($indexPtr($pkg.ClosureExp.$array, $pkg.ClosureExp.$offset + 0, ptrType))) { */ case 217:
						/* */ if (!((i.$high === 4294967295 && i.$low === 4294967294))) { $s = 578; continue; }
						/* */ $s = 579; continue;
						/* if (!((i.$high === 4294967295 && i.$low === 4294967294))) { */ case 578:
							end$2 = (_entry$83 = ast[$Uint64.keyFor((x$82 = (x$83 = O(iterator), new $Uint64(x$83.$high + i.$high, x$83.$low + i.$low)), new $Uint64(x$82.$high + 0, x$82.$low + 1)))], _entry$83 !== undefined ? _entry$83.v : sliceType.nil) === sliceType.nil || (x$84 = (_entry$84 = ast[$Uint64.keyFor((x$85 = (x$86 = O(iterator), new $Uint64(x$86.$high + i.$high, x$86.$low + i.$low)), new $Uint64(x$85.$high + 0, x$85.$low + 1)))], _entry$84 !== undefined ? _entry$84.v : sliceType.nil), $indexPtr(x$84.$array, x$84.$offset + 0, ptrType)) === $indexPtr($pkg.BlocOfCode.$array, $pkg.BlocOfCode.$offset + 0, ptrType);
							xyz$1 = (_entry$85 = ast[$Uint64.keyFor((x$87 = (x$88 = O(iterator), new $Uint64(x$88.$high + i.$high, x$88.$low + i.$low)), new $Uint64(x$87.$high + 0, x$87.$low + 0)))], _entry$85 !== undefined ? _entry$85.v : sliceType.nil) === sliceType.nil || (x$89 = (_entry$86 = ast[$Uint64.keyFor((x$90 = (x$91 = O(iterator), new $Uint64(x$91.$high + i.$high, x$91.$low + i.$low)), new $Uint64(x$90.$high + 0, x$90.$low + 0)))], _entry$86 !== undefined ? _entry$86.v : sliceType.nil), $indexPtr(x$89.$array, x$89.$offset + 0, ptrType)) === $indexPtr($pkg.BlocOfCode.$array, $pkg.BlocOfCode.$offset + 0, ptrType);
							/* */ if (end$2) { $s = 580; continue; }
							/* */ if (!xyz$1) { $s = 581; continue; }
							/* */ $s = 582; continue;
							/* if (end$2) { */ case 580:
								/* */ if (!xyz$1) { $s = 583; continue; }
								/* */ $s = 584; continue;
								/* if (!xyz$1) { */ case 583:
									$r = print(")"); /* */ $s = 585; case 585: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* } */ case 584:
								$s = 582; continue;
							/* } else if (!xyz$1) { */ case 581:
								separ$1 = (new $Uint64(0, ((_entry$87 = ast[$Uint64.keyFor(iterator)], _entry$87 !== undefined ? _entry$87.v : sliceType.nil).$length - 1 >> 0)));
								/* */ if ((x$92 = new $Uint64(i.$high + 0, i.$low + 1), (x$92.$high === separ$1.$high && x$92.$low === separ$1.$low))) { $s = 586; continue; }
								/* */ $s = 587; continue;
								/* if ((x$92 = new $Uint64(i.$high + 0, i.$low + 1), (x$92.$high === separ$1.$high && x$92.$low === separ$1.$low))) { */ case 586:
									$r = print(")("); /* */ $s = 589; case 589: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$s = 588; continue;
								/* } else { */ case 587:
									$r = print(", "); /* */ $s = 590; case 590: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* } */ case 588:
							/* } */ case 582:
						/* } */ case 579:
						$s = 219; continue;
					/* } else if (_10 === ($indexPtr($pkg.IfceMethod.$array, $pkg.IfceMethod.$offset + 0, ptrType))) { */ case 218:
						/* */ if ((i.$high === 0 && i.$low === 0)) { $s = 591; continue; }
						/* */ if (!((i.$high === 4294967295 && i.$low === 4294967294))) { $s = 592; continue; }
						/* */ $s = 593; continue;
						/* if ((i.$high === 0 && i.$low === 0)) { */ case 591:
							end$3 = (_entry$88 = ast[$Uint64.keyFor((x$93 = (x$94 = O(iterator), new $Uint64(x$94.$high + i.$high, x$94.$low + i.$low)), new $Uint64(x$93.$high + 0, x$93.$low + 1)))], _entry$88 !== undefined ? _entry$88.v : sliceType.nil) === sliceType.nil;
							/* */ if (end$3) { $s = 594; continue; }
							/* */ $s = 595; continue;
							/* if (end$3) { */ case 594:
								$r = print("()"); /* */ $s = 597; case 597: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = 596; continue;
							/* } else { */ case 595:
								op$10 = (new $Uint64(0, ((_entry$89 = ast[$Uint64.keyFor(iterator)], _entry$89 !== undefined ? _entry$89.v : sliceType.nil).$length - 1 >> 0)));
								/* */ if ((0 === op$10.$high && 0 === op$10.$low)) { $s = 598; continue; }
								/* */ $s = 599; continue;
								/* if ((0 === op$10.$high && 0 === op$10.$low)) { */ case 598:
									$r = print("()"); /* */ $s = 600; case 600: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* } */ case 599:
								$r = print("("); /* */ $s = 601; case 601: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 596:
							$s = 593; continue;
						/* } else if (!((i.$high === 4294967295 && i.$low === 4294967294))) { */ case 592:
							end$4 = (_entry$90 = ast[$Uint64.keyFor((x$95 = (x$96 = O(iterator), new $Uint64(x$96.$high + i.$high, x$96.$low + i.$low)), new $Uint64(x$95.$high + 0, x$95.$low + 1)))], _entry$90 !== undefined ? _entry$90.v : sliceType.nil) === sliceType.nil;
							/* */ if (end$4) { $s = 602; continue; }
							/* */ $s = 603; continue;
							/* if (end$4) { */ case 602:
								$r = print(")"); /* */ $s = 605; case 605: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = 604; continue;
							/* } else { */ case 603:
								op$11 = (new $Uint64(0, ((_entry$91 = ast[$Uint64.keyFor(iterator)], _entry$91 !== undefined ? _entry$91.v : sliceType.nil).$length - 1 >> 0)));
								/* */ if ((i.$high === op$11.$high && i.$low === op$11.$low)) { $s = 606; continue; }
								/* */ $s = 607; continue;
								/* if ((i.$high === op$11.$high && i.$low === op$11.$low)) { */ case 606:
									$r = print(")("); /* */ $s = 609; case 609: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									$s = 608; continue;
								/* } else { */ case 607:
									$r = print(", "); /* */ $s = 610; case 610: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* } */ case 608:
							/* } */ case 604:
						/* } */ case 593:
					/* } */ case 219:
				case 200:
			/* } */ case 199:
			i = (x$97 = new $Uint64(0, 1), new $Uint64(i.$high + x$97.$high, i.$low + x$97.$low));
		/* } */ $s = 192; continue; case 193:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Code }; } $f._1 = _1; $f._10 = _10; $f._11 = _11; $f._12 = _12; $f._13 = _13; $f._14 = _14; $f._15 = _15; $f._16 = _16; $f._17 = _17; $f._18 = _18; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._7 = _7; $f._8 = _8; $f._9 = _9; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$10 = _entry$10; $f._entry$11 = _entry$11; $f._entry$12 = _entry$12; $f._entry$13 = _entry$13; $f._entry$14 = _entry$14; $f._entry$15 = _entry$15; $f._entry$16 = _entry$16; $f._entry$17 = _entry$17; $f._entry$18 = _entry$18; $f._entry$19 = _entry$19; $f._entry$2 = _entry$2; $f._entry$20 = _entry$20; $f._entry$21 = _entry$21; $f._entry$22 = _entry$22; $f._entry$23 = _entry$23; $f._entry$24 = _entry$24; $f._entry$25 = _entry$25; $f._entry$26 = _entry$26; $f._entry$27 = _entry$27; $f._entry$28 = _entry$28; $f._entry$29 = _entry$29; $f._entry$3 = _entry$3; $f._entry$30 = _entry$30; $f._entry$31 = _entry$31; $f._entry$32 = _entry$32; $f._entry$33 = _entry$33; $f._entry$34 = _entry$34; $f._entry$35 = _entry$35; $f._entry$36 = _entry$36; $f._entry$37 = _entry$37; $f._entry$38 = _entry$38; $f._entry$39 = _entry$39; $f._entry$4 = _entry$4; $f._entry$40 = _entry$40; $f._entry$41 = _entry$41; $f._entry$42 = _entry$42; $f._entry$43 = _entry$43; $f._entry$44 = _entry$44; $f._entry$45 = _entry$45; $f._entry$46 = _entry$46; $f._entry$47 = _entry$47; $f._entry$48 = _entry$48; $f._entry$49 = _entry$49; $f._entry$5 = _entry$5; $f._entry$50 = _entry$50; $f._entry$51 = _entry$51; $f._entry$52 = _entry$52; $f._entry$53 = _entry$53; $f._entry$54 = _entry$54; $f._entry$55 = _entry$55; $f._entry$56 = _entry$56; $f._entry$57 = _entry$57; $f._entry$58 = _entry$58; $f._entry$59 = _entry$59; $f._entry$6 = _entry$6; $f._entry$60 = _entry$60; $f._entry$61 = _entry$61; $f._entry$62 = _entry$62; $f._entry$63 = _entry$63; $f._entry$64 = _entry$64; $f._entry$65 = _entry$65; $f._entry$66 = _entry$66; $f._entry$67 = _entry$67; $f._entry$68 = _entry$68; $f._entry$69 = _entry$69; $f._entry$7 = _entry$7; $f._entry$70 = _entry$70; $f._entry$71 = _entry$71; $f._entry$72 = _entry$72; $f._entry$73 = _entry$73; $f._entry$74 = _entry$74; $f._entry$75 = _entry$75; $f._entry$76 = _entry$76; $f._entry$77 = _entry$77; $f._entry$78 = _entry$78; $f._entry$79 = _entry$79; $f._entry$8 = _entry$8; $f._entry$80 = _entry$80; $f._entry$81 = _entry$81; $f._entry$82 = _entry$82; $f._entry$83 = _entry$83; $f._entry$84 = _entry$84; $f._entry$85 = _entry$85; $f._entry$86 = _entry$86; $f._entry$87 = _entry$87; $f._entry$88 = _entry$88; $f._entry$89 = _entry$89; $f._entry$9 = _entry$9; $f._entry$90 = _entry$90; $f._entry$91 = _entry$91; $f.abc = abc; $f.alpha = alpha; $f.another = another; $f.ast = ast; $f.ast_o_iterator = ast_o_iterator; $f.beta = beta; $f.blockheader = blockheader; $f.blockheader$1 = blockheader$1; $f.caseheader = caseheader; $f.def = def; $f.defparent = defparent; $f.end = end; $f.end$1 = end$1; $f.end$2 = end$2; $f.end$3 = end$3; $f.end$4 = end$4; $f.ene = ene; $f.epsil = epsil; $f.gamma = gamma; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.iterator = iterator; $f.l = l; $f.l$1 = l$1; $f.l$2 = l$2; $f.multi = multi; $f.none = none; $f.omega = omega; $f.op = op; $f.op$1 = op$1; $f.op$10 = op$10; $f.op$11 = op$11; $f.op$2 = op$2; $f.op$3 = op$3; $f.op$4 = op$4; $f.op$5 = op$5; $f.op$6 = op$6; $f.op$7 = op$7; $f.op$8 = op$8; $f.op$9 = op$9; $f.parent = parent; $f.phi = phi; $f.print = print; $f.rho = rho; $f.separ = separ; $f.separ$1 = separ$1; $f.theta = theta; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$2 = x$2; $f.x$20 = x$20; $f.x$21 = x$21; $f.x$22 = x$22; $f.x$23 = x$23; $f.x$24 = x$24; $f.x$25 = x$25; $f.x$26 = x$26; $f.x$27 = x$27; $f.x$28 = x$28; $f.x$29 = x$29; $f.x$3 = x$3; $f.x$30 = x$30; $f.x$31 = x$31; $f.x$32 = x$32; $f.x$33 = x$33; $f.x$34 = x$34; $f.x$35 = x$35; $f.x$36 = x$36; $f.x$37 = x$37; $f.x$38 = x$38; $f.x$39 = x$39; $f.x$4 = x$4; $f.x$40 = x$40; $f.x$41 = x$41; $f.x$42 = x$42; $f.x$43 = x$43; $f.x$44 = x$44; $f.x$45 = x$45; $f.x$46 = x$46; $f.x$47 = x$47; $f.x$48 = x$48; $f.x$49 = x$49; $f.x$5 = x$5; $f.x$50 = x$50; $f.x$51 = x$51; $f.x$52 = x$52; $f.x$53 = x$53; $f.x$54 = x$54; $f.x$55 = x$55; $f.x$56 = x$56; $f.x$57 = x$57; $f.x$58 = x$58; $f.x$59 = x$59; $f.x$6 = x$6; $f.x$60 = x$60; $f.x$61 = x$61; $f.x$62 = x$62; $f.x$63 = x$63; $f.x$64 = x$64; $f.x$65 = x$65; $f.x$66 = x$66; $f.x$67 = x$67; $f.x$68 = x$68; $f.x$69 = x$69; $f.x$7 = x$7; $f.x$70 = x$70; $f.x$71 = x$71; $f.x$72 = x$72; $f.x$73 = x$73; $f.x$74 = x$74; $f.x$75 = x$75; $f.x$76 = x$76; $f.x$77 = x$77; $f.x$78 = x$78; $f.x$79 = x$79; $f.x$8 = x$8; $f.x$80 = x$80; $f.x$81 = x$81; $f.x$82 = x$82; $f.x$83 = x$83; $f.x$84 = x$84; $f.x$85 = x$85; $f.x$86 = x$86; $f.x$87 = x$87; $f.x$88 = x$88; $f.x$89 = x$89; $f.x$9 = x$9; $f.x$90 = x$90; $f.x$91 = x$91; $f.x$92 = x$92; $f.x$93 = x$93; $f.x$94 = x$94; $f.x$95 = x$95; $f.x$96 = x$96; $f.x$97 = x$97; $f.xyz = xyz; $f.xyz$1 = xyz$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Code = Code;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		storage = $makeSlice(sliceType, 1000000);
		$pkg.RootMatter = (new sliceType($stringToBytes("RootMatter")));
		$pkg.FileMatter = (new sliceType($stringToBytes("FileMatter")));
		$pkg.PackageDef = (new sliceType($stringToBytes("PackageDef")));
		$pkg.ImportStmt = (new sliceType($stringToBytes("ImportStmt")));
		$pkg.ImportsDef = (new sliceType($stringToBytes("ImportsDef")));
		$pkg.TypedIdent = (new sliceType($stringToBytes("TypedIdent")));
		$pkg.RootOfType = (new sliceType($stringToBytes("RootOfType")));
		$pkg.TypDefStmt = (new sliceType($stringToBytes("TypDefStmt")));
		$pkg.StructType = (new sliceType($stringToBytes("StructType")));
		$pkg.BranchStmt = (new sliceType($stringToBytes("BranchStmt")));
		$pkg.GoDferStmt = (new sliceType($stringToBytes("GoDferStmt")));
		$pkg.ReturnStmt = (new sliceType($stringToBytes("ReturnStmt")));
		$pkg.IncDecStmt = (new sliceType($stringToBytes("IncDecStmt")));
		$pkg.VarDefStmt = (new sliceType($stringToBytes("VarDefStmt")));
		$pkg.LblGotoCnt = (new sliceType($stringToBytes("LblGotoCnt")));
		$pkg.IfceTypExp = (new sliceType($stringToBytes("IfceTypExp")));
		$pkg.CommentRow = (new sliceType($stringToBytes("CommentRow")));
		$pkg.GenericExp = (new sliceType($stringToBytes("GenericExp")));
		$pkg.Expression = $subslice(storage, 0);
		$pkg.BlocOfCode = $subslice(storage, 16);
		$pkg.ToplevFunc = $subslice(storage, 32);
		$pkg.AssignStmt = $subslice(storage, 48);
		$pkg.ClosureExp = $subslice(storage, 64);
		$pkg.IfceMethod = $subslice(storage, 80);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["example.com/transpiler/xgtest"] = (function() {
	var $pkg = {}, $init, sha256, ast, importer, parser, types, fmt, mapast, js, token, os, Conversion, Callsite, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, structType, mapType, arrayType, arrayType$1, sliceType, sliceType$1, sliceType$2, sliceType$3, ptrType$21, ptrType$22, ptrType$23, ptrType$24, ptrType$25, ptrType$26, ptrType$27, ptrType$28, ptrType$29, ptrType$30, ptrType$31, ptrType$32, ptrType$33, ptrType$34, ptrType$35, ptrType$36, ptrType$37, ptrType$38, ptrType$39, ptrType$40, ptrType$41, ptrType$42, ptrType$43, ptrType$44, ptrType$45, ptrType$46, sliceType$4, ptrType$47, ptrType$48, ptrType$49, sliceType$5, ptrType$50, sliceType$6, ptrType$51, ptrType$52, ptrType$53, ptrType$54, ptrType$55, ptrType$56, ptrType$57, arrayType$2, ptrType$58, ptrType$59, ptrType$60, sliceType$7, sliceType$8, ptrType$61, funcType, mapType$1, ptrType$62, mapType$2, mapType$3, mapType$4, mapType$5, mapType$6, mapType$7, mapType$8, mapType$9, mapType$10, o, bool2byte, how_many_substmts_labeled_stmt, how_many_substmts_stmt_list, how_many_substmts_block, how_many_subblocks_labeled_stmt, how_many_subblocks_stmt_list, how_many_subblocks_block, coolcomment, packint, fetchvariant, resolve_toplevel_generic_types, resolve_toplevel_generic_funcs, resolve_generic_calls, signature_getarg_type, struct_getarg_type, func_getarg_type, derive_wildcard, build_type, construct_type, ast_sha256, b32_to_5_u64, seekfuncslot, copypasta, erase, specialize, replicate, process, main;
	sha256 = $packages["crypto/sha256"];
	ast = $packages["example.com/transpiler/xgtest/ast"];
	importer = $packages["example.com/transpiler/xgtest/importer"];
	parser = $packages["example.com/transpiler/xgtest/parser"];
	types = $packages["example.com/transpiler/xgtest/types"];
	fmt = $packages["fmt"];
	mapast = $packages["github.com/go-li/mapast"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	token = $packages["go/token"];
	os = $packages["os"];
	Conversion = $pkg.Conversion = $newType(0, $kindStruct, "main.Conversion", true, "example.com/transpiler/xgtest", true, function(AstTree_, MyFile_, EnderSepared_, Comments1_, importswhere_, nestedimports_, structfield_, typefield_, nowblock_, subblocks_, substmts_, skippedassignments_, skippedexpressions_, skippedincdecs_, skippedsends_, skippedellipsis_, deadif_, deadfunc_, skippedbalits_, blocksstmts_, ifblocks_, deadassignments_, deadsends_, deadincdecs_, deadexprs_, comments_, commentpos_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.AstTree = false;
			this.MyFile = new $Uint64(0, 0);
			this.EnderSepared = arrayType.zero();
			this.Comments1 = false;
			this.importswhere = new $Uint64(0, 0);
			this.nestedimports = new $Uint64(0, 0);
			this.structfield = sliceType.nil;
			this.typefield = sliceType$1.nil;
			this.nowblock = sliceType$1.nil;
			this.subblocks = sliceType$2.nil;
			this.substmts = sliceType$2.nil;
			this.skippedassignments = 0;
			this.skippedexpressions = 0;
			this.skippedincdecs = 0;
			this.skippedsends = 0;
			this.skippedellipsis = 0;
			this.deadif = false;
			this.deadfunc = false;
			this.skippedbalits = false;
			this.blocksstmts = false;
			this.ifblocks = false;
			this.deadassignments = false;
			this.deadsends = false;
			this.deadincdecs = false;
			this.deadexprs = false;
			this.comments = sliceType$3.nil;
			this.commentpos = sliceType$2.nil;
			return;
		}
		this.AstTree = AstTree_;
		this.MyFile = MyFile_;
		this.EnderSepared = EnderSepared_;
		this.Comments1 = Comments1_;
		this.importswhere = importswhere_;
		this.nestedimports = nestedimports_;
		this.structfield = structfield_;
		this.typefield = typefield_;
		this.nowblock = nowblock_;
		this.subblocks = subblocks_;
		this.substmts = substmts_;
		this.skippedassignments = skippedassignments_;
		this.skippedexpressions = skippedexpressions_;
		this.skippedincdecs = skippedincdecs_;
		this.skippedsends = skippedsends_;
		this.skippedellipsis = skippedellipsis_;
		this.deadif = deadif_;
		this.deadfunc = deadfunc_;
		this.skippedbalits = skippedbalits_;
		this.blocksstmts = blocksstmts_;
		this.ifblocks = ifblocks_;
		this.deadassignments = deadassignments_;
		this.deadsends = deadsends_;
		this.deadincdecs = deadincdecs_;
		this.deadexprs = deadexprs_;
		this.comments = comments_;
		this.commentpos = commentpos_;
	});
	Callsite = $pkg.Callsite = $newType(0, $kindStruct, "main.Callsite", true, "example.com/transpiler/xgtest", true, function(calls_func_, inside_func_, wildctype_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.calls_func = new $Uint64(0, 0);
			this.inside_func = new $Uint64(0, 0);
			this.wildctype = new $Uint64(0, 0);
			return;
		}
		this.calls_func = calls_func_;
		this.inside_func = inside_func_;
		this.wildctype = wildctype_;
	});
	ptrType = $ptrType(ast.EmptyStmt);
	ptrType$1 = $ptrType(ast.BranchStmt);
	ptrType$2 = $ptrType(ast.ExprStmt);
	ptrType$3 = $ptrType(ast.ReturnStmt);
	ptrType$4 = $ptrType(ast.IncDecStmt);
	ptrType$5 = $ptrType(ast.GoStmt);
	ptrType$6 = $ptrType(ast.DeferStmt);
	ptrType$7 = $ptrType(ast.AssignStmt);
	ptrType$8 = $ptrType(ast.DeclStmt);
	ptrType$9 = $ptrType(ast.SendStmt);
	ptrType$10 = $ptrType(ast.LabeledStmt);
	ptrType$11 = $ptrType(ast.GenDecl);
	ptrType$12 = $ptrType(ast.IfStmt);
	ptrType$13 = $ptrType(ast.ForStmt);
	ptrType$14 = $ptrType(ast.RangeStmt);
	ptrType$15 = $ptrType(ast.SwitchStmt);
	ptrType$16 = $ptrType(ast.CaseClause);
	ptrType$17 = $ptrType(ast.TypeSwitchStmt);
	ptrType$18 = $ptrType(ast.BlockStmt);
	ptrType$19 = $ptrType(ast.SelectStmt);
	ptrType$20 = $ptrType(ast.CommClause);
	structType = $structType("", []);
	mapType = $mapType($Int, structType);
	arrayType = $arrayType(mapType, 2);
	arrayType$1 = $arrayType($Uint64, 2);
	sliceType = $sliceType(arrayType$1);
	sliceType$1 = $sliceType($Uint64);
	sliceType$2 = $sliceType($Int);
	sliceType$3 = $sliceType($String);
	ptrType$21 = $ptrType(ast.File);
	ptrType$22 = $ptrType(ast.ImportSpec);
	ptrType$23 = $ptrType(ast.FuncDecl);
	ptrType$24 = $ptrType(ast.TypeSpec);
	ptrType$25 = $ptrType(ast.Field);
	ptrType$26 = $ptrType(ast.BasicLit);
	ptrType$27 = $ptrType(ast.SelectorExpr);
	ptrType$28 = $ptrType(ast.UnaryExpr);
	ptrType$29 = $ptrType(ast.StarExpr);
	ptrType$30 = $ptrType(ast.ParenExpr);
	ptrType$31 = $ptrType(ast.BinaryExpr);
	ptrType$32 = $ptrType(ast.CallExpr);
	ptrType$33 = $ptrType(ast.IndexExpr);
	ptrType$34 = $ptrType(ast.SliceExpr);
	ptrType$35 = $ptrType(ast.ArrayType);
	ptrType$36 = $ptrType(ast.KeyValueExpr);
	ptrType$37 = $ptrType(ast.CompositeLit);
	ptrType$38 = $ptrType(ast.TypeAssertExpr);
	ptrType$39 = $ptrType(ast.StructType);
	ptrType$40 = $ptrType(ast.MapType);
	ptrType$41 = $ptrType(ast.FuncLit);
	ptrType$42 = $ptrType(ast.InterfaceType);
	ptrType$43 = $ptrType(ast.ChanType);
	ptrType$44 = $ptrType(ast.FuncType);
	ptrType$45 = $ptrType(ast.Ellipsis);
	ptrType$46 = $ptrType(ast.VoidType);
	sliceType$4 = $sliceType($Uint8);
	ptrType$47 = $ptrType(ast.ValueSpec);
	ptrType$48 = $ptrType(ast.Ident);
	ptrType$49 = $ptrType(ast.FieldList);
	sliceType$5 = $sliceType(ast.Expr);
	ptrType$50 = $ptrType($Uint8);
	sliceType$6 = $sliceType($emptyInterface);
	ptrType$51 = $ptrType(types.Pointer);
	ptrType$52 = $ptrType(types.Slice);
	ptrType$53 = $ptrType(types.Array);
	ptrType$54 = $ptrType(types.Basic);
	ptrType$55 = $ptrType(types.Struct);
	ptrType$56 = $ptrType(types.Signature);
	ptrType$57 = $ptrType(types.Named);
	arrayType$2 = $arrayType($Uint64, 5);
	ptrType$58 = $ptrType(Callsite);
	ptrType$59 = $ptrType(sliceType$1);
	ptrType$60 = $ptrType(types.Initializer);
	sliceType$7 = $sliceType(ptrType$60);
	sliceType$8 = $sliceType(ptrType$21);
	ptrType$61 = $ptrType(types.Tuple);
	funcType = $funcType([sliceType$4], [sliceType$4], false);
	mapType$1 = $mapType($String, $emptyInterface);
	ptrType$62 = $ptrType(Conversion);
	mapType$2 = $mapType($Uint64, sliceType$4);
	mapType$3 = $mapType(ptrType$12, structType);
	mapType$4 = $mapType(ptrType$44, structType);
	mapType$5 = $mapType(ptrType$26, structType);
	mapType$6 = $mapType(ptrType$18, $Uint64);
	mapType$7 = $mapType(ptrType$7, structType);
	mapType$8 = $mapType(ptrType$9, structType);
	mapType$9 = $mapType(ptrType$4, structType);
	mapType$10 = $mapType(ptrType$2, structType);
	o = function(n) {
		var n;
		return mapast.O(n);
	};
	bool2byte = function(s) {
		var s;
		if (s) {
			return 1;
		}
		return 0;
	};
	how_many_substmts_labeled_stmt = function(list) {
		var _ref, list, n, xx;
		n = 0;
		_ref = list.Stmt;
		if ($assertType(_ref, ptrType, true)[1]) {
			n = n + (1) >> 0;
		} else if ($assertType(_ref, ptrType$1, true)[1]) {
			n = n + (1) >> 0;
		} else if ($assertType(_ref, ptrType$2, true)[1]) {
			n = n + (1) >> 0;
		} else if ($assertType(_ref, ptrType$3, true)[1]) {
			n = n + (1) >> 0;
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			n = n + (1) >> 0;
		} else if ($assertType(_ref, ptrType$5, true)[1]) {
			n = n + (1) >> 0;
		} else if ($assertType(_ref, ptrType$6, true)[1]) {
			n = n + (1) >> 0;
		} else if ($assertType(_ref, ptrType$7, true)[1]) {
			n = n + (1) >> 0;
		} else if ($assertType(_ref, ptrType$8, true)[1]) {
			xx = $assertType(list.Stmt, ptrType$8);
			if ($assertType(xx.Decl, ptrType$11).Tok === 84) {
				n = n + (($assertType(xx.Decl, ptrType$11).Specs.$length)) >> 0;
			} else {
				n = n + (1) >> 0;
			}
		} else if ($assertType(_ref, ptrType$9, true)[1]) {
			n = n + (1) >> 0;
		} else if ($assertType(_ref, ptrType$10, true)[1]) {
			n = n + (how_many_substmts_labeled_stmt($assertType(list.Stmt, ptrType$10))) >> 0;
			n = n + (1) >> 0;
		}
		return n;
	};
	how_many_substmts_stmt_list = function(list) {
		var _i, _ref, _ref$1, i, list, n, xx;
		n = 0;
		_ref = list;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			_ref$1 = ((i < 0 || i >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + i]);
			if ($assertType(_ref$1, ptrType, true)[1]) {
				n = n + (1) >> 0;
			} else if ($assertType(_ref$1, ptrType$1, true)[1]) {
				n = n + (1) >> 0;
			} else if ($assertType(_ref$1, ptrType$2, true)[1]) {
				n = n + (1) >> 0;
			} else if ($assertType(_ref$1, ptrType$3, true)[1]) {
				n = n + (1) >> 0;
			} else if ($assertType(_ref$1, ptrType$4, true)[1]) {
				n = n + (1) >> 0;
			} else if ($assertType(_ref$1, ptrType$5, true)[1]) {
				n = n + (1) >> 0;
			} else if ($assertType(_ref$1, ptrType$6, true)[1]) {
				n = n + (1) >> 0;
			} else if ($assertType(_ref$1, ptrType$7, true)[1]) {
				n = n + (1) >> 0;
			} else if ($assertType(_ref$1, ptrType$8, true)[1]) {
				xx = $assertType(((i < 0 || i >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + i]), ptrType$8);
				if ($assertType(xx.Decl, ptrType$11).Tok === 84) {
					n = n + (($assertType(xx.Decl, ptrType$11).Specs.$length)) >> 0;
				} else {
					n = n + (1) >> 0;
				}
			} else if ($assertType(_ref$1, ptrType$9, true)[1]) {
				n = n + (1) >> 0;
			} else if ($assertType(_ref$1, ptrType$10, true)[1]) {
				n = n + (how_many_substmts_labeled_stmt($assertType(((i < 0 || i >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + i]), ptrType$10))) >> 0;
				n = n + (1) >> 0;
			}
			_i++;
		}
		return n;
	};
	how_many_substmts_block = function(x) {
		var x;
		return how_many_substmts_stmt_list(x.List);
	};
	how_many_subblocks_labeled_stmt = function(list) {
		var _ref, _ref$1, list, n, ok, xx;
		n = 0;
		_ref = list.Stmt;
		if ($assertType(_ref, ptrType$12, true)[1]) {
			xx = $assertType(list.Stmt, ptrType$12);
			ok = true;
			while (true) {
				if (!(ok && !($interfaceIsEqual(xx.Else, $ifaceNil)))) { break; }
				_ref$1 = xx.Else;
				if ($assertType(_ref$1, ptrType$12, true)[1]) {
					xx = $assertType(xx.Else, ptrType$12);
					ok = true;
				} else if ($assertType(_ref$1, ptrType$18, true)[1]) {
					n = n - (1) >> 0;
					ok = false;
				}
				n = n + (1) >> 0;
			}
			n = n + (1) >> 0;
		} else if ($assertType(_ref, ptrType$13, true)[1]) {
			n = n + (1) >> 0;
		} else if ($assertType(_ref, ptrType$14, true)[1]) {
			n = n + (1) >> 0;
		} else if ($assertType(_ref, ptrType$15, true)[1]) {
			n = n + (1) >> 0;
		} else if ($assertType(_ref, ptrType$16, true)[1]) {
			n = n + (1) >> 0;
		} else if ($assertType(_ref, ptrType$17, true)[1]) {
			n = n + (1) >> 0;
		} else if ($assertType(_ref, ptrType$18, true)[1]) {
			n = n + (1) >> 0;
		} else if ($assertType(_ref, ptrType$19, true)[1]) {
			n = n + (1) >> 0;
		} else if ($assertType(_ref, ptrType$20, true)[1]) {
			n = n + (1) >> 0;
		} else if ($assertType(_ref, ptrType$10, true)[1]) {
			n = n + (how_many_subblocks_labeled_stmt($assertType(list.Stmt, ptrType$10))) >> 0;
		}
		return n;
	};
	how_many_subblocks_stmt_list = function(list) {
		var _i, _ref, _ref$1, _ref$2, i, list, n, ok, xx;
		n = 0;
		_ref = list;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			_ref$1 = ((i < 0 || i >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + i]);
			if ($assertType(_ref$1, ptrType$12, true)[1]) {
				xx = $assertType(((i < 0 || i >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + i]), ptrType$12);
				ok = true;
				while (true) {
					if (!(ok && !($interfaceIsEqual(xx.Else, $ifaceNil)))) { break; }
					_ref$2 = xx.Else;
					if ($assertType(_ref$2, ptrType$12, true)[1]) {
						xx = $assertType(xx.Else, ptrType$12);
						ok = true;
					} else if ($assertType(_ref$2, ptrType$18, true)[1]) {
						n = n - (1) >> 0;
						ok = false;
					}
					n = n + (1) >> 0;
				}
				n = n + (1) >> 0;
			} else if ($assertType(_ref$1, ptrType$13, true)[1]) {
				n = n + (1) >> 0;
			} else if ($assertType(_ref$1, ptrType$14, true)[1]) {
				n = n + (1) >> 0;
			} else if ($assertType(_ref$1, ptrType$15, true)[1]) {
				n = n + (1) >> 0;
			} else if ($assertType(_ref$1, ptrType$16, true)[1]) {
				n = n + (1) >> 0;
			} else if ($assertType(_ref$1, ptrType$17, true)[1]) {
				n = n + (1) >> 0;
			} else if ($assertType(_ref$1, ptrType$18, true)[1]) {
				n = n + (1) >> 0;
			} else if ($assertType(_ref$1, ptrType$19, true)[1]) {
				n = n + (1) >> 0;
			} else if ($assertType(_ref$1, ptrType$20, true)[1]) {
				n = n + (1) >> 0;
			} else if ($assertType(_ref$1, ptrType$10, true)[1]) {
				n = n + (how_many_subblocks_labeled_stmt($assertType(((i < 0 || i >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + i]), ptrType$10))) >> 0;
			} else {
			}
			_i++;
		}
		return n;
	};
	how_many_subblocks_block = function(x) {
		var x;
		return how_many_subblocks_stmt_list(x.List);
	};
	coolcomment = function(n) {
		var n;
		if (n.length >= 9 && $substring(n, 0, 9) === "// +build") {
			return true;
		}
		if (n.length >= 5 && $substring(n, 0, 5) === "//go:") {
			return true;
		}
		if (n.length >= 6 && $substring(n, 0, 6) === "//line") {
			return true;
		}
		if (n.length >= 8 && $substring(n, 0, 8) === "//extern") {
			return true;
		}
		if (n.length >= 9 && $substring(n, 0, 9) === "// import") {
			return true;
		}
		if (n.length >= 8 && $substring(n, 0, 8) === "//export") {
			return true;
		}
		return false;
	};
	packint = function(n, ender, separ) {
		var ender, n, separ;
		if (ender) {
			n = n | (536870912);
		}
		if (separ) {
			n = n | (1073741824);
		}
		return n;
	};
	fetchvariant = function(n) {
		var n;
		if (!(((n & 536870912) === 0))) {
			return 0;
		}
		if (!(((n & 1073741824) === 0))) {
			return 2;
		}
		return 1;
	};
	Conversion.ptr.prototype.Visit = function(x) {
		var _1, _10, _11, _12, _13, _14, _15, _2, _3, _4, _5, _6, _7, _8, _9, _entry, _entry$1, _entry$10, _entry$11, _entry$12, _entry$13, _entry$14, _entry$15, _entry$16, _entry$17, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, _i, _i$1, _i$10, _i$11, _i$12, _i$13, _i$14, _i$15, _i$16, _i$17, _i$18, _i$19, _i$2, _i$20, _i$21, _i$22, _i$23, _i$24, _i$25, _i$26, _i$3, _i$4, _i$5, _i$6, _i$7, _i$8, _i$9, _index, _index$1, _index$10, _index$11, _index$12, _index$13, _index$14, _index$15, _index$16, _index$17, _index$18, _index$19, _index$2, _index$20, _index$21, _index$22, _index$23, _index$24, _index$25, _index$26, _index$27, _index$28, _index$29, _index$3, _index$30, _index$31, _index$32, _index$33, _index$34, _index$35, _index$36, _index$37, _index$38, _index$39, _index$4, _index$40, _index$41, _index$42, _index$43, _index$44, _index$45, _index$46, _index$5, _index$6, _index$7, _index$8, _index$9, _key, _key$1, _key$10, _key$100, _key$101, _key$102, _key$103, _key$104, _key$105, _key$106, _key$107, _key$108, _key$109, _key$11, _key$110, _key$111, _key$112, _key$113, _key$114, _key$115, _key$116, _key$117, _key$118, _key$119, _key$12, _key$120, _key$121, _key$122, _key$123, _key$124, _key$125, _key$126, _key$127, _key$128, _key$129, _key$13, _key$130, _key$131, _key$132, _key$133, _key$134, _key$135, _key$136, _key$137, _key$138, _key$139, _key$14, _key$140, _key$141, _key$142, _key$143, _key$144, _key$145, _key$146, _key$147, _key$148, _key$149, _key$15, _key$150, _key$151, _key$152, _key$153, _key$154, _key$155, _key$156, _key$157, _key$158, _key$159, _key$16, _key$160, _key$161, _key$162, _key$163, _key$164, _key$165, _key$166, _key$167, _key$168, _key$169, _key$17, _key$170, _key$171, _key$172, _key$173, _key$174, _key$175, _key$176, _key$177, _key$178, _key$179, _key$18, _key$180, _key$181, _key$182, _key$183, _key$184, _key$185, _key$186, _key$187, _key$188, _key$189, _key$19, _key$190, _key$191, _key$192, _key$193, _key$194, _key$195, _key$196, _key$197, _key$198, _key$199, _key$2, _key$20, _key$200, _key$201, _key$202, _key$203, _key$204, _key$205, _key$206, _key$207, _key$208, _key$209, _key$21, _key$210, _key$211, _key$212, _key$213, _key$214, _key$215, _key$216, _key$217, _key$218, _key$219, _key$22, _key$220, _key$221, _key$222, _key$223, _key$224, _key$225, _key$226, _key$227, _key$228, _key$229, _key$23, _key$230, _key$231, _key$232, _key$233, _key$234, _key$235, _key$236, _key$237, _key$238, _key$239, _key$24, _key$240, _key$241, _key$242, _key$243, _key$244, _key$245, _key$246, _key$247, _key$248, _key$249, _key$25, _key$250, _key$251, _key$252, _key$253, _key$26, _key$27, _key$28, _key$29, _key$3, _key$30, _key$31, _key$32, _key$33, _key$34, _key$35, _key$36, _key$37, _key$38, _key$39, _key$4, _key$40, _key$41, _key$42, _key$43, _key$44, _key$45, _key$46, _key$47, _key$48, _key$49, _key$5, _key$50, _key$51, _key$52, _key$53, _key$54, _key$55, _key$56, _key$57, _key$58, _key$59, _key$6, _key$60, _key$61, _key$62, _key$63, _key$64, _key$65, _key$66, _key$67, _key$68, _key$69, _key$7, _key$70, _key$71, _key$72, _key$73, _key$74, _key$75, _key$76, _key$77, _key$78, _key$79, _key$8, _key$80, _key$81, _key$82, _key$83, _key$84, _key$85, _key$86, _key$87, _key$88, _key$89, _key$9, _key$90, _key$91, _key$92, _key$93, _key$94, _key$95, _key$96, _key$97, _key$98, _key$99, _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _ref, _ref$1, _ref$10, _ref$11, _ref$12, _ref$13, _ref$14, _ref$15, _ref$16, _ref$17, _ref$18, _ref$19, _ref$2, _ref$20, _ref$21, _ref$22, _ref$23, _ref$24, _ref$25, _ref$26, _ref$27, _ref$28, _ref$29, _ref$3, _ref$30, _ref$31, _ref$32, _ref$33, _ref$34, _ref$35, _ref$36, _ref$37, _ref$38, _ref$4, _ref$5, _ref$6, _ref$7, _ref$8, _ref$9, _tuple, _tuple$1, _tuple$10, _tuple$100, _tuple$101, _tuple$102, _tuple$103, _tuple$104, _tuple$105, _tuple$106, _tuple$107, _tuple$108, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$26, _tuple$27, _tuple$28, _tuple$29, _tuple$3, _tuple$30, _tuple$31, _tuple$32, _tuple$33, _tuple$34, _tuple$35, _tuple$36, _tuple$37, _tuple$38, _tuple$39, _tuple$4, _tuple$40, _tuple$41, _tuple$42, _tuple$43, _tuple$44, _tuple$45, _tuple$46, _tuple$47, _tuple$48, _tuple$49, _tuple$5, _tuple$50, _tuple$51, _tuple$52, _tuple$53, _tuple$54, _tuple$55, _tuple$56, _tuple$57, _tuple$58, _tuple$59, _tuple$6, _tuple$60, _tuple$61, _tuple$62, _tuple$63, _tuple$64, _tuple$65, _tuple$66, _tuple$67, _tuple$68, _tuple$69, _tuple$7, _tuple$70, _tuple$71, _tuple$72, _tuple$73, _tuple$74, _tuple$75, _tuple$76, _tuple$77, _tuple$78, _tuple$79, _tuple$8, _tuple$80, _tuple$81, _tuple$82, _tuple$83, _tuple$84, _tuple$85, _tuple$86, _tuple$87, _tuple$88, _tuple$89, _tuple$9, _tuple$90, _tuple$91, _tuple$92, _tuple$93, _tuple$94, _tuple$95, _tuple$96, _tuple$97, _tuple$98, _tuple$99, argument_count, blk, blk$1, blk$10, blk$2, blk$3, blk$4, blk$5, blk$6, blk$7, blk$8, blk$9, c, ctext, dead, dimension, dimension$1, ender, ender1, ender2, fieldscount, i, i$1, i$10, i$11, i$12, i$13, i$14, i$15, i$16, i$17, i$18, i$19, i$2, i$20, i$21, i$22, i$23, i$24, i$25, i$3, i$4, i$5, i$6, i$7, i$8, i$9, id, id$1, id$10, id$11, id$12, id$13, id$14, id$15, id$16, id$17, id$18, id$19, id$2, id$20, id$21, id$22, id$23, id$24, id$25, id$26, id$27, id$28, id$29, id$3, id$30, id$31, id$32, id$33, id$34, id$35, id$36, id$37, id$38, id$39, id$4, id$40, id$41, id$42, id$43, id$44, id$5, id$6, id$7, id$8, id$9, id1, id1$1, id1$10, id1$11, id1$12, id1$13, id1$14, id1$15, id1$16, id1$2, id1$3, id1$4, id1$5, id1$6, id1$7, id1$8, id1$9, id2, id2$1, id2$10, id2$11, id2$12, id2$13, id2$14, id2$15, id2$16, id2$17, id2$18, id2$19, id2$2, id2$20, id2$21, id2$22, id2$23, id2$3, id2$4, id2$5, id2$6, id2$7, id2$8, id2$9, id3, id3$1, id3$2, id4, ident, ident$1, ident$10, ident$11, ident$12, ident$13, ident$14, ident$15, ident$16, ident$17, ident$18, ident$19, ident$2, ident$20, ident$21, ident$22, ident$23, ident$24, ident$25, ident$26, ident$27, ident$28, ident$29, ident$3, ident$30, ident$31, ident$32, ident$33, ident$34, ident$35, ident$36, ident$37, ident$38, ident$39, ident$4, ident$40, ident$41, ident$42, ident$43, ident$44, ident$45, ident$46, ident$47, ident$48, ident$49, ident$5, ident$50, ident$6, ident$7, ident$8, ident$9, ident1, ident1$1, ident1$10, ident1$11, ident1$12, ident1$13, ident1$14, ident1$15, ident1$16, ident1$2, ident1$3, ident1$4, ident1$5, ident1$6, ident1$7, ident1$8, ident1$9, ident2, ident2$1, ident2$10, ident2$11, ident2$12, ident2$13, ident2$14, ident2$15, ident2$16, ident2$2, ident2$3, ident2$4, ident2$5, ident2$6, ident2$7, ident2$8, ident2$9, ident3, ident4, imp, j, j$1, j$2, k, l, l$1, l$2, l$3, l$4, l$5, l$6, n, n$1, names, npars, nrets, numtypes, offset, ok, ok$1, ok$10, ok$11, ok$12, ok$13, ok$14, ok$15, ok$16, ok$17, ok$18, ok$19, ok$2, ok$20, ok$21, ok$22, ok$23, ok$24, ok$25, ok$26, ok$27, ok$28, ok$29, ok$3, ok$30, ok$31, ok$32, ok$33, ok$34, ok$35, ok$36, ok$37, ok$38, ok$39, ok$4, ok$40, ok$41, ok$42, ok$43, ok$44, ok$45, ok$46, ok$47, ok$48, ok$49, ok$5, ok$50, ok$51, ok$52, ok$6, ok$7, ok$8, ok$9, ok1, ok1$1, ok1$10, ok1$11, ok1$12, ok1$13, ok1$14, ok1$15, ok1$16, ok1$2, ok1$3, ok1$4, ok1$5, ok1$6, ok1$7, ok1$8, ok1$9, ok2, ok2$1, ok2$10, ok2$11, ok2$12, ok2$13, ok2$14, ok2$15, ok2$16, ok2$17, ok2$18, ok2$19, ok2$2, ok2$20, ok2$21, ok2$22, ok2$23, ok2$24, ok2$3, ok2$4, ok2$5, ok2$6, ok2$7, ok2$8, ok2$9, ok3, ok3$1, ok3$2, ok4, p, pk, r, r$1, recv_count, result_count, results, results$1, separ, separ$1, separ$2, separ1, separ1$1, separ1$2, separ2, separ2$1, separ2$2, sl, stack, stack$1, stack$10, stack$11, stack$12, stack$13, stack$14, stack$15, stack$16, stack$17, stack$18, stack$19, stack$2, stack$20, stack$21, stack$22, stack$23, stack$24, stack$25, stack$26, stack$3, stack$4, stack$5, stack$6, stack$7, stack$8, stack$9, structstack, subs, subs$1, subs$2, subs$3, sus, sus$1, sus$2, sus$3, t, t$1, t$10, t$11, t$12, t$13, t$14, t$15, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9, theadcount, theadcount$1, theadcount$2, theadcount$3, theadcount$4, theadcount$5, theadcount$6, theadcount$7, theadcount$8, theadcount$9, totalparams, types$1, uniform, variant, variant$1, variant$10, variant$11, variant$12, variant$13, variant$14, variant$15, variant$16, variant$17, variant$18, variant$19, variant$2, variant$20, variant$21, variant$22, variant$23, variant$24, variant$3, variant$4, variant$5, variant$6, variant$7, variant$8, variant$9, where, where$1, where$10, where$11, where$12, where$13, where$14, where$15, where$16, where$17, where$18, where$19, where$2, where$20, where$3, where$4, where$5, where$6, where$7, where$8, where$9, x, x$1, x$10, x$100, x$101, x$102, x$103, x$104, x$105, x$106, x$107, x$108, x$109, x$11, x$110, x$111, x$112, x$113, x$114, x$115, x$116, x$117, x$118, x$119, x$12, x$120, x$121, x$122, x$123, x$124, x$125, x$126, x$127, x$128, x$129, x$13, x$130, x$131, x$132, x$133, x$134, x$135, x$136, x$137, x$138, x$139, x$14, x$140, x$141, x$142, x$143, x$144, x$145, x$146, x$147, x$148, x$149, x$15, x$150, x$151, x$152, x$153, x$154, x$155, x$156, x$157, x$158, x$159, x$16, x$160, x$161, x$162, x$163, x$164, x$165, x$166, x$167, x$168, x$169, x$17, x$170, x$171, x$172, x$173, x$174, x$175, x$176, x$177, x$178, x$179, x$18, x$180, x$181, x$182, x$183, x$184, x$185, x$186, x$187, x$188, x$189, x$19, x$190, x$191, x$192, x$193, x$194, x$195, x$196, x$197, x$198, x$199, x$2, x$20, x$200, x$201, x$202, x$203, x$204, x$205, x$206, x$207, x$208, x$209, x$21, x$210, x$211, x$212, x$213, x$214, x$215, x$216, x$217, x$218, x$219, x$22, x$220, x$221, x$222, x$223, x$224, x$225, x$226, x$227, x$228, x$229, x$23, x$230, x$231, x$232, x$233, x$234, x$235, x$236, x$237, x$238, x$239, x$24, x$240, x$241, x$242, x$243, x$244, x$245, x$246, x$247, x$248, x$249, x$25, x$250, x$251, x$252, x$253, x$254, x$255, x$256, x$257, x$258, x$259, x$26, x$260, x$261, x$262, x$263, x$264, x$265, x$266, x$267, x$268, x$269, x$27, x$270, x$271, x$272, x$273, x$274, x$275, x$276, x$277, x$278, x$279, x$28, x$280, x$281, x$282, x$283, x$284, x$285, x$286, x$287, x$288, x$289, x$29, x$290, x$291, x$292, x$293, x$294, x$295, x$296, x$297, x$298, x$299, x$3, x$30, x$300, x$301, x$302, x$303, x$304, x$305, x$306, x$307, x$308, x$309, x$31, x$310, x$311, x$312, x$313, x$314, x$315, x$316, x$317, x$318, x$319, x$32, x$320, x$321, x$322, x$323, x$324, x$325, x$326, x$327, x$328, x$329, x$33, x$330, x$331, x$332, x$333, x$334, x$335, x$336, x$337, x$338, x$339, x$34, x$340, x$341, x$342, x$343, x$344, x$345, x$346, x$347, x$348, x$349, x$35, x$350, x$351, x$352, x$353, x$354, x$355, x$356, x$357, x$358, x$359, x$36, x$360, x$361, x$362, x$363, x$364, x$365, x$366, x$367, x$368, x$369, x$37, x$370, x$371, x$372, x$373, x$374, x$375, x$376, x$377, x$378, x$379, x$38, x$380, x$381, x$382, x$383, x$384, x$385, x$386, x$387, x$388, x$389, x$39, x$390, x$391, x$392, x$393, x$394, x$395, x$396, x$397, x$398, x$399, x$4, x$40, x$400, x$401, x$402, x$403, x$404, x$405, x$406, x$407, x$408, x$409, x$41, x$410, x$411, x$412, x$413, x$414, x$415, x$416, x$417, x$418, x$419, x$42, x$420, x$421, x$422, x$423, x$424, x$425, x$426, x$427, x$428, x$429, x$43, x$430, x$431, x$432, x$433, x$434, x$435, x$436, x$437, x$438, x$439, x$44, x$440, x$441, x$442, x$443, x$444, x$445, x$446, x$447, x$448, x$449, x$45, x$450, x$451, x$452, x$453, x$454, x$455, x$456, x$457, x$458, x$459, x$46, x$460, x$461, x$462, x$463, x$464, x$465, x$466, x$467, x$468, x$469, x$47, x$470, x$471, x$472, x$473, x$474, x$475, x$476, x$477, x$478, x$479, x$48, x$480, x$481, x$482, x$483, x$484, x$485, x$486, x$487, x$488, x$489, x$49, x$490, x$491, x$492, x$493, x$494, x$495, x$496, x$497, x$498, x$499, x$5, x$50, x$500, x$501, x$502, x$503, x$504, x$505, x$506, x$507, x$508, x$509, x$51, x$510, x$511, x$512, x$513, x$514, x$515, x$516, x$517, x$518, x$519, x$52, x$520, x$521, x$522, x$523, x$524, x$525, x$526, x$527, x$528, x$529, x$53, x$530, x$531, x$532, x$533, x$534, x$535, x$536, x$537, x$538, x$539, x$54, x$540, x$541, x$542, x$543, x$544, x$545, x$546, x$547, x$548, x$549, x$55, x$550, x$551, x$552, x$553, x$554, x$555, x$556, x$557, x$558, x$559, x$56, x$560, x$561, x$562, x$563, x$564, x$565, x$566, x$567, x$568, x$569, x$57, x$570, x$571, x$572, x$573, x$574, x$575, x$576, x$577, x$578, x$579, x$58, x$580, x$581, x$582, x$583, x$584, x$585, x$586, x$587, x$588, x$589, x$59, x$590, x$591, x$592, x$593, x$594, x$595, x$596, x$597, x$598, x$599, x$6, x$60, x$600, x$601, x$602, x$603, x$604, x$605, x$606, x$607, x$608, x$609, x$61, x$610, x$611, x$612, x$613, x$614, x$615, x$616, x$617, x$618, x$619, x$62, x$620, x$621, x$622, x$623, x$624, x$625, x$626, x$627, x$628, x$629, x$63, x$630, x$631, x$632, x$633, x$634, x$635, x$636, x$637, x$638, x$639, x$64, x$640, x$641, x$642, x$643, x$644, x$645, x$646, x$647, x$648, x$649, x$65, x$650, x$651, x$652, x$653, x$654, x$655, x$656, x$657, x$658, x$659, x$66, x$660, x$661, x$662, x$663, x$664, x$665, x$666, x$667, x$668, x$669, x$67, x$670, x$671, x$672, x$673, x$674, x$675, x$676, x$677, x$678, x$679, x$68, x$680, x$681, x$682, x$683, x$684, x$685, x$686, x$687, x$688, x$689, x$69, x$690, x$691, x$692, x$693, x$694, x$695, x$696, x$697, x$698, x$699, x$7, x$70, x$700, x$701, x$702, x$703, x$704, x$705, x$706, x$707, x$708, x$709, x$71, x$710, x$711, x$712, x$713, x$714, x$715, x$716, x$717, x$718, x$719, x$72, x$720, x$721, x$722, x$723, x$724, x$725, x$726, x$727, x$728, x$729, x$73, x$730, x$731, x$732, x$733, x$734, x$735, x$736, x$737, x$738, x$739, x$74, x$740, x$741, x$742, x$743, x$744, x$745, x$746, x$747, x$748, x$749, x$75, x$750, x$751, x$752, x$753, x$754, x$755, x$756, x$757, x$758, x$759, x$76, x$760, x$761, x$762, x$763, x$764, x$765, x$766, x$767, x$768, x$769, x$77, x$770, x$771, x$772, x$773, x$774, x$775, x$776, x$777, x$778, x$779, x$78, x$780, x$781, x$782, x$783, x$784, x$785, x$786, x$787, x$788, x$789, x$79, x$790, x$791, x$792, x$793, x$794, x$795, x$796, x$797, x$798, x$799, x$8, x$80, x$800, x$801, x$802, x$803, x$804, x$805, x$806, x$807, x$808, x$809, x$81, x$810, x$811, x$812, x$813, x$814, x$815, x$816, x$817, x$818, x$819, x$82, x$820, x$821, x$822, x$823, x$824, x$825, x$826, x$827, x$828, x$829, x$83, x$830, x$831, x$832, x$833, x$834, x$835, x$836, x$837, x$838, x$839, x$84, x$840, x$841, x$842, x$843, x$844, x$845, x$846, x$847, x$848, x$849, x$85, x$850, x$851, x$852, x$853, x$854, x$855, x$856, x$857, x$858, x$859, x$86, x$860, x$861, x$862, x$863, x$864, x$865, x$866, x$867, x$868, x$869, x$87, x$870, x$871, x$872, x$873, x$874, x$875, x$876, x$877, x$878, x$879, x$88, x$880, x$881, x$882, x$883, x$884, x$885, x$89, x$9, x$90, x$91, x$92, x$93, x$94, x$95, x$96, x$97, x$98, x$99, xx, xx$1, xx$10, xx$11, xx$12, xx$13, xx$14, xx$15, xx$16, xx$17, xx$18, xx$19, xx$2, xx$20, xx$21, xx$22, xx$23, xx$24, xx$25, xx$26, xx$27, xx$28, xx$29, xx$3, xx$30, xx$31, xx$32, xx$33, xx$34, xx$35, xx$36, xx$37, xx$38, xx$39, xx$4, xx$40, xx$5, xx$6, xx$7, xx$8, xx$9, xxx, xxx$1, xxx$10, xxx$11, xxx$12, xxx$13, xxx$14, xxx$15, xxx$16, xxx$17, xxx$18, xxx$19, xxx$2, xxx$20, xxx$21, xxx$22, xxx$23, xxx$24, xxx$25, xxx$26, xxx$27, xxx$28, xxx$29, xxx$3, xxx$30, xxx$31, xxx$32, xxx$33, xxx$34, xxx$35, xxx$4, xxx$5, xxx$6, xxx$7, xxx$8, xxx$9, yy, yyy, yyy$1, yyy$2, yyy$3, zz, zz$1;
		c = this;
		_ref = x;
		switch (0) { default: if ($assertType(_ref, ptrType$21, true)[1]) {
			xx = $assertType((x), ptrType$21);
			imp = ((xx.Package >> 0));
			if (xx.Imports.$length > 0) {
				imp = (((x$1 = xx.Imports, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])).Path.ValuePos >> 0));
			}
			n = ($assertType((x), ptrType$21)).Name.Name;
			pk = ((xx.Package >> 0));
			_ref$1 = xx.Comments;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				i = _i;
				_ref$2 = (x$2 = xx.Comments, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i])).List;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$2.$length)) { break; }
					j = _i$1;
					ctext = (x$3 = (x$4 = xx.Comments, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])).List, ((j < 0 || j >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + j])).Text;
					sl = (((x$5 = (x$6 = xx.Comments, ((i < 0 || i >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i])).List, ((j < 0 || j >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + j])).Slash >> 0));
					ender = false;
					separ = false;
					if (!(c.EnderSepared[0] === false)) {
						_tuple = (_entry = c.EnderSepared[0][$Int.keyFor((_q = sl / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")))], _entry !== undefined ? [_entry.v, true] : [new structType.ptr(), false]);
						ender1 = _tuple[1];
						_tuple$1 = (_entry$1 = c.EnderSepared[0][$Int.keyFor((_q$1 = ((sl + 1 >> 0)) / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")))], _entry$1 !== undefined ? [_entry$1.v, true] : [new structType.ptr(), false]);
						ender2 = _tuple$1[1];
						ender = ender1 || ender2;
					}
					if (!(c.EnderSepared[1] === false)) {
						_tuple$2 = (_entry$2 = c.EnderSepared[1][$Int.keyFor((_q$2 = sl / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")))], _entry$2 !== undefined ? [_entry$2.v, true] : [new structType.ptr(), false]);
						separ1 = _tuple$2[1];
						_tuple$3 = (_entry$3 = c.EnderSepared[1][$Int.keyFor((_q$3 = ((sl + 1 >> 0)) / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")))], _entry$3 !== undefined ? [_entry$3.v, true] : [new structType.ptr(), false]);
						separ2 = _tuple$3[1];
						separ = separ1 || separ2;
					}
					variant = 1;
					if (ender) {
						variant = 0;
					} else if (separ) {
						variant = 2;
					}
					if (sl > pk) {
						_ref$3 = c.commentpos;
						_i$2 = 0;
						while (true) {
							if (!(_i$2 < _ref$3.$length)) { break; }
							k = _i$2;
							_key = (x$7 = o(c.MyFile), x$8 = c.importswhere, new $Uint64(x$7.$high + x$8.$high, x$7.$low + x$8.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key)] = { k: _key, v: $subslice(mapast.CommentRow, 0, (1 + fetchvariant((x$9 = c.commentpos, ((k < 0 || k >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + k]))) << 24 >>> 24)) };
							_key$1 = o((x$10 = o(c.MyFile), x$11 = c.importswhere, new $Uint64(x$10.$high + x$11.$high, x$10.$low + x$11.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$1)] = { k: _key$1, v: (new sliceType$4($stringToBytes((x$12 = c.comments, ((k < 0 || k >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + k]))))) };
							c.importswhere = (x$13 = c.importswhere, x$14 = new $Uint64(0, 1), new $Uint64(x$13.$high + x$14.$high, x$13.$low + x$14.$low));
							_i$2++;
						}
						c.commentpos = $subslice(c.commentpos, 0, 0);
						c.comments = $subslice(c.comments, 0, 0);
						separ$1 = false;
						if (!(c.EnderSepared[1] === false)) {
							_tuple$4 = (_entry$4 = c.EnderSepared[1][$Int.keyFor((_q$4 = pk / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero")))], _entry$4 !== undefined ? [_entry$4.v, true] : [new structType.ptr(), false]);
							separ1$1 = _tuple$4[1];
							_tuple$5 = (_entry$5 = c.EnderSepared[1][$Int.keyFor((_q$5 = ((pk + 1 >> 0)) / 2, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero")))], _entry$5 !== undefined ? [_entry$5.v, true] : [new structType.ptr(), false]);
							separ2$1 = _tuple$5[1];
							separ$1 = separ1$1 || separ2$1;
						}
						variant$1 = 0;
						if (separ$1) {
							variant$1 = 1;
						}
						_key$2 = (x$15 = o(c.MyFile), x$16 = c.importswhere, new $Uint64(x$15.$high + x$16.$high, x$15.$low + x$16.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$2)] = { k: _key$2, v: $subslice(mapast.PackageDef, 0, (1 + variant$1 << 24 >>> 24)) };
						_key$3 = o((x$17 = o(c.MyFile), x$18 = c.importswhere, new $Uint64(x$17.$high + x$18.$high, x$17.$low + x$18.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$3)] = { k: _key$3, v: (new sliceType$4($stringToBytes(n))) };
						pk = 16777215;
						c.importswhere = (x$19 = c.importswhere, x$20 = new $Uint64(0, 1), new $Uint64(x$19.$high + x$20.$high, x$19.$low + x$20.$low));
					}
					if (sl < imp) {
						_key$4 = (x$21 = o(c.MyFile), x$22 = c.importswhere, new $Uint64(x$21.$high + x$22.$high, x$21.$low + x$22.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$4)] = { k: _key$4, v: $subslice(mapast.CommentRow, 0, (1 + variant << 24 >>> 24)) };
						_key$5 = o((x$23 = o(c.MyFile), x$24 = c.importswhere, new $Uint64(x$23.$high + x$24.$high, x$23.$low + x$24.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$5)] = { k: _key$5, v: (new sliceType$4($stringToBytes(ctext))) };
						c.importswhere = (x$25 = c.importswhere, x$26 = new $Uint64(0, 1), new $Uint64(x$25.$high + x$26.$high, x$25.$low + x$26.$low));
					} else {
						c.comments = $append(c.comments, ctext);
						c.commentpos = $append(c.commentpos, packint(sl, ender, separ));
					}
					_i$1++;
				}
				_i++;
			}
			if (!(((pk) === 16777215))) {
				separ$2 = false;
				if (!(c.EnderSepared[1] === false)) {
					_tuple$6 = (_entry$6 = c.EnderSepared[1][$Int.keyFor((_q$6 = pk / 2, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero")))], _entry$6 !== undefined ? [_entry$6.v, true] : [new structType.ptr(), false]);
					separ1$2 = _tuple$6[1];
					_tuple$7 = (_entry$7 = c.EnderSepared[1][$Int.keyFor((_q$7 = ((pk + 1 >> 0)) / 2, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >> 0 : $throwRuntimeError("integer divide by zero")))], _entry$7 !== undefined ? [_entry$7.v, true] : [new structType.ptr(), false]);
					separ2$2 = _tuple$7[1];
					separ$2 = separ1$2 || separ2$2;
				}
				variant$2 = 0;
				if (separ$2) {
					variant$2 = 1;
				}
				_key$6 = (x$27 = o(c.MyFile), x$28 = c.importswhere, new $Uint64(x$27.$high + x$28.$high, x$27.$low + x$28.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$6)] = { k: _key$6, v: $subslice(mapast.PackageDef, 0, (1 + variant$2 << 24 >>> 24)) };
				_key$7 = o((x$29 = o(c.MyFile), x$30 = c.importswhere, new $Uint64(x$29.$high + x$30.$high, x$29.$low + x$30.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$7)] = { k: _key$7, v: (new sliceType$4($stringToBytes(($assertType((x), ptrType$21)).Name.Name))) };
				c.importswhere = (x$31 = c.importswhere, x$32 = new $Uint64(0, 1), new $Uint64(x$31.$high + x$32.$high, x$31.$low + x$32.$low));
			}
			c.comments = $append(c.comments, "");
			c.commentpos = $append(c.commentpos, 268435455);
			c.deadfunc = {};
			c.skippedbalits = {};
			c.blocksstmts = {};
			c.ifblocks = {};
		} else if ($assertType(_ref, ptrType$11, true)[1]) {
			xx$1 = $assertType((x), ptrType$11);
			while (true) {
				if (!((((x$33 = c.commentpos, (0 >= x$33.$length ? ($throwRuntimeError("index out of range"), undefined) : x$33.$array[x$33.$offset + 0])) & 268435455)) < ((xx$1.TokPos >> 0)))) { break; }
				_key$8 = (x$34 = o(c.MyFile), x$35 = c.importswhere, new $Uint64(x$34.$high + x$35.$high, x$34.$low + x$35.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$8)] = { k: _key$8, v: $subslice(mapast.CommentRow, 0, (1 + fetchvariant((x$36 = c.commentpos, (0 >= x$36.$length ? ($throwRuntimeError("index out of range"), undefined) : x$36.$array[x$36.$offset + 0]))) << 24 >>> 24)) };
				_key$9 = o((x$37 = o(c.MyFile), x$38 = c.importswhere, new $Uint64(x$37.$high + x$38.$high, x$37.$low + x$38.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$9)] = { k: _key$9, v: (new sliceType$4($stringToBytes((x$39 = c.comments, (0 >= x$39.$length ? ($throwRuntimeError("index out of range"), undefined) : x$39.$array[x$39.$offset + 0]))))) };
				c.importswhere = (x$40 = c.importswhere, x$41 = new $Uint64(0, 1), new $Uint64(x$40.$high + x$41.$high, x$40.$low + x$41.$low));
				c.commentpos = $subslice(c.commentpos, 1);
				c.comments = $subslice(c.comments, 1);
			}
			if (xx$1.Tok === 75) {
				if (xx$1.Lparen === 0) {
					c.importswhere = (x$42 = c.importswhere, x$43 = new $Uint64(0, 1), new $Uint64(x$42.$high + x$43.$high, x$42.$low + x$43.$low));
					c.nestedimports = new $Uint64(0, 0);
				} else {
					_key$10 = (x$44 = o(c.MyFile), x$45 = c.importswhere, new $Uint64(x$44.$high + x$45.$high, x$44.$low + x$45.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$10)] = { k: _key$10, v: mapast.ImportsDef };
					c.importswhere = (x$46 = c.importswhere, x$47 = new $Uint64(0, 1), new $Uint64(x$46.$high + x$47.$high, x$46.$low + x$47.$low));
					c.nestedimports = new $Uint64(0, 1);
				}
			}
			if (((xx$1.Tok === 85)) || ((xx$1.Tok === 64))) {
				variant$3 = bool2byte(xx$1.Tok === 64);
				$unused(variant$3);
				while (true) {
					if (!(c.substmts.$length > 0 && c.subblocks.$length > 0 && (x$48 = c.substmts, x$49 = c.substmts.$length - 1 >> 0, ((x$49 < 0 || x$49 >= x$48.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$48.$array[x$48.$offset + x$49])) <= 0 && (x$50 = c.subblocks, x$51 = c.subblocks.$length - 1 >> 0, ((x$51 < 0 || x$51 >= x$50.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$50.$array[x$50.$offset + x$51])) <= 0)) { break; }
					c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
					c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
					c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
				}
				if (c.substmts.$length > 0) {
					_index = c.substmts.$length - 1 >> 0;
					(x$53 = c.substmts, ((_index < 0 || _index >= x$53.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$53.$array[x$53.$offset + _index] = ((x$52 = c.substmts, ((_index < 0 || _index >= x$52.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$52.$array[x$52.$offset + _index])) - (1) >> 0)));
				}
				stack = sliceType$1.nil;
				blk = new $Uint64(0, 0);
				if (c.nowblock.$length === 0) {
					blk = (x$54 = o(c.MyFile), x$55 = c.importswhere, new $Uint64(x$54.$high + x$55.$high, x$54.$low + x$55.$low));
					c.importswhere = (x$56 = c.importswhere, x$57 = new $Uint64(0, 1), new $Uint64(x$56.$high + x$57.$high, x$56.$low + x$57.$low));
				} else {
					blk = (x$58 = c.nowblock, x$59 = c.nowblock.$length - 1 >> 0, ((x$59 < 0 || x$59 >= x$58.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$58.$array[x$58.$offset + x$59]));
					_index$1 = c.nowblock.$length - 1 >> 0;
					(x$63 = c.nowblock, ((_index$1 < 0 || _index$1 >= x$63.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$63.$array[x$63.$offset + _index$1] = (x$60 = (x$61 = c.nowblock, ((_index$1 < 0 || _index$1 >= x$61.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$61.$array[x$61.$offset + _index$1])), x$62 = new $Uint64(0, 1), new $Uint64(x$60.$high + x$62.$high, x$60.$low + x$62.$low))));
				}
				_key$11 = blk; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$11)] = { k: _key$11, v: mapast.VarDefStmtNode(variant$3) };
				i$1 = 0;
				while (true) {
					if (!(i$1 < xx$1.Specs.$length)) { break; }
					xxx = $assertType((x$64 = xx$1.Specs, ((i$1 < 0 || i$1 >= x$64.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$64.$array[x$64.$offset + i$1])), ptrType$47);
					names = (new $Uint64(0, xxx.Names.$length));
					types$1 = (new $Uint64(0, bool2byte(!($interfaceIsEqual(xxx.Type, $ifaceNil)))));
					variant$4 = 15;
					if (xxx.Values.$length === xxx.Names.$length) {
						variant$4 = 0;
					} else if (xxx.Values.$length === 0) {
						if ((types$1.$high === 0 && types$1.$low === 0)) {
							variant$4 = 13;
						} else {
							variant$4 = 14;
						}
					} else if (!((xxx.Values.$length === 1))) {
						$panic(new $String("multiple values."));
					}
					_key$12 = (x$65 = o(blk), x$66 = (new $Uint64(0, i$1)), new $Uint64(x$65.$high + x$66.$high, x$65.$low + x$66.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$12)] = { k: _key$12, v: mapast.AssignStmtNode(variant$4, (x$67 = new $Uint64(names.$high + types$1.$high, names.$low + types$1.$low), x$68 = (new $Uint64(0, xxx.Values.$length)), new $Uint64(x$67.$high + x$68.$high, x$67.$low + x$68.$low))) };
					_ref$4 = xxx.Names;
					_i$3 = 0;
					while (true) {
						if (!(_i$3 < _ref$4.$length)) { break; }
						j$1 = _i$3;
						_key$13 = (x$69 = o((x$70 = o(blk), x$71 = (new $Uint64(0, i$1)), new $Uint64(x$70.$high + x$71.$high, x$70.$low + x$71.$low))), x$72 = (new $Uint64(0, j$1)), new $Uint64(x$69.$high + x$72.$high, x$69.$low + x$72.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$13)] = { k: _key$13, v: (new sliceType$4($stringToBytes((x$73 = xxx.Names, ((j$1 < 0 || j$1 >= x$73.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$73.$array[x$73.$offset + j$1])).Name))) };
						_i$3++;
					}
					if (!($interfaceIsEqual(xxx.Type, $ifaceNil))) {
						_tuple$8 = $assertType(xxx.Type, ptrType$48, true);
						id = _tuple$8[0];
						ok = _tuple$8[1];
						ident = sliceType$4.nil;
						if (ok) {
							ident = (new sliceType$4($stringToBytes(id.Name)));
						}
						if (ok) {
							_key$14 = (x$74 = o((x$75 = o(blk), x$76 = (new $Uint64(0, i$1)), new $Uint64(x$75.$high + x$76.$high, x$75.$low + x$76.$low))), new $Uint64(x$74.$high + names.$high, x$74.$low + names.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$14)] = { k: _key$14, v: ident };
						} else {
							stack = $appendSlice(new sliceType$1([(x$77 = o((x$78 = o(blk), x$79 = (new $Uint64(0, i$1)), new $Uint64(x$78.$high + x$79.$high, x$78.$low + x$79.$low))), new $Uint64(x$77.$high + names.$high, x$77.$low + names.$low))]), stack);
						}
					}
					_ref$5 = xxx.Values;
					_i$4 = 0;
					while (true) {
						if (!(_i$4 < _ref$5.$length)) { break; }
						j$2 = _i$4;
						_tuple$9 = $assertType((x$80 = xxx.Values, ((j$2 < 0 || j$2 >= x$80.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$80.$array[x$80.$offset + j$2])), ptrType$48, true);
						id$1 = _tuple$9[0];
						ok$1 = _tuple$9[1];
						ident$1 = sliceType$4.nil;
						if (ok$1) {
							ident$1 = (new sliceType$4($stringToBytes(id$1.Name)));
						}
						if (ok$1) {
							_key$15 = (x$81 = (x$82 = (x$83 = o((x$84 = o(blk), x$85 = (new $Uint64(0, i$1)), new $Uint64(x$84.$high + x$85.$high, x$84.$low + x$85.$low))), x$86 = (new $Uint64(0, j$2)), new $Uint64(x$83.$high + x$86.$high, x$83.$low + x$86.$low)), new $Uint64(x$82.$high + names.$high, x$82.$low + names.$low)), new $Uint64(x$81.$high + types$1.$high, x$81.$low + types$1.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$15)] = { k: _key$15, v: ident$1 };
						} else {
							stack = $appendSlice(new sliceType$1([(x$87 = (x$88 = (x$89 = o((x$90 = o(blk), x$91 = (new $Uint64(0, i$1)), new $Uint64(x$90.$high + x$91.$high, x$90.$low + x$91.$low))), x$92 = (new $Uint64(0, j$2)), new $Uint64(x$89.$high + x$92.$high, x$89.$low + x$92.$low)), new $Uint64(x$88.$high + names.$high, x$88.$low + names.$low)), new $Uint64(x$87.$high + types$1.$high, x$87.$low + types$1.$low))]), stack);
						}
						_i$4++;
					}
					i$1 = i$1 + (1) >> 0;
				}
				c.typefield = $appendSlice(c.typefield, stack);
			}
		} else if ($assertType(_ref, ptrType$22, true)[1]) {
			where = new $Uint64(0, 0);
			if ((x$93 = c.nestedimports, (x$93.$high > 0 || (x$93.$high === 0 && x$93.$low >= 1)))) {
				where = (x$94 = (x$95 = o((x$96 = (x$97 = o(c.MyFile), x$98 = c.importswhere, new $Uint64(x$97.$high + x$98.$high, x$97.$low + x$98.$low)), new $Uint64(x$96.$high - 0, x$96.$low - 1))), x$99 = c.nestedimports, new $Uint64(x$95.$high + x$99.$high, x$95.$low + x$99.$low)), new $Uint64(x$94.$high - 0, x$94.$low - 1));
				c.nestedimports = (x$100 = c.nestedimports, x$101 = new $Uint64(0, 1), new $Uint64(x$100.$high + x$101.$high, x$100.$low + x$101.$low));
			} else {
				where = (x$102 = (x$103 = o(c.MyFile), x$104 = c.importswhere, new $Uint64(x$103.$high + x$104.$high, x$103.$low + x$104.$low)), new $Uint64(x$102.$high - 0, x$102.$low - 1));
			}
			_key$16 = where; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$16)] = { k: _key$16, v: mapast.ImportStmt };
			p = sliceType$4.nil;
			p = (new sliceType$4($stringToBytes(($assertType((x), ptrType$22)).Path.Value)));
			n$1 = sliceType$4.nil;
			if (!($assertType((x), ptrType$22).Name === ptrType$48.nil)) {
				n$1 = p;
				p = (new sliceType$4($stringToBytes(($assertType((x), ptrType$22)).Name.Name)));
			}
			_key$17 = o(where); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$17)] = { k: _key$17, v: p };
			if (!(n$1 === sliceType$4.nil)) {
				_key$18 = (x$105 = o(where), new $Uint64(x$105.$high + 0, x$105.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$18)] = { k: _key$18, v: n$1 };
			}
		} else if ($assertType(_ref, ptrType$23, true)[1]) {
			xx$2 = $assertType((x), ptrType$23);
			while (true) {
				if (!((((x$106 = c.commentpos, (0 >= x$106.$length ? ($throwRuntimeError("index out of range"), undefined) : x$106.$array[x$106.$offset + 0])) & 268435455)) < ((xx$2.Type.Func >> 0)))) { break; }
				if (coolcomment((x$107 = c.comments, (0 >= x$107.$length ? ($throwRuntimeError("index out of range"), undefined) : x$107.$array[x$107.$offset + 0]))) || c.Comments1) {
					_key$19 = (x$108 = o(c.MyFile), x$109 = c.importswhere, new $Uint64(x$108.$high + x$109.$high, x$108.$low + x$109.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$19)] = { k: _key$19, v: $subslice(mapast.CommentRow, 0, (1 + fetchvariant((x$110 = c.commentpos, (0 >= x$110.$length ? ($throwRuntimeError("index out of range"), undefined) : x$110.$array[x$110.$offset + 0]))) << 24 >>> 24)) };
					_key$20 = o((x$111 = o(c.MyFile), x$112 = c.importswhere, new $Uint64(x$111.$high + x$112.$high, x$111.$low + x$112.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$20)] = { k: _key$20, v: (new sliceType$4($stringToBytes((x$113 = c.comments, (0 >= x$113.$length ? ($throwRuntimeError("index out of range"), undefined) : x$113.$array[x$113.$offset + 0]))))) };
					c.importswhere = (x$114 = c.importswhere, x$115 = new $Uint64(0, 1), new $Uint64(x$114.$high + x$115.$high, x$114.$low + x$115.$low));
				}
				c.commentpos = $subslice(c.commentpos, 1);
				c.comments = $subslice(c.comments, 1);
			}
			recv_count = (new $Uint64(0, bool2byte(!(xx$2.Recv === ptrType$49.nil))));
			argument_count = new $Uint64(0, 0);
			result_count = new $Uint64(0, 0);
			if (!(xx$2.Type.Params === ptrType$49.nil)) {
				argument_count = (new $Uint64(0, xx$2.Type.Params.List.$length));
			}
			if (!(xx$2.Type.Results === ptrType$49.nil)) {
				result_count = (new $Uint64(0, xx$2.Type.Results.List.$length));
			}
			$unused(result_count);
			totalparams = ((x$116 = new $Uint64(argument_count.$high + result_count.$high, argument_count.$low + result_count.$low), new $Uint64(x$116.$high + recv_count.$high, x$116.$low + recv_count.$low)));
			where$1 = new $Uint64(0, 0);
			where$1 = (x$117 = o(c.MyFile), x$118 = c.importswhere, new $Uint64(x$117.$high + x$118.$high, x$117.$low + x$118.$low));
			c.importswhere = (x$119 = c.importswhere, x$120 = new $Uint64(0, 1), new $Uint64(x$119.$high + x$120.$high, x$119.$low + x$120.$low));
			_key$21 = where$1; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$21)] = { k: _key$21, v: mapast.ToplevFuncNode((recv_count.$high > 0 || (recv_count.$high === 0 && recv_count.$low > 0)), argument_count) };
			_key$22 = o(where$1); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$22)] = { k: _key$22, v: (new sliceType$4($stringToBytes(xx$2.Name.Name))) };
			c.structfield = $append(c.structfield, $toNativeArray($kindUint64, [(x$121 = o(where$1), new $Uint64(x$121.$high + 0, x$121.$low + 1)), totalparams]));
			c.deadif = {};
			c.deadassignments = {};
			c.deadsends = {};
			c.deadincdecs = {};
			c.deadexprs = {};
			if (!(xx$2.Body === ptrType$18.nil)) {
				_key$23 = (x$122 = (x$123 = o(where$1), new $Uint64(x$123.$high + totalparams.$high, x$123.$low + totalparams.$low)), new $Uint64(x$122.$high + 0, x$122.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$23)] = { k: _key$23, v: mapast.BlocOfCodeNode(0, new $Uint64(0, 0)) };
				c.typefield = new sliceType$1([]);
				_key$24 = xx$2.Body; (c.blocksstmts || $throwRuntimeError("assignment to entry in nil map"))[ptrType$18.keyFor(_key$24)] = { k: _key$24, v: o((x$124 = (x$125 = o(where$1), new $Uint64(x$125.$high + totalparams.$high, x$125.$low + totalparams.$low)), new $Uint64(x$124.$high + 0, x$124.$low + 1))) };
				c.nowblock = new sliceType$1([o((x$126 = (x$127 = o(where$1), new $Uint64(x$127.$high + totalparams.$high, x$127.$low + totalparams.$low)), new $Uint64(x$126.$high + 0, x$126.$low + 1)))]);
				c.subblocks = new sliceType$2([how_many_subblocks_block(xx$2.Body)]);
				c.substmts = new sliceType$2([how_many_substmts_block(xx$2.Body)]);
			}
			_key$25 = xx$2.Type; (c.deadfunc || $throwRuntimeError("assignment to entry in nil map"))[ptrType$44.keyFor(_key$25)] = { k: _key$25, v: new structType.ptr() };
		} else if ($assertType(_ref, ptrType$24, true)[1]) {
			xx$3 = $assertType((x), ptrType$24);
			while (true) {
				if (!(c.substmts.$length > 0 && c.subblocks.$length > 0 && (x$128 = c.substmts, x$129 = c.substmts.$length - 1 >> 0, ((x$129 < 0 || x$129 >= x$128.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$128.$array[x$128.$offset + x$129])) <= 0 && (x$130 = c.subblocks, x$131 = c.subblocks.$length - 1 >> 0, ((x$131 < 0 || x$131 >= x$130.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$130.$array[x$130.$offset + x$131])) <= 0)) { break; }
				c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
				c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
				c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
			}
			if (c.substmts.$length > 0) {
				_index$2 = c.substmts.$length - 1 >> 0;
				(x$133 = c.substmts, ((_index$2 < 0 || _index$2 >= x$133.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$133.$array[x$133.$offset + _index$2] = ((x$132 = c.substmts, ((_index$2 < 0 || _index$2 >= x$132.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$132.$array[x$132.$offset + _index$2])) - (1) >> 0)));
			}
			where$2 = new $Uint64(0, 0);
			if (c.nowblock.$length === 0) {
				where$2 = (x$134 = o(c.MyFile), x$135 = c.importswhere, new $Uint64(x$134.$high + x$135.$high, x$134.$low + x$135.$low));
				c.importswhere = (x$136 = c.importswhere, x$137 = new $Uint64(0, 1), new $Uint64(x$136.$high + x$137.$high, x$136.$low + x$137.$low));
			} else {
				where$2 = (x$138 = c.nowblock, x$139 = c.nowblock.$length - 1 >> 0, ((x$139 < 0 || x$139 >= x$138.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$138.$array[x$138.$offset + x$139]));
				_index$3 = c.nowblock.$length - 1 >> 0;
				(x$143 = c.nowblock, ((_index$3 < 0 || _index$3 >= x$143.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$143.$array[x$143.$offset + _index$3] = (x$140 = (x$141 = c.nowblock, ((_index$3 < 0 || _index$3 >= x$141.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$141.$array[x$141.$offset + _index$3])), x$142 = new $Uint64(0, 1), new $Uint64(x$140.$high + x$142.$high, x$140.$low + x$142.$low))));
			}
			variant$5 = 0;
			if (((xx$3.Assign >> 0)) === 0) {
				variant$5 = 0;
			} else {
				variant$5 = 1;
			}
			_key$26 = where$2; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$26)] = { k: _key$26, v: mapast.TypDefStmtNode(variant$5) };
			_key$27 = o(where$2); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$27)] = { k: _key$27, v: (new sliceType$4($stringToBytes(xx$3.Name.Name))) };
			_key$28 = (x$144 = o(where$2), new $Uint64(x$144.$high + 0, x$144.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$28)] = { k: _key$28, v: mapast.RootOfType };
			_ref$6 = xx$3.Type;
			if ($assertType(_ref$6, ptrType$48, true)[1]) {
				xxx$1 = _ref$6.$val;
				_key$29 = o((x$145 = o(where$2), new $Uint64(x$145.$high + 0, x$145.$low + 1))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$29)] = { k: _key$29, v: (new sliceType$4($stringToBytes(xxx$1.Name))) };
			} else {
				xxx$2 = _ref$6;
				c.typefield = $append(c.typefield, o((x$146 = o(where$2), new $Uint64(x$146.$high + 0, x$146.$low + 1))));
			}
		} else if ($assertType(_ref, ptrType$25, true)[1]) {
			xx$4 = $assertType((x), ptrType$25);
			if (c.structfield.$length === 0) {
				break;
			}
			if ((x$147 = (x$148 = c.structfield, x$149 = c.structfield.$length - 1 >> 0, ((x$149 < 0 || x$149 >= x$148.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$148.$array[x$148.$offset + x$149]))[1], (x$147.$high === 0 && x$147.$low === 0))) {
				c.structfield = $subslice(c.structfield, 0, (c.structfield.$length - 1 >> 0));
				break;
			}
			variant$6 = 0;
			if (!(xx$4.Tag === ptrType$26.nil)) {
				variant$6 = 3;
			}
			t = (x$150 = c.structfield, x$151 = c.structfield.$length - 1 >> 0, ((x$151 < 0 || x$151 >= x$150.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$150.$array[x$150.$offset + x$151]))[0];
			i$2 = new $Uint64(0, 0);
			while (true) {
				if (!((x$152 = (new $Uint64(0, xx$4.Names.$length)), (i$2.$high < x$152.$high || (i$2.$high === x$152.$high && i$2.$low < x$152.$low))))) { break; }
				_key$30 = (x$153 = o(t), new $Uint64(x$153.$high + i$2.$high, x$153.$low + i$2.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$30)] = { k: _key$30, v: (new sliceType$4($stringToBytes((x$154 = xx$4.Names, (($flatten64(i$2) < 0 || $flatten64(i$2) >= x$154.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$154.$array[x$154.$offset + $flatten64(i$2)])).Name))) };
				i$2 = (x$155 = new $Uint64(0, 1), new $Uint64(i$2.$high + x$155.$high, i$2.$low + x$155.$low));
			}
			_key$31 = (x$156 = o(t), x$157 = (new $Uint64(0, xx$4.Names.$length)), new $Uint64(x$156.$high + x$157.$high, x$156.$low + x$157.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$31)] = { k: _key$31, v: mapast.RootOfType };
			_ref$7 = xx$4.Type;
			if ($assertType(_ref$7, ptrType$45, true)[1]) {
				yyy = _ref$7.$val;
				c.skippedellipsis = c.skippedellipsis + (1) << 24 >>> 24;
				variant$6 = 2;
				_ref$8 = yyy.Elt;
				if ($assertType(_ref$8, ptrType$48, true)[1]) {
					xxx$3 = _ref$8.$val;
					_key$32 = o((x$158 = o(t), x$159 = (new $Uint64(0, xx$4.Names.$length)), new $Uint64(x$158.$high + x$159.$high, x$158.$low + x$159.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$32)] = { k: _key$32, v: (new sliceType$4($stringToBytes(xxx$3.Name))) };
				} else {
					xxx$4 = _ref$8;
					c.typefield = $append(c.typefield, o((x$160 = o(t), x$161 = (new $Uint64(0, xx$4.Names.$length)), new $Uint64(x$160.$high + x$161.$high, x$160.$low + x$161.$low))));
				}
			} else if ($assertType(_ref$7, ptrType$48, true)[1]) {
				yyy$1 = _ref$7.$val;
				_key$33 = o((x$162 = o(t), x$163 = (new $Uint64(0, xx$4.Names.$length)), new $Uint64(x$162.$high + x$163.$high, x$162.$low + x$163.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$33)] = { k: _key$33, v: (new sliceType$4($stringToBytes(yyy$1.Name))) };
			} else if ($assertType(_ref$7, ptrType$44, true)[1]) {
				yyy$2 = _ref$7.$val;
				_tuple$10 = (_entry$8 = c.deadfunc[ptrType$44.keyFor(yyy$2)], _entry$8 !== undefined ? [_entry$8.v, true] : [new structType.ptr(), false]);
				ok$2 = _tuple$10[1];
				if (!ok$2) {
					c.typefield = $append(c.typefield, o((x$164 = o(t), x$165 = (new $Uint64(0, xx$4.Names.$length)), new $Uint64(x$164.$high + x$165.$high, x$164.$low + x$165.$low))));
				}
			} else {
				yyy$3 = _ref$7;
				c.typefield = $append(c.typefield, o((x$166 = o(t), x$167 = (new $Uint64(0, xx$4.Names.$length)), new $Uint64(x$166.$high + x$167.$high, x$166.$low + x$167.$low))));
			}
			if (!(xx$4.Tag === ptrType$26.nil)) {
				_key$34 = xx$4.Tag; (c.skippedbalits || $throwRuntimeError("assignment to entry in nil map"))[ptrType$26.keyFor(_key$34)] = { k: _key$34, v: new structType.ptr() };
				_key$35 = (x$168 = (x$169 = o(t), new $Uint64(x$169.$high + 0, x$169.$low + 1)), x$170 = (new $Uint64(0, xx$4.Names.$length)), new $Uint64(x$168.$high + x$170.$high, x$168.$low + x$170.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$35)] = { k: _key$35, v: (new sliceType$4($stringToBytes(xx$4.Tag.Value))) };
			}
			_key$36 = t; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$36)] = { k: _key$36, v: $subslice(mapast.TypedIdent, 0, (1 + variant$6 << 24 >>> 24)) };
			_index$4 = c.structfield.$length - 1 >> 0;
			(x$174 = c.structfield, ((_index$4 < 0 || _index$4 >= x$174.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$174.$array[x$174.$offset + _index$4]))[0] = (x$171 = (x$172 = c.structfield, ((_index$4 < 0 || _index$4 >= x$172.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$172.$array[x$172.$offset + _index$4]))[0], x$173 = new $Uint64(0, 1), new $Uint64(x$171.$high + x$173.$high, x$171.$low + x$173.$low));
			if (!((x$175 = (x$176 = c.structfield, x$177 = c.structfield.$length - 1 >> 0, ((x$177 < 0 || x$177 >= x$176.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$176.$array[x$176.$offset + x$177]))[1], (x$175.$high === 0 && x$175.$low === 0)))) {
				_index$5 = c.structfield.$length - 1 >> 0;
				(x$181 = c.structfield, ((_index$5 < 0 || _index$5 >= x$181.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$181.$array[x$181.$offset + _index$5]))[1] = (x$178 = (x$179 = c.structfield, ((_index$5 < 0 || _index$5 >= x$179.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$179.$array[x$179.$offset + _index$5]))[1], x$180 = new $Uint64(0, 1), new $Uint64(x$178.$high - x$180.$high, x$178.$low - x$180.$low));
			}
			if ((x$182 = (x$183 = c.structfield, x$184 = c.structfield.$length - 1 >> 0, ((x$184 < 0 || x$184 >= x$183.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$183.$array[x$183.$offset + x$184]))[1], (x$182.$high === 0 && x$182.$low === 0))) {
				c.structfield = $subslice(c.structfield, 0, (c.structfield.$length - 1 >> 0));
			}
		} else if ($assertType(_ref, ptrType$12, true)[1]) {
			xx$5 = $assertType((x), ptrType$12);
			while (true) {
				if (!((x$185 = c.substmts, x$186 = c.substmts.$length - 1 >> 0, ((x$186 < 0 || x$186 >= x$185.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$185.$array[x$185.$offset + x$186])) <= 0 && (x$187 = c.subblocks, x$188 = c.subblocks.$length - 1 >> 0, ((x$188 < 0 || x$188 >= x$187.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$187.$array[x$187.$offset + x$188])) <= 0)) { break; }
				c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
				c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
				c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
			}
			_index$6 = c.subblocks.$length - 1 >> 0;
			(x$190 = c.subblocks, ((_index$6 < 0 || _index$6 >= x$190.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$190.$array[x$190.$offset + _index$6] = ((x$189 = c.subblocks, ((_index$6 < 0 || _index$6 >= x$189.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$189.$array[x$189.$offset + _index$6])) - (1) >> 0)));
			_tuple$11 = (_entry$9 = c.deadif[ptrType$12.keyFor(xx$5)], _entry$9 !== undefined ? [_entry$9.v, true] : [new structType.ptr(), false]);
			dead = _tuple$11[1];
			if (dead) {
				break;
			}
			stack$1 = sliceType$1.nil;
			variant$7 = 2;
			if ($interfaceIsEqual(xx$5.Else, $ifaceNil)) {
				variant$7 = 1;
			}
			t$1 = (x$191 = c.nowblock, x$192 = c.nowblock.$length - 1 >> 0, ((x$192 < 0 || x$192 >= x$191.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$191.$array[x$191.$offset + x$192]));
			theadcount = new $Uint64(0, 0);
			if (!($interfaceIsEqual(xx$5.Init, $ifaceNil))) {
				_ref$9 = xx$5.Init;
				if ($assertType(_ref$9, ptrType$2, true)[1]) {
					xxx$5 = $assertType(xx$5.Init, ptrType$2);
					_tuple$12 = $assertType(xxx$5.X, ptrType$48, true);
					id$2 = _tuple$12[0];
					ok$3 = _tuple$12[1];
					ident$2 = sliceType$4.nil;
					if (ok$3) {
						ident$2 = (new sliceType$4($stringToBytes(id$2.Name)));
					}
					_key$37 = (x$193 = o(t$1), new $Uint64(x$193.$high + theadcount.$high, x$193.$low + theadcount.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$37)] = { k: _key$37, v: mapast.ExpressionNode(0, new $Uint64(0, 1)) };
					if (ok$3) {
						_key$38 = o((x$194 = o(t$1), new $Uint64(x$194.$high + theadcount.$high, x$194.$low + theadcount.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$38)] = { k: _key$38, v: ident$2 };
					} else {
						stack$1 = $appendSlice(new sliceType$1([o((x$195 = o(t$1), new $Uint64(x$195.$high + theadcount.$high, x$195.$low + theadcount.$low)))]), stack$1);
					}
					theadcount = (x$196 = new $Uint64(0, 1), new $Uint64(theadcount.$high + x$196.$high, theadcount.$low + x$196.$low));
					c.skippedexpressions = c.skippedexpressions + (1) << 24 >>> 24;
				} else if ($assertType(_ref$9, ptrType$4, true)[1]) {
					xxx$6 = $assertType(xx$5.Init, ptrType$4);
					_tuple$13 = $assertType(xxx$6.X, ptrType$48, true);
					id$3 = _tuple$13[0];
					ok$4 = _tuple$13[1];
					ident$3 = sliceType$4.nil;
					if (ok$4) {
						ident$3 = (new sliceType$4($stringToBytes(id$3.Name)));
					}
					$unused(ident$3);
					_key$39 = (x$197 = o(t$1), new $Uint64(x$197.$high + theadcount.$high, x$197.$low + theadcount.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$39)] = { k: _key$39, v: mapast.IncDecStmtNode(bool2byte(!((xxx$6.Tok === 37)))) };
					if (ok$4) {
						_key$40 = o((x$198 = o(t$1), new $Uint64(x$198.$high + theadcount.$high, x$198.$low + theadcount.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$40)] = { k: _key$40, v: ident$3 };
					} else {
						stack$1 = $appendSlice(new sliceType$1([o((x$199 = o(t$1), new $Uint64(x$199.$high + theadcount.$high, x$199.$low + theadcount.$low)))]), stack$1);
					}
					theadcount = (x$200 = new $Uint64(0, 1), new $Uint64(theadcount.$high + x$200.$high, theadcount.$low + x$200.$low));
					c.skippedincdecs = c.skippedincdecs + (1) << 24 >>> 24;
				} else if ($assertType(_ref$9, ptrType$9, true)[1]) {
					xxx$7 = $assertType(xx$5.Init, ptrType$9);
					_tuple$14 = $assertType(xxx$7.Chan, ptrType$48, true);
					id1 = _tuple$14[0];
					ok1 = _tuple$14[1];
					ident1 = sliceType$4.nil;
					if (ok1) {
						ident1 = (new sliceType$4($stringToBytes(id1.Name)));
					}
					_tuple$15 = $assertType(xxx$7.Value, ptrType$48, true);
					id2 = _tuple$15[0];
					ok2 = _tuple$15[1];
					ident2 = sliceType$4.nil;
					if (ok2) {
						ident2 = (new sliceType$4($stringToBytes(id2.Name)));
					}
					$unused(ident1);
					$unused(ident2);
					_key$41 = (x$201 = o(t$1), new $Uint64(x$201.$high + theadcount.$high, x$201.$low + theadcount.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$41)] = { k: _key$41, v: mapast.ExpressionNode(25, new $Uint64(0, 2)) };
					if (ok1) {
						_key$42 = o((x$202 = o(t$1), new $Uint64(x$202.$high + theadcount.$high, x$202.$low + theadcount.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$42)] = { k: _key$42, v: ident1 };
					} else {
						stack$1 = $appendSlice(new sliceType$1([o((x$203 = o(t$1), new $Uint64(x$203.$high + theadcount.$high, x$203.$low + theadcount.$low)))]), stack$1);
					}
					if (ok2) {
						_key$43 = (x$204 = o((x$205 = o(t$1), new $Uint64(x$205.$high + theadcount.$high, x$205.$low + theadcount.$low))), new $Uint64(x$204.$high + 0, x$204.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$43)] = { k: _key$43, v: ident2 };
					} else {
						stack$1 = $appendSlice(new sliceType$1([(x$206 = o((x$207 = o(t$1), new $Uint64(x$207.$high + theadcount.$high, x$207.$low + theadcount.$low))), new $Uint64(x$206.$high + 0, x$206.$low + 1))]), stack$1);
					}
					theadcount = (x$208 = new $Uint64(0, 1), new $Uint64(theadcount.$high + x$208.$high, theadcount.$low + x$208.$low));
					c.skippedsends = c.skippedsends + (1) << 24 >>> 24;
				} else if ($assertType(_ref$9, ptrType$7, true)[1]) {
					xxx$8 = $assertType(xx$5.Init, ptrType$7);
					variant$8 = 0;
					_1 = xxx$8.Tok;
					if (_1 === (42)) {
						variant$8 = 0;
					} else if (_1 === (47)) {
						variant$8 = 1;
					} else if (_1 === (23)) {
						variant$8 = 3;
					} else if (_1 === (24)) {
						variant$8 = 4;
					} else if (_1 === (25)) {
						variant$8 = 5;
					} else if (_1 === (26)) {
						variant$8 = 6;
					} else if (_1 === (27)) {
						variant$8 = 7;
					} else if (_1 === (28)) {
						variant$8 = 8;
					} else if (_1 === (29)) {
						variant$8 = 9;
					} else if (_1 === (30)) {
						variant$8 = 10;
					} else if (_1 === (31)) {
						variant$8 = 11;
					} else if (_1 === (32)) {
						variant$8 = 12;
					} else if (_1 === (33)) {
						variant$8 = 2;
					}
					if (!((xxx$8.Lhs.$length === xxx$8.Rhs.$length))) {
						variant$8 = variant$8 + (15) << 24 >>> 24;
					}
					r = new $Uint64(0, 0);
					_ref$10 = xxx$8.Lhs;
					_i$5 = 0;
					while (true) {
						if (!(_i$5 < _ref$10.$length)) { break; }
						i$3 = _i$5;
						ident$4 = sliceType$4.nil;
						_tuple$16 = $assertType((x$209 = xxx$8.Lhs, ((i$3 < 0 || i$3 >= x$209.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$209.$array[x$209.$offset + i$3])), ptrType$48, true);
						id2$1 = _tuple$16[0];
						ok2$1 = _tuple$16[1];
						if (ok2$1) {
							ident$4 = (new sliceType$4($stringToBytes(id2$1.Name)));
						}
						if (ok2$1) {
							_key$44 = (x$210 = o((x$211 = o(t$1), new $Uint64(x$211.$high + theadcount.$high, x$211.$low + theadcount.$low))), new $Uint64(x$210.$high + r.$high, x$210.$low + r.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$44)] = { k: _key$44, v: ident$4 };
						} else {
							stack$1 = $appendSlice(new sliceType$1([(x$212 = o((x$213 = o(t$1), new $Uint64(x$213.$high + theadcount.$high, x$213.$low + theadcount.$low))), new $Uint64(x$212.$high + r.$high, x$212.$low + r.$low))]), stack$1);
						}
						r = (x$214 = new $Uint64(0, 1), new $Uint64(r.$high + x$214.$high, r.$low + x$214.$low));
						_i$5++;
					}
					_ref$11 = xxx$8.Rhs;
					_i$6 = 0;
					while (true) {
						if (!(_i$6 < _ref$11.$length)) { break; }
						i$4 = _i$6;
						ident$5 = sliceType$4.nil;
						_tuple$17 = $assertType((x$215 = xxx$8.Rhs, ((i$4 < 0 || i$4 >= x$215.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$215.$array[x$215.$offset + i$4])), ptrType$48, true);
						id2$2 = _tuple$17[0];
						ok2$2 = _tuple$17[1];
						if (ok2$2) {
							ident$5 = (new sliceType$4($stringToBytes(id2$2.Name)));
						}
						if (ok2$2) {
							_key$45 = (x$216 = o((x$217 = o(t$1), new $Uint64(x$217.$high + theadcount.$high, x$217.$low + theadcount.$low))), new $Uint64(x$216.$high + r.$high, x$216.$low + r.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$45)] = { k: _key$45, v: ident$5 };
						} else {
							stack$1 = $appendSlice(new sliceType$1([(x$218 = o((x$219 = o(t$1), new $Uint64(x$219.$high + theadcount.$high, x$219.$low + theadcount.$low))), new $Uint64(x$218.$high + r.$high, x$218.$low + r.$low))]), stack$1);
						}
						r = (x$220 = new $Uint64(0, 1), new $Uint64(r.$high + x$220.$high, r.$low + x$220.$low));
						_i$6++;
					}
					_key$46 = (x$221 = o(t$1), new $Uint64(x$221.$high + theadcount.$high, x$221.$low + theadcount.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$46)] = { k: _key$46, v: mapast.AssignStmtNode(variant$8, r) };
					theadcount = (x$222 = new $Uint64(0, 1), new $Uint64(theadcount.$high + x$222.$high, theadcount.$low + x$222.$low));
					c.skippedassignments = c.skippedassignments + (1) << 24 >>> 24;
				}
				_key$47 = (x$223 = o(t$1), new $Uint64(x$223.$high + theadcount.$high, x$223.$low + theadcount.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$47)] = { k: _key$47, v: mapast.BranchStmtNode(0) };
				theadcount = (x$224 = new $Uint64(0, 1), new $Uint64(theadcount.$high + x$224.$high, theadcount.$low + x$224.$low));
			}
			_tuple$18 = $assertType(xx$5.Cond, ptrType$48, true);
			id$4 = _tuple$18[0];
			ok$5 = _tuple$18[1];
			ident$6 = sliceType$4.nil;
			if (ok$5) {
				ident$6 = (new sliceType$4($stringToBytes(id$4.Name)));
			}
			$unused(ident$6);
			_key$48 = (x$225 = o(t$1), new $Uint64(x$225.$high + theadcount.$high, x$225.$low + theadcount.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$48)] = { k: _key$48, v: mapast.ExpressionNode(0, new $Uint64(0, 1)) };
			if (ok$5) {
				_key$49 = o((x$226 = o(t$1), new $Uint64(x$226.$high + theadcount.$high, x$226.$low + theadcount.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$49)] = { k: _key$49, v: ident$6 };
			} else {
				stack$1 = $appendSlice(new sliceType$1([o((x$227 = o(t$1), new $Uint64(x$227.$high + theadcount.$high, x$227.$low + theadcount.$low)))]), stack$1);
			}
			theadcount = (x$228 = new $Uint64(0, 1), new $Uint64(theadcount.$high + x$228.$high, theadcount.$low + x$228.$low));
			_key$50 = t$1; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$50)] = { k: _key$50, v: mapast.BlocOfCodeNode(variant$7, theadcount) };
			_key$51 = xx$5.Body; (c.ifblocks || $throwRuntimeError("assignment to entry in nil map"))[ptrType$18.keyFor(_key$51)] = { k: _key$51, v: (x$229 = o(t$1), new $Uint64(x$229.$high + theadcount.$high, x$229.$low + theadcount.$low)) };
			_index$7 = c.nowblock.$length - 1 >> 0;
			(x$233 = c.nowblock, ((_index$7 < 0 || _index$7 >= x$233.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$233.$array[x$233.$offset + _index$7] = (x$230 = (x$231 = c.nowblock, ((_index$7 < 0 || _index$7 >= x$231.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$231.$array[x$231.$offset + _index$7])), x$232 = new $Uint64(0, 1), new $Uint64(x$230.$high + x$232.$high, x$230.$low + x$232.$low))));
			while (true) {
				if (!(!($interfaceIsEqual(xx$5.Else, $ifaceNil)))) { break; }
				ok$6 = false;
				yy = ptrType$12.nil;
				_tuple$19 = $assertType(xx$5.Else, ptrType$12, true);
				yy = _tuple$19[0];
				ok$6 = _tuple$19[1];
				if (ok$6) {
					xx$5 = yy;
					_key$52 = xx$5; (c.deadif || $throwRuntimeError("assignment to entry in nil map"))[ptrType$12.keyFor(_key$52)] = { k: _key$52, v: new structType.ptr() };
					variant$7 = 2;
					if ($interfaceIsEqual(xx$5.Else, $ifaceNil)) {
						variant$7 = 1;
					}
					t$2 = (x$234 = c.nowblock, x$235 = c.nowblock.$length - 1 >> 0, ((x$235 < 0 || x$235 >= x$234.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$234.$array[x$234.$offset + x$235]));
					theadcount$1 = new $Uint64(0, 0);
					if (!($interfaceIsEqual(xx$5.Init, $ifaceNil))) {
						_ref$12 = xx$5.Init;
						if ($assertType(_ref$12, ptrType$2, true)[1]) {
							xxx$9 = $assertType(xx$5.Init, ptrType$2);
							_tuple$20 = $assertType(xxx$9.X, ptrType$48, true);
							id$5 = _tuple$20[0];
							ok$7 = _tuple$20[1];
							ident$7 = sliceType$4.nil;
							if (ok$7) {
								ident$7 = (new sliceType$4($stringToBytes(id$5.Name)));
							}
							_key$53 = (x$236 = o(t$2), new $Uint64(x$236.$high + theadcount$1.$high, x$236.$low + theadcount$1.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$53)] = { k: _key$53, v: mapast.ExpressionNode(0, new $Uint64(0, 1)) };
							if (ok$7) {
								_key$54 = o((x$237 = o(t$2), new $Uint64(x$237.$high + theadcount$1.$high, x$237.$low + theadcount$1.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$54)] = { k: _key$54, v: ident$7 };
							} else {
								stack$1 = $appendSlice(new sliceType$1([o((x$238 = o(t$2), new $Uint64(x$238.$high + theadcount$1.$high, x$238.$low + theadcount$1.$low)))]), stack$1);
							}
							theadcount$1 = (x$239 = new $Uint64(0, 1), new $Uint64(theadcount$1.$high + x$239.$high, theadcount$1.$low + x$239.$low));
							_key$55 = xxx$9; (c.deadexprs || $throwRuntimeError("assignment to entry in nil map"))[ptrType$2.keyFor(_key$55)] = { k: _key$55, v: new structType.ptr() };
						} else if ($assertType(_ref$12, ptrType$4, true)[1]) {
							xxx$10 = $assertType(xx$5.Init, ptrType$4);
							_tuple$21 = $assertType(xxx$10.X, ptrType$48, true);
							id$6 = _tuple$21[0];
							ok$8 = _tuple$21[1];
							ident$8 = sliceType$4.nil;
							if (ok$8) {
								ident$8 = (new sliceType$4($stringToBytes(id$6.Name)));
							}
							$unused(ident$8);
							_key$56 = (x$240 = o(t$2), new $Uint64(x$240.$high + theadcount$1.$high, x$240.$low + theadcount$1.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$56)] = { k: _key$56, v: mapast.IncDecStmtNode(bool2byte(!((xxx$10.Tok === 37)))) };
							if (ok$8) {
								_key$57 = o((x$241 = o(t$2), new $Uint64(x$241.$high + theadcount$1.$high, x$241.$low + theadcount$1.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$57)] = { k: _key$57, v: ident$8 };
							} else {
								stack$1 = $appendSlice(new sliceType$1([o((x$242 = o(t$2), new $Uint64(x$242.$high + theadcount$1.$high, x$242.$low + theadcount$1.$low)))]), stack$1);
							}
							theadcount$1 = (x$243 = new $Uint64(0, 1), new $Uint64(theadcount$1.$high + x$243.$high, theadcount$1.$low + x$243.$low));
							_key$58 = xxx$10; (c.deadincdecs || $throwRuntimeError("assignment to entry in nil map"))[ptrType$4.keyFor(_key$58)] = { k: _key$58, v: new structType.ptr() };
						} else if ($assertType(_ref$12, ptrType$9, true)[1]) {
							xxx$11 = $assertType(xx$5.Init, ptrType$9);
							_tuple$22 = $assertType(xxx$11.Chan, ptrType$48, true);
							id1$1 = _tuple$22[0];
							ok1$1 = _tuple$22[1];
							ident1$1 = sliceType$4.nil;
							if (ok1$1) {
								ident1$1 = (new sliceType$4($stringToBytes(id1$1.Name)));
							}
							_tuple$23 = $assertType(xxx$11.Value, ptrType$48, true);
							id2$3 = _tuple$23[0];
							ok2$3 = _tuple$23[1];
							ident2$1 = sliceType$4.nil;
							if (ok2$3) {
								ident2$1 = (new sliceType$4($stringToBytes(id2$3.Name)));
							}
							$unused(ident1$1);
							$unused(ident2$1);
							_key$59 = (x$244 = o(t$2), new $Uint64(x$244.$high + theadcount$1.$high, x$244.$low + theadcount$1.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$59)] = { k: _key$59, v: mapast.ExpressionNode(25, new $Uint64(0, 2)) };
							if (ok1$1) {
								_key$60 = o((x$245 = o(t$2), new $Uint64(x$245.$high + theadcount$1.$high, x$245.$low + theadcount$1.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$60)] = { k: _key$60, v: ident1$1 };
							} else {
								stack$1 = $appendSlice(new sliceType$1([o((x$246 = o(t$2), new $Uint64(x$246.$high + theadcount$1.$high, x$246.$low + theadcount$1.$low)))]), stack$1);
							}
							if (ok2$3) {
								_key$61 = (x$247 = o((x$248 = o(t$2), new $Uint64(x$248.$high + theadcount$1.$high, x$248.$low + theadcount$1.$low))), new $Uint64(x$247.$high + 0, x$247.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$61)] = { k: _key$61, v: ident2$1 };
							} else {
								stack$1 = $appendSlice(new sliceType$1([(x$249 = o((x$250 = o(t$2), new $Uint64(x$250.$high + theadcount$1.$high, x$250.$low + theadcount$1.$low))), new $Uint64(x$249.$high + 0, x$249.$low + 1))]), stack$1);
							}
							theadcount$1 = (x$251 = new $Uint64(0, 1), new $Uint64(theadcount$1.$high + x$251.$high, theadcount$1.$low + x$251.$low));
							_key$62 = xxx$11; (c.deadsends || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key$62)] = { k: _key$62, v: new structType.ptr() };
						} else if ($assertType(_ref$12, ptrType$7, true)[1]) {
							xxx$12 = $assertType(xx$5.Init, ptrType$7);
							variant$9 = 0;
							_2 = xxx$12.Tok;
							if (_2 === (42)) {
								variant$9 = 0;
							} else if (_2 === (47)) {
								variant$9 = 1;
							} else if (_2 === (23)) {
								variant$9 = 3;
							} else if (_2 === (24)) {
								variant$9 = 4;
							} else if (_2 === (25)) {
								variant$9 = 5;
							} else if (_2 === (26)) {
								variant$9 = 6;
							} else if (_2 === (27)) {
								variant$9 = 7;
							} else if (_2 === (28)) {
								variant$9 = 8;
							} else if (_2 === (29)) {
								variant$9 = 9;
							} else if (_2 === (30)) {
								variant$9 = 10;
							} else if (_2 === (31)) {
								variant$9 = 11;
							} else if (_2 === (32)) {
								variant$9 = 12;
							} else if (_2 === (33)) {
								variant$9 = 2;
							}
							if (!((xxx$12.Lhs.$length === xxx$12.Rhs.$length))) {
								variant$9 = variant$9 + (15) << 24 >>> 24;
							}
							r$1 = new $Uint64(0, 0);
							_ref$13 = xxx$12.Lhs;
							_i$7 = 0;
							while (true) {
								if (!(_i$7 < _ref$13.$length)) { break; }
								i$5 = _i$7;
								ident$9 = sliceType$4.nil;
								_tuple$24 = $assertType((x$252 = xxx$12.Lhs, ((i$5 < 0 || i$5 >= x$252.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$252.$array[x$252.$offset + i$5])), ptrType$48, true);
								id2$4 = _tuple$24[0];
								ok2$4 = _tuple$24[1];
								if (ok2$4) {
									ident$9 = (new sliceType$4($stringToBytes(id2$4.Name)));
								}
								if (ok2$4) {
									_key$63 = (x$253 = o((x$254 = o(t$2), new $Uint64(x$254.$high + theadcount$1.$high, x$254.$low + theadcount$1.$low))), new $Uint64(x$253.$high + r$1.$high, x$253.$low + r$1.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$63)] = { k: _key$63, v: ident$9 };
								} else {
									stack$1 = $appendSlice(new sliceType$1([(x$255 = o((x$256 = o(t$2), new $Uint64(x$256.$high + theadcount$1.$high, x$256.$low + theadcount$1.$low))), new $Uint64(x$255.$high + r$1.$high, x$255.$low + r$1.$low))]), stack$1);
								}
								r$1 = (x$257 = new $Uint64(0, 1), new $Uint64(r$1.$high + x$257.$high, r$1.$low + x$257.$low));
								_i$7++;
							}
							_ref$14 = xxx$12.Rhs;
							_i$8 = 0;
							while (true) {
								if (!(_i$8 < _ref$14.$length)) { break; }
								i$6 = _i$8;
								ident$10 = sliceType$4.nil;
								_tuple$25 = $assertType((x$258 = xxx$12.Rhs, ((i$6 < 0 || i$6 >= x$258.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$258.$array[x$258.$offset + i$6])), ptrType$48, true);
								id2$5 = _tuple$25[0];
								ok2$5 = _tuple$25[1];
								if (ok2$5) {
									ident$10 = (new sliceType$4($stringToBytes(id2$5.Name)));
								}
								if (ok2$5) {
									_key$64 = (x$259 = o((x$260 = o(t$2), new $Uint64(x$260.$high + theadcount$1.$high, x$260.$low + theadcount$1.$low))), new $Uint64(x$259.$high + r$1.$high, x$259.$low + r$1.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$64)] = { k: _key$64, v: ident$10 };
								} else {
									stack$1 = $appendSlice(new sliceType$1([(x$261 = o((x$262 = o(t$2), new $Uint64(x$262.$high + theadcount$1.$high, x$262.$low + theadcount$1.$low))), new $Uint64(x$261.$high + r$1.$high, x$261.$low + r$1.$low))]), stack$1);
								}
								r$1 = (x$263 = new $Uint64(0, 1), new $Uint64(r$1.$high + x$263.$high, r$1.$low + x$263.$low));
								_i$8++;
							}
							_key$65 = (x$264 = o(t$2), new $Uint64(x$264.$high + theadcount$1.$high, x$264.$low + theadcount$1.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$65)] = { k: _key$65, v: mapast.AssignStmtNode(variant$9, r$1) };
							theadcount$1 = (x$265 = new $Uint64(0, 1), new $Uint64(theadcount$1.$high + x$265.$high, theadcount$1.$low + x$265.$low));
							_key$66 = xxx$12; (c.deadassignments || $throwRuntimeError("assignment to entry in nil map"))[ptrType$7.keyFor(_key$66)] = { k: _key$66, v: new structType.ptr() };
						}
						_key$67 = (x$266 = o(t$2), new $Uint64(x$266.$high + theadcount$1.$high, x$266.$low + theadcount$1.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$67)] = { k: _key$67, v: mapast.BranchStmtNode(0) };
						theadcount$1 = (x$267 = new $Uint64(0, 1), new $Uint64(theadcount$1.$high + x$267.$high, theadcount$1.$low + x$267.$low));
					}
					_tuple$26 = $assertType(xx$5.Cond, ptrType$48, true);
					id$7 = _tuple$26[0];
					ok$9 = _tuple$26[1];
					ident$11 = sliceType$4.nil;
					if (ok$9) {
						ident$11 = (new sliceType$4($stringToBytes(id$7.Name)));
					}
					$unused(ident$11);
					_key$68 = (x$268 = o(t$2), new $Uint64(x$268.$high + theadcount$1.$high, x$268.$low + theadcount$1.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$68)] = { k: _key$68, v: mapast.ExpressionNode(0, new $Uint64(0, 1)) };
					if (ok$9) {
						_key$69 = o((x$269 = o(t$2), new $Uint64(x$269.$high + theadcount$1.$high, x$269.$low + theadcount$1.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$69)] = { k: _key$69, v: ident$11 };
					} else {
						stack$1 = $appendSlice(new sliceType$1([o((x$270 = o(t$2), new $Uint64(x$270.$high + theadcount$1.$high, x$270.$low + theadcount$1.$low)))]), stack$1);
					}
					theadcount$1 = (x$271 = new $Uint64(0, 1), new $Uint64(theadcount$1.$high + x$271.$high, theadcount$1.$low + x$271.$low));
					_key$70 = t$2; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$70)] = { k: _key$70, v: mapast.BlocOfCodeNode(variant$7, theadcount$1) };
					_key$71 = xx$5.Body; (c.ifblocks || $throwRuntimeError("assignment to entry in nil map"))[ptrType$18.keyFor(_key$71)] = { k: _key$71, v: (x$272 = o(t$2), new $Uint64(x$272.$high + theadcount$1.$high, x$272.$low + theadcount$1.$low)) };
					_index$8 = c.nowblock.$length - 1 >> 0;
					(x$276 = c.nowblock, ((_index$8 < 0 || _index$8 >= x$276.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$276.$array[x$276.$offset + _index$8] = (x$273 = (x$274 = c.nowblock, ((_index$8 < 0 || _index$8 >= x$274.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$274.$array[x$274.$offset + _index$8])), x$275 = new $Uint64(0, 1), new $Uint64(x$273.$high + x$275.$high, x$273.$low + x$275.$low))));
					continue;
				} else {
					zz = ptrType$18.nil;
					_tuple$27 = $assertType(xx$5.Else, ptrType$18, true);
					zz = _tuple$27[0];
					ok$6 = _tuple$27[1];
					$unused(zz);
					t$3 = (x$277 = c.nowblock, x$278 = c.nowblock.$length - 1 >> 0, ((x$278 < 0 || x$278 >= x$277.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$277.$array[x$277.$offset + x$278]));
					theadcount$2 = new $Uint64(0, 0);
					_key$72 = t$3; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$72)] = { k: _key$72, v: mapast.BlocOfCodeNode(0, new $Uint64(0, 0)) };
					_index$9 = c.nowblock.$length - 1 >> 0;
					(x$282 = c.nowblock, ((_index$9 < 0 || _index$9 >= x$282.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$282.$array[x$282.$offset + _index$9] = (x$279 = (x$280 = c.nowblock, ((_index$9 < 0 || _index$9 >= x$280.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$280.$array[x$280.$offset + _index$9])), x$281 = new $Uint64(0, 1), new $Uint64(x$279.$high + x$281.$high, x$279.$low + x$281.$low))));
					_key$73 = zz; (c.ifblocks || $throwRuntimeError("assignment to entry in nil map"))[ptrType$18.keyFor(_key$73)] = { k: _key$73, v: (x$283 = o(t$3), new $Uint64(x$283.$high + theadcount$2.$high, x$283.$low + theadcount$2.$low)) };
					break;
				}
			}
			c.typefield = $appendSlice(c.typefield, stack$1);
		} else if ($assertType(_ref, ptrType$14, true)[1]) {
			xx$6 = $assertType((x), ptrType$14);
			while (true) {
				if (!((x$284 = c.substmts, x$285 = c.substmts.$length - 1 >> 0, ((x$285 < 0 || x$285 >= x$284.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$284.$array[x$284.$offset + x$285])) <= 0 && (x$286 = c.subblocks, x$287 = c.subblocks.$length - 1 >> 0, ((x$287 < 0 || x$287 >= x$286.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$286.$array[x$286.$offset + x$287])) <= 0)) { break; }
				c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
				c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
				c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
			}
			_index$10 = c.subblocks.$length - 1 >> 0;
			(x$289 = c.subblocks, ((_index$10 < 0 || _index$10 >= x$289.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$289.$array[x$289.$offset + _index$10] = ((x$288 = c.subblocks, ((_index$10 < 0 || _index$10 >= x$288.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$288.$array[x$288.$offset + _index$10])) - (1) >> 0)));
			stack$2 = sliceType$1.nil;
			if ($interfaceIsEqual(xx$6.Key, $ifaceNil) && $interfaceIsEqual(xx$6.Value, $ifaceNil)) {
				t$4 = (x$290 = c.nowblock, x$291 = c.nowblock.$length - 1 >> 0, ((x$291 < 0 || x$291 >= x$290.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$290.$array[x$290.$offset + x$291]));
				theadcount$3 = new $Uint64(0, 0);
				_tuple$28 = $assertType(xx$6.X, ptrType$48, true);
				id$8 = _tuple$28[0];
				ok$10 = _tuple$28[1];
				ident$12 = sliceType$4.nil;
				if (ok$10) {
					ident$12 = (new sliceType$4($stringToBytes(id$8.Name)));
				}
				$unused(ident$12);
				_key$74 = (x$292 = o(t$4), new $Uint64(x$292.$high + theadcount$3.$high, x$292.$low + theadcount$3.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$74)] = { k: _key$74, v: mapast.ExpressionNode(0, new $Uint64(0, 1)) };
				if (ok$10) {
					_key$75 = o((x$293 = o(t$4), new $Uint64(x$293.$high + theadcount$3.$high, x$293.$low + theadcount$3.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$75)] = { k: _key$75, v: ident$12 };
				} else {
					stack$2 = $appendSlice(new sliceType$1([o((x$294 = o(t$4), new $Uint64(x$294.$high + theadcount$3.$high, x$294.$low + theadcount$3.$low)))]), stack$2);
				}
				theadcount$3 = (x$295 = new $Uint64(0, 1), new $Uint64(theadcount$3.$high + x$295.$high, theadcount$3.$low + x$295.$low));
				_key$76 = t$4; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$76)] = { k: _key$76, v: mapast.BlocOfCodeNode(5, theadcount$3) };
				_index$11 = c.nowblock.$length - 1 >> 0;
				(x$299 = c.nowblock, ((_index$11 < 0 || _index$11 >= x$299.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$299.$array[x$299.$offset + _index$11] = (x$296 = (x$297 = c.nowblock, ((_index$11 < 0 || _index$11 >= x$297.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$297.$array[x$297.$offset + _index$11])), x$298 = new $Uint64(0, 1), new $Uint64(x$296.$high + x$298.$high, x$296.$low + x$298.$low))));
				theadcount$3 = (x$300 = new $Uint64(0, 1), new $Uint64(theadcount$3.$high + x$300.$high, theadcount$3.$low + x$300.$low));
				_key$77 = xx$6.Body; (c.blocksstmts || $throwRuntimeError("assignment to entry in nil map"))[ptrType$18.keyFor(_key$77)] = { k: _key$77, v: (x$301 = (x$302 = o(t$4), new $Uint64(x$302.$high + theadcount$3.$high, x$302.$low + theadcount$3.$low)), new $Uint64(x$301.$high - 0, x$301.$low - 1)) };
				c.nowblock = $append(c.nowblock, (x$303 = (x$304 = o(t$4), new $Uint64(x$304.$high + theadcount$3.$high, x$304.$low + theadcount$3.$low)), new $Uint64(x$303.$high - 0, x$303.$low - 1)));
				c.subblocks = $append(c.subblocks, how_many_subblocks_block(xx$6.Body));
				c.substmts = $append(c.substmts, how_many_substmts_block(xx$6.Body));
			} else {
				variant$10 = 0;
				_3 = xx$6.Tok;
				if (_3 === (42)) {
					variant$10 = 17;
				} else if (_3 === (47)) {
					variant$10 = 18;
				}
				$unused(variant$10);
				offset = new $Uint64(0, 0);
				t$5 = (x$305 = c.nowblock, x$306 = c.nowblock.$length - 1 >> 0, ((x$306 < 0 || x$306 >= x$305.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$305.$array[x$305.$offset + x$306]));
				theadcount$4 = new $Uint64(0, 0);
				if (!($interfaceIsEqual(xx$6.Key, $ifaceNil))) {
					_tuple$29 = $assertType(xx$6.Key, ptrType$48, true);
					id$9 = _tuple$29[0];
					ok$11 = _tuple$29[1];
					ident$13 = sliceType$4.nil;
					if (ok$11) {
						ident$13 = (new sliceType$4($stringToBytes(id$9.Name)));
					}
					$unused(ident$13);
					_key$78 = o((x$307 = o(t$5), new $Uint64(x$307.$high + theadcount$4.$high, x$307.$low + theadcount$4.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$78)] = { k: _key$78, v: mapast.ExpressionNode(34, new $Uint64(0, 1)) };
					if (ok$11) {
						_key$79 = o(o((x$308 = o(t$5), new $Uint64(x$308.$high + theadcount$4.$high, x$308.$low + theadcount$4.$low)))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$79)] = { k: _key$79, v: ident$13 };
					} else {
						stack$2 = $appendSlice(new sliceType$1([o((x$309 = o(t$5), new $Uint64(x$309.$high + theadcount$4.$high, x$309.$low + theadcount$4.$low)))]), stack$2);
					}
				}
				if (!($interfaceIsEqual(xx$6.Value, $ifaceNil))) {
					_tuple$30 = $assertType(xx$6.Value, ptrType$48, true);
					id$10 = _tuple$30[0];
					ok$12 = _tuple$30[1];
					ident$14 = sliceType$4.nil;
					if (ok$12) {
						ident$14 = (new sliceType$4($stringToBytes(id$10.Name)));
					}
					$unused(ident$14);
					_key$80 = (x$310 = o((x$311 = o(t$5), new $Uint64(x$311.$high + theadcount$4.$high, x$311.$low + theadcount$4.$low))), new $Uint64(x$310.$high + 0, x$310.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$80)] = { k: _key$80, v: mapast.ExpressionNode(34, new $Uint64(0, 1)) };
					if (ok$12) {
						_key$81 = o((x$312 = o((x$313 = o(t$5), new $Uint64(x$313.$high + theadcount$4.$high, x$313.$low + theadcount$4.$low))), new $Uint64(x$312.$high + 0, x$312.$low + 1))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$81)] = { k: _key$81, v: ident$14 };
					} else {
						stack$2 = $appendSlice(new sliceType$1([(x$314 = o((x$315 = o(t$5), new $Uint64(x$315.$high + theadcount$4.$high, x$315.$low + theadcount$4.$low))), new $Uint64(x$314.$high + 0, x$314.$low + 1))]), stack$2);
					}
					offset = new $Uint64(0, 2);
				} else {
					offset = new $Uint64(0, 1);
				}
				_tuple$31 = $assertType(xx$6.X, ptrType$48, true);
				id$11 = _tuple$31[0];
				ok$13 = _tuple$31[1];
				ident$15 = sliceType$4.nil;
				if (ok$13) {
					ident$15 = (new sliceType$4($stringToBytes(id$11.Name)));
				}
				$unused(ident$15);
				_key$82 = (x$316 = o((x$317 = o(t$5), new $Uint64(x$317.$high + theadcount$4.$high, x$317.$low + theadcount$4.$low))), new $Uint64(x$316.$high + offset.$high, x$316.$low + offset.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$82)] = { k: _key$82, v: mapast.ExpressionNode(0, new $Uint64(0, 1)) };
				if (ok$13) {
					_key$83 = o((x$318 = o((x$319 = o(t$5), new $Uint64(x$319.$high + theadcount$4.$high, x$319.$low + theadcount$4.$low))), new $Uint64(x$318.$high + offset.$high, x$318.$low + offset.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$83)] = { k: _key$83, v: ident$15 };
				} else {
					stack$2 = $appendSlice(new sliceType$1([o((x$320 = o((x$321 = o(t$5), new $Uint64(x$321.$high + theadcount$4.$high, x$321.$low + theadcount$4.$low))), new $Uint64(x$320.$high + offset.$high, x$320.$low + offset.$low)))]), stack$2);
				}
				_key$84 = (x$322 = o(t$5), new $Uint64(x$322.$high + theadcount$4.$high, x$322.$low + theadcount$4.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$84)] = { k: _key$84, v: mapast.AssignStmtNode(variant$10, new $Uint64(0 + offset.$high, 1 + offset.$low)) };
				theadcount$4 = (x$323 = new $Uint64(0, 1), new $Uint64(theadcount$4.$high + x$323.$high, theadcount$4.$low + x$323.$low));
				_key$85 = t$5; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$85)] = { k: _key$85, v: mapast.BlocOfCodeNode(4, theadcount$4) };
				_index$12 = c.nowblock.$length - 1 >> 0;
				(x$327 = c.nowblock, ((_index$12 < 0 || _index$12 >= x$327.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$327.$array[x$327.$offset + _index$12] = (x$324 = (x$325 = c.nowblock, ((_index$12 < 0 || _index$12 >= x$325.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$325.$array[x$325.$offset + _index$12])), x$326 = new $Uint64(0, 1), new $Uint64(x$324.$high + x$326.$high, x$324.$low + x$326.$low))));
				theadcount$4 = (x$328 = new $Uint64(0, 1), new $Uint64(theadcount$4.$high + x$328.$high, theadcount$4.$low + x$328.$low));
				_key$86 = xx$6.Body; (c.blocksstmts || $throwRuntimeError("assignment to entry in nil map"))[ptrType$18.keyFor(_key$86)] = { k: _key$86, v: (x$329 = (x$330 = o(t$5), new $Uint64(x$330.$high + theadcount$4.$high, x$330.$low + theadcount$4.$low)), new $Uint64(x$329.$high - 0, x$329.$low - 1)) };
				c.nowblock = $append(c.nowblock, (x$331 = (x$332 = o(t$5), new $Uint64(x$332.$high + theadcount$4.$high, x$332.$low + theadcount$4.$low)), new $Uint64(x$331.$high - 0, x$331.$low - 1)));
				c.subblocks = $append(c.subblocks, how_many_subblocks_block(xx$6.Body));
				c.substmts = $append(c.substmts, how_many_substmts_block(xx$6.Body));
			}
			c.typefield = $appendSlice(c.typefield, stack$2);
		} else if ($assertType(_ref, ptrType$13, true)[1]) {
			xx$7 = $assertType((x), ptrType$13);
			while (true) {
				if (!((x$333 = c.substmts, x$334 = c.substmts.$length - 1 >> 0, ((x$334 < 0 || x$334 >= x$333.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$333.$array[x$333.$offset + x$334])) <= 0 && (x$335 = c.subblocks, x$336 = c.subblocks.$length - 1 >> 0, ((x$336 < 0 || x$336 >= x$335.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$335.$array[x$335.$offset + x$336])) <= 0)) { break; }
				c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
				c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
				c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
			}
			_index$13 = c.subblocks.$length - 1 >> 0;
			(x$338 = c.subblocks, ((_index$13 < 0 || _index$13 >= x$338.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$338.$array[x$338.$offset + _index$13] = ((x$337 = c.subblocks, ((_index$13 < 0 || _index$13 >= x$337.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$337.$array[x$337.$offset + _index$13])) - (1) >> 0)));
			uniform = ($interfaceIsEqual(xx$7.Init, $ifaceNil)) && ($interfaceIsEqual(xx$7.Post, $ifaceNil));
			$unused(uniform);
			t$6 = (x$339 = c.nowblock, x$340 = c.nowblock.$length - 1 >> 0, ((x$340 < 0 || x$340 >= x$339.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$339.$array[x$339.$offset + x$340]));
			theadcount$5 = new $Uint64(0, 0);
			_index$14 = c.nowblock.$length - 1 >> 0;
			(x$344 = c.nowblock, ((_index$14 < 0 || _index$14 >= x$344.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$344.$array[x$344.$offset + _index$14] = (x$341 = (x$342 = c.nowblock, ((_index$14 < 0 || _index$14 >= x$342.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$342.$array[x$342.$offset + _index$14])), x$343 = new $Uint64(0, 1), new $Uint64(x$341.$high + x$343.$high, x$341.$low + x$343.$low))));
			stack$3 = sliceType$1.nil;
			_ref$15 = xx$7.Init;
			if ($assertType(_ref$15, ptrType$2, true)[1]) {
				xxx$13 = $assertType(xx$7.Init, ptrType$2);
				_tuple$32 = $assertType(xxx$13.X, ptrType$48, true);
				id$12 = _tuple$32[0];
				ok$14 = _tuple$32[1];
				ident$16 = sliceType$4.nil;
				if (ok$14) {
					ident$16 = (new sliceType$4($stringToBytes(id$12.Name)));
				}
				$unused(ident$16);
				_key$87 = (x$345 = o(t$6), new $Uint64(x$345.$high + theadcount$5.$high, x$345.$low + theadcount$5.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$87)] = { k: _key$87, v: mapast.ExpressionNode(0, new $Uint64(0, 1)) };
				if (ok$14) {
					_key$88 = o((x$346 = o(t$6), new $Uint64(x$346.$high + theadcount$5.$high, x$346.$low + theadcount$5.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$88)] = { k: _key$88, v: ident$16 };
				} else {
					stack$3 = $appendSlice(new sliceType$1([o((x$347 = o(t$6), new $Uint64(x$347.$high + theadcount$5.$high, x$347.$low + theadcount$5.$low)))]), stack$3);
				}
				theadcount$5 = (x$348 = new $Uint64(0, 1), new $Uint64(theadcount$5.$high + x$348.$high, theadcount$5.$low + x$348.$low));
				c.skippedexpressions = c.skippedexpressions + (1) << 24 >>> 24;
			} else if ($assertType(_ref$15, ptrType$4, true)[1]) {
				xxx$14 = $assertType(xx$7.Init, ptrType$4);
				_tuple$33 = $assertType(xxx$14.X, ptrType$48, true);
				id$13 = _tuple$33[0];
				ok$15 = _tuple$33[1];
				ident$17 = sliceType$4.nil;
				if (ok$15) {
					ident$17 = (new sliceType$4($stringToBytes(id$13.Name)));
				}
				$unused(ident$17);
				_key$89 = (x$349 = o(t$6), new $Uint64(x$349.$high + theadcount$5.$high, x$349.$low + theadcount$5.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$89)] = { k: _key$89, v: mapast.IncDecStmtNode(bool2byte(!((xxx$14.Tok === 37)))) };
				if (ok$15) {
					_key$90 = o((x$350 = o(t$6), new $Uint64(x$350.$high + theadcount$5.$high, x$350.$low + theadcount$5.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$90)] = { k: _key$90, v: ident$17 };
				} else {
					stack$3 = $appendSlice(new sliceType$1([o((x$351 = o(t$6), new $Uint64(x$351.$high + theadcount$5.$high, x$351.$low + theadcount$5.$low)))]), stack$3);
				}
				theadcount$5 = (x$352 = new $Uint64(0, 1), new $Uint64(theadcount$5.$high + x$352.$high, theadcount$5.$low + x$352.$low));
				c.skippedincdecs = c.skippedincdecs + (1) << 24 >>> 24;
			} else if ($assertType(_ref$15, ptrType$9, true)[1]) {
				xxx$15 = $assertType(xx$7.Init, ptrType$9);
				_tuple$34 = $assertType(xxx$15.Chan, ptrType$48, true);
				id1$2 = _tuple$34[0];
				ok1$2 = _tuple$34[1];
				ident1$2 = sliceType$4.nil;
				if (ok1$2) {
					ident1$2 = (new sliceType$4($stringToBytes(id1$2.Name)));
				}
				_tuple$35 = $assertType(xxx$15.Value, ptrType$48, true);
				id2$6 = _tuple$35[0];
				ok2$6 = _tuple$35[1];
				ident2$2 = sliceType$4.nil;
				if (ok2$6) {
					ident2$2 = (new sliceType$4($stringToBytes(id2$6.Name)));
				}
				$unused(ident1$2);
				$unused(ident2$2);
				_key$91 = (x$353 = o(t$6), new $Uint64(x$353.$high + theadcount$5.$high, x$353.$low + theadcount$5.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$91)] = { k: _key$91, v: mapast.ExpressionNode(25, new $Uint64(0, 2)) };
				if (ok1$2) {
					_key$92 = o((x$354 = o(t$6), new $Uint64(x$354.$high + theadcount$5.$high, x$354.$low + theadcount$5.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$92)] = { k: _key$92, v: ident1$2 };
				} else {
					stack$3 = $appendSlice(new sliceType$1([o((x$355 = o(t$6), new $Uint64(x$355.$high + theadcount$5.$high, x$355.$low + theadcount$5.$low)))]), stack$3);
				}
				if (ok2$6) {
					_key$93 = (x$356 = o((x$357 = o(t$6), new $Uint64(x$357.$high + theadcount$5.$high, x$357.$low + theadcount$5.$low))), new $Uint64(x$356.$high + 0, x$356.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$93)] = { k: _key$93, v: ident2$2 };
				} else {
					stack$3 = $appendSlice(new sliceType$1([(x$358 = o((x$359 = o(t$6), new $Uint64(x$359.$high + theadcount$5.$high, x$359.$low + theadcount$5.$low))), new $Uint64(x$358.$high + 0, x$358.$low + 1))]), stack$3);
				}
				theadcount$5 = (x$360 = new $Uint64(0, 1), new $Uint64(theadcount$5.$high + x$360.$high, theadcount$5.$low + x$360.$low));
				c.skippedsends = c.skippedsends + (1) << 24 >>> 24;
			} else if ($assertType(_ref$15, ptrType$7, true)[1]) {
				xxx$16 = $assertType(xx$7.Init, ptrType$7);
				variant$11 = 0;
				_4 = xxx$16.Tok;
				if (_4 === (42)) {
					variant$11 = 0;
				} else if (_4 === (47)) {
					variant$11 = 1;
				} else if (_4 === (23)) {
					variant$11 = 3;
				} else if (_4 === (24)) {
					variant$11 = 4;
				} else if (_4 === (25)) {
					variant$11 = 5;
				} else if (_4 === (26)) {
					variant$11 = 6;
				} else if (_4 === (27)) {
					variant$11 = 7;
				} else if (_4 === (28)) {
					variant$11 = 8;
				} else if (_4 === (29)) {
					variant$11 = 9;
				} else if (_4 === (30)) {
					variant$11 = 10;
				} else if (_4 === (31)) {
					variant$11 = 11;
				} else if (_4 === (32)) {
					variant$11 = 12;
				} else if (_4 === (33)) {
					variant$11 = 2;
				}
				if (!((xxx$16.Lhs.$length === xxx$16.Rhs.$length))) {
					variant$11 = variant$11 + (15) << 24 >>> 24;
				}
				$unused(variant$11);
				l = (new $Uint64(0, xxx$16.Lhs.$length));
				_key$94 = (x$361 = o(t$6), new $Uint64(x$361.$high + theadcount$5.$high, x$361.$low + theadcount$5.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$94)] = { k: _key$94, v: mapast.AssignStmtNode(variant$11, (new $Uint64(0, (xxx$16.Lhs.$length + xxx$16.Rhs.$length >> 0)))) };
				_ref$16 = xxx$16.Lhs;
				_i$9 = 0;
				while (true) {
					if (!(_i$9 < _ref$16.$length)) { break; }
					i$7 = _i$9;
					ident$18 = sliceType$4.nil;
					_tuple$36 = $assertType((x$362 = xxx$16.Lhs, ((i$7 < 0 || i$7 >= x$362.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$362.$array[x$362.$offset + i$7])), ptrType$48, true);
					id$14 = _tuple$36[0];
					ok$16 = _tuple$36[1];
					if (ok$16) {
						ident$18 = (new sliceType$4($stringToBytes(id$14.Name)));
					}
					if (ok$16) {
						_key$95 = (x$363 = o((x$364 = o(t$6), new $Uint64(x$364.$high + theadcount$5.$high, x$364.$low + theadcount$5.$low))), x$365 = (new $Uint64(0, i$7)), new $Uint64(x$363.$high + x$365.$high, x$363.$low + x$365.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$95)] = { k: _key$95, v: ident$18 };
					} else {
						stack$3 = $appendSlice(new sliceType$1([(x$366 = o((x$367 = o(t$6), new $Uint64(x$367.$high + theadcount$5.$high, x$367.$low + theadcount$5.$low))), x$368 = (new $Uint64(0, i$7)), new $Uint64(x$366.$high + x$368.$high, x$366.$low + x$368.$low))]), stack$3);
					}
					_i$9++;
				}
				_ref$17 = xxx$16.Rhs;
				_i$10 = 0;
				while (true) {
					if (!(_i$10 < _ref$17.$length)) { break; }
					i$8 = _i$10;
					ident$19 = sliceType$4.nil;
					_tuple$37 = $assertType((x$369 = xxx$16.Rhs, ((i$8 < 0 || i$8 >= x$369.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$369.$array[x$369.$offset + i$8])), ptrType$48, true);
					id$15 = _tuple$37[0];
					ok$17 = _tuple$37[1];
					if (ok$17) {
						ident$19 = (new sliceType$4($stringToBytes(id$15.Name)));
					}
					if (ok$17) {
						_key$96 = (x$370 = (x$371 = o((x$372 = o(t$6), new $Uint64(x$372.$high + theadcount$5.$high, x$372.$low + theadcount$5.$low))), x$373 = (new $Uint64(0, i$8)), new $Uint64(x$371.$high + x$373.$high, x$371.$low + x$373.$low)), new $Uint64(x$370.$high + l.$high, x$370.$low + l.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$96)] = { k: _key$96, v: ident$19 };
					} else {
						stack$3 = $appendSlice(new sliceType$1([(x$374 = (x$375 = o((x$376 = o(t$6), new $Uint64(x$376.$high + theadcount$5.$high, x$376.$low + theadcount$5.$low))), x$377 = (new $Uint64(0, i$8)), new $Uint64(x$375.$high + x$377.$high, x$375.$low + x$377.$low)), new $Uint64(x$374.$high + l.$high, x$374.$low + l.$low))]), stack$3);
					}
					_i$10++;
				}
				theadcount$5 = (x$378 = new $Uint64(0, 1), new $Uint64(theadcount$5.$high + x$378.$high, theadcount$5.$low + x$378.$low));
				c.skippedassignments = c.skippedassignments + (1) << 24 >>> 24;
			}
			if (!uniform) {
				_key$97 = (x$379 = o(t$6), new $Uint64(x$379.$high + theadcount$5.$high, x$379.$low + theadcount$5.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$97)] = { k: _key$97, v: mapast.BranchStmtNode(0) };
				theadcount$5 = (x$380 = new $Uint64(0, 1), new $Uint64(theadcount$5.$high + x$380.$high, theadcount$5.$low + x$380.$low));
			}
			if (!($interfaceIsEqual(xx$7.Cond, $ifaceNil))) {
				_tuple$38 = $assertType(xx$7.Cond, ptrType$48, true);
				id$16 = _tuple$38[0];
				ok$18 = _tuple$38[1];
				ident$20 = sliceType$4.nil;
				if (ok$18) {
					ident$20 = (new sliceType$4($stringToBytes(id$16.Name)));
				}
				$unused(ident$20);
				_key$98 = (x$381 = o(t$6), new $Uint64(x$381.$high + theadcount$5.$high, x$381.$low + theadcount$5.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$98)] = { k: _key$98, v: mapast.ExpressionNode(0, new $Uint64(0, 1)) };
				if (ok$18) {
					_key$99 = o((x$382 = o(t$6), new $Uint64(x$382.$high + theadcount$5.$high, x$382.$low + theadcount$5.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$99)] = { k: _key$99, v: ident$20 };
				} else {
					stack$3 = $appendSlice(new sliceType$1([o((x$383 = o(t$6), new $Uint64(x$383.$high + theadcount$5.$high, x$383.$low + theadcount$5.$low)))]), stack$3);
				}
				theadcount$5 = (x$384 = new $Uint64(0, 1), new $Uint64(theadcount$5.$high + x$384.$high, theadcount$5.$low + x$384.$low));
			}
			if (!uniform) {
				_key$100 = (x$385 = o(t$6), new $Uint64(x$385.$high + theadcount$5.$high, x$385.$low + theadcount$5.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$100)] = { k: _key$100, v: mapast.BranchStmtNode(0) };
				theadcount$5 = (x$386 = new $Uint64(0, 1), new $Uint64(theadcount$5.$high + x$386.$high, theadcount$5.$low + x$386.$low));
			}
			_ref$18 = xx$7.Post;
			if ($assertType(_ref$18, ptrType$2, true)[1]) {
				xxx$17 = $assertType(xx$7.Post, ptrType$2);
				_tuple$39 = $assertType(xxx$17.X, ptrType$48, true);
				id$17 = _tuple$39[0];
				ok$19 = _tuple$39[1];
				ident$21 = sliceType$4.nil;
				if (ok$19) {
					ident$21 = (new sliceType$4($stringToBytes(id$17.Name)));
				}
				$unused(ident$21);
				_key$101 = (x$387 = o(t$6), new $Uint64(x$387.$high + theadcount$5.$high, x$387.$low + theadcount$5.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$101)] = { k: _key$101, v: mapast.ExpressionNode(0, new $Uint64(0, 1)) };
				if (ok$19) {
					_key$102 = o((x$388 = o(t$6), new $Uint64(x$388.$high + theadcount$5.$high, x$388.$low + theadcount$5.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$102)] = { k: _key$102, v: ident$21 };
				} else {
					stack$3 = $appendSlice(new sliceType$1([o((x$389 = o(t$6), new $Uint64(x$389.$high + theadcount$5.$high, x$389.$low + theadcount$5.$low)))]), stack$3);
				}
				theadcount$5 = (x$390 = new $Uint64(0, 1), new $Uint64(theadcount$5.$high + x$390.$high, theadcount$5.$low + x$390.$low));
				c.skippedexpressions = c.skippedexpressions + (1) << 24 >>> 24;
			} else if ($assertType(_ref$18, ptrType$4, true)[1]) {
				xxx$18 = $assertType(xx$7.Post, ptrType$4);
				_tuple$40 = $assertType(xxx$18.X, ptrType$48, true);
				id$18 = _tuple$40[0];
				ok$20 = _tuple$40[1];
				ident$22 = sliceType$4.nil;
				if (ok$20) {
					ident$22 = (new sliceType$4($stringToBytes(id$18.Name)));
				}
				$unused(ident$22);
				_key$103 = (x$391 = o(t$6), new $Uint64(x$391.$high + theadcount$5.$high, x$391.$low + theadcount$5.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$103)] = { k: _key$103, v: mapast.IncDecStmtNode(bool2byte(!((xxx$18.Tok === 37)))) };
				if (ok$20) {
					_key$104 = o((x$392 = o(t$6), new $Uint64(x$392.$high + theadcount$5.$high, x$392.$low + theadcount$5.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$104)] = { k: _key$104, v: ident$22 };
				} else {
					stack$3 = $appendSlice(new sliceType$1([o((x$393 = o(t$6), new $Uint64(x$393.$high + theadcount$5.$high, x$393.$low + theadcount$5.$low)))]), stack$3);
				}
				theadcount$5 = (x$394 = new $Uint64(0, 1), new $Uint64(theadcount$5.$high + x$394.$high, theadcount$5.$low + x$394.$low));
				c.skippedincdecs = c.skippedincdecs + (1) << 24 >>> 24;
			} else if ($assertType(_ref$18, ptrType$9, true)[1]) {
				xxx$19 = $assertType(xx$7.Post, ptrType$9);
				_tuple$41 = $assertType(xxx$19.Chan, ptrType$48, true);
				id1$3 = _tuple$41[0];
				ok1$3 = _tuple$41[1];
				ident1$3 = sliceType$4.nil;
				if (ok1$3) {
					ident1$3 = (new sliceType$4($stringToBytes(id1$3.Name)));
				}
				_tuple$42 = $assertType(xxx$19.Value, ptrType$48, true);
				id2$7 = _tuple$42[0];
				ok2$7 = _tuple$42[1];
				ident2$3 = sliceType$4.nil;
				if (ok2$7) {
					ident2$3 = (new sliceType$4($stringToBytes(id2$7.Name)));
				}
				$unused(ident1$3);
				$unused(ident2$3);
				_key$105 = (x$395 = o(t$6), new $Uint64(x$395.$high + theadcount$5.$high, x$395.$low + theadcount$5.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$105)] = { k: _key$105, v: mapast.ExpressionNode(25, new $Uint64(0, 2)) };
				if (ok1$3) {
					_key$106 = o((x$396 = o(t$6), new $Uint64(x$396.$high + theadcount$5.$high, x$396.$low + theadcount$5.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$106)] = { k: _key$106, v: ident1$3 };
				} else {
					stack$3 = $appendSlice(new sliceType$1([o((x$397 = o(t$6), new $Uint64(x$397.$high + theadcount$5.$high, x$397.$low + theadcount$5.$low)))]), stack$3);
				}
				if (ok2$7) {
					_key$107 = (x$398 = o((x$399 = o(t$6), new $Uint64(x$399.$high + theadcount$5.$high, x$399.$low + theadcount$5.$low))), new $Uint64(x$398.$high + 0, x$398.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$107)] = { k: _key$107, v: ident2$3 };
				} else {
					stack$3 = $appendSlice(new sliceType$1([(x$400 = o((x$401 = o(t$6), new $Uint64(x$401.$high + theadcount$5.$high, x$401.$low + theadcount$5.$low))), new $Uint64(x$400.$high + 0, x$400.$low + 1))]), stack$3);
				}
				theadcount$5 = (x$402 = new $Uint64(0, 1), new $Uint64(theadcount$5.$high + x$402.$high, theadcount$5.$low + x$402.$low));
				c.skippedsends = c.skippedsends + (1) << 24 >>> 24;
			} else if ($assertType(_ref$18, ptrType$7, true)[1]) {
				xxx$20 = $assertType(xx$7.Post, ptrType$7);
				variant$12 = 0;
				_5 = xxx$20.Tok;
				if (_5 === (42)) {
					variant$12 = 0;
				} else if (_5 === (47)) {
					variant$12 = 1;
				} else if (_5 === (23)) {
					variant$12 = 3;
				} else if (_5 === (24)) {
					variant$12 = 4;
				} else if (_5 === (25)) {
					variant$12 = 5;
				} else if (_5 === (26)) {
					variant$12 = 6;
				} else if (_5 === (27)) {
					variant$12 = 7;
				} else if (_5 === (28)) {
					variant$12 = 8;
				} else if (_5 === (29)) {
					variant$12 = 9;
				} else if (_5 === (30)) {
					variant$12 = 10;
				} else if (_5 === (31)) {
					variant$12 = 11;
				} else if (_5 === (32)) {
					variant$12 = 12;
				} else if (_5 === (33)) {
					variant$12 = 2;
				}
				if (!((xxx$20.Lhs.$length === xxx$20.Rhs.$length))) {
					variant$12 = variant$12 + (15) << 24 >>> 24;
				}
				l$1 = (new $Uint64(0, xxx$20.Lhs.$length));
				_key$108 = (x$403 = o(t$6), new $Uint64(x$403.$high + theadcount$5.$high, x$403.$low + theadcount$5.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$108)] = { k: _key$108, v: mapast.AssignStmtNode(variant$12, (new $Uint64(0, (xxx$20.Lhs.$length + xxx$20.Rhs.$length >> 0)))) };
				_ref$19 = xxx$20.Lhs;
				_i$11 = 0;
				while (true) {
					if (!(_i$11 < _ref$19.$length)) { break; }
					i$9 = _i$11;
					ident$23 = sliceType$4.nil;
					_tuple$43 = $assertType((x$404 = xxx$20.Lhs, ((i$9 < 0 || i$9 >= x$404.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$404.$array[x$404.$offset + i$9])), ptrType$48, true);
					id$19 = _tuple$43[0];
					ok$21 = _tuple$43[1];
					if (ok$21) {
						ident$23 = (new sliceType$4($stringToBytes(id$19.Name)));
					}
					if (ok$21) {
						_key$109 = (x$405 = o((x$406 = o(t$6), new $Uint64(x$406.$high + theadcount$5.$high, x$406.$low + theadcount$5.$low))), x$407 = (new $Uint64(0, i$9)), new $Uint64(x$405.$high + x$407.$high, x$405.$low + x$407.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$109)] = { k: _key$109, v: ident$23 };
					} else {
						stack$3 = $appendSlice(new sliceType$1([(x$408 = o((x$409 = o(t$6), new $Uint64(x$409.$high + theadcount$5.$high, x$409.$low + theadcount$5.$low))), x$410 = (new $Uint64(0, i$9)), new $Uint64(x$408.$high + x$410.$high, x$408.$low + x$410.$low))]), stack$3);
					}
					_i$11++;
				}
				_ref$20 = xxx$20.Rhs;
				_i$12 = 0;
				while (true) {
					if (!(_i$12 < _ref$20.$length)) { break; }
					i$10 = _i$12;
					ident$24 = sliceType$4.nil;
					_tuple$44 = $assertType((x$411 = xxx$20.Rhs, ((i$10 < 0 || i$10 >= x$411.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$411.$array[x$411.$offset + i$10])), ptrType$48, true);
					id$20 = _tuple$44[0];
					ok$22 = _tuple$44[1];
					if (ok$22) {
						ident$24 = (new sliceType$4($stringToBytes(id$20.Name)));
					}
					if (ok$22) {
						_key$110 = (x$412 = (x$413 = o((x$414 = o(t$6), new $Uint64(x$414.$high + theadcount$5.$high, x$414.$low + theadcount$5.$low))), x$415 = (new $Uint64(0, i$10)), new $Uint64(x$413.$high + x$415.$high, x$413.$low + x$415.$low)), new $Uint64(x$412.$high + l$1.$high, x$412.$low + l$1.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$110)] = { k: _key$110, v: ident$24 };
					} else {
						stack$3 = $appendSlice(new sliceType$1([(x$416 = (x$417 = o((x$418 = o(t$6), new $Uint64(x$418.$high + theadcount$5.$high, x$418.$low + theadcount$5.$low))), x$419 = (new $Uint64(0, i$10)), new $Uint64(x$417.$high + x$419.$high, x$417.$low + x$419.$low)), new $Uint64(x$416.$high + l$1.$high, x$416.$low + l$1.$low))]), stack$3);
					}
					_i$12++;
				}
				theadcount$5 = (x$420 = new $Uint64(0, 1), new $Uint64(theadcount$5.$high + x$420.$high, theadcount$5.$low + x$420.$low));
				c.skippedassignments = c.skippedassignments + (1) << 24 >>> 24;
			}
			_key$111 = xx$7.Body; (c.blocksstmts || $throwRuntimeError("assignment to entry in nil map"))[ptrType$18.keyFor(_key$111)] = { k: _key$111, v: (x$421 = o(t$6), new $Uint64(x$421.$high + theadcount$5.$high, x$421.$low + theadcount$5.$low)) };
			c.nowblock = $append(c.nowblock, (x$422 = o(t$6), new $Uint64(x$422.$high + theadcount$5.$high, x$422.$low + theadcount$5.$low)));
			c.subblocks = $append(c.subblocks, how_many_subblocks_block(xx$7.Body));
			c.substmts = $append(c.substmts, how_many_substmts_block(xx$7.Body));
			_key$112 = t$6; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$112)] = { k: _key$112, v: mapast.BlocOfCodeNode(4, theadcount$5) };
			c.typefield = $appendSlice(c.typefield, stack$3);
		} else if ($assertType(_ref, ptrType$15, true)[1]) {
			xx$8 = $assertType((x), ptrType$15);
			while (true) {
				if (!((x$423 = c.substmts, x$424 = c.substmts.$length - 1 >> 0, ((x$424 < 0 || x$424 >= x$423.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$423.$array[x$423.$offset + x$424])) <= 0 && (x$425 = c.subblocks, x$426 = c.subblocks.$length - 1 >> 0, ((x$426 < 0 || x$426 >= x$425.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$425.$array[x$425.$offset + x$426])) <= 0)) { break; }
				c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
				c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
				c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
			}
			_index$15 = c.subblocks.$length - 1 >> 0;
			(x$428 = c.subblocks, ((_index$15 < 0 || _index$15 >= x$428.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$428.$array[x$428.$offset + _index$15] = ((x$427 = c.subblocks, ((_index$15 < 0 || _index$15 >= x$427.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$427.$array[x$427.$offset + _index$15])) - (1) >> 0)));
			t$7 = (x$429 = c.nowblock, x$430 = c.nowblock.$length - 1 >> 0, ((x$430 < 0 || x$430 >= x$429.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$429.$array[x$429.$offset + x$430]));
			_key$113 = t$7; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$113)] = { k: _key$113, v: mapast.BlocOfCodeNode(3, (new $Uint64(0, (bool2byte(!($interfaceIsEqual(xx$8.Tag, $ifaceNil))) + (2 * bool2byte(!($interfaceIsEqual(xx$8.Init, $ifaceNil))) << 24 >>> 24) << 24 >>> 24)))) };
			_index$16 = c.nowblock.$length - 1 >> 0;
			(x$434 = c.nowblock, ((_index$16 < 0 || _index$16 >= x$434.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$434.$array[x$434.$offset + _index$16] = (x$431 = (x$432 = c.nowblock, ((_index$16 < 0 || _index$16 >= x$432.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$432.$array[x$432.$offset + _index$16])), x$433 = new $Uint64(0, 1), new $Uint64(x$431.$high + x$433.$high, x$431.$low + x$433.$low))));
			theadcount$6 = new $Uint64(0, 0);
			stack$4 = sliceType$1.nil;
			if (!($interfaceIsEqual(xx$8.Init, $ifaceNil))) {
				_ref$21 = xx$8.Init;
				if ($assertType(_ref$21, ptrType$2, true)[1]) {
					xxx$21 = $assertType(xx$8.Init, ptrType$2);
					_tuple$45 = $assertType(xxx$21.X, ptrType$48, true);
					id$21 = _tuple$45[0];
					ok$23 = _tuple$45[1];
					ident$25 = sliceType$4.nil;
					if (ok$23) {
						ident$25 = (new sliceType$4($stringToBytes(id$21.Name)));
					}
					$unused(ident$25);
					_key$114 = (x$435 = o(t$7), new $Uint64(x$435.$high + theadcount$6.$high, x$435.$low + theadcount$6.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$114)] = { k: _key$114, v: mapast.ExpressionNode(0, new $Uint64(0, 1)) };
					if (ok$23) {
						_key$115 = o((x$436 = o(t$7), new $Uint64(x$436.$high + theadcount$6.$high, x$436.$low + theadcount$6.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$115)] = { k: _key$115, v: ident$25 };
					} else {
						stack$4 = $appendSlice(new sliceType$1([o((x$437 = o(t$7), new $Uint64(x$437.$high + theadcount$6.$high, x$437.$low + theadcount$6.$low)))]), stack$4);
					}
					theadcount$6 = (x$438 = new $Uint64(0, 1), new $Uint64(theadcount$6.$high + x$438.$high, theadcount$6.$low + x$438.$low));
					c.skippedexpressions = c.skippedexpressions + (1) << 24 >>> 24;
				} else if ($assertType(_ref$21, ptrType$4, true)[1]) {
					xxx$22 = $assertType(xx$8.Init, ptrType$4);
					_tuple$46 = $assertType(xxx$22.X, ptrType$48, true);
					id$22 = _tuple$46[0];
					ok$24 = _tuple$46[1];
					ident$26 = sliceType$4.nil;
					if (ok$24) {
						ident$26 = (new sliceType$4($stringToBytes(id$22.Name)));
					}
					$unused(ident$26);
					_key$116 = (x$439 = o(t$7), new $Uint64(x$439.$high + theadcount$6.$high, x$439.$low + theadcount$6.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$116)] = { k: _key$116, v: mapast.IncDecStmtNode(bool2byte(!((xxx$22.Tok === 37)))) };
					if (ok$24) {
						_key$117 = o((x$440 = o(t$7), new $Uint64(x$440.$high + theadcount$6.$high, x$440.$low + theadcount$6.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$117)] = { k: _key$117, v: ident$26 };
					} else {
						stack$4 = $appendSlice(new sliceType$1([o((x$441 = o(t$7), new $Uint64(x$441.$high + theadcount$6.$high, x$441.$low + theadcount$6.$low)))]), stack$4);
					}
					theadcount$6 = (x$442 = new $Uint64(0, 1), new $Uint64(theadcount$6.$high + x$442.$high, theadcount$6.$low + x$442.$low));
					c.skippedincdecs = c.skippedincdecs + (1) << 24 >>> 24;
				} else if ($assertType(_ref$21, ptrType$9, true)[1]) {
					xxx$23 = $assertType(xx$8.Init, ptrType$9);
					_tuple$47 = $assertType(xxx$23.Chan, ptrType$48, true);
					id1$4 = _tuple$47[0];
					ok1$4 = _tuple$47[1];
					ident1$4 = sliceType$4.nil;
					if (ok1$4) {
						ident1$4 = (new sliceType$4($stringToBytes(id1$4.Name)));
					}
					_tuple$48 = $assertType(xxx$23.Value, ptrType$48, true);
					id2$8 = _tuple$48[0];
					ok2$8 = _tuple$48[1];
					ident2$4 = sliceType$4.nil;
					if (ok2$8) {
						ident2$4 = (new sliceType$4($stringToBytes(id2$8.Name)));
					}
					$unused(ident1$4);
					$unused(ident2$4);
					_key$118 = (x$443 = o(t$7), new $Uint64(x$443.$high + theadcount$6.$high, x$443.$low + theadcount$6.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$118)] = { k: _key$118, v: mapast.ExpressionNode(25, new $Uint64(0, 2)) };
					if (ok1$4) {
						_key$119 = o((x$444 = o(t$7), new $Uint64(x$444.$high + theadcount$6.$high, x$444.$low + theadcount$6.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$119)] = { k: _key$119, v: ident1$4 };
					} else {
						stack$4 = $appendSlice(new sliceType$1([o((x$445 = o(t$7), new $Uint64(x$445.$high + theadcount$6.$high, x$445.$low + theadcount$6.$low)))]), stack$4);
					}
					if (ok2$8) {
						_key$120 = (x$446 = o((x$447 = o(t$7), new $Uint64(x$447.$high + theadcount$6.$high, x$447.$low + theadcount$6.$low))), new $Uint64(x$446.$high + 0, x$446.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$120)] = { k: _key$120, v: ident2$4 };
					} else {
						stack$4 = $appendSlice(new sliceType$1([(x$448 = o((x$449 = o(t$7), new $Uint64(x$449.$high + theadcount$6.$high, x$449.$low + theadcount$6.$low))), new $Uint64(x$448.$high + 0, x$448.$low + 1))]), stack$4);
					}
					theadcount$6 = (x$450 = new $Uint64(0, 1), new $Uint64(theadcount$6.$high + x$450.$high, theadcount$6.$low + x$450.$low));
					c.skippedsends = c.skippedsends + (1) << 24 >>> 24;
				} else if ($assertType(_ref$21, ptrType$7, true)[1]) {
					xxx$24 = $assertType(xx$8.Init, ptrType$7);
					variant$13 = 0;
					_6 = xxx$24.Tok;
					if (_6 === (42)) {
						variant$13 = 0;
					} else if (_6 === (47)) {
						variant$13 = 1;
					} else if (_6 === (23)) {
						variant$13 = 3;
					} else if (_6 === (24)) {
						variant$13 = 4;
					} else if (_6 === (25)) {
						variant$13 = 5;
					} else if (_6 === (26)) {
						variant$13 = 6;
					} else if (_6 === (27)) {
						variant$13 = 7;
					} else if (_6 === (28)) {
						variant$13 = 8;
					} else if (_6 === (29)) {
						variant$13 = 9;
					} else if (_6 === (30)) {
						variant$13 = 10;
					} else if (_6 === (31)) {
						variant$13 = 11;
					} else if (_6 === (32)) {
						variant$13 = 12;
					} else if (_6 === (33)) {
						variant$13 = 2;
					}
					if (!((xxx$24.Lhs.$length === xxx$24.Rhs.$length))) {
						variant$13 = variant$13 + (15) << 24 >>> 24;
					}
					l$2 = (new $Uint64(0, xxx$24.Lhs.$length));
					_key$121 = (x$451 = o(t$7), new $Uint64(x$451.$high + theadcount$6.$high, x$451.$low + theadcount$6.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$121)] = { k: _key$121, v: mapast.AssignStmtNode(variant$13, (new $Uint64(0, (xxx$24.Lhs.$length + xxx$24.Rhs.$length >> 0)))) };
					_ref$22 = xxx$24.Lhs;
					_i$13 = 0;
					while (true) {
						if (!(_i$13 < _ref$22.$length)) { break; }
						i$11 = _i$13;
						ident$27 = sliceType$4.nil;
						_tuple$49 = $assertType((x$452 = xxx$24.Lhs, ((i$11 < 0 || i$11 >= x$452.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$452.$array[x$452.$offset + i$11])), ptrType$48, true);
						id$23 = _tuple$49[0];
						ok$25 = _tuple$49[1];
						if (ok$25) {
							ident$27 = (new sliceType$4($stringToBytes(id$23.Name)));
						}
						if (ok$25) {
							_key$122 = (x$453 = o((x$454 = o(t$7), new $Uint64(x$454.$high + theadcount$6.$high, x$454.$low + theadcount$6.$low))), x$455 = (new $Uint64(0, i$11)), new $Uint64(x$453.$high + x$455.$high, x$453.$low + x$455.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$122)] = { k: _key$122, v: ident$27 };
						} else {
							stack$4 = $appendSlice(new sliceType$1([(x$456 = o((x$457 = o(t$7), new $Uint64(x$457.$high + theadcount$6.$high, x$457.$low + theadcount$6.$low))), x$458 = (new $Uint64(0, i$11)), new $Uint64(x$456.$high + x$458.$high, x$456.$low + x$458.$low))]), stack$4);
						}
						_i$13++;
					}
					_ref$23 = xxx$24.Rhs;
					_i$14 = 0;
					while (true) {
						if (!(_i$14 < _ref$23.$length)) { break; }
						i$12 = _i$14;
						ident$28 = sliceType$4.nil;
						_tuple$50 = $assertType((x$459 = xxx$24.Rhs, ((i$12 < 0 || i$12 >= x$459.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$459.$array[x$459.$offset + i$12])), ptrType$48, true);
						id$24 = _tuple$50[0];
						ok$26 = _tuple$50[1];
						if (ok$26) {
							ident$28 = (new sliceType$4($stringToBytes(id$24.Name)));
						}
						if (ok$26) {
							_key$123 = (x$460 = (x$461 = o((x$462 = o(t$7), new $Uint64(x$462.$high + theadcount$6.$high, x$462.$low + theadcount$6.$low))), x$463 = (new $Uint64(0, i$12)), new $Uint64(x$461.$high + x$463.$high, x$461.$low + x$463.$low)), new $Uint64(x$460.$high + l$2.$high, x$460.$low + l$2.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$123)] = { k: _key$123, v: ident$28 };
						} else {
							stack$4 = $appendSlice(new sliceType$1([(x$464 = (x$465 = o((x$466 = o(t$7), new $Uint64(x$466.$high + theadcount$6.$high, x$466.$low + theadcount$6.$low))), x$467 = (new $Uint64(0, i$12)), new $Uint64(x$465.$high + x$467.$high, x$465.$low + x$467.$low)), new $Uint64(x$464.$high + l$2.$high, x$464.$low + l$2.$low))]), stack$4);
						}
						_i$14++;
					}
					theadcount$6 = (x$468 = new $Uint64(0, 1), new $Uint64(theadcount$6.$high + x$468.$high, theadcount$6.$low + x$468.$low));
					c.skippedassignments = c.skippedassignments + (1) << 24 >>> 24;
				}
				_key$124 = (x$469 = o(t$7), new $Uint64(x$469.$high + theadcount$6.$high, x$469.$low + theadcount$6.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$124)] = { k: _key$124, v: mapast.BranchStmtNode(0) };
				theadcount$6 = (x$470 = new $Uint64(0, 1), new $Uint64(theadcount$6.$high + x$470.$high, theadcount$6.$low + x$470.$low));
			}
			if (!($interfaceIsEqual(xx$8.Tag, $ifaceNil))) {
				ident$29 = sliceType$4.nil;
				_tuple$51 = $assertType(xx$8.Tag, ptrType$48, true);
				id$25 = _tuple$51[0];
				ok$27 = _tuple$51[1];
				if (ok$27) {
					ident$29 = (new sliceType$4($stringToBytes(id$25.Name)));
				} else {
					_tuple$52 = $assertType(xx$8.Tag, ptrType$26, true);
					id$26 = _tuple$52[0];
					ok2$9 = _tuple$52[1];
					if (ok2$9) {
						ident$29 = (new sliceType$4($stringToBytes(id$26.Value)));
						ok$27 = true;
						_key$125 = id$26; (c.skippedbalits || $throwRuntimeError("assignment to entry in nil map"))[ptrType$26.keyFor(_key$125)] = { k: _key$125, v: new structType.ptr() };
					}
				}
				if (ok$27) {
					_key$126 = (x$471 = o(t$7), new $Uint64(x$471.$high + theadcount$6.$high, x$471.$low + theadcount$6.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$126)] = { k: _key$126, v: mapast.ExpressionNode(34, new $Uint64(0, 1)) };
					_key$127 = o((x$472 = o(t$7), new $Uint64(x$472.$high + theadcount$6.$high, x$472.$low + theadcount$6.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$127)] = { k: _key$127, v: ident$29 };
				} else {
					stack$4 = $appendSlice(new sliceType$1([(x$473 = o(t$7), new $Uint64(x$473.$high + theadcount$6.$high, x$473.$low + theadcount$6.$low))]), stack$4);
				}
				theadcount$6 = (x$474 = new $Uint64(0, 1), new $Uint64(theadcount$6.$high + x$474.$high, theadcount$6.$low + x$474.$low));
			}
			_key$128 = xx$8.Body; (c.blocksstmts || $throwRuntimeError("assignment to entry in nil map"))[ptrType$18.keyFor(_key$128)] = { k: _key$128, v: (x$475 = o(t$7), new $Uint64(x$475.$high + theadcount$6.$high, x$475.$low + theadcount$6.$low)) };
			c.nowblock = $append(c.nowblock, (x$476 = o(t$7), new $Uint64(x$476.$high + theadcount$6.$high, x$476.$low + theadcount$6.$low)));
			c.subblocks = $append(c.subblocks, how_many_subblocks_block(xx$8.Body));
			c.substmts = $append(c.substmts, 0);
			c.typefield = $appendSlice(c.typefield, stack$4);
		} else if ($assertType(_ref, ptrType$17, true)[1]) {
			xx$9 = $assertType((x), ptrType$17);
			while (true) {
				if (!((x$477 = c.substmts, x$478 = c.substmts.$length - 1 >> 0, ((x$478 < 0 || x$478 >= x$477.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$477.$array[x$477.$offset + x$478])) <= 0 && (x$479 = c.subblocks, x$480 = c.subblocks.$length - 1 >> 0, ((x$480 < 0 || x$480 >= x$479.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$479.$array[x$479.$offset + x$480])) <= 0)) { break; }
				c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
				c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
				c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
			}
			_index$17 = c.subblocks.$length - 1 >> 0;
			(x$482 = c.subblocks, ((_index$17 < 0 || _index$17 >= x$482.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$482.$array[x$482.$offset + _index$17] = ((x$481 = c.subblocks, ((_index$17 < 0 || _index$17 >= x$481.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$481.$array[x$481.$offset + _index$17])) - (1) >> 0)));
			t$8 = (x$483 = c.nowblock, x$484 = c.nowblock.$length - 1 >> 0, ((x$484 < 0 || x$484 >= x$483.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$483.$array[x$483.$offset + x$484]));
			_key$129 = t$8; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$129)] = { k: _key$129, v: mapast.BlocOfCodeNode(6, (x$485 = $mul64(new $Uint64(0, 2), (new $Uint64(0, bool2byte(!($interfaceIsEqual(xx$9.Init, $ifaceNil)))))), new $Uint64(0 + x$485.$high, 1 + x$485.$low))) };
			_index$18 = c.nowblock.$length - 1 >> 0;
			(x$489 = c.nowblock, ((_index$18 < 0 || _index$18 >= x$489.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$489.$array[x$489.$offset + _index$18] = (x$486 = (x$487 = c.nowblock, ((_index$18 < 0 || _index$18 >= x$487.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$487.$array[x$487.$offset + _index$18])), x$488 = new $Uint64(0, 1), new $Uint64(x$486.$high + x$488.$high, x$486.$low + x$488.$low))));
			theadcount$7 = new $Uint64(0, 0);
			stack$5 = sliceType$1.nil;
			ident$30 = sliceType$4.nil;
			ok$28 = false;
			if (!($interfaceIsEqual(xx$9.Init, $ifaceNil))) {
				_ref$24 = xx$9.Init;
				if ($assertType(_ref$24, ptrType$2, true)[1]) {
					xxx$25 = $assertType(xx$9.Init, ptrType$2);
					_tuple$53 = $assertType(xxx$25.X, ptrType$48, true);
					id$27 = _tuple$53[0];
					ok$29 = _tuple$53[1];
					ident$31 = sliceType$4.nil;
					if (ok$29) {
						ident$31 = (new sliceType$4($stringToBytes(id$27.Name)));
					}
					$unused(ident$31);
					_key$130 = (x$490 = o(t$8), new $Uint64(x$490.$high + theadcount$7.$high, x$490.$low + theadcount$7.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$130)] = { k: _key$130, v: mapast.ExpressionNode(0, new $Uint64(0, 1)) };
					if (ok$29) {
						_key$131 = o((x$491 = o(t$8), new $Uint64(x$491.$high + theadcount$7.$high, x$491.$low + theadcount$7.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$131)] = { k: _key$131, v: ident$31 };
					} else {
						stack$5 = $appendSlice(new sliceType$1([o((x$492 = o(t$8), new $Uint64(x$492.$high + theadcount$7.$high, x$492.$low + theadcount$7.$low)))]), stack$5);
					}
					theadcount$7 = (x$493 = new $Uint64(0, 1), new $Uint64(theadcount$7.$high + x$493.$high, theadcount$7.$low + x$493.$low));
					c.skippedexpressions = c.skippedexpressions + (1) << 24 >>> 24;
				} else if ($assertType(_ref$24, ptrType$4, true)[1]) {
					xxx$26 = $assertType(xx$9.Init, ptrType$4);
					_tuple$54 = $assertType(xxx$26.X, ptrType$48, true);
					id$28 = _tuple$54[0];
					ok$30 = _tuple$54[1];
					ident$32 = sliceType$4.nil;
					if (ok$30) {
						ident$32 = (new sliceType$4($stringToBytes(id$28.Name)));
					}
					$unused(ident$32);
					_key$132 = (x$494 = o(t$8), new $Uint64(x$494.$high + theadcount$7.$high, x$494.$low + theadcount$7.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$132)] = { k: _key$132, v: mapast.IncDecStmtNode(bool2byte(!((xxx$26.Tok === 37)))) };
					if (ok$30) {
						_key$133 = o((x$495 = o(t$8), new $Uint64(x$495.$high + theadcount$7.$high, x$495.$low + theadcount$7.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$133)] = { k: _key$133, v: ident$32 };
					} else {
						stack$5 = $appendSlice(new sliceType$1([o((x$496 = o(t$8), new $Uint64(x$496.$high + theadcount$7.$high, x$496.$low + theadcount$7.$low)))]), stack$5);
					}
					theadcount$7 = (x$497 = new $Uint64(0, 1), new $Uint64(theadcount$7.$high + x$497.$high, theadcount$7.$low + x$497.$low));
					c.skippedincdecs = c.skippedincdecs + (1) << 24 >>> 24;
				} else if ($assertType(_ref$24, ptrType$9, true)[1]) {
					xxx$27 = $assertType(xx$9.Init, ptrType$9);
					_tuple$55 = $assertType(xxx$27.Chan, ptrType$48, true);
					id1$5 = _tuple$55[0];
					ok1$5 = _tuple$55[1];
					ident1$5 = sliceType$4.nil;
					if (ok1$5) {
						ident1$5 = (new sliceType$4($stringToBytes(id1$5.Name)));
					}
					_tuple$56 = $assertType(xxx$27.Value, ptrType$48, true);
					id2$9 = _tuple$56[0];
					ok2$10 = _tuple$56[1];
					ident2$5 = sliceType$4.nil;
					if (ok2$10) {
						ident2$5 = (new sliceType$4($stringToBytes(id2$9.Name)));
					}
					$unused(ident1$5);
					$unused(ident2$5);
					_key$134 = (x$498 = o(t$8), new $Uint64(x$498.$high + theadcount$7.$high, x$498.$low + theadcount$7.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$134)] = { k: _key$134, v: mapast.ExpressionNode(25, new $Uint64(0, 2)) };
					if (ok1$5) {
						_key$135 = o((x$499 = o(t$8), new $Uint64(x$499.$high + theadcount$7.$high, x$499.$low + theadcount$7.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$135)] = { k: _key$135, v: ident1$5 };
					} else {
						stack$5 = $appendSlice(new sliceType$1([o((x$500 = o(t$8), new $Uint64(x$500.$high + theadcount$7.$high, x$500.$low + theadcount$7.$low)))]), stack$5);
					}
					if (ok2$10) {
						_key$136 = (x$501 = o((x$502 = o(t$8), new $Uint64(x$502.$high + theadcount$7.$high, x$502.$low + theadcount$7.$low))), new $Uint64(x$501.$high + 0, x$501.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$136)] = { k: _key$136, v: ident2$5 };
					} else {
						stack$5 = $appendSlice(new sliceType$1([(x$503 = o((x$504 = o(t$8), new $Uint64(x$504.$high + theadcount$7.$high, x$504.$low + theadcount$7.$low))), new $Uint64(x$503.$high + 0, x$503.$low + 1))]), stack$5);
					}
					theadcount$7 = (x$505 = new $Uint64(0, 1), new $Uint64(theadcount$7.$high + x$505.$high, theadcount$7.$low + x$505.$low));
					c.skippedsends = c.skippedsends + (1) << 24 >>> 24;
				} else if ($assertType(_ref$24, ptrType$7, true)[1]) {
					xxx$28 = $assertType(xx$9.Init, ptrType$7);
					variant$14 = 0;
					_7 = xxx$28.Tok;
					if (_7 === (42)) {
						variant$14 = 0;
					} else if (_7 === (47)) {
						variant$14 = 1;
					} else if (_7 === (23)) {
						variant$14 = 3;
					} else if (_7 === (24)) {
						variant$14 = 4;
					} else if (_7 === (25)) {
						variant$14 = 5;
					} else if (_7 === (26)) {
						variant$14 = 6;
					} else if (_7 === (27)) {
						variant$14 = 7;
					} else if (_7 === (28)) {
						variant$14 = 8;
					} else if (_7 === (29)) {
						variant$14 = 9;
					} else if (_7 === (30)) {
						variant$14 = 10;
					} else if (_7 === (31)) {
						variant$14 = 11;
					} else if (_7 === (32)) {
						variant$14 = 12;
					} else if (_7 === (33)) {
						variant$14 = 2;
					}
					if (!((xxx$28.Lhs.$length === xxx$28.Rhs.$length))) {
						variant$14 = variant$14 + (15) << 24 >>> 24;
					}
					l$3 = (new $Uint64(0, xxx$28.Lhs.$length));
					_key$137 = (x$506 = o(t$8), new $Uint64(x$506.$high + theadcount$7.$high, x$506.$low + theadcount$7.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$137)] = { k: _key$137, v: mapast.AssignStmtNode(variant$14, (new $Uint64(0, (xxx$28.Lhs.$length + xxx$28.Rhs.$length >> 0)))) };
					_ref$25 = xxx$28.Lhs;
					_i$15 = 0;
					while (true) {
						if (!(_i$15 < _ref$25.$length)) { break; }
						i$13 = _i$15;
						ident$33 = sliceType$4.nil;
						_tuple$57 = $assertType((x$507 = xxx$28.Lhs, ((i$13 < 0 || i$13 >= x$507.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$507.$array[x$507.$offset + i$13])), ptrType$48, true);
						id$29 = _tuple$57[0];
						ok$31 = _tuple$57[1];
						if (ok$31) {
							ident$33 = (new sliceType$4($stringToBytes(id$29.Name)));
						}
						if (ok$31) {
							_key$138 = (x$508 = o((x$509 = o(t$8), new $Uint64(x$509.$high + theadcount$7.$high, x$509.$low + theadcount$7.$low))), x$510 = (new $Uint64(0, i$13)), new $Uint64(x$508.$high + x$510.$high, x$508.$low + x$510.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$138)] = { k: _key$138, v: ident$33 };
						} else {
							stack$5 = $appendSlice(new sliceType$1([(x$511 = o((x$512 = o(t$8), new $Uint64(x$512.$high + theadcount$7.$high, x$512.$low + theadcount$7.$low))), x$513 = (new $Uint64(0, i$13)), new $Uint64(x$511.$high + x$513.$high, x$511.$low + x$513.$low))]), stack$5);
						}
						_i$15++;
					}
					_ref$26 = xxx$28.Rhs;
					_i$16 = 0;
					while (true) {
						if (!(_i$16 < _ref$26.$length)) { break; }
						i$14 = _i$16;
						ident$34 = sliceType$4.nil;
						_tuple$58 = $assertType((x$514 = xxx$28.Rhs, ((i$14 < 0 || i$14 >= x$514.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$514.$array[x$514.$offset + i$14])), ptrType$48, true);
						id$30 = _tuple$58[0];
						ok$32 = _tuple$58[1];
						if (ok$32) {
							ident$34 = (new sliceType$4($stringToBytes(id$30.Name)));
						}
						if (ok$32) {
							_key$139 = (x$515 = (x$516 = o((x$517 = o(t$8), new $Uint64(x$517.$high + theadcount$7.$high, x$517.$low + theadcount$7.$low))), x$518 = (new $Uint64(0, i$14)), new $Uint64(x$516.$high + x$518.$high, x$516.$low + x$518.$low)), new $Uint64(x$515.$high + l$3.$high, x$515.$low + l$3.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$139)] = { k: _key$139, v: ident$34 };
						} else {
							stack$5 = $appendSlice(new sliceType$1([(x$519 = (x$520 = o((x$521 = o(t$8), new $Uint64(x$521.$high + theadcount$7.$high, x$521.$low + theadcount$7.$low))), x$522 = (new $Uint64(0, i$14)), new $Uint64(x$520.$high + x$522.$high, x$520.$low + x$522.$low)), new $Uint64(x$519.$high + l$3.$high, x$519.$low + l$3.$low))]), stack$5);
						}
						_i$16++;
					}
					theadcount$7 = (x$523 = new $Uint64(0, 1), new $Uint64(theadcount$7.$high + x$523.$high, theadcount$7.$low + x$523.$low));
					c.skippedassignments = c.skippedassignments + (1) << 24 >>> 24;
				}
				_key$140 = (x$524 = o(t$8), new $Uint64(x$524.$high + theadcount$7.$high, x$524.$low + theadcount$7.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$140)] = { k: _key$140, v: mapast.BranchStmtNode(0) };
				theadcount$7 = (x$525 = new $Uint64(0, 1), new $Uint64(theadcount$7.$high + x$525.$high, theadcount$7.$low + x$525.$low));
			}
			_tuple$59 = $assertType(xx$9.Assign, ptrType$2, true);
			ok$28 = _tuple$59[1];
			if (ok$28) {
				_tuple$60 = $assertType($assertType($assertType(xx$9.Assign, ptrType$2).X, ptrType$38).X, ptrType$48, true);
				id$31 = _tuple$60[0];
				ok$33 = _tuple$60[1];
				if (ok$33) {
					ident$30 = (new sliceType$4($stringToBytes(id$31.Name)));
				}
				if (ok$33) {
					_key$141 = (x$526 = o(t$8), new $Uint64(x$526.$high + theadcount$7.$high, x$526.$low + theadcount$7.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$141)] = { k: _key$141, v: mapast.ExpressionNode(29, new $Uint64(0, 1)) };
					_key$142 = o((x$527 = o(t$8), new $Uint64(x$527.$high + theadcount$7.$high, x$527.$low + theadcount$7.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$142)] = { k: _key$142, v: ident$30 };
				} else {
					stack$5 = $appendSlice(new sliceType$1([(x$528 = o(t$8), new $Uint64(x$528.$high + theadcount$7.$high, x$528.$low + theadcount$7.$low))]), stack$5);
				}
				theadcount$7 = (x$529 = new $Uint64(0, 1), new $Uint64(theadcount$7.$high + x$529.$high, theadcount$7.$low + x$529.$low));
				c.skippedexpressions = c.skippedexpressions + (1) << 24 >>> 24;
			} else {
				xxx$29 = $assertType(xx$9.Assign, ptrType$7);
				variant$15 = 0;
				_8 = xxx$29.Tok;
				if (_8 === (42)) {
					variant$15 = 0;
				} else if (_8 === (47)) {
					variant$15 = 1;
				} else if (_8 === (23)) {
					variant$15 = 3;
				} else if (_8 === (24)) {
					variant$15 = 4;
				} else if (_8 === (25)) {
					variant$15 = 5;
				} else if (_8 === (26)) {
					variant$15 = 6;
				} else if (_8 === (27)) {
					variant$15 = 7;
				} else if (_8 === (28)) {
					variant$15 = 8;
				} else if (_8 === (29)) {
					variant$15 = 9;
				} else if (_8 === (30)) {
					variant$15 = 10;
				} else if (_8 === (31)) {
					variant$15 = 11;
				} else if (_8 === (32)) {
					variant$15 = 12;
				} else if (_8 === (33)) {
					variant$15 = 2;
				}
				if (!((xxx$29.Lhs.$length === xxx$29.Rhs.$length))) {
					variant$15 = variant$15 + (15) << 24 >>> 24;
				}
				l$4 = (new $Uint64(0, xxx$29.Lhs.$length));
				_key$143 = (x$530 = o(t$8), new $Uint64(x$530.$high + theadcount$7.$high, x$530.$low + theadcount$7.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$143)] = { k: _key$143, v: mapast.AssignStmtNode(variant$15, (new $Uint64(0, (xxx$29.Lhs.$length + xxx$29.Rhs.$length >> 0)))) };
				_ref$27 = xxx$29.Lhs;
				_i$17 = 0;
				while (true) {
					if (!(_i$17 < _ref$27.$length)) { break; }
					i$15 = _i$17;
					ident$35 = sliceType$4.nil;
					_tuple$61 = $assertType((x$531 = xxx$29.Lhs, ((i$15 < 0 || i$15 >= x$531.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$531.$array[x$531.$offset + i$15])), ptrType$48, true);
					id$32 = _tuple$61[0];
					ok$34 = _tuple$61[1];
					if (ok$34) {
						ident$35 = (new sliceType$4($stringToBytes(id$32.Name)));
					}
					if (ok$34) {
						_key$144 = (x$532 = o((x$533 = o(t$8), new $Uint64(x$533.$high + theadcount$7.$high, x$533.$low + theadcount$7.$low))), x$534 = (new $Uint64(0, i$15)), new $Uint64(x$532.$high + x$534.$high, x$532.$low + x$534.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$144)] = { k: _key$144, v: ident$35 };
					} else {
						stack$5 = $appendSlice(new sliceType$1([(x$535 = o((x$536 = o(t$8), new $Uint64(x$536.$high + theadcount$7.$high, x$536.$low + theadcount$7.$low))), x$537 = (new $Uint64(0, i$15)), new $Uint64(x$535.$high + x$537.$high, x$535.$low + x$537.$low))]), stack$5);
					}
					_i$17++;
				}
				_ref$28 = xxx$29.Rhs;
				_i$18 = 0;
				while (true) {
					if (!(_i$18 < _ref$28.$length)) { break; }
					i$16 = _i$18;
					ident$36 = sliceType$4.nil;
					_tuple$62 = $assertType((x$538 = xxx$29.Rhs, ((i$16 < 0 || i$16 >= x$538.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$538.$array[x$538.$offset + i$16])), ptrType$48, true);
					id$33 = _tuple$62[0];
					ok$35 = _tuple$62[1];
					if (ok$35) {
						ident$36 = (new sliceType$4($stringToBytes(id$33.Name)));
					}
					if (ok$35) {
						_key$145 = (x$539 = (x$540 = o((x$541 = o(t$8), new $Uint64(x$541.$high + theadcount$7.$high, x$541.$low + theadcount$7.$low))), x$542 = (new $Uint64(0, i$16)), new $Uint64(x$540.$high + x$542.$high, x$540.$low + x$542.$low)), new $Uint64(x$539.$high + l$4.$high, x$539.$low + l$4.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$145)] = { k: _key$145, v: ident$36 };
					} else {
						stack$5 = $appendSlice(new sliceType$1([(x$543 = (x$544 = o((x$545 = o(t$8), new $Uint64(x$545.$high + theadcount$7.$high, x$545.$low + theadcount$7.$low))), x$546 = (new $Uint64(0, i$16)), new $Uint64(x$544.$high + x$546.$high, x$544.$low + x$546.$low)), new $Uint64(x$543.$high + l$4.$high, x$543.$low + l$4.$low))]), stack$5);
					}
					_i$18++;
				}
				theadcount$7 = (x$547 = new $Uint64(0, 1), new $Uint64(theadcount$7.$high + x$547.$high, theadcount$7.$low + x$547.$low));
				c.skippedassignments = c.skippedassignments + (1) << 24 >>> 24;
			}
			_key$146 = xx$9.Body; (c.blocksstmts || $throwRuntimeError("assignment to entry in nil map"))[ptrType$18.keyFor(_key$146)] = { k: _key$146, v: (x$548 = o(t$8), new $Uint64(x$548.$high + theadcount$7.$high, x$548.$low + theadcount$7.$low)) };
			c.nowblock = $append(c.nowblock, (x$549 = o(t$8), new $Uint64(x$549.$high + theadcount$7.$high, x$549.$low + theadcount$7.$low)));
			c.subblocks = $append(c.subblocks, how_many_subblocks_block(xx$9.Body));
			c.substmts = $append(c.substmts, 0);
			c.typefield = $appendSlice(c.typefield, stack$5);
		} else if ($assertType(_ref, ptrType$16, true)[1]) {
			xx$10 = $assertType((x), ptrType$16);
			while (true) {
				if (!((x$550 = c.substmts, x$551 = c.substmts.$length - 1 >> 0, ((x$551 < 0 || x$551 >= x$550.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$550.$array[x$550.$offset + x$551])) <= 0 && (x$552 = c.subblocks, x$553 = c.subblocks.$length - 1 >> 0, ((x$553 < 0 || x$553 >= x$552.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$552.$array[x$552.$offset + x$553])) <= 0)) { break; }
				c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
				c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
				c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
			}
			_index$19 = c.subblocks.$length - 1 >> 0;
			(x$555 = c.subblocks, ((_index$19 < 0 || _index$19 >= x$555.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$555.$array[x$555.$offset + _index$19] = ((x$554 = c.subblocks, ((_index$19 < 0 || _index$19 >= x$554.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$554.$array[x$554.$offset + _index$19])) - (1) >> 0)));
			theadcount$8 = (new $Uint64(0, xx$10.List.$length));
			variant$16 = 8;
			if (xx$10.List === sliceType$5.nil) {
				variant$16 = 9;
				theadcount$8 = new $Uint64(0, 0);
			}
			stack$6 = sliceType$1.nil;
			t$9 = (x$556 = c.nowblock, x$557 = c.nowblock.$length - 1 >> 0, ((x$557 < 0 || x$557 >= x$556.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$556.$array[x$556.$offset + x$557]));
			_index$20 = c.nowblock.$length - 1 >> 0;
			(x$561 = c.nowblock, ((_index$20 < 0 || _index$20 >= x$561.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$561.$array[x$561.$offset + _index$20] = (x$558 = (x$559 = c.nowblock, ((_index$20 < 0 || _index$20 >= x$559.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$559.$array[x$559.$offset + _index$20])), x$560 = new $Uint64(0, 1), new $Uint64(x$558.$high + x$560.$high, x$558.$low + x$560.$low))));
			_key$147 = t$9; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$147)] = { k: _key$147, v: mapast.BlocOfCodeNode(variant$16, theadcount$8) };
			i$17 = new $Uint64(0, 0);
			while (true) {
				if (!((x$562 = (new $Uint64(0, xx$10.List.$length)), (i$17.$high < x$562.$high || (i$17.$high === x$562.$high && i$17.$low < x$562.$low))))) { break; }
				_tuple$63 = $assertType((x$563 = xx$10.List, (($flatten64(i$17) < 0 || $flatten64(i$17) >= x$563.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$563.$array[x$563.$offset + $flatten64(i$17)])), ptrType$48, true);
				id$34 = _tuple$63[0];
				ok$36 = _tuple$63[1];
				ident$37 = sliceType$4.nil;
				if (ok$36) {
					ident$37 = (new sliceType$4($stringToBytes(id$34.Name)));
				} else {
					_tuple$64 = $assertType((x$564 = xx$10.List, (($flatten64(i$17) < 0 || $flatten64(i$17) >= x$564.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$564.$array[x$564.$offset + $flatten64(i$17)])), ptrType$26, true);
					id3 = _tuple$64[0];
					ok3 = _tuple$64[1];
					if (ok3) {
						ok$36 = true;
						ident$37 = (new sliceType$4($stringToBytes(id3.Value)));
						_key$148 = id3; (c.skippedbalits || $throwRuntimeError("assignment to entry in nil map"))[ptrType$26.keyFor(_key$148)] = { k: _key$148, v: new structType.ptr() };
					}
				}
				_key$149 = (x$565 = o(t$9), new $Uint64(x$565.$high + i$17.$high, x$565.$low + i$17.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$149)] = { k: _key$149, v: mapast.ExpressionNode(34, new $Uint64(0, 1)) };
				if (ok$36) {
					_key$150 = o((x$566 = o(t$9), new $Uint64(x$566.$high + i$17.$high, x$566.$low + i$17.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$150)] = { k: _key$150, v: ident$37 };
				} else {
					stack$6 = $appendSlice(new sliceType$1([(x$567 = o(t$9), new $Uint64(x$567.$high + i$17.$high, x$567.$low + i$17.$low))]), stack$6);
				}
				i$17 = (x$568 = new $Uint64(0, 1), new $Uint64(i$17.$high + x$568.$high, i$17.$low + x$568.$low));
			}
			c.typefield = $appendSlice(c.typefield, stack$6);
			subs = how_many_subblocks_stmt_list(xx$10.Body);
			sus = how_many_substmts_stmt_list(xx$10.Body);
			c.nowblock = $append(c.nowblock, (x$569 = o(t$9), x$570 = theadcount$8, new $Uint64(x$569.$high + x$570.$high, x$569.$low + x$570.$low)));
			c.subblocks = $append(c.subblocks, subs);
			c.substmts = $append(c.substmts, sus);
		} else if ($assertType(_ref, ptrType$18, true)[1]) {
			xx$11 = $assertType((x), ptrType$18);
			$unused(xx$11);
			zz$1 = (_entry$10 = c.ifblocks[ptrType$18.keyFor(xx$11)], _entry$10 !== undefined ? _entry$10.v : new $Uint64(0, 0));
			if (!((zz$1.$high === 0 && zz$1.$low === 0))) {
				subs$1 = how_many_subblocks_block(xx$11);
				sus$1 = how_many_substmts_block(xx$11);
				c.nowblock = $append(c.nowblock, zz$1);
				c.subblocks = $append(c.subblocks, subs$1);
				c.substmts = $append(c.substmts, sus$1);
			} else {
				zz$1 = (_entry$11 = c.blocksstmts[ptrType$18.keyFor(xx$11)], _entry$11 !== undefined ? _entry$11.v : new $Uint64(0, 0));
			}
			if ((zz$1.$high === 0 && zz$1.$low === 0)) {
				while (true) {
					if (!((x$571 = c.substmts, x$572 = c.substmts.$length - 1 >> 0, ((x$572 < 0 || x$572 >= x$571.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$571.$array[x$571.$offset + x$572])) <= 0 && (x$573 = c.subblocks, x$574 = c.subblocks.$length - 1 >> 0, ((x$574 < 0 || x$574 >= x$573.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$573.$array[x$573.$offset + x$574])) <= 0)) { break; }
					c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
					c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
					c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
				}
				_index$21 = c.subblocks.$length - 1 >> 0;
				(x$576 = c.subblocks, ((_index$21 < 0 || _index$21 >= x$576.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$576.$array[x$576.$offset + _index$21] = ((x$575 = c.subblocks, ((_index$21 < 0 || _index$21 >= x$575.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$575.$array[x$575.$offset + _index$21])) - (1) >> 0)));
				t$10 = (x$577 = c.nowblock, x$578 = c.nowblock.$length - 1 >> 0, ((x$578 < 0 || x$578 >= x$577.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$577.$array[x$577.$offset + x$578]));
				_key$151 = t$10; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$151)] = { k: _key$151, v: mapast.BlocOfCodeNode(0, new $Uint64(0, 0)) };
				_index$22 = c.nowblock.$length - 1 >> 0;
				(x$582 = c.nowblock, ((_index$22 < 0 || _index$22 >= x$582.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$582.$array[x$582.$offset + _index$22] = (x$579 = (x$580 = c.nowblock, ((_index$22 < 0 || _index$22 >= x$580.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$580.$array[x$580.$offset + _index$22])), x$581 = new $Uint64(0, 1), new $Uint64(x$579.$high + x$581.$high, x$579.$low + x$581.$low))));
				subs$2 = how_many_subblocks_stmt_list(xx$11.List);
				sus$2 = how_many_substmts_stmt_list(xx$11.List);
				c.nowblock = $append(c.nowblock, o(t$10));
				c.subblocks = $append(c.subblocks, subs$2);
				c.substmts = $append(c.substmts, sus$2);
			}
		} else if ($assertType(_ref, ptrType, true)[1]) {
			xx$12 = $assertType((x), ptrType);
			while (true) {
				if (!((x$583 = c.substmts, x$584 = c.substmts.$length - 1 >> 0, ((x$584 < 0 || x$584 >= x$583.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$583.$array[x$583.$offset + x$584])) <= 0 && (x$585 = c.subblocks, x$586 = c.subblocks.$length - 1 >> 0, ((x$586 < 0 || x$586 >= x$585.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$585.$array[x$585.$offset + x$586])) <= 0)) { break; }
				c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
				c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
				c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
			}
			_index$23 = c.substmts.$length - 1 >> 0;
			(x$588 = c.substmts, ((_index$23 < 0 || _index$23 >= x$588.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$588.$array[x$588.$offset + _index$23] = ((x$587 = c.substmts, ((_index$23 < 0 || _index$23 >= x$587.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$587.$array[x$587.$offset + _index$23])) - (1) >> 0)));
			if (xx$12.Implicit === false) {
				blk$1 = (x$589 = c.nowblock, x$590 = c.nowblock.$length - 1 >> 0, ((x$590 < 0 || x$590 >= x$589.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$589.$array[x$589.$offset + x$590]));
				_key$152 = blk$1; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$152)] = { k: _key$152, v: mapast.BranchStmtNode(0) };
				_index$24 = c.nowblock.$length - 1 >> 0;
				(x$594 = c.nowblock, ((_index$24 < 0 || _index$24 >= x$594.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$594.$array[x$594.$offset + _index$24] = (x$591 = (x$592 = c.nowblock, ((_index$24 < 0 || _index$24 >= x$592.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$592.$array[x$592.$offset + _index$24])), x$593 = new $Uint64(0, 1), new $Uint64(x$591.$high + x$593.$high, x$591.$low + x$593.$low))));
			}
		} else if ($assertType(_ref, ptrType$1, true)[1]) {
			xx$13 = $assertType((x), ptrType$1);
			variant$17 = 0;
			_9 = xx$13.Tok;
			if (_9 === (61)) {
				variant$17 = 1;
			} else if (_9 === (65)) {
				variant$17 = 2;
			} else if (_9 === (69)) {
				variant$17 = 3;
			} else if (_9 === (73)) {
				variant$17 = 255;
			}
			while (true) {
				if (!((x$595 = c.substmts, x$596 = c.substmts.$length - 1 >> 0, ((x$596 < 0 || x$596 >= x$595.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$595.$array[x$595.$offset + x$596])) <= 0 && (x$597 = c.subblocks, x$598 = c.subblocks.$length - 1 >> 0, ((x$598 < 0 || x$598 >= x$597.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$597.$array[x$597.$offset + x$598])) <= 0)) { break; }
				c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
				c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
				c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
			}
			_index$25 = c.substmts.$length - 1 >> 0;
			(x$600 = c.substmts, ((_index$25 < 0 || _index$25 >= x$600.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$600.$array[x$600.$offset + _index$25] = ((x$599 = c.substmts, ((_index$25 < 0 || _index$25 >= x$599.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$599.$array[x$599.$offset + _index$25])) - (1) >> 0)));
			$unused(variant$17);
			blk$2 = (x$601 = c.nowblock, x$602 = c.nowblock.$length - 1 >> 0, ((x$602 < 0 || x$602 >= x$601.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$601.$array[x$601.$offset + x$602]));
			if (variant$17 === 255) {
				if (xx$13.Label === ptrType$48.nil) {
					_key$153 = blk$2; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$153)] = { k: _key$153, v: mapast.BranchStmtNode(4) };
				} else {
					_key$154 = blk$2; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$154)] = { k: _key$154, v: mapast.LblGotoCntNode(1) };
					_key$155 = o(blk$2); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$155)] = { k: _key$155, v: (new sliceType$4($stringToBytes(xx$13.Label.Name))) };
				}
			} else {
				if (xx$13.Label === ptrType$48.nil) {
					_key$156 = blk$2; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$156)] = { k: _key$156, v: mapast.BranchStmtNode(variant$17) };
				} else {
					_10 = variant$17;
					if (_10 === (2)) {
						variant$17 = 2;
					} else if (_10 === (1)) {
						variant$17 = 3;
					}
					_key$157 = blk$2; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$157)] = { k: _key$157, v: mapast.LblGotoCntNode(variant$17) };
					_key$158 = o(blk$2); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$158)] = { k: _key$158, v: (new sliceType$4($stringToBytes(xx$13.Label.Name))) };
				}
			}
			_index$26 = c.nowblock.$length - 1 >> 0;
			(x$606 = c.nowblock, ((_index$26 < 0 || _index$26 >= x$606.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$606.$array[x$606.$offset + _index$26] = (x$603 = (x$604 = c.nowblock, ((_index$26 < 0 || _index$26 >= x$604.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$604.$array[x$604.$offset + _index$26])), x$605 = new $Uint64(0, 1), new $Uint64(x$603.$high + x$605.$high, x$603.$low + x$605.$low))));
		} else if ($assertType(_ref, ptrType$2, true)[1]) {
			xx$14 = $assertType((x), ptrType$2);
			if (c.skippedexpressions > 0) {
				c.skippedexpressions = c.skippedexpressions - (1) << 24 >>> 24;
				break;
			}
			_tuple$65 = (_entry$12 = c.deadexprs[ptrType$2.keyFor(xx$14)], _entry$12 !== undefined ? [_entry$12.v, true] : [new structType.ptr(), false]);
			ok$37 = _tuple$65[1];
			if (ok$37) {
				break;
			}
			while (true) {
				if (!((x$607 = c.substmts, x$608 = c.substmts.$length - 1 >> 0, ((x$608 < 0 || x$608 >= x$607.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$607.$array[x$607.$offset + x$608])) <= 0 && (x$609 = c.subblocks, x$610 = c.subblocks.$length - 1 >> 0, ((x$610 < 0 || x$610 >= x$609.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$609.$array[x$609.$offset + x$610])) <= 0)) { break; }
				c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
				c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
				c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
			}
			_index$27 = c.substmts.$length - 1 >> 0;
			(x$612 = c.substmts, ((_index$27 < 0 || _index$27 >= x$612.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$612.$array[x$612.$offset + _index$27] = ((x$611 = c.substmts, ((_index$27 < 0 || _index$27 >= x$611.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$611.$array[x$611.$offset + _index$27])) - (1) >> 0)));
			_tuple$66 = $assertType(xx$14.X, ptrType$48, true);
			id$35 = _tuple$66[0];
			ok$38 = _tuple$66[1];
			ident$38 = sliceType$4.nil;
			if (ok$38) {
				ident$38 = (new sliceType$4($stringToBytes(id$35.Name)));
			}
			$unused(ident$38);
			stack$7 = sliceType$1.nil;
			blk$3 = (x$613 = c.nowblock, x$614 = c.nowblock.$length - 1 >> 0, ((x$614 < 0 || x$614 >= x$613.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$613.$array[x$613.$offset + x$614]));
			_key$159 = blk$3; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$159)] = { k: _key$159, v: mapast.ExpressionNode(0, new $Uint64(0, 1)) };
			if (ok$38) {
				_key$160 = o(blk$3); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$160)] = { k: _key$160, v: ident$38 };
			} else {
				stack$7 = $appendSlice(new sliceType$1([blk$3]), stack$7);
			}
			_index$28 = c.nowblock.$length - 1 >> 0;
			(x$618 = c.nowblock, ((_index$28 < 0 || _index$28 >= x$618.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$618.$array[x$618.$offset + _index$28] = (x$615 = (x$616 = c.nowblock, ((_index$28 < 0 || _index$28 >= x$616.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$616.$array[x$616.$offset + _index$28])), x$617 = new $Uint64(0, 1), new $Uint64(x$615.$high + x$617.$high, x$615.$low + x$617.$low))));
			c.typefield = $appendSlice(c.typefield, stack$7);
		} else if ($assertType(_ref, ptrType$26, true)[1]) {
			xx$15 = $assertType((x), ptrType$26);
			_tuple$67 = (_entry$13 = c.skippedbalits[ptrType$26.keyFor(xx$15)], _entry$13 !== undefined ? [_entry$13.v, true] : [new structType.ptr(), false]);
			ok$39 = _tuple$67[1];
			if (ok$39) {
				delete c.skippedbalits[ptrType$26.keyFor(xx$15)];
				break;
			}
			if (c.typefield.$length === 0) {
				break;
			}
			where$3 = (x$619 = c.typefield, x$620 = c.typefield.$length - 1 >> 0, ((x$620 < 0 || x$620 >= x$619.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$619.$array[x$619.$offset + x$620]));
			_key$161 = where$3; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$161)] = { k: _key$161, v: (new sliceType$4($stringToBytes(xx$15.Value))) };
			c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
		} else if ($assertType(_ref, ptrType$27, true)[1]) {
			xx$16 = $assertType((x), ptrType$27);
			if (c.typefield.$length === 0) {
				break;
			}
			_tuple$68 = $assertType(xx$16.X, ptrType$48, true);
			id1$6 = _tuple$68[0];
			ok1$6 = _tuple$68[1];
			ident1$6 = sliceType$4.nil;
			if (ok1$6) {
				ident1$6 = (new sliceType$4($stringToBytes(id1$6.Name)));
			}
			ident2$6 = (new sliceType$4($stringToBytes(xx$16.Sel.Name)));
			stack$8 = sliceType$1.nil;
			where$4 = (x$621 = c.typefield, x$622 = c.typefield.$length - 1 >> 0, ((x$622 < 0 || x$622 >= x$621.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$621.$array[x$621.$offset + x$622]));
			c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
			_key$162 = where$4; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$162)] = { k: _key$162, v: mapast.ExpressionNode(21, new $Uint64(0, 2)) };
			if (ok1$6) {
				_key$163 = o(where$4); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$163)] = { k: _key$163, v: ident1$6 };
			} else {
				stack$8 = $appendSlice(new sliceType$1([o(where$4)]), stack$8);
			}
			if (true) {
				_key$164 = (x$623 = o(where$4), new $Uint64(x$623.$high + 0, x$623.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$164)] = { k: _key$164, v: ident2$6 };
			} else {
				stack$8 = $appendSlice(new sliceType$1([(x$624 = o(where$4), new $Uint64(x$624.$high + 0, x$624.$low + 1))]), stack$8);
			}
			c.typefield = $appendSlice(c.typefield, stack$8);
		} else if ($assertType(_ref, ptrType$3, true)[1]) {
			xx$17 = $assertType((x), ptrType$3);
			while (true) {
				if (!(c.substmts.$length > 0 && c.subblocks.$length > 0 && (x$625 = c.substmts, x$626 = c.substmts.$length - 1 >> 0, ((x$626 < 0 || x$626 >= x$625.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$625.$array[x$625.$offset + x$626])) <= 0 && (x$627 = c.subblocks, x$628 = c.subblocks.$length - 1 >> 0, ((x$628 < 0 || x$628 >= x$627.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$627.$array[x$627.$offset + x$628])) <= 0)) { break; }
				c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
				c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
				c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
			}
			if (c.substmts.$length > 0) {
				_index$29 = c.substmts.$length - 1 >> 0;
				(x$630 = c.substmts, ((_index$29 < 0 || _index$29 >= x$630.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$630.$array[x$630.$offset + _index$29] = ((x$629 = c.substmts, ((_index$29 < 0 || _index$29 >= x$629.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$629.$array[x$629.$offset + _index$29])) - (1) >> 0)));
			}
			stack$9 = sliceType$1.nil;
			blk$4 = (x$631 = c.nowblock, x$632 = c.nowblock.$length - 1 >> 0, ((x$632 < 0 || x$632 >= x$631.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$631.$array[x$631.$offset + x$632]));
			_key$165 = blk$4; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$165)] = { k: _key$165, v: mapast.ReturnStmt };
			_ref$29 = xx$17.Results;
			_i$19 = 0;
			while (true) {
				if (!(_i$19 < _ref$29.$length)) { break; }
				i$18 = _i$19;
				ident$39 = sliceType$4.nil;
				_tuple$69 = $assertType((x$633 = xx$17.Results, ((i$18 < 0 || i$18 >= x$633.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$633.$array[x$633.$offset + i$18])), ptrType$48, true);
				id2$10 = _tuple$69[0];
				ok2$11 = _tuple$69[1];
				if (ok2$11) {
					ident$39 = (new sliceType$4($stringToBytes(id2$10.Name)));
				} else {
					_tuple$70 = $assertType((x$634 = xx$17.Results, ((i$18 < 0 || i$18 >= x$634.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$634.$array[x$634.$offset + i$18])), ptrType$26, true);
					id3$1 = _tuple$70[0];
					ok3$1 = _tuple$70[1];
					if (ok3$1) {
						ok2$11 = true;
						ident$39 = (new sliceType$4($stringToBytes(id3$1.Value)));
						_key$166 = id3$1; (c.skippedbalits || $throwRuntimeError("assignment to entry in nil map"))[ptrType$26.keyFor(_key$166)] = { k: _key$166, v: new structType.ptr() };
					}
				}
				_key$167 = (x$635 = o(blk$4), x$636 = (new $Uint64(0, i$18)), new $Uint64(x$635.$high + x$636.$high, x$635.$low + x$636.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$167)] = { k: _key$167, v: mapast.ExpressionNode(34, new $Uint64(0, 1)) };
				if (ok2$11) {
					_key$168 = o((x$637 = o(blk$4), x$638 = (new $Uint64(0, i$18)), new $Uint64(x$637.$high + x$638.$high, x$637.$low + x$638.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$168)] = { k: _key$168, v: ident$39 };
				} else {
					stack$9 = $appendSlice(new sliceType$1([(x$639 = o(blk$4), x$640 = (new $Uint64(0, i$18)), new $Uint64(x$639.$high + x$640.$high, x$639.$low + x$640.$low))]), stack$9);
				}
				_i$19++;
			}
			_index$30 = c.nowblock.$length - 1 >> 0;
			(x$644 = c.nowblock, ((_index$30 < 0 || _index$30 >= x$644.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$644.$array[x$644.$offset + _index$30] = (x$641 = (x$642 = c.nowblock, ((_index$30 < 0 || _index$30 >= x$642.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$642.$array[x$642.$offset + _index$30])), x$643 = new $Uint64(0, 1), new $Uint64(x$641.$high + x$643.$high, x$641.$low + x$643.$low))));
			c.typefield = $appendSlice(c.typefield, stack$9);
		} else if ($assertType(_ref, ptrType$28, true)[1]) {
			xx$18 = $assertType((x), ptrType$28);
			if (c.typefield.$length === 0) {
				break;
			}
			variant$18 = 0;
			_11 = xx$18.Op;
			if (_11 === (12)) {
				variant$18 = 9;
			} else if (_11 === (13)) {
				variant$18 = 10;
			} else if (_11 === (19)) {
				variant$18 = 12;
			} else if (_11 === (43)) {
				variant$18 = 20;
			} else if (_11 === (17)) {
				variant$18 = 16;
			} else if (_11 === (36)) {
				variant$18 = 25;
			}
			_tuple$71 = $assertType(xx$18.X, ptrType$48, true);
			id$36 = _tuple$71[0];
			ok$40 = _tuple$71[1];
			ident$40 = sliceType$4.nil;
			if (ok$40) {
				ident$40 = (new sliceType$4($stringToBytes(id$36.Name)));
			}
			where$5 = (x$645 = c.typefield, x$646 = c.typefield.$length - 1 >> 0, ((x$646 < 0 || x$646 >= x$645.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$645.$array[x$645.$offset + x$646]));
			_key$169 = where$5; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$169)] = { k: _key$169, v: mapast.ExpressionNode(variant$18, new $Uint64(0, 1)) };
			c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
			if (ok$40) {
				_key$170 = o(where$5); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$170)] = { k: _key$170, v: ident$40 };
			} else {
				c.typefield = $append(c.typefield, o(where$5));
			}
		} else if ($assertType(_ref, ptrType$29, true)[1]) {
			xx$19 = $assertType((x), ptrType$29);
			if (c.typefield.$length === 0) {
				break;
			}
			where$6 = (x$647 = c.typefield, x$648 = c.typefield.$length - 1 >> 0, ((x$648 < 0 || x$648 >= x$647.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$647.$array[x$647.$offset + x$648]));
			_key$171 = where$6; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$171)] = { k: _key$171, v: $subslice(mapast.Expression, 0, 14, 39) };
			c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
			_tuple$72 = $assertType(xx$19.X, ptrType$48, true);
			id$37 = _tuple$72[0];
			ok$41 = _tuple$72[1];
			if (ok$41) {
				_key$172 = o(where$6); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$172)] = { k: _key$172, v: (new sliceType$4($stringToBytes(id$37.Name))) };
			} else {
				c.typefield = $append(c.typefield, o(where$6));
			}
		} else if ($assertType(_ref, ptrType$30, true)[1]) {
			xx$20 = $assertType((x), ptrType$30);
			if (c.typefield.$length === 0) {
				break;
			}
			_tuple$73 = $assertType(xx$20.X, ptrType$48, true);
			id$38 = _tuple$73[0];
			ok$42 = _tuple$73[1];
			ident$41 = sliceType$4.nil;
			if (ok$42) {
				ident$41 = (new sliceType$4($stringToBytes(id$38.Name)));
			}
			stack$10 = sliceType$1.nil;
			where$7 = (x$649 = c.typefield, x$650 = c.typefield.$length - 1 >> 0, ((x$650 < 0 || x$650 >= x$649.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$649.$array[x$649.$offset + x$650]));
			_key$173 = where$7; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$173)] = { k: _key$173, v: mapast.ExpressionNode(0, new $Uint64(0, 1)) };
			c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
			if (ok$42) {
				_key$174 = o(where$7); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$174)] = { k: _key$174, v: ident$41 };
			} else {
				stack$10 = $appendSlice(new sliceType$1([o(where$7)]), stack$10);
			}
			c.typefield = $appendSlice(c.typefield, stack$10);
		} else if ($assertType(_ref, ptrType$31, true)[1]) {
			xx$21 = $assertType((x), ptrType$31);
			if (c.typefield.$length === 0) {
				break;
			}
			variant$19 = 0;
			_12 = xx$21.Op;
			if (_12 === (34)) {
				variant$19 = 2;
			} else if (_12 === (35)) {
				variant$19 = 1;
			} else if (_12 === (39)) {
				variant$19 = 3;
			} else if (_12 === (44)) {
				variant$19 = 4;
			} else if (_12 === (40)) {
				variant$19 = 5;
			} else if (_12 === (45)) {
				variant$19 = 6;
			} else if (_12 === (46)) {
				variant$19 = 7;
			} else if (_12 === (41)) {
				variant$19 = 8;
			} else if (_12 === (12)) {
				variant$19 = 9;
			} else if (_12 === (13)) {
				variant$19 = 10;
			} else if (_12 === (18)) {
				variant$19 = 11;
			} else if (_12 === (19)) {
				variant$19 = 12;
			} else if (_12 === (14)) {
				variant$19 = 13;
			} else if (_12 === (15)) {
				variant$19 = 14;
			} else if (_12 === (16)) {
				variant$19 = 15;
			} else if (_12 === (17)) {
				variant$19 = 16;
			} else if (_12 === (22)) {
				variant$19 = 17;
			} else if (_12 === (20)) {
				variant$19 = 18;
			} else if (_12 === (21)) {
				variant$19 = 19;
			}
			_tuple$74 = $assertType(xx$21.X, ptrType$48, true);
			id1$7 = _tuple$74[0];
			ok1$7 = _tuple$74[1];
			ident1$7 = sliceType$4.nil;
			if (ok1$7) {
				ident1$7 = (new sliceType$4($stringToBytes(id1$7.Name)));
			}
			_tuple$75 = $assertType(xx$21.Y, ptrType$48, true);
			id2$11 = _tuple$75[0];
			ok2$12 = _tuple$75[1];
			ident2$7 = sliceType$4.nil;
			if (ok2$12) {
				ident2$7 = (new sliceType$4($stringToBytes(id2$11.Name)));
			}
			stack$11 = sliceType$1.nil;
			where$8 = (x$651 = c.typefield, x$652 = c.typefield.$length - 1 >> 0, ((x$652 < 0 || x$652 >= x$651.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$651.$array[x$651.$offset + x$652]));
			c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
			_key$175 = where$8; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$175)] = { k: _key$175, v: mapast.ExpressionNode(variant$19, new $Uint64(0, 2)) };
			if (ok1$7) {
				_key$176 = o(where$8); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$176)] = { k: _key$176, v: ident1$7 };
			} else {
				stack$11 = $appendSlice(new sliceType$1([o(where$8)]), stack$11);
			}
			if (ok2$12) {
				_key$177 = (x$653 = o(where$8), new $Uint64(x$653.$high + 0, x$653.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$177)] = { k: _key$177, v: ident2$7 };
			} else {
				stack$11 = $appendSlice(new sliceType$1([(x$654 = o(where$8), new $Uint64(x$654.$high + 0, x$654.$low + 1))]), stack$11);
			}
			c.typefield = $appendSlice(c.typefield, stack$11);
		} else if ($assertType(_ref, ptrType$32, true)[1]) {
			xx$22 = $assertType((x), ptrType$32);
			if (c.typefield.$length === 0) {
				break;
			}
			variant$20 = 0;
			if (xx$22.Ellipsis === 0) {
				variant$20 = 24;
			} else {
				variant$20 = 30;
			}
			_tuple$76 = $assertType(xx$22.Fun, ptrType$48, true);
			id$39 = _tuple$76[0];
			ok$43 = _tuple$76[1];
			ident$42 = sliceType$4.nil;
			if (ok$43) {
				ident$42 = (new sliceType$4($stringToBytes(id$39.Name)));
			}
			stack$12 = sliceType$1.nil;
			where$9 = (x$655 = c.typefield, x$656 = c.typefield.$length - 1 >> 0, ((x$656 < 0 || x$656 >= x$655.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$655.$array[x$655.$offset + x$656]));
			if (ok$43) {
				_key$178 = o(where$9); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$178)] = { k: _key$178, v: ident$42 };
			} else {
				stack$12 = $appendSlice(new sliceType$1([o(where$9)]), stack$12);
			}
			_key$179 = where$9; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$179)] = { k: _key$179, v: mapast.ExpressionNode(variant$20, (x$657 = (new $Uint64(0, xx$22.Args.$length)), new $Uint64(0 + x$657.$high, 1 + x$657.$low))) };
			_ref$30 = xx$22.Args;
			_i$20 = 0;
			while (true) {
				if (!(_i$20 < _ref$30.$length)) { break; }
				i$19 = _i$20;
				ident$43 = sliceType$4.nil;
				_tuple$77 = $assertType((x$658 = xx$22.Args, ((i$19 < 0 || i$19 >= x$658.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$658.$array[x$658.$offset + i$19])), ptrType$48, true);
				id2$12 = _tuple$77[0];
				ok2$13 = _tuple$77[1];
				if (ok2$13) {
					ident$43 = (new sliceType$4($stringToBytes(id2$12.Name)));
				}
				_key$180 = (x$659 = (x$660 = o(where$9), x$661 = (new $Uint64(0, i$19)), new $Uint64(x$660.$high + x$661.$high, x$660.$low + x$661.$low)), new $Uint64(x$659.$high + 0, x$659.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$180)] = { k: _key$180, v: mapast.ExpressionNode(34, new $Uint64(0, 1)) };
				if (ok2$13) {
					_key$181 = o((x$662 = (x$663 = o(where$9), x$664 = (new $Uint64(0, i$19)), new $Uint64(x$663.$high + x$664.$high, x$663.$low + x$664.$low)), new $Uint64(x$662.$high + 0, x$662.$low + 1))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$181)] = { k: _key$181, v: ident$43 };
				} else {
					stack$12 = $appendSlice(new sliceType$1([(x$665 = (x$666 = o(where$9), x$667 = (new $Uint64(0, i$19)), new $Uint64(x$666.$high + x$667.$high, x$666.$low + x$667.$low)), new $Uint64(x$665.$high + 0, x$665.$low + 1))]), stack$12);
				}
				_i$20++;
			}
			if (c.typefield.$length > 0) {
				c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
			}
			c.typefield = $appendSlice(c.typefield, stack$12);
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			xx$23 = $assertType((x), ptrType$4);
			if (c.skippedincdecs > 0) {
				c.skippedincdecs = c.skippedincdecs - (1) << 24 >>> 24;
				break;
			}
			_tuple$78 = (_entry$14 = c.deadincdecs[ptrType$4.keyFor(xx$23)], _entry$14 !== undefined ? [_entry$14.v, true] : [new structType.ptr(), false]);
			ok$44 = _tuple$78[1];
			if (ok$44) {
				break;
			}
			while (true) {
				if (!((x$668 = c.substmts, x$669 = c.substmts.$length - 1 >> 0, ((x$669 < 0 || x$669 >= x$668.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$668.$array[x$668.$offset + x$669])) <= 0 && (x$670 = c.subblocks, x$671 = c.subblocks.$length - 1 >> 0, ((x$671 < 0 || x$671 >= x$670.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$670.$array[x$670.$offset + x$671])) <= 0)) { break; }
				c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
				c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
				c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
			}
			_index$31 = c.substmts.$length - 1 >> 0;
			(x$673 = c.substmts, ((_index$31 < 0 || _index$31 >= x$673.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$673.$array[x$673.$offset + _index$31] = ((x$672 = c.substmts, ((_index$31 < 0 || _index$31 >= x$672.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$672.$array[x$672.$offset + _index$31])) - (1) >> 0)));
			_tuple$79 = $assertType(xx$23.X, ptrType$48, true);
			id$40 = _tuple$79[0];
			ok$45 = _tuple$79[1];
			ident$44 = sliceType$4.nil;
			if (ok$45) {
				ident$44 = (new sliceType$4($stringToBytes(id$40.Name)));
			}
			stack$13 = sliceType$1.nil;
			blk$5 = (x$674 = c.nowblock, x$675 = c.nowblock.$length - 1 >> 0, ((x$675 < 0 || x$675 >= x$674.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$674.$array[x$674.$offset + x$675]));
			if (xx$23.Tok === 37) {
				_key$182 = blk$5; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$182)] = { k: _key$182, v: mapast.IncDecStmtNode(0) };
			} else {
				_key$183 = blk$5; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$183)] = { k: _key$183, v: mapast.IncDecStmtNode(1) };
			}
			if (ok$45) {
				_key$184 = o(blk$5); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$184)] = { k: _key$184, v: ident$44 };
			} else {
				stack$13 = $appendSlice(new sliceType$1([o(blk$5)]), stack$13);
			}
			_index$32 = c.nowblock.$length - 1 >> 0;
			(x$679 = c.nowblock, ((_index$32 < 0 || _index$32 >= x$679.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$679.$array[x$679.$offset + _index$32] = (x$676 = (x$677 = c.nowblock, ((_index$32 < 0 || _index$32 >= x$677.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$677.$array[x$677.$offset + _index$32])), x$678 = new $Uint64(0, 1), new $Uint64(x$676.$high + x$678.$high, x$676.$low + x$678.$low))));
			c.typefield = $appendSlice(c.typefield, stack$13);
		} else if ($assertType(_ref, ptrType$5, true)[1]) {
			while (true) {
				if (!(c.substmts.$length > 0 && c.subblocks.$length > 0 && (x$680 = c.substmts, x$681 = c.substmts.$length - 1 >> 0, ((x$681 < 0 || x$681 >= x$680.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$680.$array[x$680.$offset + x$681])) <= 0 && (x$682 = c.subblocks, x$683 = c.subblocks.$length - 1 >> 0, ((x$683 < 0 || x$683 >= x$682.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$682.$array[x$682.$offset + x$683])) <= 0)) { break; }
				c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
				c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
				c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
			}
			if (c.substmts.$length > 0) {
				_index$33 = c.substmts.$length - 1 >> 0;
				(x$685 = c.substmts, ((_index$33 < 0 || _index$33 >= x$685.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$685.$array[x$685.$offset + _index$33] = ((x$684 = c.substmts, ((_index$33 < 0 || _index$33 >= x$684.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$684.$array[x$684.$offset + _index$33])) - (1) >> 0)));
			}
			stack$14 = sliceType$1.nil;
			blk$6 = (x$686 = c.nowblock, x$687 = c.nowblock.$length - 1 >> 0, ((x$687 < 0 || x$687 >= x$686.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$686.$array[x$686.$offset + x$687]));
			_key$185 = blk$6; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$185)] = { k: _key$185, v: mapast.GoDferStmtNode(0) };
			stack$14 = $appendSlice(new sliceType$1([o(blk$6)]), stack$14);
			_index$34 = c.nowblock.$length - 1 >> 0;
			(x$691 = c.nowblock, ((_index$34 < 0 || _index$34 >= x$691.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$691.$array[x$691.$offset + _index$34] = (x$688 = (x$689 = c.nowblock, ((_index$34 < 0 || _index$34 >= x$689.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$689.$array[x$689.$offset + _index$34])), x$690 = new $Uint64(0, 1), new $Uint64(x$688.$high + x$690.$high, x$688.$low + x$690.$low))));
			c.typefield = $appendSlice(c.typefield, stack$14);
		} else if ($assertType(_ref, ptrType$6, true)[1]) {
			while (true) {
				if (!((x$692 = c.substmts, x$693 = c.substmts.$length - 1 >> 0, ((x$693 < 0 || x$693 >= x$692.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$692.$array[x$692.$offset + x$693])) <= 0 && (x$694 = c.subblocks, x$695 = c.subblocks.$length - 1 >> 0, ((x$695 < 0 || x$695 >= x$694.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$694.$array[x$694.$offset + x$695])) <= 0)) { break; }
				c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
				c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
				c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
			}
			_index$35 = c.substmts.$length - 1 >> 0;
			(x$697 = c.substmts, ((_index$35 < 0 || _index$35 >= x$697.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$697.$array[x$697.$offset + _index$35] = ((x$696 = c.substmts, ((_index$35 < 0 || _index$35 >= x$696.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$696.$array[x$696.$offset + _index$35])) - (1) >> 0)));
			stack$15 = sliceType$1.nil;
			blk$7 = (x$698 = c.nowblock, x$699 = c.nowblock.$length - 1 >> 0, ((x$699 < 0 || x$699 >= x$698.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$698.$array[x$698.$offset + x$699]));
			_key$186 = blk$7; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$186)] = { k: _key$186, v: mapast.GoDferStmtNode(1) };
			stack$15 = $appendSlice(new sliceType$1([o(blk$7)]), stack$15);
			_index$36 = c.nowblock.$length - 1 >> 0;
			(x$703 = c.nowblock, ((_index$36 < 0 || _index$36 >= x$703.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$703.$array[x$703.$offset + _index$36] = (x$700 = (x$701 = c.nowblock, ((_index$36 < 0 || _index$36 >= x$701.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$701.$array[x$701.$offset + _index$36])), x$702 = new $Uint64(0, 1), new $Uint64(x$700.$high + x$702.$high, x$700.$low + x$702.$low))));
			c.typefield = $appendSlice(c.typefield, stack$15);
		} else if ($assertType(_ref, ptrType$9, true)[1]) {
			xx$24 = $assertType((x), ptrType$9);
			if (c.skippedsends > 0) {
				c.skippedsends = c.skippedsends - (1) << 24 >>> 24;
				break;
			}
			_tuple$80 = (_entry$15 = c.deadsends[ptrType$9.keyFor(xx$24)], _entry$15 !== undefined ? [_entry$15.v, true] : [new structType.ptr(), false]);
			ok$46 = _tuple$80[1];
			if (ok$46) {
				break;
			}
			while (true) {
				if (!((x$704 = c.substmts, x$705 = c.substmts.$length - 1 >> 0, ((x$705 < 0 || x$705 >= x$704.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$704.$array[x$704.$offset + x$705])) <= 0 && (x$706 = c.subblocks, x$707 = c.subblocks.$length - 1 >> 0, ((x$707 < 0 || x$707 >= x$706.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$706.$array[x$706.$offset + x$707])) <= 0)) { break; }
				c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
				c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
				c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
			}
			_index$37 = c.substmts.$length - 1 >> 0;
			(x$709 = c.substmts, ((_index$37 < 0 || _index$37 >= x$709.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$709.$array[x$709.$offset + _index$37] = ((x$708 = c.substmts, ((_index$37 < 0 || _index$37 >= x$708.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$708.$array[x$708.$offset + _index$37])) - (1) >> 0)));
			_tuple$81 = $assertType(xx$24.Chan, ptrType$48, true);
			id1$8 = _tuple$81[0];
			ok1$8 = _tuple$81[1];
			ident1$8 = sliceType$4.nil;
			if (ok1$8) {
				ident1$8 = (new sliceType$4($stringToBytes(id1$8.Name)));
			}
			_tuple$82 = $assertType(xx$24.Value, ptrType$48, true);
			id2$13 = _tuple$82[0];
			ok2$14 = _tuple$82[1];
			ident2$8 = sliceType$4.nil;
			if (ok2$14) {
				ident2$8 = (new sliceType$4($stringToBytes(id2$13.Name)));
			}
			$unused(ok1$8);
			$unused(ok2$14);
			$unused(ident1$8);
			$unused(ident2$8);
			stack$16 = sliceType$1.nil;
			blk$8 = (x$710 = c.nowblock, x$711 = c.nowblock.$length - 1 >> 0, ((x$711 < 0 || x$711 >= x$710.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$710.$array[x$710.$offset + x$711]));
			_key$187 = blk$8; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$187)] = { k: _key$187, v: mapast.ExpressionNode(25, new $Uint64(0, 2)) };
			if (ok1$8) {
				_key$188 = o(blk$8); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$188)] = { k: _key$188, v: ident1$8 };
			} else {
				stack$16 = $appendSlice(new sliceType$1([o(blk$8)]), stack$16);
			}
			if (ok2$14) {
				_key$189 = (x$712 = o(blk$8), new $Uint64(x$712.$high + 0, x$712.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$189)] = { k: _key$189, v: ident2$8 };
			} else {
				stack$16 = $appendSlice(new sliceType$1([(x$713 = o(blk$8), new $Uint64(x$713.$high + 0, x$713.$low + 1))]), stack$16);
			}
			_index$38 = c.nowblock.$length - 1 >> 0;
			(x$717 = c.nowblock, ((_index$38 < 0 || _index$38 >= x$717.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$717.$array[x$717.$offset + _index$38] = (x$714 = (x$715 = c.nowblock, ((_index$38 < 0 || _index$38 >= x$715.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$715.$array[x$715.$offset + _index$38])), x$716 = new $Uint64(0, 1), new $Uint64(x$714.$high + x$716.$high, x$714.$low + x$716.$low))));
			c.typefield = $appendSlice(c.typefield, stack$16);
		} else if ($assertType(_ref, ptrType$10, true)[1]) {
			xx$25 = $assertType((x), ptrType$10);
			while (true) {
				if (!((x$718 = c.substmts, x$719 = c.substmts.$length - 1 >> 0, ((x$719 < 0 || x$719 >= x$718.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$718.$array[x$718.$offset + x$719])) <= 0 && (x$720 = c.subblocks, x$721 = c.subblocks.$length - 1 >> 0, ((x$721 < 0 || x$721 >= x$720.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$720.$array[x$720.$offset + x$721])) <= 0)) { break; }
				c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
				c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
				c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
			}
			_index$39 = c.substmts.$length - 1 >> 0;
			(x$723 = c.substmts, ((_index$39 < 0 || _index$39 >= x$723.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$723.$array[x$723.$offset + _index$39] = ((x$722 = c.substmts, ((_index$39 < 0 || _index$39 >= x$722.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$722.$array[x$722.$offset + _index$39])) - (1) >> 0)));
			blk$9 = (x$724 = c.nowblock, x$725 = c.nowblock.$length - 1 >> 0, ((x$725 < 0 || x$725 >= x$724.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$724.$array[x$724.$offset + x$725]));
			_key$190 = blk$9; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$190)] = { k: _key$190, v: mapast.LblGotoCntNode(0) };
			_key$191 = o(blk$9); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$191)] = { k: _key$191, v: (new sliceType$4($stringToBytes(xx$25.Label.Name))) };
			_index$40 = c.nowblock.$length - 1 >> 0;
			(x$729 = c.nowblock, ((_index$40 < 0 || _index$40 >= x$729.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$729.$array[x$729.$offset + _index$40] = (x$726 = (x$727 = c.nowblock, ((_index$40 < 0 || _index$40 >= x$727.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$727.$array[x$727.$offset + _index$40])), x$728 = new $Uint64(0, 1), new $Uint64(x$726.$high + x$728.$high, x$726.$low + x$728.$low))));
		} else if ($assertType(_ref, ptrType$7, true)[1]) {
			xx$26 = $assertType((x), ptrType$7);
			if (c.skippedassignments > 0) {
				c.skippedassignments = c.skippedassignments - (1) << 24 >>> 24;
				break;
			}
			_tuple$83 = (_entry$16 = c.deadassignments[ptrType$7.keyFor(xx$26)], _entry$16 !== undefined ? [_entry$16.v, true] : [new structType.ptr(), false]);
			ok$47 = _tuple$83[1];
			if (ok$47) {
				break;
			}
			while (true) {
				if (!((x$730 = c.substmts, x$731 = c.substmts.$length - 1 >> 0, ((x$731 < 0 || x$731 >= x$730.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$730.$array[x$730.$offset + x$731])) <= 0 && (x$732 = c.subblocks, x$733 = c.subblocks.$length - 1 >> 0, ((x$733 < 0 || x$733 >= x$732.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$732.$array[x$732.$offset + x$733])) <= 0)) { break; }
				c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
				c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
				c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
			}
			_index$41 = c.substmts.$length - 1 >> 0;
			(x$735 = c.substmts, ((_index$41 < 0 || _index$41 >= x$735.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$735.$array[x$735.$offset + _index$41] = ((x$734 = c.substmts, ((_index$41 < 0 || _index$41 >= x$734.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$734.$array[x$734.$offset + _index$41])) - (1) >> 0)));
			variant$21 = 0;
			_13 = xx$26.Tok;
			if (_13 === (42)) {
				variant$21 = 0;
			} else if (_13 === (47)) {
				variant$21 = 1;
			} else if (_13 === (23)) {
				variant$21 = 3;
			} else if (_13 === (24)) {
				variant$21 = 4;
			} else if (_13 === (25)) {
				variant$21 = 5;
			} else if (_13 === (26)) {
				variant$21 = 6;
			} else if (_13 === (27)) {
				variant$21 = 7;
			} else if (_13 === (28)) {
				variant$21 = 8;
			} else if (_13 === (29)) {
				variant$21 = 9;
			} else if (_13 === (30)) {
				variant$21 = 10;
			} else if (_13 === (31)) {
				variant$21 = 11;
			} else if (_13 === (32)) {
				variant$21 = 12;
			} else if (_13 === (33)) {
				variant$21 = 2;
			}
			if (!((xx$26.Lhs.$length === xx$26.Rhs.$length))) {
				variant$21 = variant$21 + (15) << 24 >>> 24;
			}
			stack$17 = sliceType$1.nil;
			blk$10 = (x$736 = c.nowblock, x$737 = c.nowblock.$length - 1 >> 0, ((x$737 < 0 || x$737 >= x$736.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$736.$array[x$736.$offset + x$737]));
			_key$192 = blk$10; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$192)] = { k: _key$192, v: mapast.AssignStmtNode(variant$21, (new $Uint64(0, (xx$26.Lhs.$length + xx$26.Rhs.$length >> 0)))) };
			_ref$31 = xx$26.Lhs;
			_i$21 = 0;
			while (true) {
				if (!(_i$21 < _ref$31.$length)) { break; }
				i$20 = _i$21;
				ident$45 = sliceType$4.nil;
				_tuple$84 = $assertType((x$738 = xx$26.Lhs, ((i$20 < 0 || i$20 >= x$738.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$738.$array[x$738.$offset + i$20])), ptrType$48, true);
				id2$14 = _tuple$84[0];
				ok2$15 = _tuple$84[1];
				if (ok2$15) {
					ident$45 = (new sliceType$4($stringToBytes(id2$14.Name)));
				}
				_key$193 = (x$739 = o(blk$10), x$740 = (new $Uint64(0, i$20)), new $Uint64(x$739.$high + x$740.$high, x$739.$low + x$740.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$193)] = { k: _key$193, v: mapast.ExpressionNode(34, new $Uint64(0, 1)) };
				if (ok2$15) {
					_key$194 = o((x$741 = o(blk$10), x$742 = (new $Uint64(0, i$20)), new $Uint64(x$741.$high + x$742.$high, x$741.$low + x$742.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$194)] = { k: _key$194, v: ident$45 };
				} else {
					stack$17 = $appendSlice(new sliceType$1([(x$743 = o(blk$10), x$744 = (new $Uint64(0, i$20)), new $Uint64(x$743.$high + x$744.$high, x$743.$low + x$744.$low))]), stack$17);
				}
				_i$21++;
			}
			_ref$32 = xx$26.Rhs;
			_i$22 = 0;
			while (true) {
				if (!(_i$22 < _ref$32.$length)) { break; }
				i$21 = _i$22;
				ident$46 = sliceType$4.nil;
				_tuple$85 = $assertType((x$745 = xx$26.Rhs, ((i$21 < 0 || i$21 >= x$745.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$745.$array[x$745.$offset + i$21])), ptrType$48, true);
				id2$15 = _tuple$85[0];
				ok2$16 = _tuple$85[1];
				if (ok2$16) {
					ident$46 = (new sliceType$4($stringToBytes(id2$15.Name)));
				}
				_key$195 = (x$746 = o(blk$10), x$747 = (new $Uint64(0, (i$21 + xx$26.Lhs.$length >> 0))), new $Uint64(x$746.$high + x$747.$high, x$746.$low + x$747.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$195)] = { k: _key$195, v: mapast.ExpressionNode(34, new $Uint64(0, 1)) };
				if (ok2$16) {
					_key$196 = o((x$748 = o(blk$10), x$749 = (new $Uint64(0, (i$21 + xx$26.Lhs.$length >> 0))), new $Uint64(x$748.$high + x$749.$high, x$748.$low + x$749.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$196)] = { k: _key$196, v: ident$46 };
				} else {
					stack$17 = $appendSlice(new sliceType$1([(x$750 = o(blk$10), x$751 = (new $Uint64(0, (i$21 + xx$26.Lhs.$length >> 0))), new $Uint64(x$750.$high + x$751.$high, x$750.$low + x$751.$low))]), stack$17);
				}
				_i$22++;
			}
			_index$42 = c.nowblock.$length - 1 >> 0;
			(x$755 = c.nowblock, ((_index$42 < 0 || _index$42 >= x$755.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$755.$array[x$755.$offset + _index$42] = (x$752 = (x$753 = c.nowblock, ((_index$42 < 0 || _index$42 >= x$753.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$753.$array[x$753.$offset + _index$42])), x$754 = new $Uint64(0, 1), new $Uint64(x$752.$high + x$754.$high, x$752.$low + x$754.$low))));
			c.typefield = $appendSlice(c.typefield, stack$17);
		} else if ($assertType(_ref, ptrType$33, true)[1]) {
			xx$27 = $assertType((x), ptrType$33);
			if (c.typefield.$length === 0) {
				break;
			}
			_tuple$86 = $assertType(xx$27.X, ptrType$48, true);
			id1$9 = _tuple$86[0];
			ok1$9 = _tuple$86[1];
			ident1$9 = sliceType$4.nil;
			if (ok1$9) {
				ident1$9 = (new sliceType$4($stringToBytes(id1$9.Name)));
			}
			_tuple$87 = $assertType(xx$27.Index, ptrType$48, true);
			id2$16 = _tuple$87[0];
			ok2$17 = _tuple$87[1];
			ident2$9 = sliceType$4.nil;
			if (ok2$17) {
				ident2$9 = (new sliceType$4($stringToBytes(id2$16.Name)));
			}
			$unused(ok1$9);
			$unused(ok2$17);
			$unused(ident1$9);
			$unused(ident2$9);
			stack$18 = sliceType$1.nil;
			where$10 = (x$756 = c.typefield, x$757 = c.typefield.$length - 1 >> 0, ((x$757 < 0 || x$757 >= x$756.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$756.$array[x$756.$offset + x$757]));
			c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
			_key$197 = where$10; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$197)] = { k: _key$197, v: mapast.ExpressionNode(32, new $Uint64(0, 2)) };
			if (ok1$9) {
				_key$198 = o(where$10); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$198)] = { k: _key$198, v: ident1$9 };
			} else {
				stack$18 = $appendSlice(new sliceType$1([o(where$10)]), stack$18);
			}
			if (ok2$17) {
				_key$199 = (x$758 = o(where$10), new $Uint64(x$758.$high + 0, x$758.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$199)] = { k: _key$199, v: ident2$9 };
			} else {
				stack$18 = $appendSlice(new sliceType$1([(x$759 = o(where$10), new $Uint64(x$759.$high + 0, x$759.$low + 1))]), stack$18);
			}
			c.typefield = $appendSlice(c.typefield, stack$18);
		} else if ($assertType(_ref, ptrType$34, true)[1]) {
			xx$28 = $assertType((x), ptrType$34);
			if (c.typefield.$length === 0) {
				break;
			}
			_tuple$88 = $assertType(xx$28.X, ptrType$48, true);
			id1$10 = _tuple$88[0];
			ok1$10 = _tuple$88[1];
			ident1$10 = sliceType$4.nil;
			if (ok1$10) {
				ident1$10 = (new sliceType$4($stringToBytes(id1$10.Name)));
			}
			_tuple$89 = $assertType(xx$28.Low, ptrType$48, true);
			id2$17 = _tuple$89[0];
			ok2$18 = _tuple$89[1];
			ident2$10 = sliceType$4.nil;
			if (ok2$18) {
				ident2$10 = (new sliceType$4($stringToBytes(id2$17.Name)));
			}
			if ($interfaceIsEqual(xx$28.Low, $ifaceNil)) {
				ok2$18 = true;
			}
			_tuple$90 = $assertType(xx$28.High, ptrType$48, true);
			id3$2 = _tuple$90[0];
			ok3$2 = _tuple$90[1];
			ident3 = sliceType$4.nil;
			if (ok3$2) {
				ident3 = (new sliceType$4($stringToBytes(id3$2.Name)));
			}
			_tuple$91 = $assertType(xx$28.Max, ptrType$48, true);
			id4 = _tuple$91[0];
			ok4 = _tuple$91[1];
			ident4 = sliceType$4.nil;
			if (ok4) {
				ident4 = (new sliceType$4($stringToBytes(id4.Name)));
			}
			$unused(ident3);
			$unused(ident4);
			stack$19 = sliceType$1.nil;
			where$11 = (x$760 = c.typefield, x$761 = c.typefield.$length - 1 >> 0, ((x$761 < 0 || x$761 >= x$760.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$760.$array[x$760.$offset + x$761]));
			c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
			if (xx$28.Slice3) {
				_key$200 = where$11; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$200)] = { k: _key$200, v: mapast.ExpressionNode(22, new $Uint64(0, 4)) };
			} else if ($interfaceIsEqual(xx$28.High, $ifaceNil)) {
				_key$201 = where$11; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$201)] = { k: _key$201, v: mapast.ExpressionNode(22, new $Uint64(0, 2)) };
			} else {
				_key$202 = where$11; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$202)] = { k: _key$202, v: mapast.ExpressionNode(22, new $Uint64(0, 3)) };
			}
			if (ok1$10) {
				_key$203 = o(where$11); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$203)] = { k: _key$203, v: ident1$10 };
			} else {
				stack$19 = $appendSlice(new sliceType$1([o(where$11)]), stack$19);
			}
			if (ok2$18) {
				if ($interfaceIsEqual(xx$28.Low, $ifaceNil)) {
					_key$204 = (x$762 = o(where$11), new $Uint64(x$762.$high + 0, x$762.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$204)] = { k: _key$204, v: (new sliceType$4($stringToBytes("0"))) };
				} else {
					_key$205 = (x$763 = o(where$11), new $Uint64(x$763.$high + 0, x$763.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$205)] = { k: _key$205, v: ident2$10 };
				}
			} else {
				stack$19 = $appendSlice(new sliceType$1([(x$764 = o(where$11), new $Uint64(x$764.$high + 0, x$764.$low + 1))]), stack$19);
			}
			if (!($interfaceIsEqual(xx$28.High, $ifaceNil))) {
				if (ok3$2) {
					_key$206 = (x$765 = o(where$11), new $Uint64(x$765.$high + 0, x$765.$low + 2)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$206)] = { k: _key$206, v: ident3 };
				} else {
					stack$19 = $appendSlice(new sliceType$1([(x$766 = o(where$11), new $Uint64(x$766.$high + 0, x$766.$low + 2))]), stack$19);
				}
			}
			if (xx$28.Slice3) {
				if (ok4) {
					_key$207 = (x$767 = o(where$11), new $Uint64(x$767.$high + 0, x$767.$low + 3)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$207)] = { k: _key$207, v: ident4 };
				} else {
					stack$19 = $appendSlice(new sliceType$1([(x$768 = o(where$11), new $Uint64(x$768.$high + 0, x$768.$low + 3))]), stack$19);
				}
			}
			c.typefield = $appendSlice(c.typefield, stack$19);
		} else if ($assertType(_ref, ptrType$35, true)[1]) {
			xx$29 = $assertType((x), ptrType$35);
			if (c.typefield.$length === 0) {
				break;
			}
			l$5 = new $Uint64(0, 0);
			variant$22 = 0;
			if ($interfaceIsEqual(xx$29.Len, $ifaceNil)) {
				l$5 = new $Uint64(0, 1);
				variant$22 = 27;
			} else {
				l$5 = new $Uint64(0, 2);
				variant$22 = 26;
			}
			_tuple$92 = $assertType(xx$29.Len, ptrType$48, true);
			id1$11 = _tuple$92[0];
			ok1$11 = _tuple$92[1];
			ident1$11 = sliceType$4.nil;
			if (ok1$11) {
				ident1$11 = (new sliceType$4($stringToBytes(id1$11.Name)));
			}
			_tuple$93 = $assertType(xx$29.Elt, ptrType$48, true);
			id2$18 = _tuple$93[0];
			ok2$19 = _tuple$93[1];
			ident2$11 = sliceType$4.nil;
			if (ok2$19) {
				ident2$11 = (new sliceType$4($stringToBytes(id2$18.Name)));
			}
			$unused(variant$22);
			$unused(ident2$11);
			$unused(ident1$11);
			stack$20 = sliceType$1.nil;
			where$12 = (x$769 = c.typefield, x$770 = c.typefield.$length - 1 >> 0, ((x$770 < 0 || x$770 >= x$769.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$769.$array[x$769.$offset + x$770]));
			c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
			_key$208 = where$12; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$208)] = { k: _key$208, v: mapast.ExpressionNode(variant$22, l$5) };
			if (!($interfaceIsEqual(xx$29.Len, $ifaceNil))) {
				if (ok1$11) {
					_key$209 = o(where$12); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$209)] = { k: _key$209, v: ident1$11 };
				} else {
					stack$20 = $appendSlice(new sliceType$1([o(where$12)]), stack$20);
				}
			}
			if (ok2$19) {
				_key$210 = (x$771 = (x$772 = o(where$12), new $Uint64(x$772.$high + l$5.$high, x$772.$low + l$5.$low)), new $Uint64(x$771.$high - 0, x$771.$low - 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$210)] = { k: _key$210, v: ident2$11 };
			} else {
				stack$20 = $appendSlice(new sliceType$1([(x$773 = (x$774 = o(where$12), new $Uint64(x$774.$high + l$5.$high, x$774.$low + l$5.$low)), new $Uint64(x$773.$high - 0, x$773.$low - 1))]), stack$20);
			}
			c.typefield = $appendSlice(c.typefield, stack$20);
		} else if ($assertType(_ref, ptrType$36, true)[1]) {
			xx$30 = $assertType((x), ptrType$36);
			if (c.typefield.$length === 0) {
				break;
			}
			_tuple$94 = $assertType(xx$30.Key, ptrType$48, true);
			id1$12 = _tuple$94[0];
			ok1$12 = _tuple$94[1];
			ident1$12 = sliceType$4.nil;
			if (ok1$12) {
				ident1$12 = (new sliceType$4($stringToBytes(id1$12.Name)));
			}
			_tuple$95 = $assertType(xx$30.Value, ptrType$48, true);
			id2$19 = _tuple$95[0];
			ok2$20 = _tuple$95[1];
			ident2$12 = sliceType$4.nil;
			if (ok2$20) {
				ident2$12 = (new sliceType$4($stringToBytes(id2$19.Name)));
			}
			stack$21 = sliceType$1.nil;
			where$13 = (x$775 = c.typefield, x$776 = c.typefield.$length - 1 >> 0, ((x$776 < 0 || x$776 >= x$775.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$775.$array[x$775.$offset + x$776]));
			c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
			_key$211 = where$13; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$211)] = { k: _key$211, v: mapast.ExpressionNode(28, new $Uint64(0, 2)) };
			if (ok1$12) {
				_key$212 = o(where$13); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$212)] = { k: _key$212, v: ident1$12 };
			} else {
				stack$21 = $appendSlice(new sliceType$1([o(where$13)]), stack$21);
			}
			if (ok2$20) {
				_key$213 = (x$777 = o(where$13), new $Uint64(x$777.$high + 0, x$777.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$213)] = { k: _key$213, v: ident2$12 };
			} else {
				stack$21 = $appendSlice(new sliceType$1([(x$778 = o(where$13), new $Uint64(x$778.$high + 0, x$778.$low + 1))]), stack$21);
			}
			c.typefield = $appendSlice(c.typefield, stack$21);
		} else if ($assertType(_ref, ptrType$37, true)[1]) {
			xx$31 = $assertType((x), ptrType$37);
			if (c.typefield.$length === 0) {
				break;
			}
			numtypes = new $Uint64(0, 0);
			if (!($interfaceIsEqual(xx$31.Type, $ifaceNil))) {
				numtypes = new $Uint64(0, 1);
			}
			_tuple$96 = $assertType(xx$31.Type, ptrType$48, true);
			id1$13 = _tuple$96[0];
			ok1$13 = _tuple$96[1];
			ident1$13 = sliceType$4.nil;
			if (ok1$13) {
				ident1$13 = (new sliceType$4($stringToBytes(id1$13.Name)));
			}
			stack$22 = sliceType$1.nil;
			where$14 = (x$779 = c.typefield, x$780 = c.typefield.$length - 1 >> 0, ((x$780 < 0 || x$780 >= x$779.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$779.$array[x$779.$offset + x$780]));
			c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
			if ((numtypes.$high === 0 && numtypes.$low === 1)) {
				_key$214 = where$14; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$214)] = { k: _key$214, v: mapast.ExpressionNode(23, (x$781 = (new $Uint64(0, xx$31.Elts.$length)), new $Uint64(0 + x$781.$high, 1 + x$781.$low))) };
				if (ok1$13) {
					_key$215 = o(where$14); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$215)] = { k: _key$215, v: ident1$13 };
				} else {
					stack$22 = $appendSlice(new sliceType$1([o(where$14)]), stack$22);
				}
			} else {
				_key$216 = where$14; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$216)] = { k: _key$216, v: mapast.ExpressionNode(31, (x$782 = (new $Uint64(0, xx$31.Elts.$length)), new $Uint64(0 + x$782.$high, 0 + x$782.$low))) };
			}
			_ref$33 = xx$31.Elts;
			_i$23 = 0;
			while (true) {
				if (!(_i$23 < _ref$33.$length)) { break; }
				i$22 = _i$23;
				_tuple$97 = $assertType((x$783 = xx$31.Elts, ((i$22 < 0 || i$22 >= x$783.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$783.$array[x$783.$offset + i$22])), ptrType$48, true);
				id2$20 = _tuple$97[0];
				ok2$21 = _tuple$97[1];
				ident2$13 = sliceType$4.nil;
				if (ok2$21) {
					ident2$13 = (new sliceType$4($stringToBytes(id2$20.Name)));
				}
				$unused(ident2$13);
				if (ok2$21) {
					_key$217 = (x$784 = (x$785 = o(where$14), x$786 = (new $Uint64(0, i$22)), new $Uint64(x$785.$high + x$786.$high, x$785.$low + x$786.$low)), new $Uint64(x$784.$high + numtypes.$high, x$784.$low + numtypes.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$217)] = { k: _key$217, v: ident2$13 };
				} else {
					stack$22 = $appendSlice(new sliceType$1([(x$787 = (x$788 = o(where$14), x$789 = (new $Uint64(0, i$22)), new $Uint64(x$788.$high + x$789.$high, x$788.$low + x$789.$low)), new $Uint64(x$787.$high + numtypes.$high, x$787.$low + numtypes.$low))]), stack$22);
				}
				_i$23++;
			}
			c.typefield = $appendSlice(c.typefield, stack$22);
		} else if ($assertType(_ref, ptrType$38, true)[1]) {
			xx$32 = $assertType((x), ptrType$38);
			if (c.typefield.$length === 0) {
				break;
			}
			_tuple$98 = $assertType(xx$32.X, ptrType$48, true);
			id1$14 = _tuple$98[0];
			ok1$14 = _tuple$98[1];
			ident1$14 = sliceType$4.nil;
			if (ok1$14) {
				ident1$14 = (new sliceType$4($stringToBytes(id1$14.Name)));
			}
			stack$23 = sliceType$1.nil;
			where$15 = (x$790 = c.typefield, x$791 = c.typefield.$length - 1 >> 0, ((x$791 < 0 || x$791 >= x$790.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$790.$array[x$790.$offset + x$791]));
			c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
			if ($interfaceIsEqual(xx$32.Type, $ifaceNil)) {
				_key$218 = where$15; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$218)] = { k: _key$218, v: mapast.ExpressionNode(29, new $Uint64(0, 1)) };
				if (ok1$14) {
					_key$219 = o(where$15); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$219)] = { k: _key$219, v: ident1$14 };
				} else {
					stack$23 = $appendSlice(new sliceType$1([o(where$15)]), stack$23);
				}
			} else {
				_key$220 = where$15; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$220)] = { k: _key$220, v: mapast.ExpressionNode(29, new $Uint64(0, 2)) };
				_tuple$99 = $assertType(xx$32.Type, ptrType$48, true);
				id2$21 = _tuple$99[0];
				ok2$22 = _tuple$99[1];
				ident2$14 = sliceType$4.nil;
				if (ok2$22) {
					ident2$14 = (new sliceType$4($stringToBytes(id2$21.Name)));
				}
				$unused(ident2$14);
				if (ok1$14) {
					_key$221 = o(where$15); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$221)] = { k: _key$221, v: ident1$14 };
				} else {
					stack$23 = $appendSlice(new sliceType$1([o(where$15)]), stack$23);
				}
				if (ok2$22) {
					_key$222 = (x$792 = o(where$15), new $Uint64(x$792.$high + 0, x$792.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$222)] = { k: _key$222, v: ident2$14 };
				} else {
					stack$23 = $appendSlice(new sliceType$1([(x$793 = o(where$15), new $Uint64(x$793.$high + 0, x$793.$low + 1))]), stack$23);
				}
			}
			c.typefield = $appendSlice(c.typefield, stack$23);
		} else if ($assertType(_ref, ptrType$39, true)[1]) {
			xx$33 = $assertType((x), ptrType$39);
			if (c.typefield.$length === 0) {
				break;
			}
			$unused(xx$33);
			where$16 = (x$794 = c.typefield, x$795 = c.typefield.$length - 1 >> 0, ((x$795 < 0 || x$795 >= x$794.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$794.$array[x$794.$offset + x$795]));
			_key$223 = where$16; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$223)] = { k: _key$223, v: mapast.StructType };
			c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
			fieldscount = (new $Uint64(0, xx$33.Fields.List.$length));
			if ((fieldscount.$high > 0 || (fieldscount.$high === 0 && fieldscount.$low > 0))) {
				c.structfield = $append(c.structfield, $toNativeArray($kindUint64, [o(where$16), fieldscount]));
			}
		} else if ($assertType(_ref, ptrType$40, true)[1]) {
			xx$34 = $assertType((x), ptrType$40);
			if (c.typefield.$length === 0) {
				break;
			}
			_tuple$100 = $assertType(xx$34.Key, ptrType$48, true);
			id1$15 = _tuple$100[0];
			ok1$15 = _tuple$100[1];
			ident1$15 = sliceType$4.nil;
			if (ok1$15) {
				ident1$15 = (new sliceType$4($stringToBytes(id1$15.Name)));
			}
			_tuple$101 = $assertType(xx$34.Value, ptrType$48, true);
			id2$22 = _tuple$101[0];
			ok2$23 = _tuple$101[1];
			ident2$15 = sliceType$4.nil;
			if (ok2$23) {
				ident2$15 = (new sliceType$4($stringToBytes(id2$22.Name)));
			}
			$unused(ident2$15);
			$unused(ident1$15);
			stack$24 = sliceType$1.nil;
			where$17 = (x$796 = c.typefield, x$797 = c.typefield.$length - 1 >> 0, ((x$797 < 0 || x$797 >= x$796.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$796.$array[x$796.$offset + x$797]));
			c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
			_key$224 = where$17; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$224)] = { k: _key$224, v: mapast.ExpressionNode(33, new $Uint64(0, 2)) };
			if (ok1$15) {
				_key$225 = o(where$17); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$225)] = { k: _key$225, v: ident1$15 };
			} else {
				stack$24 = $appendSlice(new sliceType$1([o(where$17)]), stack$24);
			}
			if (ok2$23) {
				_key$226 = (x$798 = o(where$17), new $Uint64(x$798.$high + 0, x$798.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$226)] = { k: _key$226, v: ident2$15 };
			} else {
				stack$24 = $appendSlice(new sliceType$1([(x$799 = o(where$17), new $Uint64(x$799.$high + 0, x$799.$low + 1))]), stack$24);
			}
			c.typefield = $appendSlice(c.typefield, stack$24);
		} else if ($assertType(_ref, ptrType$41, true)[1]) {
			xx$35 = $assertType((x), ptrType$41);
			if (c.typefield.$length === 0) {
				break;
			}
			t$11 = (x$800 = c.typefield, x$801 = c.typefield.$length - 1 >> 0, ((x$801 < 0 || x$801 >= x$800.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$800.$array[x$800.$offset + x$801]));
			c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
			results = 0;
			if (!(xx$35.Type.Results === ptrType$49.nil)) {
				results = xx$35.Type.Results.List.$length;
			}
			dimension = (new $Uint64(0, (xx$35.Type.Params.List.$length + results >> 0)));
			if ((dimension.$high > 0 || (dimension.$high === 0 && dimension.$low > 0))) {
				c.structfield = $append(c.structfield, $toNativeArray($kindUint64, [o(t$11), dimension]));
			}
			_key$227 = t$11; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$227)] = { k: _key$227, v: mapast.ClosureExpNode((new $Uint64(0, xx$35.Type.Params.List.$length))) };
			_key$228 = (x$802 = o(t$11), new $Uint64(x$802.$high + dimension.$high, x$802.$low + dimension.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$228)] = { k: _key$228, v: mapast.BlocOfCodeNode(0, new $Uint64(0, 0)) };
			_key$229 = xx$35.Body; (c.blocksstmts || $throwRuntimeError("assignment to entry in nil map"))[ptrType$18.keyFor(_key$229)] = { k: _key$229, v: o((x$803 = o(t$11), new $Uint64(x$803.$high + dimension.$high, x$803.$low + dimension.$low))) };
			c.nowblock = $append(c.nowblock, o((x$804 = o(t$11), new $Uint64(x$804.$high + dimension.$high, x$804.$low + dimension.$low))));
			c.subblocks = $append(c.subblocks, how_many_subblocks_block(xx$35.Body));
			c.substmts = $append(c.substmts, how_many_substmts_block(xx$35.Body));
			_key$230 = xx$35.Type; (c.deadfunc || $throwRuntimeError("assignment to entry in nil map"))[ptrType$44.keyFor(_key$230)] = { k: _key$230, v: new structType.ptr() };
		} else if ($assertType(_ref, ptrType$42, true)[1]) {
			xx$36 = $assertType((x), ptrType$42);
			if (c.typefield.$length === 0) {
				break;
			}
			$unused(xx$36);
			where$18 = (x$805 = c.typefield, x$806 = c.typefield.$length - 1 >> 0, ((x$806 < 0 || x$806 >= x$805.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$805.$array[x$805.$offset + x$806]));
			_key$231 = where$18; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$231)] = { k: _key$231, v: mapast.IfceTypExp };
			c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
			stack$25 = sliceType$1.nil;
			structstack = sliceType.nil;
			_ref$34 = xx$36.Methods.List;
			_i$24 = 0;
			while (true) {
				if (!(_i$24 < _ref$34.$length)) { break; }
				i$23 = _i$24;
				_ref$35 = (x$807 = xx$36.Methods.List, ((i$23 < 0 || i$23 >= x$807.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$807.$array[x$807.$offset + i$23])).Type;
				if ($assertType(_ref$35, ptrType$44, true)[1]) {
					xxx$30 = _ref$35.$val;
					_key$232 = xxx$30; (c.deadfunc || $throwRuntimeError("assignment to entry in nil map"))[ptrType$44.keyFor(_key$232)] = { k: _key$232, v: new structType.ptr() };
					npars = 0;
					nrets = 0;
					if (!($assertType((x$808 = xx$36.Methods.List, ((i$23 < 0 || i$23 >= x$808.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$808.$array[x$808.$offset + i$23])).Type, ptrType$44).Params === ptrType$49.nil)) {
						npars = $assertType((x$809 = xx$36.Methods.List, ((i$23 < 0 || i$23 >= x$809.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$809.$array[x$809.$offset + i$23])).Type, ptrType$44).Params.List.$length;
					}
					if (!($assertType((x$810 = xx$36.Methods.List, ((i$23 < 0 || i$23 >= x$810.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$810.$array[x$810.$offset + i$23])).Type, ptrType$44).Results === ptrType$49.nil)) {
						nrets = $assertType((x$811 = xx$36.Methods.List, ((i$23 < 0 || i$23 >= x$811.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$811.$array[x$811.$offset + i$23])).Type, ptrType$44).Results.List.$length;
					}
					_key$233 = (x$812 = o(where$18), x$813 = (new $Uint64(0, i$23)), new $Uint64(x$812.$high + x$813.$high, x$812.$low + x$813.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$233)] = { k: _key$233, v: $subslice(mapast.IfceMethod, 0, (npars + 1 >> 0)) };
					$unused(nrets);
					structstack = $appendSlice(new sliceType([$toNativeArray($kindUint64, [o((x$814 = o(where$18), x$815 = (new $Uint64(0, i$23)), new $Uint64(x$814.$high + x$815.$high, x$814.$low + x$815.$low))), (new $Uint64(0, ((1 + npars >> 0) + nrets >> 0)))])]), structstack);
				} else if ($assertType(_ref$35, ptrType$48, true)[1]) {
					xxx$31 = _ref$35.$val;
					_key$234 = (x$816 = o(where$18), x$817 = (new $Uint64(0, i$23)), new $Uint64(x$816.$high + x$817.$high, x$816.$low + x$817.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$234)] = { k: _key$234, v: mapast.RootOfType };
					_key$235 = o((x$818 = o(where$18), x$819 = (new $Uint64(0, i$23)), new $Uint64(x$818.$high + x$819.$high, x$818.$low + x$819.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$235)] = { k: _key$235, v: (new sliceType$4($stringToBytes($assertType((x$820 = xx$36.Methods.List, ((i$23 < 0 || i$23 >= x$820.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$820.$array[x$820.$offset + i$23])).Type, ptrType$48).Name))) };
					structstack = $appendSlice(new sliceType([$toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(0, 0)])]), structstack);
				} else if ($assertType(_ref$35, ptrType$27, true)[1]) {
					xxx$32 = _ref$35.$val;
					_key$236 = (x$821 = o(where$18), x$822 = (new $Uint64(0, i$23)), new $Uint64(x$821.$high + x$822.$high, x$821.$low + x$822.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$236)] = { k: _key$236, v: mapast.RootOfType };
					stack$25 = $appendSlice(new sliceType$1([o((x$823 = o(where$18), x$824 = (new $Uint64(0, i$23)), new $Uint64(x$823.$high + x$824.$high, x$823.$low + x$824.$low)))]), stack$25);
					structstack = $appendSlice(new sliceType([$toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(0, 0)])]), structstack);
				} else {
					xxx$33 = _ref$35;
				}
				_i$24++;
			}
			c.structfield = $appendSlice(c.structfield, structstack);
			c.typefield = $appendSlice(c.typefield, stack$25);
		} else if ($assertType(_ref, ptrType$19, true)[1]) {
			xx$37 = $assertType((x), ptrType$19);
			while (true) {
				if (!((x$825 = c.substmts, x$826 = c.substmts.$length - 1 >> 0, ((x$826 < 0 || x$826 >= x$825.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$825.$array[x$825.$offset + x$826])) <= 0 && (x$827 = c.subblocks, x$828 = c.subblocks.$length - 1 >> 0, ((x$828 < 0 || x$828 >= x$827.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$827.$array[x$827.$offset + x$828])) <= 0)) { break; }
				c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
				c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
				c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
			}
			_index$43 = c.subblocks.$length - 1 >> 0;
			(x$830 = c.subblocks, ((_index$43 < 0 || _index$43 >= x$830.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$830.$array[x$830.$offset + _index$43] = ((x$829 = c.subblocks, ((_index$43 < 0 || _index$43 >= x$829.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$829.$array[x$829.$offset + _index$43])) - (1) >> 0)));
			t$12 = (x$831 = c.nowblock, x$832 = c.nowblock.$length - 1 >> 0, ((x$832 < 0 || x$832 >= x$831.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$831.$array[x$831.$offset + x$832]));
			_key$237 = t$12; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$237)] = { k: _key$237, v: mapast.BlocOfCodeNode(7, new $Uint64(0, 0)) };
			_index$44 = c.nowblock.$length - 1 >> 0;
			(x$836 = c.nowblock, ((_index$44 < 0 || _index$44 >= x$836.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$836.$array[x$836.$offset + _index$44] = (x$833 = (x$834 = c.nowblock, ((_index$44 < 0 || _index$44 >= x$834.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$834.$array[x$834.$offset + _index$44])), x$835 = new $Uint64(0, 1), new $Uint64(x$833.$high + x$835.$high, x$833.$low + x$835.$low))));
			_key$238 = xx$37.Body; (c.blocksstmts || $throwRuntimeError("assignment to entry in nil map"))[ptrType$18.keyFor(_key$238)] = { k: _key$238, v: o(t$12) };
			c.nowblock = $append(c.nowblock, o(t$12));
			c.subblocks = $append(c.subblocks, how_many_subblocks_block(xx$37.Body));
			c.substmts = $append(c.substmts, 0);
		} else if ($assertType(_ref, ptrType$20, true)[1]) {
			xx$38 = $assertType((x), ptrType$20);
			while (true) {
				if (!((x$837 = c.substmts, x$838 = c.substmts.$length - 1 >> 0, ((x$838 < 0 || x$838 >= x$837.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$837.$array[x$837.$offset + x$838])) <= 0 && (x$839 = c.subblocks, x$840 = c.subblocks.$length - 1 >> 0, ((x$840 < 0 || x$840 >= x$839.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$839.$array[x$839.$offset + x$840])) <= 0)) { break; }
				c.substmts = $subslice(c.substmts, 0, (c.substmts.$length - 1 >> 0));
				c.subblocks = $subslice(c.subblocks, 0, (c.subblocks.$length - 1 >> 0));
				c.nowblock = $subslice(c.nowblock, 0, (c.nowblock.$length - 1 >> 0));
			}
			_index$45 = c.subblocks.$length - 1 >> 0;
			(x$842 = c.subblocks, ((_index$45 < 0 || _index$45 >= x$842.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$842.$array[x$842.$offset + _index$45] = ((x$841 = c.subblocks, ((_index$45 < 0 || _index$45 >= x$841.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$841.$array[x$841.$offset + _index$45])) - (1) >> 0)));
			t$13 = (x$843 = c.nowblock, x$844 = c.nowblock.$length - 1 >> 0, ((x$844 < 0 || x$844 >= x$843.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$843.$array[x$843.$offset + x$844]));
			_index$46 = c.nowblock.$length - 1 >> 0;
			(x$848 = c.nowblock, ((_index$46 < 0 || _index$46 >= x$848.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$848.$array[x$848.$offset + _index$46] = (x$845 = (x$846 = c.nowblock, ((_index$46 < 0 || _index$46 >= x$846.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$846.$array[x$846.$offset + _index$46])), x$847 = new $Uint64(0, 1), new $Uint64(x$845.$high + x$847.$high, x$845.$low + x$847.$low))));
			theadcount$9 = new $Uint64(0, 0);
			stack$26 = sliceType$1.nil;
			if ($interfaceIsEqual(xx$38.Comm, $ifaceNil)) {
				_key$239 = t$13; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$239)] = { k: _key$239, v: mapast.BlocOfCodeNode(12, new $Uint64(0, 0)) };
			} else {
				_key$240 = t$13; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$240)] = { k: _key$240, v: mapast.BlocOfCodeNode(11, new $Uint64(0, 1)) };
				_ref$36 = xx$38.Comm;
				if ($assertType(_ref$36, ptrType$9, true)[1]) {
					xxx$34 = $assertType(xx$38.Comm, ptrType$9);
					_tuple$102 = $assertType(xxx$34.Chan, ptrType$48, true);
					id1$16 = _tuple$102[0];
					ok1$16 = _tuple$102[1];
					ident1$16 = sliceType$4.nil;
					if (ok1$16) {
						ident1$16 = (new sliceType$4($stringToBytes(id1$16.Name)));
					}
					_tuple$103 = $assertType(xxx$34.Value, ptrType$48, true);
					id2$23 = _tuple$103[0];
					ok2$24 = _tuple$103[1];
					ident2$16 = sliceType$4.nil;
					if (ok2$24) {
						ident2$16 = (new sliceType$4($stringToBytes(id2$23.Name)));
					}
					$unused(ident1$16);
					$unused(ident2$16);
					_key$241 = (x$849 = o(t$13), new $Uint64(x$849.$high + theadcount$9.$high, x$849.$low + theadcount$9.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$241)] = { k: _key$241, v: mapast.ExpressionNode(25, new $Uint64(0, 2)) };
					if (ok1$16) {
						_key$242 = o((x$850 = o(t$13), new $Uint64(x$850.$high + theadcount$9.$high, x$850.$low + theadcount$9.$low))); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$242)] = { k: _key$242, v: ident1$16 };
					} else {
						stack$26 = $appendSlice(new sliceType$1([o((x$851 = o(t$13), new $Uint64(x$851.$high + theadcount$9.$high, x$851.$low + theadcount$9.$low)))]), stack$26);
					}
					if (ok2$24) {
						_key$243 = (x$852 = o((x$853 = o(t$13), new $Uint64(x$853.$high + theadcount$9.$high, x$853.$low + theadcount$9.$low))), new $Uint64(x$852.$high + 0, x$852.$low + 1)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$243)] = { k: _key$243, v: ident2$16 };
					} else {
						stack$26 = $appendSlice(new sliceType$1([(x$854 = o((x$855 = o(t$13), new $Uint64(x$855.$high + theadcount$9.$high, x$855.$low + theadcount$9.$low))), new $Uint64(x$854.$high + 0, x$854.$low + 1))]), stack$26);
					}
					theadcount$9 = (x$856 = new $Uint64(0, 1), new $Uint64(theadcount$9.$high + x$856.$high, theadcount$9.$low + x$856.$low));
					c.skippedsends = c.skippedsends + (1) << 24 >>> 24;
				} else if ($assertType(_ref$36, ptrType$2, true)[1]) {
					_tuple$104 = $assertType($assertType(xx$38.Comm, ptrType$2).X, ptrType$48, true);
					id$41 = _tuple$104[0];
					ok$48 = _tuple$104[1];
					ident$47 = sliceType$4.nil;
					if (ok$48) {
						ident$47 = (new sliceType$4($stringToBytes(id$41.Name)));
					}
					$unused(ident$47);
					_key$244 = o(t$13); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$244)] = { k: _key$244, v: mapast.ExpressionNode(0, new $Uint64(0, 1)) };
					if (ok$48) {
						_key$245 = o(o(t$13)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$245)] = { k: _key$245, v: ident$47 };
					} else {
						stack$26 = $appendSlice(new sliceType$1([o(o(t$13))]), stack$26);
					}
					theadcount$9 = (x$857 = new $Uint64(0, 1), new $Uint64(theadcount$9.$high + x$857.$high, theadcount$9.$low + x$857.$low));
					c.skippedexpressions = c.skippedexpressions + (1) << 24 >>> 24;
				} else if ($assertType(_ref$36, ptrType$7, true)[1]) {
					xxx$35 = $assertType(xx$38.Comm, ptrType$7);
					variant$23 = 0;
					_14 = xxx$35.Tok;
					if (_14 === (42)) {
						variant$23 = 0;
					} else if (_14 === (47)) {
						variant$23 = 1;
					} else if (_14 === (23)) {
						variant$23 = 3;
					} else if (_14 === (24)) {
						variant$23 = 4;
					} else if (_14 === (25)) {
						variant$23 = 5;
					} else if (_14 === (26)) {
						variant$23 = 6;
					} else if (_14 === (27)) {
						variant$23 = 7;
					} else if (_14 === (28)) {
						variant$23 = 8;
					} else if (_14 === (29)) {
						variant$23 = 9;
					} else if (_14 === (30)) {
						variant$23 = 10;
					} else if (_14 === (31)) {
						variant$23 = 11;
					} else if (_14 === (32)) {
						variant$23 = 12;
					} else if (_14 === (33)) {
						variant$23 = 2;
					}
					if (!((xxx$35.Lhs.$length === xxx$35.Rhs.$length))) {
						variant$23 = variant$23 + (15) << 24 >>> 24;
					}
					l$6 = (new $Uint64(0, xxx$35.Lhs.$length));
					_key$246 = (x$858 = o(t$13), new $Uint64(x$858.$high + theadcount$9.$high, x$858.$low + theadcount$9.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$246)] = { k: _key$246, v: mapast.AssignStmtNode(variant$23, (new $Uint64(0, (xxx$35.Lhs.$length + xxx$35.Rhs.$length >> 0)))) };
					_ref$37 = xxx$35.Lhs;
					_i$25 = 0;
					while (true) {
						if (!(_i$25 < _ref$37.$length)) { break; }
						i$24 = _i$25;
						ident$48 = sliceType$4.nil;
						_tuple$105 = $assertType((x$859 = xxx$35.Lhs, ((i$24 < 0 || i$24 >= x$859.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$859.$array[x$859.$offset + i$24])), ptrType$48, true);
						id$42 = _tuple$105[0];
						ok$49 = _tuple$105[1];
						if (ok$49) {
							ident$48 = (new sliceType$4($stringToBytes(id$42.Name)));
						}
						if (ok$49) {
							_key$247 = (x$860 = o((x$861 = o(t$13), new $Uint64(x$861.$high + theadcount$9.$high, x$861.$low + theadcount$9.$low))), x$862 = (new $Uint64(0, i$24)), new $Uint64(x$860.$high + x$862.$high, x$860.$low + x$862.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$247)] = { k: _key$247, v: ident$48 };
						} else {
							stack$26 = $appendSlice(new sliceType$1([(x$863 = o((x$864 = o(t$13), new $Uint64(x$864.$high + theadcount$9.$high, x$864.$low + theadcount$9.$low))), x$865 = (new $Uint64(0, i$24)), new $Uint64(x$863.$high + x$865.$high, x$863.$low + x$865.$low))]), stack$26);
						}
						_i$25++;
					}
					_ref$38 = xxx$35.Rhs;
					_i$26 = 0;
					while (true) {
						if (!(_i$26 < _ref$38.$length)) { break; }
						i$25 = _i$26;
						ident$49 = sliceType$4.nil;
						_tuple$106 = $assertType((x$866 = xxx$35.Rhs, ((i$25 < 0 || i$25 >= x$866.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$866.$array[x$866.$offset + i$25])), ptrType$48, true);
						id$43 = _tuple$106[0];
						ok$50 = _tuple$106[1];
						if (ok$50) {
							ident$49 = (new sliceType$4($stringToBytes(id$43.Name)));
						}
						if (ok$50) {
							_key$248 = (x$867 = (x$868 = o((x$869 = o(t$13), new $Uint64(x$869.$high + theadcount$9.$high, x$869.$low + theadcount$9.$low))), x$870 = (new $Uint64(0, i$25)), new $Uint64(x$868.$high + x$870.$high, x$868.$low + x$870.$low)), new $Uint64(x$867.$high + l$6.$high, x$867.$low + l$6.$low)); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$248)] = { k: _key$248, v: ident$49 };
						} else {
							stack$26 = $appendSlice(new sliceType$1([(x$871 = (x$872 = o((x$873 = o(t$13), new $Uint64(x$873.$high + theadcount$9.$high, x$873.$low + theadcount$9.$low))), x$874 = (new $Uint64(0, i$25)), new $Uint64(x$872.$high + x$874.$high, x$872.$low + x$874.$low)), new $Uint64(x$871.$high + l$6.$high, x$871.$low + l$6.$low))]), stack$26);
						}
						_i$26++;
					}
					theadcount$9 = (x$875 = new $Uint64(0, 1), new $Uint64(theadcount$9.$high + x$875.$high, theadcount$9.$low + x$875.$low));
					c.skippedassignments = c.skippedassignments + (1) << 24 >>> 24;
				}
			}
			c.typefield = $appendSlice(c.typefield, stack$26);
			subs$3 = how_many_subblocks_stmt_list(xx$38.Body);
			sus$3 = how_many_substmts_stmt_list(xx$38.Body);
			c.nowblock = $append(c.nowblock, (x$876 = o(t$13), x$877 = theadcount$9, new $Uint64(x$876.$high + x$877.$high, x$876.$low + x$877.$low)));
			c.subblocks = $append(c.subblocks, subs$3);
			c.substmts = $append(c.substmts, sus$3);
		} else if ($assertType(_ref, ptrType$43, true)[1]) {
			xx$39 = $assertType((x), ptrType$43);
			if (c.typefield.$length === 0) {
				break;
			}
			_tuple$107 = $assertType(xx$39.Value, ptrType$48, true);
			id$44 = _tuple$107[0];
			ok$51 = _tuple$107[1];
			ident$50 = sliceType$4.nil;
			variant$24 = 35;
			_15 = xx$39.Dir;
			if (_15 === (1)) {
				variant$24 = 36;
			} else if (_15 === (2)) {
				variant$24 = 37;
			}
			if (ok$51) {
				ident$50 = (new sliceType$4($stringToBytes(id$44.Name)));
			}
			where$19 = (x$878 = c.typefield, x$879 = c.typefield.$length - 1 >> 0, ((x$879 < 0 || x$879 >= x$878.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$878.$array[x$878.$offset + x$879]));
			_key$249 = where$19; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$249)] = { k: _key$249, v: mapast.ExpressionNode(variant$24, new $Uint64(0, 1)) };
			c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
			if (ok$51) {
				_key$250 = o(where$19); (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$250)] = { k: _key$250, v: ident$50 };
			} else {
				c.typefield = $append(c.typefield, o(where$19));
			}
		} else if ($assertType(_ref, ptrType$44, true)[1]) {
			xx$40 = $assertType((x), ptrType$44);
			if (c.typefield.$length === 0) {
				break;
			}
			_tuple$108 = (_entry$17 = c.deadfunc[ptrType$44.keyFor(xx$40)], _entry$17 !== undefined ? [_entry$17.v, true] : [new structType.ptr(), false]);
			ok$52 = _tuple$108[1];
			if (ok$52) {
				break;
			}
			t$14 = (x$880 = c.typefield, x$881 = c.typefield.$length - 1 >> 0, ((x$881 < 0 || x$881 >= x$880.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$880.$array[x$880.$offset + x$881]));
			c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
			results$1 = 0;
			if (!(xx$40.Results === ptrType$49.nil)) {
				results$1 = xx$40.Results.List.$length;
			}
			dimension$1 = (new $Uint64(0, (xx$40.Params.List.$length + results$1 >> 0)));
			if ((dimension$1.$high > 0 || (dimension$1.$high === 0 && dimension$1.$low > 0))) {
				c.structfield = $append(c.structfield, $toNativeArray($kindUint64, [o(t$14), dimension$1]));
			}
			_key$251 = t$14; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$251)] = { k: _key$251, v: mapast.ClosureExpNode((new $Uint64(0, xx$40.Params.List.$length))) };
		} else if ($assertType(_ref, ptrType$45, true)[1]) {
			if (c.skippedellipsis > 0) {
				c.skippedellipsis = c.skippedellipsis - (1) << 24 >>> 24;
				break;
			}
			if (c.typefield.$length === 0) {
				break;
			}
			t$15 = (x$882 = c.typefield, x$883 = c.typefield.$length - 1 >> 0, ((x$883 < 0 || x$883 >= x$882.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$882.$array[x$882.$offset + x$883]));
			c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
			_key$252 = t$15; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$252)] = { k: _key$252, v: (new sliceType$4($stringToBytes("..."))) };
		} else if ($assertType(_ref, ptrType$46, true)[1]) {
			where$20 = (x$884 = c.typefield, x$885 = c.typefield.$length - 1 >> 0, ((x$885 < 0 || x$885 >= x$884.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$884.$array[x$884.$offset + x$885]));
			_key$253 = where$20; (c.AstTree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$253)] = { k: _key$253, v: mapast.GenericExp };
			c.typefield = $subslice(c.typefield, 0, (c.typefield.$length - 1 >> 0));
		} else {
		} }
		return c;
	};
	Conversion.prototype.Visit = function(x) { return this.$val.Visit(x); };
	resolve_toplevel_generic_types = function(ast$1, gtypenames, gtypeset, iterator) {
		var _1, _2, _entry, _entry$1, _entry$10, _entry$11, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, _key, _key$1, _key$2, _key$3, _tuple, _tuple$1, ast$1, gtypenames, gtypeset, i, iterator, n, node, num, ok, ok$1, typename, typename$1, typename$2, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		num = 0;
		node = (_entry = ast$1[$Uint64.keyFor(iterator)], _entry !== undefined ? _entry.v : sliceType$4.nil);
		if (node.$length === 0) {
			num = 0;
			return num;
		}
		_1 = $indexPtr(node.$array, node.$offset + 0, ptrType$50);
		if (_1 === ((x = mapast.RootMatter, $indexPtr(x.$array, x.$offset + 0, ptrType$50)))) {
			num = resolve_toplevel_generic_types(ast$1, gtypenames, gtypeset, mapast.O(iterator));
			return num;
		} else if (_1 === ((x$1 = mapast.GenericExp, $indexPtr(x$1.$array, x$1.$offset + 0, ptrType$50)))) {
			num = 1;
			return num;
		}
		i = new $Uint64(0, 0);
		while (true) {
			if (!(!((_entry$1 = ast$1[$Uint64.keyFor(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low))], _entry$1 !== undefined ? _entry$1.v : sliceType$4.nil) === sliceType$4.nil))) { break; }
			_2 = (x$2 = (_entry$2 = ast$1[$Uint64.keyFor(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low))], _entry$2 !== undefined ? _entry$2.v : sliceType$4.nil), $indexPtr(x$2.$array, x$2.$offset + 0, ptrType$50));
			if (_2 === ((x$3 = mapast.FileMatter, $indexPtr(x$3.$array, x$3.$offset + 0, ptrType$50)))) {
				num = num + (resolve_toplevel_generic_types(ast$1, gtypenames, gtypeset, mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low)))) >> 0;
			} else if (_2 === ((x$4 = mapast.TypedIdent, $indexPtr(x$4.$array, x$4.$offset + 0, ptrType$50)))) {
				num = num + (resolve_toplevel_generic_types(ast$1, gtypenames, gtypeset, mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low)))) >> 0;
			} else if (_2 === ((x$5 = mapast.RootOfType, $indexPtr(x$5.$array, x$5.$offset + 0, ptrType$50)))) {
				_key = new $Uint64(0, 1); (gtypeset || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key)] = { k: _key, v: new structType.ptr() };
				num = num + (resolve_toplevel_generic_types(ast$1, gtypenames, gtypeset, mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low)))) >> 0;
				delete gtypeset[$Uint64.keyFor(new $Uint64(0, 1))];
				typename = ($bytesToString((_entry$3 = ast$1[$Uint64.keyFor(mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low)))], _entry$3 !== undefined ? _entry$3.v : sliceType$4.nil)));
				if (mapast.Which((_entry$4 = ast$1[$Uint64.keyFor(mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low)))], _entry$4 !== undefined ? _entry$4.v : sliceType$4.nil)) === sliceType$4.nil) {
					if (!((x$11 = (_entry$5 = gtypenames[$String.keyFor(typename)], _entry$5 !== undefined ? _entry$5.v : new $Uint64(0, 0)), (x$11.$high === 0 && x$11.$low === 0)))) {
						num = num + (1) >> 0;
					}
				}
			} else if (_2 === ((x$6 = mapast.TypDefStmt, $indexPtr(x$6.$array, x$6.$offset + 0, ptrType$50)))) {
				typename$1 = ($bytesToString((_entry$6 = ast$1[$Uint64.keyFor(mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low)))], _entry$6 !== undefined ? _entry$6.v : sliceType$4.nil)));
				_tuple = (_entry$7 = gtypeset[$Uint64.keyFor(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low))], _entry$7 !== undefined ? [_entry$7.v, true] : [new structType.ptr(), false]);
				ok = _tuple[1];
				if (!ok) {
					n = resolve_toplevel_generic_types(ast$1, gtypenames, gtypeset, mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low)));
					if (n > 0) {
						_key$1 = typename$1; (gtypenames || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low) };
						_key$2 = new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low); (gtypeset || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$2)] = { k: _key$2, v: new structType.ptr() };
					}
					num = num + (n) >> 0;
				}
			} else if (_2 === ((x$7 = mapast.StructType, $indexPtr(x$7.$array, x$7.$offset + 0, ptrType$50)))) {
				num = num + (resolve_toplevel_generic_types(ast$1, gtypenames, gtypeset, mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low)))) >> 0;
			} else if (_2 === ((x$8 = mapast.IfceTypExp, $indexPtr(x$8.$array, x$8.$offset + 0, ptrType$50)))) {
				num = num + (resolve_toplevel_generic_types(ast$1, gtypenames, gtypeset, mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low)))) >> 0;
			} else if (_2 === ((x$9 = mapast.IfceMethod, $indexPtr(x$9.$array, x$9.$offset + 0, ptrType$50)))) {
				_key$3 = new $Uint64(0, 1); (gtypeset || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$3)] = { k: _key$3, v: new structType.ptr() };
				num = num + (resolve_toplevel_generic_types(ast$1, gtypenames, gtypeset, mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low)))) >> 0;
				delete gtypeset[$Uint64.keyFor(new $Uint64(0, 1))];
			} else if (_2 === ((x$10 = mapast.Expression, $indexPtr(x$10.$array, x$10.$offset + 0, ptrType$50)))) {
				num = num + (resolve_toplevel_generic_types(ast$1, gtypenames, gtypeset, mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low)))) >> 0;
				_tuple$1 = (_entry$8 = gtypeset[$Uint64.keyFor(new $Uint64(0, 1))], _entry$8 !== undefined ? [_entry$8.v, true] : [new structType.ptr(), false]);
				ok$1 = _tuple$1[1];
				if (ok$1) {
					typename$2 = ($bytesToString((_entry$9 = ast$1[$Uint64.keyFor(mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low)))], _entry$9 !== undefined ? _entry$9.v : sliceType$4.nil)));
					if (mapast.Which((_entry$10 = ast$1[$Uint64.keyFor(mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low)))], _entry$10 !== undefined ? _entry$10.v : sliceType$4.nil)) === sliceType$4.nil) {
						if (!((x$12 = (_entry$11 = gtypenames[$String.keyFor(typename$2)], _entry$11 !== undefined ? _entry$11.v : new $Uint64(0, 0)), (x$12.$high === 0 && x$12.$low === 0)))) {
							num = num + (1) >> 0;
						}
					}
				}
			}
			i = (x$13 = new $Uint64(0, 1), new $Uint64(i.$high + x$13.$high, i.$low + x$13.$low));
		}
		num = num;
		return num;
	};
	resolve_toplevel_generic_funcs = function(ast$1, gtypenames, gtypeset, gfuncnames, gfuncset, iterator) {
		var _1, _2, _entry, _entry$1, _entry$10, _entry$11, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, _key, _key$1, _key$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, ast$1, funcname, gfuncnames, gfuncset, gtypenames, gtypeset, i, i$1, iterator, node, num, ok, ok$1, typename, typename$1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$10 = $f._entry$10; _entry$11 = $f._entry$11; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _entry$8 = $f._entry$8; _entry$9 = $f._entry$9; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; ast$1 = $f.ast$1; funcname = $f.funcname; gfuncnames = $f.gfuncnames; gfuncset = $f.gfuncset; gtypenames = $f.gtypenames; gtypeset = $f.gtypeset; i = $f.i; i$1 = $f.i$1; iterator = $f.iterator; node = $f.node; num = $f.num; ok = $f.ok; ok$1 = $f.ok$1; typename = $f.typename; typename$1 = $f.typename$1; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		num = 0;
		node = (_entry = ast$1[$Uint64.keyFor(iterator)], _entry !== undefined ? _entry.v : sliceType$4.nil);
		if (node.$length === 0) {
			num = 0;
			$s = -1; return num;
		}
			_1 = $indexPtr(node.$array, node.$offset + 0, ptrType$50);
			/* */ if (_1 === ((x = mapast.RootMatter, $indexPtr(x.$array, x.$offset + 0, ptrType$50)))) { $s = 2; continue; }
			/* */ if (_1 === ((x$1 = mapast.ToplevFunc, $indexPtr(x$1.$array, x$1.$offset + 0, ptrType$50)))) { $s = 3; continue; }
			/* */ if (_1 === ((x$2 = mapast.GenericExp, $indexPtr(x$2.$array, x$2.$offset + 0, ptrType$50)))) { $s = 4; continue; }
			/* */ if (_1 === ((x$3 = mapast.TypedIdent, $indexPtr(x$3.$array, x$3.$offset + 0, ptrType$50)))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === ((x = mapast.RootMatter, $indexPtr(x.$array, x.$offset + 0, ptrType$50)))) { */ case 2:
				_r = resolve_toplevel_generic_funcs(ast$1, gtypenames, gtypeset, gfuncnames, gfuncset, mapast.O(iterator)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				num = _r;
				$s = -1; return num;
			/* } else if (_1 === ((x$1 = mapast.ToplevFunc, $indexPtr(x$1.$array, x$1.$offset + 0, ptrType$50)))) { */ case 3:
				_tuple = (_entry$1 = gfuncset[$Uint64.keyFor(iterator)], _entry$1 !== undefined ? [_entry$1.v, true] : [new structType.ptr(), false]);
				ok = _tuple[1];
				if (ok) {
					num = 0;
					$s = -1; return num;
				}
				funcname = ($bytesToString((_entry$2 = ast$1[$Uint64.keyFor(mapast.O(iterator))], _entry$2 !== undefined ? _entry$2.v : sliceType$4.nil)));
				/* */ if (false) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (false) { */ case 8:
					_r$1 = fmt.Printf("Toplevel function %s %d %d \n", new sliceType$6([new $String(funcname), new $Int(node.$length), new $Int(node.$capacity)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$1;
				/* } */ case 9:
				/* */ if ((node.$length - 1 >> 0) === 0) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if ((node.$length - 1 >> 0) === 0) { */ case 11:
					i = node.$length - 1 >> 0;
					/* while (true) { */ case 13:
						/* if (!(i < (node.$capacity - 1 >> 0))) { break; } */ if(!(i < (node.$capacity - 1 >> 0))) { $s = 14; continue; }
						/* */ if (false) { $s = 15; continue; }
						/* */ $s = 16; continue;
						/* if (false) { */ case 15:
							_r$2 = mapast.PrintDump(ast$1, (x$4 = mapast.O(iterator), x$5 = (new $Uint64(0, (i + 1 >> 0))), new $Uint64(x$4.$high + x$5.$high, x$4.$low + x$5.$low)), 0); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
							_r$2;
						/* } */ case 16:
						_r$3 = resolve_toplevel_generic_funcs(ast$1, gtypenames, gtypeset, gfuncnames, gfuncset, (x$6 = mapast.O(iterator), x$7 = (new $Uint64(0, (i + 1 >> 0))), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low))); /* */ $s = 18; case 18: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						num = num + (_r$3) >> 0;
						i = i + (1) >> 0;
					/* } */ $s = 13; continue; case 14:
				/* } */ case 12:
				if (num > 0) {
					_key = funcname; (gfuncnames || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: iterator };
					_key$1 = iterator; (gfuncset || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$1)] = { k: _key$1, v: new structType.ptr() };
				}
				num = num;
				$s = -1; return num;
			/* } else if (_1 === ((x$2 = mapast.GenericExp, $indexPtr(x$2.$array, x$2.$offset + 0, ptrType$50)))) { */ case 4:
				num = 1;
				$s = -1; return num;
			/* } else if (_1 === ((x$3 = mapast.TypedIdent, $indexPtr(x$3.$array, x$3.$offset + 0, ptrType$50)))) { */ case 5:
				_r$4 = resolve_toplevel_generic_funcs(ast$1, gtypenames, gtypeset, gfuncnames, gfuncset, mapast.O(iterator)); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				num = _r$4;
				$s = -1; return num;
			/* } */ case 6:
		case 1:
		i$1 = new $Uint64(0, 0);
		/* while (true) { */ case 20:
			/* if (!(!((_entry$3 = ast$1[$Uint64.keyFor(new $Uint64(iterator.$high + i$1.$high, iterator.$low + i$1.$low))], _entry$3 !== undefined ? _entry$3.v : sliceType$4.nil) === sliceType$4.nil))) { break; } */ if(!(!((_entry$3 = ast$1[$Uint64.keyFor(new $Uint64(iterator.$high + i$1.$high, iterator.$low + i$1.$low))], _entry$3 !== undefined ? _entry$3.v : sliceType$4.nil) === sliceType$4.nil))) { $s = 21; continue; }
				_2 = (x$8 = (_entry$4 = ast$1[$Uint64.keyFor(new $Uint64(iterator.$high + i$1.$high, iterator.$low + i$1.$low))], _entry$4 !== undefined ? _entry$4.v : sliceType$4.nil), $indexPtr(x$8.$array, x$8.$offset + 0, ptrType$50));
				/* */ if (_2 === ((x$9 = mapast.FileMatter, $indexPtr(x$9.$array, x$9.$offset + 0, ptrType$50)))) { $s = 23; continue; }
				/* */ if (_2 === ((x$10 = mapast.RootOfType, $indexPtr(x$10.$array, x$10.$offset + 0, ptrType$50)))) { $s = 24; continue; }
				/* */ if (_2 === ((x$11 = mapast.StructType, $indexPtr(x$11.$array, x$11.$offset + 0, ptrType$50)))) { $s = 25; continue; }
				/* */ if (_2 === ((x$12 = mapast.IfceTypExp, $indexPtr(x$12.$array, x$12.$offset + 0, ptrType$50)))) { $s = 26; continue; }
				/* */ if (_2 === ((x$13 = mapast.Expression, $indexPtr(x$13.$array, x$13.$offset + 0, ptrType$50)))) { $s = 27; continue; }
				/* */ if (_2 === ((x$14 = mapast.IfceMethod, $indexPtr(x$14.$array, x$14.$offset + 0, ptrType$50)))) { $s = 28; continue; }
				/* */ if (_2 === ((x$15 = mapast.ToplevFunc, $indexPtr(x$15.$array, x$15.$offset + 0, ptrType$50)))) { $s = 29; continue; }
				/* */ $s = 30; continue;
				/* if (_2 === ((x$9 = mapast.FileMatter, $indexPtr(x$9.$array, x$9.$offset + 0, ptrType$50)))) { */ case 23:
					_r$5 = resolve_toplevel_generic_funcs(ast$1, gtypenames, gtypeset, gfuncnames, gfuncset, mapast.O(new $Uint64(iterator.$high + i$1.$high, iterator.$low + i$1.$low))); /* */ $s = 31; case 31: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					num = num + (_r$5) >> 0;
					$s = 30; continue;
				/* } else if (_2 === ((x$10 = mapast.RootOfType, $indexPtr(x$10.$array, x$10.$offset + 0, ptrType$50)))) { */ case 24:
					_key$2 = new $Uint64(0, 1); (gtypeset || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$2)] = { k: _key$2, v: new structType.ptr() };
					_r$6 = resolve_toplevel_generic_funcs(ast$1, gtypenames, gtypeset, gfuncnames, gfuncset, mapast.O(new $Uint64(iterator.$high + i$1.$high, iterator.$low + i$1.$low))); /* */ $s = 32; case 32: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					num = num + (_r$6) >> 0;
					delete gtypeset[$Uint64.keyFor(new $Uint64(0, 1))];
					/* */ if (mapast.Which((_entry$5 = ast$1[$Uint64.keyFor(mapast.O(new $Uint64(iterator.$high + i$1.$high, iterator.$low + i$1.$low)))], _entry$5 !== undefined ? _entry$5.v : sliceType$4.nil)) === sliceType$4.nil) { $s = 33; continue; }
					/* */ $s = 34; continue;
					/* if (mapast.Which((_entry$5 = ast$1[$Uint64.keyFor(mapast.O(new $Uint64(iterator.$high + i$1.$high, iterator.$low + i$1.$low)))], _entry$5 !== undefined ? _entry$5.v : sliceType$4.nil)) === sliceType$4.nil) { */ case 33:
						typename = ($bytesToString((_entry$6 = ast$1[$Uint64.keyFor(mapast.O(new $Uint64(iterator.$high + i$1.$high, iterator.$low + i$1.$low)))], _entry$6 !== undefined ? _entry$6.v : sliceType$4.nil)));
						/* */ if (false) { $s = 35; continue; }
						/* */ $s = 36; continue;
						/* if (false) { */ case 35:
							_r$7 = fmt.Printf("Root typename %s \n", new sliceType$6([new $String(typename)])); /* */ $s = 37; case 37: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
							_r$7;
						/* } */ case 36:
						if (!((x$16 = (_entry$7 = gtypenames[$String.keyFor(typename)], _entry$7 !== undefined ? _entry$7.v : new $Uint64(0, 0)), (x$16.$high === 0 && x$16.$low === 0)))) {
							num = num + (1) >> 0;
						}
					/* } */ case 34:
					$s = 30; continue;
				/* } else if (_2 === ((x$11 = mapast.StructType, $indexPtr(x$11.$array, x$11.$offset + 0, ptrType$50)))) { */ case 25:
					_r$8 = resolve_toplevel_generic_funcs(ast$1, gtypenames, gtypeset, gfuncnames, gfuncset, mapast.O(new $Uint64(iterator.$high + i$1.$high, iterator.$low + i$1.$low))); /* */ $s = 38; case 38: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					num = num + (_r$8) >> 0;
					$s = 30; continue;
				/* } else if (_2 === ((x$12 = mapast.IfceTypExp, $indexPtr(x$12.$array, x$12.$offset + 0, ptrType$50)))) { */ case 26:
					_r$9 = resolve_toplevel_generic_funcs(ast$1, gtypenames, gtypeset, gfuncnames, gfuncset, mapast.O(new $Uint64(iterator.$high + i$1.$high, iterator.$low + i$1.$low))); /* */ $s = 39; case 39: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					num = num + (_r$9) >> 0;
					$s = 30; continue;
				/* } else if (_2 === ((x$13 = mapast.Expression, $indexPtr(x$13.$array, x$13.$offset + 0, ptrType$50)))) { */ case 27:
					_r$10 = resolve_toplevel_generic_funcs(ast$1, gtypenames, gtypeset, gfuncnames, gfuncset, mapast.O(new $Uint64(iterator.$high + i$1.$high, iterator.$low + i$1.$low))); /* */ $s = 40; case 40: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					num = num + (_r$10) >> 0;
					_tuple$1 = (_entry$8 = gtypeset[$Uint64.keyFor(new $Uint64(0, 1))], _entry$8 !== undefined ? [_entry$8.v, true] : [new structType.ptr(), false]);
					ok$1 = _tuple$1[1];
					/* */ if (ok$1) { $s = 41; continue; }
					/* */ $s = 42; continue;
					/* if (ok$1) { */ case 41:
						/* */ if (mapast.Which((_entry$9 = ast$1[$Uint64.keyFor(mapast.O(new $Uint64(iterator.$high + i$1.$high, iterator.$low + i$1.$low)))], _entry$9 !== undefined ? _entry$9.v : sliceType$4.nil)) === sliceType$4.nil) { $s = 43; continue; }
						/* */ $s = 44; continue;
						/* if (mapast.Which((_entry$9 = ast$1[$Uint64.keyFor(mapast.O(new $Uint64(iterator.$high + i$1.$high, iterator.$low + i$1.$low)))], _entry$9 !== undefined ? _entry$9.v : sliceType$4.nil)) === sliceType$4.nil) { */ case 43:
							typename$1 = ($bytesToString((_entry$10 = ast$1[$Uint64.keyFor(mapast.O(new $Uint64(iterator.$high + i$1.$high, iterator.$low + i$1.$low)))], _entry$10 !== undefined ? _entry$10.v : sliceType$4.nil)));
							/* */ if (false) { $s = 45; continue; }
							/* */ $s = 46; continue;
							/* if (false) { */ case 45:
								_r$11 = fmt.Printf("Expr typename %s \n", new sliceType$6([new $String(typename$1)])); /* */ $s = 47; case 47: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
								_r$11;
							/* } */ case 46:
							if (!((x$17 = (_entry$11 = gtypenames[$String.keyFor(typename$1)], _entry$11 !== undefined ? _entry$11.v : new $Uint64(0, 0)), (x$17.$high === 0 && x$17.$low === 0)))) {
								num = num + (1) >> 0;
							}
						/* } */ case 44:
					/* } */ case 42:
					$s = 30; continue;
				/* } else if (_2 === ((x$14 = mapast.IfceMethod, $indexPtr(x$14.$array, x$14.$offset + 0, ptrType$50)))) { */ case 28:
					_r$12 = resolve_toplevel_generic_funcs(ast$1, gtypenames, gtypeset, gfuncnames, gfuncset, mapast.O(new $Uint64(iterator.$high + i$1.$high, iterator.$low + i$1.$low))); /* */ $s = 48; case 48: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					num = num + (_r$12) >> 0;
					$s = 30; continue;
				/* } else if (_2 === ((x$15 = mapast.ToplevFunc, $indexPtr(x$15.$array, x$15.$offset + 0, ptrType$50)))) { */ case 29:
					_r$13 = resolve_toplevel_generic_funcs(ast$1, gtypenames, gtypeset, gfuncnames, gfuncset, new $Uint64(iterator.$high + i$1.$high, iterator.$low + i$1.$low)); /* */ $s = 49; case 49: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					num = num + (_r$13) >> 0;
				/* } */ case 30:
			case 22:
			i$1 = (x$18 = new $Uint64(0, 1), new $Uint64(i$1.$high + x$18.$high, i$1.$low + x$18.$low));
		/* } */ $s = 20; continue; case 21:
		num = num;
		$s = -1; return num;
		/* */ } return; } if ($f === undefined) { $f = { $blk: resolve_toplevel_generic_funcs }; } $f._1 = _1; $f._2 = _2; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$10 = _entry$10; $f._entry$11 = _entry$11; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._entry$8 = _entry$8; $f._entry$9 = _entry$9; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.ast$1 = ast$1; $f.funcname = funcname; $f.gfuncnames = gfuncnames; $f.gfuncset = gfuncset; $f.gtypenames = gtypenames; $f.gtypeset = gtypeset; $f.i = i; $f.i$1 = i$1; $f.iterator = iterator; $f.node = node; $f.num = num; $f.ok = ok; $f.ok$1 = ok$1; $f.typename = typename; $f.typename$1 = typename$1; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	resolve_generic_calls = function(ast$1, gfuncnames, gfuncset, gcallset, gcallstack, iterator) {
		var _1, _2, _entry, _entry$1, _entry$10, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, _key, _key$1, _key$2, _key$3, _key$4, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, ast$1, gcallset, gcallstack, gfuncnames, gfuncset, i, iterator, node, num, saved, saved$1, where, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$10 = $f._entry$10; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _entry$8 = $f._entry$8; _entry$9 = $f._entry$9; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; ast$1 = $f.ast$1; gcallset = $f.gcallset; gcallstack = $f.gcallstack; gfuncnames = $f.gfuncnames; gfuncset = $f.gfuncset; i = $f.i; iterator = $f.iterator; node = $f.node; num = $f.num; saved = $f.saved; saved$1 = $f.saved$1; where = $f.where; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		num = 0;
		node = (_entry = ast$1[$Uint64.keyFor(iterator)], _entry !== undefined ? _entry.v : sliceType$4.nil);
		if (node.$length === 0) {
			num = 0;
			$s = -1; return num;
		}
			_1 = $indexPtr(node.$array, node.$offset + 0, ptrType$50);
			/* */ if (_1 === ((x = mapast.RootMatter, $indexPtr(x.$array, x.$offset + 0, ptrType$50)))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (_1 === ((x = mapast.RootMatter, $indexPtr(x.$array, x.$offset + 0, ptrType$50)))) { */ case 2:
				_r = resolve_generic_calls(ast$1, gfuncnames, gfuncset, gcallset, gcallstack, mapast.O(iterator)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				num = _r;
				$s = -1; return num;
			/* } */ case 3:
		case 1:
		i = new $Uint64(0, 0);
		/* while (true) { */ case 5:
			/* if (!(!((_entry$1 = ast$1[$Uint64.keyFor(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low))], _entry$1 !== undefined ? _entry$1.v : sliceType$4.nil) === sliceType$4.nil))) { break; } */ if(!(!((_entry$1 = ast$1[$Uint64.keyFor(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low))], _entry$1 !== undefined ? _entry$1.v : sliceType$4.nil) === sliceType$4.nil))) { $s = 6; continue; }
				_2 = (x$1 = (_entry$2 = ast$1[$Uint64.keyFor(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low))], _entry$2 !== undefined ? _entry$2.v : sliceType$4.nil), $indexPtr(x$1.$array, x$1.$offset + 0, ptrType$50));
				/* */ if (_2 === ((x$2 = mapast.FileMatter, $indexPtr(x$2.$array, x$2.$offset + 0, ptrType$50)))) { $s = 8; continue; }
				/* */ if (_2 === ((x$3 = mapast.ToplevFunc, $indexPtr(x$3.$array, x$3.$offset + 0, ptrType$50)))) { $s = 9; continue; }
				/* */ if (_2 === ((x$4 = mapast.BlocOfCode, $indexPtr(x$4.$array, x$4.$offset + 0, ptrType$50)))) { $s = 10; continue; }
				/* */ if (_2 === ((x$5 = mapast.Expression, $indexPtr(x$5.$array, x$5.$offset + 0, ptrType$50)))) { $s = 11; continue; }
				/* */ if (_2 === ((x$6 = mapast.GoDferStmt, $indexPtr(x$6.$array, x$6.$offset + 0, ptrType$50)))) { $s = 12; continue; }
				/* */ if (_2 === ((x$7 = mapast.ReturnStmt, $indexPtr(x$7.$array, x$7.$offset + 0, ptrType$50)))) { $s = 13; continue; }
				/* */ if (_2 === ((x$8 = mapast.IncDecStmt, $indexPtr(x$8.$array, x$8.$offset + 0, ptrType$50)))) { $s = 14; continue; }
				/* */ if (_2 === ((x$9 = mapast.VarDefStmt, $indexPtr(x$9.$array, x$9.$offset + 0, ptrType$50)))) { $s = 15; continue; }
				/* */ if (_2 === ((x$10 = mapast.AssignStmt, $indexPtr(x$10.$array, x$10.$offset + 0, ptrType$50)))) { $s = 16; continue; }
				/* */ if (_2 === ((x$11 = mapast.ClosureExp, $indexPtr(x$11.$array, x$11.$offset + 0, ptrType$50)))) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (_2 === ((x$2 = mapast.FileMatter, $indexPtr(x$2.$array, x$2.$offset + 0, ptrType$50)))) { */ case 8:
					_r$1 = resolve_generic_calls(ast$1, gfuncnames, gfuncset, gcallset, gcallstack, mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low))); /* */ $s = 19; case 19: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					num = num + (_r$1) >> 0;
					$s = 18; continue;
				/* } else if (_2 === ((x$3 = mapast.ToplevFunc, $indexPtr(x$3.$array, x$3.$offset + 0, ptrType$50)))) { */ case 9:
					saved = (_entry$3 = gfuncnames[$String.keyFor("")], _entry$3 !== undefined ? _entry$3.v : new $Uint64(0, 0));
					_key = ""; (gfuncnames || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low) };
					_r$2 = resolve_generic_calls(ast$1, gfuncnames, gfuncset, gcallset, gcallstack, mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low))); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					num = num + (_r$2) >> 0;
					_key$1 = ""; (gfuncnames || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: saved };
					$s = 18; continue;
				/* } else if (_2 === ((x$4 = mapast.BlocOfCode, $indexPtr(x$4.$array, x$4.$offset + 0, ptrType$50)))) { */ case 10:
					_r$3 = resolve_generic_calls(ast$1, gfuncnames, gfuncset, gcallset, gcallstack, mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low))); /* */ $s = 21; case 21: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					num = num + (_r$3) >> 0;
					$s = 18; continue;
				/* } else if (_2 === ((x$5 = mapast.Expression, $indexPtr(x$5.$array, x$5.$offset + 0, ptrType$50)))) { */ case 11:
					/* */ if (((_entry$4 = ast$1[$Uint64.keyFor(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low))], _entry$4 !== undefined ? _entry$4.v : sliceType$4.nil).$length - 1 >> 0) === 24) { $s = 22; continue; }
					/* */ $s = 23; continue;
					/* if (((_entry$4 = ast$1[$Uint64.keyFor(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low))], _entry$4 !== undefined ? _entry$4.v : sliceType$4.nil).$length - 1 >> 0) === 24) { */ case 22:
						/* */ if (mapast.Which((_entry$5 = ast$1[$Uint64.keyFor(mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low)))], _entry$5 !== undefined ? _entry$5.v : sliceType$4.nil)) === sliceType$4.nil) { $s = 24; continue; }
						/* */ $s = 25; continue;
						/* if (mapast.Which((_entry$5 = ast$1[$Uint64.keyFor(mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low)))], _entry$5 !== undefined ? _entry$5.v : sliceType$4.nil)) === sliceType$4.nil) { */ case 24:
							where = (_entry$7 = gfuncnames[$String.keyFor(($bytesToString((_entry$6 = ast$1[$Uint64.keyFor(mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low)))], _entry$6 !== undefined ? _entry$6.v : sliceType$4.nil))))], _entry$7 !== undefined ? _entry$7.v : new $Uint64(0, 0));
							/* */ if (!((where.$high === 0 && where.$low === 0))) { $s = 26; continue; }
							/* */ $s = 27; continue;
							/* if (!((where.$high === 0 && where.$low === 0))) { */ case 26:
								_key$2 = new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low); (gcallset || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$2)] = { k: _key$2, v: new Callsite.ptr(where, (_entry$8 = gfuncnames[$String.keyFor("")], _entry$8 !== undefined ? _entry$8.v : new $Uint64(0, 0)), new $Uint64(0, 0)) };
								gcallstack.$set($append((gcallstack.$get()), new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low)));
								_r$4 = fmt.Printf("Callsite: %s\n", new sliceType$6([new $String(($bytesToString((_entry$9 = ast$1[$Uint64.keyFor(mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low)))], _entry$9 !== undefined ? _entry$9.v : sliceType$4.nil))))])); /* */ $s = 28; case 28: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
								_r$4;
							/* } */ case 27:
						/* } */ case 25:
					/* } */ case 23:
					_r$5 = resolve_generic_calls(ast$1, gfuncnames, gfuncset, gcallset, gcallstack, mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low))); /* */ $s = 29; case 29: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					num = num + (_r$5) >> 0;
					$s = 18; continue;
				/* } else if (_2 === ((x$6 = mapast.GoDferStmt, $indexPtr(x$6.$array, x$6.$offset + 0, ptrType$50)))) { */ case 12:
					_r$6 = resolve_generic_calls(ast$1, gfuncnames, gfuncset, gcallset, gcallstack, mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low))); /* */ $s = 30; case 30: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					num = num + (_r$6) >> 0;
					$s = 18; continue;
				/* } else if (_2 === ((x$7 = mapast.ReturnStmt, $indexPtr(x$7.$array, x$7.$offset + 0, ptrType$50)))) { */ case 13:
					_r$7 = resolve_generic_calls(ast$1, gfuncnames, gfuncset, gcallset, gcallstack, mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low))); /* */ $s = 31; case 31: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					num = num + (_r$7) >> 0;
					$s = 18; continue;
				/* } else if (_2 === ((x$8 = mapast.IncDecStmt, $indexPtr(x$8.$array, x$8.$offset + 0, ptrType$50)))) { */ case 14:
					_r$8 = resolve_generic_calls(ast$1, gfuncnames, gfuncset, gcallset, gcallstack, mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low))); /* */ $s = 32; case 32: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					num = num + (_r$8) >> 0;
					$s = 18; continue;
				/* } else if (_2 === ((x$9 = mapast.VarDefStmt, $indexPtr(x$9.$array, x$9.$offset + 0, ptrType$50)))) { */ case 15:
					_r$9 = resolve_generic_calls(ast$1, gfuncnames, gfuncset, gcallset, gcallstack, mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low))); /* */ $s = 33; case 33: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					num = num + (_r$9) >> 0;
					$s = 18; continue;
				/* } else if (_2 === ((x$10 = mapast.AssignStmt, $indexPtr(x$10.$array, x$10.$offset + 0, ptrType$50)))) { */ case 16:
					_r$10 = resolve_generic_calls(ast$1, gfuncnames, gfuncset, gcallset, gcallstack, mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low))); /* */ $s = 34; case 34: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					num = num + (_r$10) >> 0;
					$s = 18; continue;
				/* } else if (_2 === ((x$11 = mapast.ClosureExp, $indexPtr(x$11.$array, x$11.$offset + 0, ptrType$50)))) { */ case 17:
					saved$1 = (_entry$10 = gfuncnames[$String.keyFor("")], _entry$10 !== undefined ? _entry$10.v : new $Uint64(0, 0));
					_key$3 = ""; (gfuncnames || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$3)] = { k: _key$3, v: new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low) };
					_r$11 = resolve_generic_calls(ast$1, gfuncnames, gfuncset, gcallset, gcallstack, mapast.O(new $Uint64(iterator.$high + i.$high, iterator.$low + i.$low))); /* */ $s = 35; case 35: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					num = num + (_r$11) >> 0;
					_key$4 = ""; (gfuncnames || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$4)] = { k: _key$4, v: saved$1 };
				/* } */ case 18:
			case 7:
			i = (x$12 = new $Uint64(0, 1), new $Uint64(i.$high + x$12.$high, i.$low + x$12.$low));
		/* } */ $s = 5; continue; case 6:
		num = num;
		$s = -1; return num;
		/* */ } return; } if ($f === undefined) { $f = { $blk: resolve_generic_calls }; } $f._1 = _1; $f._2 = _2; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$10 = _entry$10; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._entry$8 = _entry$8; $f._entry$9 = _entry$9; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.ast$1 = ast$1; $f.gcallset = gcallset; $f.gcallstack = gcallstack; $f.gfuncnames = gfuncnames; $f.gfuncset = gfuncset; $f.i = i; $f.iterator = iterator; $f.node = node; $f.num = num; $f.saved = saved; $f.saved$1 = saved$1; $f.where = where; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	signature_getarg_type = function(asttree, sig, argno) {
		var argno, asttree, sig, x, x$1, x$2;
		return mapast.O((x = mapast.O((x$1 = mapast.O(sig), x$2 = (new $Uint64(0, argno)), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low))), new $Uint64(x.$high + 0, x.$low + 1)));
	};
	struct_getarg_type = function(asttree, structure, argno) {
		var argno, asttree, structure, x, x$1, x$2;
		return mapast.O((x = mapast.O((x$1 = mapast.O(structure), x$2 = (new $Uint64(0, argno)), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low))), new $Uint64(x.$high + 0, x.$low + 1)));
	};
	func_getarg_type = function(asttree, function$1, argno) {
		var _entry, _entry$1, _entry$2, argno, args, asttree, function$1, i, j, k, l, recv, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		recv = (new $Uint64(0, ((_entry = asttree[$Uint64.keyFor(function$1)], _entry !== undefined ? _entry.v : sliceType$4.nil).$length - 1 >> 0)));
		args = (new $Uint64(0, ((_entry$1 = asttree[$Uint64.keyFor(function$1)], _entry$1 !== undefined ? _entry$1.v : sliceType$4.nil).$capacity - 1 >> 0)));
		j = 0;
		i = (x = (x$1 = mapast.O(function$1), new $Uint64(x$1.$high + recv.$high, x$1.$low + recv.$low)), new $Uint64(x.$high + 0, x.$low + 1));
		while (true) {
			if (!((x$2 = (x$3 = (x$4 = mapast.O(function$1), new $Uint64(x$4.$high + args.$high, x$4.$low + args.$low)), new $Uint64(x$3.$high + 0, x$3.$low + 1)), (i.$high < x$2.$high || (i.$high === x$2.$high && i.$low < x$2.$low))))) { break; }
			k = new $Uint64(0, 0);
			k = mapast.O(i);
			while (true) {
				if (!(!((x$5 = (_entry$2 = asttree[$Uint64.keyFor(k)], _entry$2 !== undefined ? _entry$2.v : sliceType$4.nil), $indexPtr(x$5.$array, x$5.$offset + 0, ptrType$50)) === (x$6 = mapast.RootOfType, $indexPtr(x$6.$array, x$6.$offset + 0, ptrType$50))))) { break; }
				k = (x$7 = new $Uint64(0, 1), new $Uint64(k.$high + x$7.$high, k.$low + x$7.$low));
			}
			l = mapast.O(i);
			while (true) {
				if (!((l.$high < k.$high || (l.$high === k.$high && l.$low < k.$low)))) { break; }
				if (j === argno) {
					return k;
				}
				j = j + (1) >> 0;
				l = (x$8 = new $Uint64(0, 1), new $Uint64(l.$high + x$8.$high, l.$low + x$8.$low));
			}
			i = (x$9 = new $Uint64(0, 1), new $Uint64(i.$high + x$9.$high, i.$low + x$9.$low));
		}
		return new $Uint64(0, 9999);
	};
	derive_wildcard = function(asttree, visited, gtypenames, funtype, argside_type) {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _entry, _entry$1, _entry$10, _entry$11, _entry$12, _entry$13, _entry$14, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, _key, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _tuple, arg, arg$1, argside_type, asttree, funtype, gtypenames, i, i$1, lookedupgtype, ok, ret, ret$1, visited, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$10 = $f._entry$10; _entry$11 = $f._entry$11; _entry$12 = $f._entry$12; _entry$13 = $f._entry$13; _entry$14 = $f._entry$14; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _entry$8 = $f._entry$8; _entry$9 = $f._entry$9; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _tuple = $f._tuple; arg = $f.arg; arg$1 = $f.arg$1; argside_type = $f.argside_type; asttree = $f.asttree; funtype = $f.funtype; gtypenames = $f.gtypenames; i = $f.i; i$1 = $f.i$1; lookedupgtype = $f.lookedupgtype; ok = $f.ok; ret = $f.ret; ret$1 = $f.ret$1; visited = $f.visited; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = fmt.Printf("DERIVATING WILDCARD \n", new sliceType$6([])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		_r$1 = mapast.PrintDump(asttree, funtype, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		/* */ if (mapast.Which((_entry = asttree[$Uint64.keyFor(funtype)], _entry !== undefined ? _entry.v : sliceType$4.nil)) === sliceType$4.nil) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (mapast.Which((_entry = asttree[$Uint64.keyFor(funtype)], _entry !== undefined ? _entry.v : sliceType$4.nil)) === sliceType$4.nil) { */ case 3:
			lookedupgtype = (_entry$2 = gtypenames[$String.keyFor(($bytesToString((_entry$1 = asttree[$Uint64.keyFor(funtype)], _entry$1 !== undefined ? _entry$1.v : sliceType$4.nil))))], _entry$2 !== undefined ? _entry$2.v : new $Uint64(0, 0));
			if ((lookedupgtype.$high === 0 && lookedupgtype.$low === 0)) {
				$s = -1; return $ifaceNil;
			}
			if (visited === false) {
				visited = {};
			} else {
				_tuple = (_entry$3 = visited[$Uint64.keyFor(lookedupgtype)], _entry$3 !== undefined ? [_entry$3.v, true] : [new structType.ptr(), false]);
				ok = _tuple[1];
				if (ok) {
					$s = -1; return $ifaceNil;
				} else {
					_key = lookedupgtype; (visited || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key)] = { k: _key, v: new structType.ptr() };
				}
			}
			_arg = asttree;
			_arg$1 = visited;
			_arg$2 = gtypenames;
			_arg$3 = mapast.O((x = mapast.O(lookedupgtype), new $Uint64(x.$high + 0, x.$low + 1)));
			_r$2 = argside_type.Underlying(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg$4 = _r$2;
			_r$3 = derive_wildcard(_arg, _arg$1, _arg$2, _arg$3, _arg$4); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 4:
		if (((_entry$4 = asttree[$Uint64.keyFor(funtype)], _entry$4 !== undefined ? _entry$4.v : sliceType$4.nil).$length > 0) && ((x$1 = (_entry$5 = asttree[$Uint64.keyFor(funtype)], _entry$5 !== undefined ? _entry$5.v : sliceType$4.nil), $indexPtr(x$1.$array, x$1.$offset + 0, ptrType$50)) === (x$2 = mapast.GenericExp, $indexPtr(x$2.$array, x$2.$offset + 0, ptrType$50)))) {
			$s = -1; return argside_type;
		}
		_ref = argside_type;
		/* */ if ($assertType(_ref, ptrType$51, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$52, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$53, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref, ptrType$54, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref, ptrType$55, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref, ptrType$56, true)[1]) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ($assertType(_ref, ptrType$51, true)[1]) { */ case 7:
			/* */ if (((((_entry$6 = asttree[$Uint64.keyFor(funtype)], _entry$6 !== undefined ? _entry$6.v : sliceType$4.nil).$length - 1 >> 0) === 13)) && ((x$3 = (_entry$7 = asttree[$Uint64.keyFor(funtype)], _entry$7 !== undefined ? _entry$7.v : sliceType$4.nil), $indexPtr(x$3.$array, x$3.$offset + 0, ptrType$50)) === (x$4 = mapast.Expression, $indexPtr(x$4.$array, x$4.$offset + 0, ptrType$50))) && (((_entry$8 = asttree[$Uint64.keyFor(funtype)], _entry$8 !== undefined ? _entry$8.v : sliceType$4.nil).$capacity - 38 >> 0) === 1)) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (((((_entry$6 = asttree[$Uint64.keyFor(funtype)], _entry$6 !== undefined ? _entry$6.v : sliceType$4.nil).$length - 1 >> 0) === 13)) && ((x$3 = (_entry$7 = asttree[$Uint64.keyFor(funtype)], _entry$7 !== undefined ? _entry$7.v : sliceType$4.nil), $indexPtr(x$3.$array, x$3.$offset + 0, ptrType$50)) === (x$4 = mapast.Expression, $indexPtr(x$4.$array, x$4.$offset + 0, ptrType$50))) && (((_entry$8 = asttree[$Uint64.keyFor(funtype)], _entry$8 !== undefined ? _entry$8.v : sliceType$4.nil).$capacity - 38 >> 0) === 1)) { */ case 14:
				_r$4 = derive_wildcard(asttree, visited, gtypenames, mapast.O(funtype), $assertType(argside_type, ptrType$51).Elem()); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return _r$4;
			/* } */ case 15:
			$s = 13; continue;
		/* } else if ($assertType(_ref, ptrType$52, true)[1]) { */ case 8:
			/* */ if (((((_entry$9 = asttree[$Uint64.keyFor(funtype)], _entry$9 !== undefined ? _entry$9.v : sliceType$4.nil).$length - 1 >> 0) === 27)) && ((x$5 = (_entry$10 = asttree[$Uint64.keyFor(funtype)], _entry$10 !== undefined ? _entry$10.v : sliceType$4.nil), $indexPtr(x$5.$array, x$5.$offset + 0, ptrType$50)) === (x$6 = mapast.Expression, $indexPtr(x$6.$array, x$6.$offset + 0, ptrType$50))) && (((_entry$11 = asttree[$Uint64.keyFor(funtype)], _entry$11 !== undefined ? _entry$11.v : sliceType$4.nil).$capacity - 38 >> 0) === 1)) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (((((_entry$9 = asttree[$Uint64.keyFor(funtype)], _entry$9 !== undefined ? _entry$9.v : sliceType$4.nil).$length - 1 >> 0) === 27)) && ((x$5 = (_entry$10 = asttree[$Uint64.keyFor(funtype)], _entry$10 !== undefined ? _entry$10.v : sliceType$4.nil), $indexPtr(x$5.$array, x$5.$offset + 0, ptrType$50)) === (x$6 = mapast.Expression, $indexPtr(x$6.$array, x$6.$offset + 0, ptrType$50))) && (((_entry$11 = asttree[$Uint64.keyFor(funtype)], _entry$11 !== undefined ? _entry$11.v : sliceType$4.nil).$capacity - 38 >> 0) === 1)) { */ case 17:
				_r$5 = derive_wildcard(asttree, visited, gtypenames, mapast.O(funtype), $assertType(argside_type, ptrType$52).Elem()); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return _r$5;
			/* } */ case 18:
			$s = 13; continue;
		/* } else if ($assertType(_ref, ptrType$53, true)[1]) { */ case 9:
			/* */ if (((((_entry$12 = asttree[$Uint64.keyFor(funtype)], _entry$12 !== undefined ? _entry$12.v : sliceType$4.nil).$length - 1 >> 0) === 26)) && ((x$7 = (_entry$13 = asttree[$Uint64.keyFor(funtype)], _entry$13 !== undefined ? _entry$13.v : sliceType$4.nil), $indexPtr(x$7.$array, x$7.$offset + 0, ptrType$50)) === (x$8 = mapast.Expression, $indexPtr(x$8.$array, x$8.$offset + 0, ptrType$50))) && (((_entry$14 = asttree[$Uint64.keyFor(funtype)], _entry$14 !== undefined ? _entry$14.v : sliceType$4.nil).$capacity - 38 >> 0) === 2)) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (((((_entry$12 = asttree[$Uint64.keyFor(funtype)], _entry$12 !== undefined ? _entry$12.v : sliceType$4.nil).$length - 1 >> 0) === 26)) && ((x$7 = (_entry$13 = asttree[$Uint64.keyFor(funtype)], _entry$13 !== undefined ? _entry$13.v : sliceType$4.nil), $indexPtr(x$7.$array, x$7.$offset + 0, ptrType$50)) === (x$8 = mapast.Expression, $indexPtr(x$8.$array, x$8.$offset + 0, ptrType$50))) && (((_entry$14 = asttree[$Uint64.keyFor(funtype)], _entry$14 !== undefined ? _entry$14.v : sliceType$4.nil).$capacity - 38 >> 0) === 2)) { */ case 20:
				_r$6 = derive_wildcard(asttree, visited, gtypenames, (x$9 = mapast.O(funtype), new $Uint64(x$9.$high + 0, x$9.$low + 1)), $assertType(argside_type, ptrType$53).Elem()); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$s = -1; return _r$6;
			/* } */ case 21:
			$s = 13; continue;
		/* } else if ($assertType(_ref, ptrType$54, true)[1]) { */ case 10:
			if ($assertType(argside_type, ptrType$54).Kind() === 25) {
				$s = -1; return $ifaceNil;
			}
			$s = 13; continue;
		/* } else if ($assertType(_ref, ptrType$55, true)[1]) { */ case 11:
			i = 0;
			/* while (true) { */ case 23:
				/* if (!(i < $assertType(argside_type, ptrType$55).NumFields())) { break; } */ if(!(i < $assertType(argside_type, ptrType$55).NumFields())) { $s = 24; continue; }
				arg = $assertType(argside_type, ptrType$55).Field(i).object.Type();
				_r$7 = derive_wildcard(asttree, visited, gtypenames, struct_getarg_type(asttree, funtype, i), arg); /* */ $s = 25; case 25: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				ret = _r$7;
				if (!($interfaceIsEqual(ret, $ifaceNil))) {
					$s = -1; return ret;
				}
				i = i + (1) >> 0;
			/* } */ $s = 23; continue; case 24:
			$s = 13; continue;
		/* } else if ($assertType(_ref, ptrType$56, true)[1]) { */ case 12:
			i$1 = 0;
			/* while (true) { */ case 26:
				/* if (!(i$1 < $assertType(argside_type, ptrType$56).Params().Len())) { break; } */ if(!(i$1 < $assertType(argside_type, ptrType$56).Params().Len())) { $s = 27; continue; }
				arg$1 = $assertType(argside_type, ptrType$56).Params().At(i$1).object.Type();
				_r$8 = derive_wildcard(asttree, visited, gtypenames, signature_getarg_type(asttree, funtype, i$1), arg$1); /* */ $s = 28; case 28: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				ret$1 = _r$8;
				if (!($interfaceIsEqual(ret$1, $ifaceNil))) {
					$s = -1; return ret$1;
				}
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 26; continue; case 27:
		/* } */ case 13:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: derive_wildcard }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$10 = _entry$10; $f._entry$11 = _entry$11; $f._entry$12 = _entry$12; $f._entry$13 = _entry$13; $f._entry$14 = _entry$14; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._entry$8 = _entry$8; $f._entry$9 = _entry$9; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._tuple = _tuple; $f.arg = arg; $f.arg$1 = arg$1; $f.argside_type = argside_type; $f.asttree = asttree; $f.funtype = funtype; $f.gtypenames = gtypenames; $f.i = i; $f.i$1 = i$1; $f.lookedupgtype = lookedupgtype; $f.ok = ok; $f.ret = ret; $f.ret$1 = ret$1; $f.visited = visited; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	build_type = function(asttree, typ) {
		var _entry, _entry$1, _entry$2, _key, asttree, i, typ, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _key = $f._key; asttree = $f.asttree; i = $f.i; typ = $f.typ; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = new $Uint64(0, 0);
		/* while (true) { */ case 1:
			/* if (!((i.$high < 4294967295 || (i.$high === 4294967295 && i.$low < 4294967280)))) { break; } */ if(!((i.$high < 4294967295 || (i.$high === 4294967295 && i.$low < 4294967280)))) { $s = 2; continue; }
			/* */ if (((_entry = asttree[$Uint64.keyFor(i)], _entry !== undefined ? _entry.v : sliceType$4.nil).$length === 0) && ((_entry$1 = asttree[$Uint64.keyFor(new $Uint64(i.$high + 0, i.$low + 1))], _entry$1 !== undefined ? _entry$1.v : sliceType$4.nil).$length === 0) && ((_entry$2 = asttree[$Uint64.keyFor(new $Uint64(i.$high + 0, i.$low + 2))], _entry$2 !== undefined ? _entry$2.v : sliceType$4.nil).$length === 0)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (((_entry = asttree[$Uint64.keyFor(i)], _entry !== undefined ? _entry.v : sliceType$4.nil).$length === 0) && ((_entry$1 = asttree[$Uint64.keyFor(new $Uint64(i.$high + 0, i.$low + 1))], _entry$1 !== undefined ? _entry$1.v : sliceType$4.nil).$length === 0) && ((_entry$2 = asttree[$Uint64.keyFor(new $Uint64(i.$high + 0, i.$low + 2))], _entry$2 !== undefined ? _entry$2.v : sliceType$4.nil).$length === 0)) { */ case 3:
				_key = new $Uint64(i.$high + 0, i.$low + 1); (asttree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key)] = { k: _key, v: mapast.RootOfType };
				/* */ if (!($interfaceIsEqual(typ, $ifaceNil))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!($interfaceIsEqual(typ, $ifaceNil))) { */ case 5:
					$r = construct_type(asttree, mapast.O(new $Uint64(i.$high + 0, i.$low + 1)), typ); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
				$s = -1; return new $Uint64(i.$high + 0, i.$low + 1);
			/* } */ case 4:
			i = (x = new $Uint64(0, 1), new $Uint64(i.$high + x.$high, i.$low + x.$low));
		/* } */ $s = 1; continue; case 2:
		$panic(new $String("map is full"));
		$s = -1; return new $Uint64(0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: build_type }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._key = _key; $f.asttree = asttree; $f.i = i; $f.typ = typ; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	construct_type = function(asttree, where, typ) {
		var _key, _key$1, _key$2, _key$3, _r, _r$1, _ref, asttree, str, typ, where, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; asttree = $f.asttree; str = $f.str; typ = $f.typ; where = $f.where; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = typ;
		/* */ if ($assertType(_ref, ptrType$54, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$57, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$51, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, ptrType$54, true)[1]) { */ case 1:
			if ($assertType(typ, ptrType$54).Kind() === 26) {
				_key = where; (asttree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key)] = { k: _key, v: mapast.GenericExp };
				$s = -1; return;
			}
			_r = $assertType(typ, ptrType$54).String(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_key$1 = where; (asttree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$1)] = { k: _key$1, v: (new sliceType$4($stringToBytes(_r))) };
			$s = 4; continue;
		/* } else if ($assertType(_ref, ptrType$57, true)[1]) { */ case 2:
			_r$1 = $assertType(typ, ptrType$57).String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			str = _r$1;
			if (str.length >= 8 && $substring(str, 0, 8) === "demopkg.") {
				_key$2 = where; (asttree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$2)] = { k: _key$2, v: (new sliceType$4($stringToBytes($substring(str, 8)))) };
			}
			$s = 4; continue;
		/* } else if ($assertType(_ref, ptrType$51, true)[1]) { */ case 3:
			_key$3 = where; (asttree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$3)] = { k: _key$3, v: mapast.ExpressionNode(13, new $Uint64(0, 1)) };
			$r = construct_type(asttree, mapast.O(where), $assertType(typ, ptrType$51).Elem()); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: construct_type }; } $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.asttree = asttree; $f.str = str; $f.typ = typ; $f.where = where; $f.$s = $s; $f.$r = $r; return $f;
	};
	ast_sha256 = function(asttree, where) {
		var _r, asttree, dst, h, where, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; asttree = $f.asttree; dst = $f.dst; h = $f.h; where = $f.where; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = [h];
		dst = sliceType$4.nil;
		h[0] = sha256.New();
		$r = mapast.Code((function(h) { return function $b(s) {
			var _r, s, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = h[0].Write((new sliceType$4($stringToBytes(s)))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
		}; })(h), asttree, where, where); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = h[0].Sum(sliceType$4.nil); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		dst = _r;
		$s = -1; return dst;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ast_sha256 }; } $f._r = _r; $f.asttree = asttree; $f.dst = dst; $f.h = h; $f.where = where; $f.$s = $s; $f.$r = $r; return $f;
	};
	b32_to_5_u64 = function(n, x) {
		var dst, n, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$6, x$7, x$8, x$9;
		dst = arrayType$2.zero();
		dst[0] = n;
		dst[1] = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (x$7 = (new $Uint64(0, (7 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 7]))), x$8 = $shiftLeft64((new $Uint64(0, (6 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 6]))), 8), new $Uint64(x$7.$high | x$8.$high, (x$7.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Uint64(0, (5 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 5]))), 16), new $Uint64(x$6.$high | x$9.$high, (x$6.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Uint64(0, (4 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 4]))), 24), new $Uint64(x$5.$high | x$10.$high, (x$5.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Uint64(0, (3 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 3]))), 32), new $Uint64(x$4.$high | x$11.$high, (x$4.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Uint64(0, (2 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 2]))), 40), new $Uint64(x$3.$high | x$12.$high, (x$3.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Uint64(0, (1 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 1]))), 48), new $Uint64(x$2.$high | x$13.$high, (x$2.$low | x$13.$low) >>> 0)), x$14 = $shiftLeft64((new $Uint64(0, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]))), 56), new $Uint64(x$1.$high | x$14.$high, (x$1.$low | x$14.$low) >>> 0));
		dst[2] = (x$15 = (x$16 = (x$17 = (x$18 = (x$19 = (x$20 = (x$21 = (new $Uint64(0, (15 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 15]))), x$22 = $shiftLeft64((new $Uint64(0, (14 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 14]))), 8), new $Uint64(x$21.$high | x$22.$high, (x$21.$low | x$22.$low) >>> 0)), x$23 = $shiftLeft64((new $Uint64(0, (13 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 13]))), 16), new $Uint64(x$20.$high | x$23.$high, (x$20.$low | x$23.$low) >>> 0)), x$24 = $shiftLeft64((new $Uint64(0, (12 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 12]))), 24), new $Uint64(x$19.$high | x$24.$high, (x$19.$low | x$24.$low) >>> 0)), x$25 = $shiftLeft64((new $Uint64(0, (11 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 11]))), 32), new $Uint64(x$18.$high | x$25.$high, (x$18.$low | x$25.$low) >>> 0)), x$26 = $shiftLeft64((new $Uint64(0, (10 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 10]))), 40), new $Uint64(x$17.$high | x$26.$high, (x$17.$low | x$26.$low) >>> 0)), x$27 = $shiftLeft64((new $Uint64(0, (9 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 9]))), 48), new $Uint64(x$16.$high | x$27.$high, (x$16.$low | x$27.$low) >>> 0)), x$28 = $shiftLeft64((new $Uint64(0, (8 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 8]))), 56), new $Uint64(x$15.$high | x$28.$high, (x$15.$low | x$28.$low) >>> 0));
		dst[3] = (x$29 = (x$30 = (x$31 = (x$32 = (x$33 = (x$34 = (x$35 = (new $Uint64(0, (23 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 23]))), x$36 = $shiftLeft64((new $Uint64(0, (22 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 22]))), 8), new $Uint64(x$35.$high | x$36.$high, (x$35.$low | x$36.$low) >>> 0)), x$37 = $shiftLeft64((new $Uint64(0, (21 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 21]))), 16), new $Uint64(x$34.$high | x$37.$high, (x$34.$low | x$37.$low) >>> 0)), x$38 = $shiftLeft64((new $Uint64(0, (20 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 20]))), 24), new $Uint64(x$33.$high | x$38.$high, (x$33.$low | x$38.$low) >>> 0)), x$39 = $shiftLeft64((new $Uint64(0, (19 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 19]))), 32), new $Uint64(x$32.$high | x$39.$high, (x$32.$low | x$39.$low) >>> 0)), x$40 = $shiftLeft64((new $Uint64(0, (18 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 18]))), 40), new $Uint64(x$31.$high | x$40.$high, (x$31.$low | x$40.$low) >>> 0)), x$41 = $shiftLeft64((new $Uint64(0, (17 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 17]))), 48), new $Uint64(x$30.$high | x$41.$high, (x$30.$low | x$41.$low) >>> 0)), x$42 = $shiftLeft64((new $Uint64(0, (16 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 16]))), 56), new $Uint64(x$29.$high | x$42.$high, (x$29.$low | x$42.$low) >>> 0));
		dst[4] = (x$43 = (x$44 = (x$45 = (x$46 = (x$47 = (x$48 = (x$49 = (new $Uint64(0, (31 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 31]))), x$50 = $shiftLeft64((new $Uint64(0, (30 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 30]))), 8), new $Uint64(x$49.$high | x$50.$high, (x$49.$low | x$50.$low) >>> 0)), x$51 = $shiftLeft64((new $Uint64(0, (29 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 29]))), 16), new $Uint64(x$48.$high | x$51.$high, (x$48.$low | x$51.$low) >>> 0)), x$52 = $shiftLeft64((new $Uint64(0, (28 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 28]))), 24), new $Uint64(x$47.$high | x$52.$high, (x$47.$low | x$52.$low) >>> 0)), x$53 = $shiftLeft64((new $Uint64(0, (27 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 27]))), 32), new $Uint64(x$46.$high | x$53.$high, (x$46.$low | x$53.$low) >>> 0)), x$54 = $shiftLeft64((new $Uint64(0, (26 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 26]))), 40), new $Uint64(x$45.$high | x$54.$high, (x$45.$low | x$54.$low) >>> 0)), x$55 = $shiftLeft64((new $Uint64(0, (25 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 25]))), 48), new $Uint64(x$44.$high | x$55.$high, (x$44.$low | x$55.$low) >>> 0)), x$56 = $shiftLeft64((new $Uint64(0, (24 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 24]))), 56), new $Uint64(x$43.$high | x$56.$high, (x$43.$low | x$56.$low) >>> 0));
		arrayType$2.copy(dst, dst);
		return dst;
	};
	seekfuncslot = function(asttree) {
		var _entry, _entry$1, _tuple, _tuple$1, asttree, ok, src, x;
		src = new $Uint64(0, 0);
		src = mapast.O(mapast.O(new $Uint64(0, 0)));
		ok = false;
		_tuple = (_entry = asttree[$Uint64.keyFor(src)], _entry !== undefined ? [_entry.v, true] : [sliceType$4.nil, false]);
		ok = _tuple[1];
		while (true) {
			if (!(ok)) { break; }
			src = (x = new $Uint64(0, 1), new $Uint64(src.$high + x.$high, src.$low + x.$low));
			_tuple$1 = (_entry$1 = asttree[$Uint64.keyFor(src)], _entry$1 !== undefined ? [_entry$1.v, true] : [sliceType$4.nil, false]);
			ok = _tuple$1[1];
		}
		src = src;
		return src;
	};
	copypasta = function(asttree, dst, src) {
		var _entry, _entry$1, _entry$2, _key, _tuple, _tuple$1, asttree, dst, ok, src, x, x$1;
		_key = dst; (asttree || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key)] = { k: _key, v: (_entry = asttree[$Uint64.keyFor(src)], _entry !== undefined ? _entry.v : sliceType$4.nil) };
		dst = mapast.O(dst);
		src = mapast.O(src);
		ok = false;
		_tuple = (_entry$1 = asttree[$Uint64.keyFor(src)], _entry$1 !== undefined ? [_entry$1.v, true] : [sliceType$4.nil, false]);
		ok = _tuple[1];
		while (true) {
			if (!(ok)) { break; }
			copypasta(asttree, dst, src);
			dst = (x = new $Uint64(0, 1), new $Uint64(dst.$high + x.$high, dst.$low + x.$low));
			src = (x$1 = new $Uint64(0, 1), new $Uint64(src.$high + x$1.$high, src.$low + x$1.$low));
			_tuple$1 = (_entry$2 = asttree[$Uint64.keyFor(src)], _entry$2 !== undefined ? [_entry$2.v, true] : [sliceType$4.nil, false]);
			ok = _tuple$1[1];
		}
	};
	erase = function(asttree, what) {
		var _entry, _entry$1, _tuple, _tuple$1, asttree, ok, what, x;
		delete asttree[$Uint64.keyFor(what)];
		what = mapast.O(what);
		ok = false;
		_tuple = (_entry = asttree[$Uint64.keyFor(what)], _entry !== undefined ? [_entry.v, true] : [sliceType$4.nil, false]);
		ok = _tuple[1];
		while (true) {
			if (!(ok)) { break; }
			erase(asttree, what);
			what = (x = new $Uint64(0, 1), new $Uint64(what.$high + x.$high, what.$low + x.$low));
			_tuple$1 = (_entry$1 = asttree[$Uint64.keyFor(what)], _entry$1 !== undefined ? [_entry$1.v, true] : [sliceType$4.nil, false]);
			ok = _tuple$1[1];
		}
	};
	specialize = function(asttree, root, typ) {
		var _entry, _entry$1, _entry$2, _entry$3, _tuple, _tuple$1, asttree, ok, root, typ, x, x$1, x$2;
		root = mapast.O(root);
		ok = false;
		_tuple = (_entry = asttree[$Uint64.keyFor(root)], _entry !== undefined ? [_entry.v, true] : [sliceType$4.nil, false]);
		ok = _tuple[1];
		while (true) {
			if (!(ok)) { break; }
			if ((_entry$1 = asttree[$Uint64.keyFor(root)], _entry$1 !== undefined ? _entry$1.v : sliceType$4.nil).$length > 0 && (x = (_entry$2 = asttree[$Uint64.keyFor(root)], _entry$2 !== undefined ? _entry$2.v : sliceType$4.nil), $indexPtr(x.$array, x.$offset + 0, ptrType$50)) === (x$1 = mapast.GenericExp, $indexPtr(x$1.$array, x$1.$offset + 0, ptrType$50))) {
				copypasta(asttree, root, typ);
			} else {
				specialize(asttree, root, typ);
			}
			root = (x$2 = new $Uint64(0, 1), new $Uint64(root.$high + x$2.$high, root.$low + x$2.$low));
			_tuple$1 = (_entry$3 = asttree[$Uint64.keyFor(root)], _entry$3 !== undefined ? [_entry$3.v, true] : [sliceType$4.nil, false]);
			ok = _tuple$1[1];
		}
	};
	replicate = function(asttree, dst, src, gcallset, inside, wildcard) {
		var _entry, _entry$1, _entry$2, _key, _r, _tuple, _tuple$1, asttree, cs, dst, gcallset, inside, ok, sr, src, wildcard, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _key = $f._key; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; asttree = $f.asttree; cs = $f.cs; dst = $f.dst; gcallset = $f.gcallset; inside = $f.inside; ok = $f.ok; sr = $f.sr; src = $f.src; wildcard = $f.wildcard; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dst = mapast.O(dst);
		src = mapast.O(src);
		ok = false;
		_tuple = (_entry = asttree[$Uint64.keyFor(src)], _entry !== undefined ? [_entry.v, true] : [sliceType$4.nil, false]);
		ok = _tuple[1];
		/* while (true) { */ case 1:
			/* if (!(ok)) { break; } */ if(!(ok)) { $s = 2; continue; }
			sr = (_entry$1 = gcallset[$Uint64.keyFor(src)], _entry$1 !== undefined ? _entry$1.v : ptrType$58.nil);
			/* */ if (!(sr === ptrType$58.nil)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(sr === ptrType$58.nil)) { */ case 3:
				cs = new Callsite.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
				cs.calls_func = sr.calls_func;
				cs.inside_func = inside;
				_r = build_type(asttree, $ifaceNil); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				cs.wildctype = _r;
				copypasta(asttree, cs.wildctype, sr.wildctype);
				specialize(asttree, cs.wildctype, wildcard);
				_key = dst; (gcallset || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key)] = { k: _key, v: cs };
			/* } */ case 4:
			$r = replicate(asttree, dst, src, gcallset, inside, wildcard); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			dst = (x = new $Uint64(0, 1), new $Uint64(dst.$high + x.$high, dst.$low + x.$low));
			src = (x$1 = new $Uint64(0, 1), new $Uint64(src.$high + x$1.$high, src.$low + x$1.$low));
			_tuple$1 = (_entry$2 = asttree[$Uint64.keyFor(src)], _entry$2 !== undefined ? [_entry$2.v, true] : [sliceType$4.nil, false]);
			ok = _tuple$1[1];
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: replicate }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._key = _key; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.asttree = asttree; $f.cs = cs; $f.dst = dst; $f.gcallset = gcallset; $f.inside = inside; $f.ok = ok; $f.sr = sr; $f.src = src; $f.wildcard = wildcard; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	process = function(content) {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _entry, _entry$1, _entry$10, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, _i, _i$1, _i$2, _i$3, _i$4, _key, _key$1, _key$2, _key$3, _key$4, _key$5, _keys, _keys$1, _keys$2, _keys$3, _keys$4, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tuple, _tuple$1, _tuple$2, _tuple$3, asttree, checksum, conf, content, ender, endersepar, err, file, fset, gcallset, gcallstack, gcallstack_i, gfuncnames, gfuncset, gtypenames, gtypeset, i, i$1, i$2, info, instantiated, k, k$1, name, name$1, ok, ok2, output, pkg, separ, slot, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$10 = $f._entry$10; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _entry$8 = $f._entry$8; _entry$9 = $f._entry$9; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _key$5 = $f._key$5; _keys = $f._keys; _keys$1 = $f._keys$1; _keys$2 = $f._keys$2; _keys$3 = $f._keys$3; _keys$4 = $f._keys$4; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; asttree = $f.asttree; checksum = $f.checksum; conf = $f.conf; content = $f.content; ender = $f.ender; endersepar = $f.endersepar; err = $f.err; file = $f.file; fset = $f.fset; gcallset = $f.gcallset; gcallstack = $f.gcallstack; gcallstack_i = $f.gcallstack_i; gfuncnames = $f.gfuncnames; gfuncset = $f.gfuncset; gtypenames = $f.gtypenames; gtypeset = $f.gtypeset; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; info = $f.info; instantiated = $f.instantiated; k = $f.k; k$1 = $f.k$1; name = $f.name; name$1 = $f.name$1; ok = $f.ok; ok2 = $f.ok2; output = $f.output; pkg = $f.pkg; separ = $f.separ; slot = $f.slot; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		asttree = [asttree];
		gcallset = [gcallset];
		gcallstack = [gcallstack];
		gcallstack_i = [gcallstack_i];
		gfuncnames = [gfuncnames];
		gtypenames = [gtypenames];
		info = [info];
		output = [output];
		output[0] = sliceType$4.nil;
		fset = token.NewFileSet();
		_r = parser.ParseFile(fset, "demo", content, 4); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		file = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = fmt.Printf("Error parsing: %v\n", new sliceType$6([err])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			os.Exit(4);
		/* } */ case 3:
		asttree[0] = {};
		_key = new $Uint64(0, 0); (asttree[0] || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key)] = { k: _key, v: mapast.RootMatter };
		_key$1 = mapast.O(new $Uint64(0, 0)); (asttree[0] || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$1)] = { k: _key$1, v: mapast.FileMatter };
		ender = {};
		separ = {};
		endersepar = $toNativeArray($kindMap, [ender, separ]);
		mapast.LookupComments(content, $clone(endersepar, arrayType));
		$r = ast.Walk(new Conversion.ptr(asttree[0], mapast.O(new $Uint64(0, 0)), $clone(endersepar, arrayType), true, new $Uint64(0, 0), new $Uint64(0, 0), sliceType.nil, sliceType$1.nil, sliceType$1.nil, sliceType$2.nil, sliceType$2.nil, 0, 0, 0, 0, 0, false, false, false, false, false, false, false, false, false, sliceType$3.nil, sliceType$2.nil), file); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		gtypenames[0] = {};
		gtypeset = {};
		$unused(gtypenames[0]);
		$unused(gtypeset);
		gfuncnames[0] = {};
		gfuncset = {};
		$unused(gfuncnames[0]);
		$unused(gfuncset);
		gcallset[0] = {};
		$unused(gcallset[0]);
		gcallstack[0] = $makeSlice(sliceType$1, 0);
		while (true) {
			if (!(resolve_toplevel_generic_types(asttree[0], gtypenames[0], gtypeset, new $Uint64(0, 0)) > 0)) { break; }
		}
		_ref = gtypenames[0];
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 6:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 7; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 6; continue;
			}
			i = _entry.k;
			_r$2 = fmt.Printf("Found generic type %v \n", new sliceType$6([new $String(i)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			_i++;
		/* } */ $s = 6; continue; case 7:
		/* while (true) { */ case 9:
			_r$3 = resolve_toplevel_generic_funcs(asttree[0], gtypenames[0], gtypeset, gfuncnames[0], gfuncset, new $Uint64(0, 0)); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* if (!(_r$3 > 0)) { break; } */ if(!(_r$3 > 0)) { $s = 10; continue; }
		/* } */ $s = 9; continue; case 10:
		_ref$1 = gfuncnames[0];
		_i$1 = 0;
		_keys$1 = $keys(_ref$1);
		/* while (true) { */ case 12:
			/* if (!(_i$1 < _keys$1.length)) { break; } */ if(!(_i$1 < _keys$1.length)) { $s = 13; continue; }
			_entry$1 = _ref$1[_keys$1[_i$1]];
			if (_entry$1 === undefined) {
				_i$1++;
				/* continue; */ $s = 12; continue;
			}
			i$1 = _entry$1.k;
			_r$4 = fmt.Printf("Found generic function %v \n", new sliceType$6([new $String(i$1)])); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			_i$1++;
		/* } */ $s = 12; continue; case 13:
		/* while (true) { */ case 15:
			_r$5 = resolve_generic_calls(asttree[0], gfuncnames[0], gfuncset, gcallset[0], (gcallstack.$ptr || (gcallstack.$ptr = new ptrType$59(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, gcallstack))), new $Uint64(0, 0)); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* if (!(_r$5 > 0)) { break; } */ if(!(_r$5 > 0)) { $s = 16; continue; }
		/* } */ $s = 15; continue; case 16:
		_ref$2 = gcallset[0];
		_i$2 = 0;
		_keys$2 = $keys(_ref$2);
		/* while (true) { */ case 18:
			/* if (!(_i$2 < _keys$2.length)) { break; } */ if(!(_i$2 < _keys$2.length)) { $s = 19; continue; }
			_entry$2 = _ref$2[_keys$2[_i$2]];
			if (_entry$2 === undefined) {
				_i$2++;
				/* continue; */ $s = 18; continue;
			}
			i$2 = _entry$2.k;
			_r$6 = fmt.Printf("Found generic call %v \n", new sliceType$6([i$2])); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			_i$2++;
		/* } */ $s = 18; continue; case 19:
		conf = new types.Config.ptr(false, false, $throwNilPointerError, importer.Default(), $ifaceNil, false);
		info[0] = new types.Info.ptr({}, false, false, false, false, false, sliceType$7.nil);
		_r$7 = conf.Check("demopkg", fset, new sliceType$8([file]), info[0]); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_tuple$1 = _r$7;
		pkg = _tuple$1[0];
		err = _tuple$1[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 22:
			_r$8 = err.Error(); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			console.log((_r$8));
		/* } */ case 23:
		_r$9 = fmt.Printf("Package  %q\n", new sliceType$6([new $String(pkg.Path())])); /* */ $s = 25; case 25: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_r$9;
		_r$10 = fmt.Printf("Name:    %s\n", new sliceType$6([new $String(pkg.Name())])); /* */ $s = 26; case 26: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_r$10;
		_r$11 = fmt.Printf("Imports: %s\n", new sliceType$6([pkg.Imports()])); /* */ $s = 27; case 27: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_r$11;
		_r$12 = fmt.Printf("Scope:   %s\n", new sliceType$6([pkg.Scope()])); /* */ $s = 28; case 28: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_r$12;
		gcallstack_i[0] = 0;
		$r = ast.Inspect(file, (function(asttree, gcallset, gcallstack, gcallstack_i, gfuncnames, gtypenames, info, output) { return function $b(n) {
			var _entry$3, _entry$4, _entry$5, _i$3, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _ref$3, _ref$4, _tuple$2, _tuple$3, _tuple$4, argnum, cexpr, current_call_id, currentcallsite, expr, funcname, i$3, n, ok, ok$1, ok2, tv, under, wildcard, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _i$3 = $f._i$3; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; argnum = $f.argnum; cexpr = $f.cexpr; current_call_id = $f.current_call_id; currentcallsite = $f.currentcallsite; expr = $f.expr; funcname = $f.funcname; i$3 = $f.i$3; n = $f.n; ok = $f.ok; ok$1 = $f.ok$1; ok2 = $f.ok2; tv = $f.tv; under = $f.under; wildcard = $f.wildcard; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_tuple$2 = $assertType(n, ptrType$32, true);
			cexpr = _tuple$2[0];
			ok = _tuple$2[1];
			/* */ if (ok) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (ok) { */ case 1:
				_tuple$3 = $assertType(cexpr.Fun, ptrType$48, true);
				funcname = _tuple$3[0];
				ok2 = _tuple$3[1];
				/* */ if (ok2 && (!((x = (_entry$3 = gfuncnames[0][$String.keyFor(funcname.Name)], _entry$3 !== undefined ? _entry$3.v : new $Uint64(0, 0)), (x.$high === 0 && x.$low === 0))))) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (ok2 && (!((x = (_entry$3 = gfuncnames[0][$String.keyFor(funcname.Name)], _entry$3 !== undefined ? _entry$3.v : new $Uint64(0, 0)), (x.$high === 0 && x.$low === 0))))) { */ case 3:
					_r$13 = fmt.Printf("----%s----\n", new sliceType$6([new $String(funcname.Name)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_r$13;
					current_call_id = ((gcallstack_i[0] < 0 || gcallstack_i[0] >= gcallstack[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : gcallstack[0].$array[gcallstack[0].$offset + gcallstack_i[0]]);
					currentcallsite = (_entry$4 = gcallset[0][$Uint64.keyFor(current_call_id)], _entry$4 !== undefined ? _entry$4.v : ptrType$58.nil);
					$r = mapast.PrintCode(asttree[0], current_call_id, current_call_id); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					wildcard = $ifaceNil;
					$unused(wildcard);
					_r$14 = fmt.Printf("\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n", new sliceType$6([])); /* */ $s = 7; case 7: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_r$14;
					_ref$3 = cexpr.Args;
					_i$3 = 0;
					/* while (true) { */ case 8:
						/* if (!(_i$3 < _ref$3.$length)) { break; } */ if(!(_i$3 < _ref$3.$length)) { $s = 9; continue; }
						argnum = _i$3;
						expr = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$3]);
						_tuple$4 = (_entry$5 = info[0].Types[ast.Expr.keyFor(expr)], _entry$5 !== undefined ? [_entry$5.v, true] : [new types.TypeAndValue.ptr(0, $ifaceNil, $ifaceNil), false]);
						tv = $clone(_tuple$4[0], types.TypeAndValue);
						ok$1 = _tuple$4[1];
						/* */ if (ok$1) { $s = 10; continue; }
						/* */ $s = 11; continue;
						/* if (ok$1) { */ case 10:
							_r$15 = fmt.Printf("\t\t\t\ttype:  %v\n", new sliceType$6([tv.Type])); /* */ $s = 12; case 12: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
							_r$15;
							_ref$4 = tv.Type;
							/* */ if ($assertType(_ref$4, ptrType$61, true)[1]) { $s = 13; continue; }
							/* */ $s = 14; continue;
							/* if ($assertType(_ref$4, ptrType$61, true)[1]) { */ case 13:
								/* */ if (cexpr.Args.$length === 1) { $s = 15; continue; }
								/* */ $s = 16; continue;
								/* if (cexpr.Args.$length === 1) { */ case 15:
									i$3 = 0;
									/* while (true) { */ case 17:
										/* if (!(i$3 < $assertType(tv.Type, ptrType$61).Len())) { break; } */ if(!(i$3 < $assertType(tv.Type, ptrType$61).Len())) { $s = 18; continue; }
										under = $assertType(tv.Type, ptrType$61).At(i$3).object.Type();
										/* */ if ($interfaceIsEqual(wildcard, $ifaceNil)) { $s = 19; continue; }
										/* */ $s = 20; continue;
										/* if ($interfaceIsEqual(wildcard, $ifaceNil)) { */ case 19:
											_r$16 = derive_wildcard(asttree[0], false, gtypenames[0], mapast.O(func_getarg_type(asttree[0], currentcallsite.calls_func, i$3)), under); /* */ $s = 21; case 21: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
											wildcard = _r$16;
											_r$17 = fmt.Printf("Deriving wildcard \n", new sliceType$6([])); /* */ $s = 22; case 22: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
											_r$17;
										/* } */ case 20:
										i$3 = i$3 + (1) >> 0;
									/* } */ $s = 17; continue; case 18:
									/* break outer; */ $s = 9; continue s;
								/* } */ case 16:
							/* } */ case 14:
							/* */ if (!($interfaceIsEqual(tv.Value, $ifaceNil))) { $s = 23; continue; }
							/* */ $s = 24; continue;
							/* if (!($interfaceIsEqual(tv.Value, $ifaceNil))) { */ case 23:
								_r$18 = fmt.Printf("\t\t\t\tvalue: %v\n", new sliceType$6([tv.Value])); /* */ $s = 25; case 25: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
								_r$18;
							/* } */ case 24:
							/* */ if ($interfaceIsEqual(wildcard, $ifaceNil)) { $s = 26; continue; }
							/* */ $s = 27; continue;
							/* if ($interfaceIsEqual(wildcard, $ifaceNil)) { */ case 26:
								_r$19 = derive_wildcard(asttree[0], false, gtypenames[0], mapast.O(func_getarg_type(asttree[0], currentcallsite.calls_func, argnum)), tv.Type); /* */ $s = 28; case 28: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
								wildcard = _r$19;
								_r$20 = fmt.Printf("Deriving wildcard \n", new sliceType$6([])); /* */ $s = 29; case 29: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
								_r$20;
							/* } */ case 27:
						/* } */ case 11:
						_i$3++;
					/* } */ $s = 8; continue; case 9:
					if ($interfaceIsEqual(wildcard, $ifaceNil)) {
						$panic(new $String("undetermined wildcard"));
					}
					_r$21 = build_type(asttree[0], wildcard); /* */ $s = 30; case 30: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
					currentcallsite.wildctype = _r$21;
					_r$22 = mapast.PrintDump(asttree[0], currentcallsite.wildctype, 0); /* */ $s = 31; case 31: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					_r$22;
					gcallstack_i[0] = gcallstack_i[0] + (1) >> 0;
				/* } */ case 4:
			/* } */ case 2:
			$s = -1; return true;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._i$3 = _i$3; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.argnum = argnum; $f.cexpr = cexpr; $f.current_call_id = current_call_id; $f.currentcallsite = currentcallsite; $f.expr = expr; $f.funcname = funcname; $f.i$3 = i$3; $f.n = n; $f.ok = ok; $f.ok$1 = ok$1; $f.ok2 = ok2; $f.tv = tv; $f.under = under; $f.wildcard = wildcard; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		}; })(asttree, gcallset, gcallstack, gcallstack_i, gfuncnames, gtypenames, info, output)); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		instantiated = {};
		/* while (true) { */ case 30:
			_ref$3 = gcallset[0];
			_i$3 = 0;
			_keys$3 = $keys(_ref$3);
			/* while (true) { */ case 32:
				/* if (!(_i$3 < _keys$3.length)) { break; } */ if(!(_i$3 < _keys$3.length)) { $s = 33; continue; }
				_entry$3 = _ref$3[_keys$3[_i$3]];
				if (_entry$3 === undefined) {
					_i$3++;
					/* continue; */ $s = 32; continue;
				}
				k = _entry$3.k;
				v = _entry$3.v;
				_tuple$2 = (_entry$4 = gfuncset[$Uint64.keyFor(v.inside_func)], _entry$4 !== undefined ? [_entry$4.v, true] : [new structType.ptr(), false]);
				ok2 = _tuple$2[1];
				if (ok2) {
					_i$3++;
					/* continue; */ $s = 32; continue;
				}
				_arg = v.calls_func;
				_r$13 = ast_sha256(asttree[0], v.wildctype); /* */ $s = 34; case 34: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_arg$1 = _r$13;
				_r$14 = b32_to_5_u64(_arg, _arg$1); /* */ $s = 35; case 35: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				checksum = $clone(_r$14, arrayType$2);
				_tuple$3 = (_entry$5 = instantiated[arrayType$2.keyFor(checksum)], _entry$5 !== undefined ? [_entry$5.v, true] : [new structType.ptr(), false]);
				ok = _tuple$3[1];
				/* */ if (ok) { $s = 36; continue; }
				/* */ $s = 37; continue;
				/* if (ok) { */ case 36:
					_r$15 = fmt.Printf("Redirecting function %s %X \n", new sliceType$6([new $String(($bytesToString((_entry$6 = asttree[0][$Uint64.keyFor(mapast.O(v.calls_func))], _entry$6 !== undefined ? _entry$6.v : sliceType$4.nil)))), checksum[1]])); /* */ $s = 38; case 38: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					_r$15;
					name = (_entry$7 = asttree[0][$Uint64.keyFor(mapast.O(k))], _entry$7 !== undefined ? _entry$7.v : sliceType$4.nil);
					_arg$2 = name;
					_r$16 = fmt.Sprintf("%X", new sliceType$6([checksum[1]])); /* */ $s = 39; case 39: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					_arg$3 = _r$16;
					name = $appendSlice(_arg$2, _arg$3);
					_key$2 = mapast.O(k); (asttree[0] || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$2)] = { k: _key$2, v: name };
					delete gcallset[0][$Uint64.keyFor(k)];
					/* continue outer; */ $s = 30; continue s;
				/* } */ case 37:
				_key$3 = $clone(checksum, arrayType$2); (instantiated || $throwRuntimeError("assignment to entry in nil map"))[arrayType$2.keyFor(_key$3)] = { k: _key$3, v: new structType.ptr() };
				_r$17 = fmt.Printf("Copypasting function %s %X \n", new sliceType$6([new $String(($bytesToString((_entry$8 = asttree[0][$Uint64.keyFor(mapast.O(v.calls_func))], _entry$8 !== undefined ? _entry$8.v : sliceType$4.nil)))), checksum[1]])); /* */ $s = 40; case 40: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_r$17;
				slot = seekfuncslot(asttree[0]);
				copypasta(asttree[0], slot, v.calls_func);
				$r = replicate(asttree[0], slot, v.calls_func, gcallset[0], slot, v.wildctype); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				name$1 = (_entry$9 = asttree[0][$Uint64.keyFor(mapast.O(slot))], _entry$9 !== undefined ? _entry$9.v : sliceType$4.nil);
				_arg$4 = name$1;
				_r$18 = fmt.Sprintf("%X", new sliceType$6([checksum[1]])); /* */ $s = 42; case 42: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				_arg$5 = _r$18;
				name$1 = $appendSlice(_arg$4, _arg$5);
				_key$4 = mapast.O(slot); (asttree[0] || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$4)] = { k: _key$4, v: name$1 };
				specialize(asttree[0], slot, v.wildctype);
				/* continue outer; */ $s = 30; continue s;
			/* } */ $s = 32; continue; case 33:
			/* break outer; */ $s = 31; continue s;
		/* } */ $s = 30; continue; case 31:
		_ref$4 = gfuncset;
		_i$4 = 0;
		_keys$4 = $keys(_ref$4);
		while (true) {
			if (!(_i$4 < _keys$4.length)) { break; }
			_entry$10 = _ref$4[_keys$4[_i$4]];
			if (_entry$10 === undefined) {
				_i$4++;
				continue;
			}
			k$1 = _entry$10.k;
			erase(asttree[0], k$1);
			_key$5 = k$1; (asttree[0] || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key$5)] = { k: _key$5, v: sliceType$4.nil };
			_i$4++;
		}
		$r = mapast.Code((function(asttree, gcallset, gcallstack, gcallstack_i, gfuncnames, gtypenames, info, output) { return function(s) {
			var s;
			if (s.length === 0) {
				output[0] = $append(output[0], 10);
			} else {
				output[0] = $appendSlice(output[0], (new sliceType$4($stringToBytes(s))));
			}
		}; })(asttree, gcallset, gcallstack, gcallstack_i, gfuncnames, gtypenames, info, output), asttree[0], new $Uint64(0, 0), new $Uint64(0, 0)); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		output[0] = output[0];
		$s = -1; return output[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: process }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$10 = _entry$10; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._entry$8 = _entry$8; $f._entry$9 = _entry$9; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._key$5 = _key$5; $f._keys = _keys; $f._keys$1 = _keys$1; $f._keys$2 = _keys$2; $f._keys$3 = _keys$3; $f._keys$4 = _keys$4; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.asttree = asttree; $f.checksum = checksum; $f.conf = conf; $f.content = content; $f.ender = ender; $f.endersepar = endersepar; $f.err = err; $f.file = file; $f.fset = fset; $f.gcallset = gcallset; $f.gcallstack = gcallstack; $f.gcallstack_i = gcallstack_i; $f.gfuncnames = gfuncnames; $f.gfuncset = gfuncset; $f.gtypenames = gtypenames; $f.gtypeset = gtypeset; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.info = info; $f.instantiated = instantiated; $f.k = k; $f.k$1 = k$1; $f.name = name; $f.name$1 = name$1; $f.ok = ok; $f.ok2 = ok2; $f.output = output; $f.pkg = pkg; $f.separ = separ; $f.slot = slot; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	main = function() {
		$global.Process = $externalize($makeMap($String.keyFor, [{ k: "process", v: new funcType(process) }]), mapType$1);
	};
	ptrType$62.methods = [{prop: "Visit", name: "Visit", pkg: "", typ: $funcType([ast.Node], [ast.Visitor], false)}];
	Conversion.init("example.com/transpiler/xgtest", [{prop: "AstTree", name: "AstTree", anonymous: false, exported: true, typ: mapType$2, tag: ""}, {prop: "MyFile", name: "MyFile", anonymous: false, exported: true, typ: $Uint64, tag: ""}, {prop: "EnderSepared", name: "EnderSepared", anonymous: false, exported: true, typ: arrayType, tag: ""}, {prop: "Comments1", name: "Comments1", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "importswhere", name: "importswhere", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "nestedimports", name: "nestedimports", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "structfield", name: "structfield", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "typefield", name: "typefield", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "nowblock", name: "nowblock", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "subblocks", name: "subblocks", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "substmts", name: "substmts", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "skippedassignments", name: "skippedassignments", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "skippedexpressions", name: "skippedexpressions", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "skippedincdecs", name: "skippedincdecs", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "skippedsends", name: "skippedsends", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "skippedellipsis", name: "skippedellipsis", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "deadif", name: "deadif", anonymous: false, exported: false, typ: mapType$3, tag: ""}, {prop: "deadfunc", name: "deadfunc", anonymous: false, exported: false, typ: mapType$4, tag: ""}, {prop: "skippedbalits", name: "skippedbalits", anonymous: false, exported: false, typ: mapType$5, tag: ""}, {prop: "blocksstmts", name: "blocksstmts", anonymous: false, exported: false, typ: mapType$6, tag: ""}, {prop: "ifblocks", name: "ifblocks", anonymous: false, exported: false, typ: mapType$6, tag: ""}, {prop: "deadassignments", name: "deadassignments", anonymous: false, exported: false, typ: mapType$7, tag: ""}, {prop: "deadsends", name: "deadsends", anonymous: false, exported: false, typ: mapType$8, tag: ""}, {prop: "deadincdecs", name: "deadincdecs", anonymous: false, exported: false, typ: mapType$9, tag: ""}, {prop: "deadexprs", name: "deadexprs", anonymous: false, exported: false, typ: mapType$10, tag: ""}, {prop: "comments", name: "comments", anonymous: false, exported: false, typ: sliceType$3, tag: ""}, {prop: "commentpos", name: "commentpos", anonymous: false, exported: false, typ: sliceType$2, tag: ""}]);
	Callsite.init("example.com/transpiler/xgtest", [{prop: "calls_func", name: "calls_func", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "inside_func", name: "inside_func", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "wildctype", name: "wildctype", anonymous: false, exported: false, typ: $Uint64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = sha256.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ast.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = importer.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = parser.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = types.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mapast.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = token.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if ($pkg === $mainPkg) {
			main();
			$mainFinished = true;
		}
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$synthesizeMethods();
var $mainPkg = $packages["example.com/transpiler/xgtest"];
$packages["runtime"].$init();
$go($mainPkg.$init, []);
$flushConsole();

}).call(this);
//# sourceMappingURL=xgtest.js.map
